<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>songs-note</title>
  
  
  <link href="https://batype.gitee.io/songs-note/atom.xml" rel="self"/>
  
  <link href="https://batype.gitee.io/songs-note/"/>
  <updated>2023-10-25T10:12:51.300Z</updated>
  <id>https://batype.gitee.io/songs-note/</id>
  
  <author>
    <name>songshao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fiber架构工作原理</title>
    <link href="https://batype.gitee.io/songs-note/react/fiber/works.html"/>
    <id>https://batype.gitee.io/songs-note/react/fiber/works.html</id>
    <published>2023-10-25T10:12:49.000Z</published>
    <updated>2023-10-25T10:12:51.300Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="什么是“双缓存”？"><a href="#什么是“双缓存”？" class="headerlink" title="什么是“双缓存”？"></a>什么是“双缓存”？</h2><p>“双缓存”是一种常见的图形处理技术，用于在图像渲染中实现平滑的、无闪烁的更新效果。它通过使用两个缓冲区（即两块内存区域）来完成。其中一个缓冲区用于显示图像，而另一个缓冲区则用于在后台进行图像的更新和绘制。当更新完成后，通过交换两个缓冲区的引用，以实现无缝的切换和更新。</p><p>在图形处理中使用双缓存的好处包括：</p><ol><li>无闪烁：通过在后台缓冲区进行绘制，然后将绘制结果一次性地切换到显示缓冲区，可以避免在图像更新过程中的闪烁问题。这对于实时图形、动画和视频等应用非常重要。</li><li>平滑更新：使用双缓冲可以实现平滑的更新效果。在后台缓冲区进行绘制和更新，然后在更新完成后将其切换到显示缓冲区，可以避免直接在显示缓冲区上进行绘制和修改，从而减少了可能出现的可见的渲染中间状态。</li><li>减少渲染延迟：使用双缓冲可以减少渲染延迟。由于绘制和更新发生在后台缓冲区，因此可以在绘制完成后立即切换到显示缓冲区，从而减少了等待绘制完成的时间，提高了渲染效率和响应时间。</li></ol><p>双缓存技术在图形处理、动画、视频播放和游戏开发等领域得到广泛应用。在图形库、操作系统和桌面应用程序中，双缓存被用于实现平滑的图像渲染和交互效果。在前端开发中，双缓存也被广泛应用于图形绘制和动画效果的实现，以提供更好的用户体验。</p><p><code>React</code>使用“双缓存”来完成<code>Fiber树</code>的构建与替换——对应着<code>DOM树</code>的创建与更新。</p><h2 id="双缓存Fiber树"><a href="#双缓存Fiber树" class="headerlink" title="双缓存Fiber树"></a>双缓存Fiber树</h2><p>在<code>React</code>中最多会同时存在两棵<code>Fiber树</code>。当前屏幕上显示内容对应的<code>Fiber树</code>称为<code>current Fiber树</code>，正在内存中构建的<code>Fiber树</code>称为<code>workInProgress Fiber树</code>。</p><p><code>current Fiber树</code>中的<code>Fiber节点</code>被称为<code>current fiber</code>，<code>workInProgress Fiber树</code>中的<code>Fiber节点</code>被称为<code>workInProgress fiber</code>，他们通过<code>alternate</code>属性连接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">currentFiber.<span class="property">alternate</span> === workInProgressFiber;</span><br><span class="line">workInProgressFiber.<span class="property">alternate</span> === currentFiber;</span><br></pre></td></tr></table></figure><p><code>React </code>应用的根节点通过使 <code>current </code> 指针在不同 <code>Fiber树</code> 的 <code>rootFiber</code> 间切换来完成 <code>current Fiber</code> 树指向的切换。</p><p>即当 <code>workInProgress Fiber树</code> 构建完成交给 <code>Renderer</code> 渲染在页面上后，应用根节点的 <code>current</code> 指针指向 <code>workInProgress Fiber树</code> ，此时<code>workInProgress Fiber树</code>就变为<code>current Fiber树</code>。</p><p>每次状态更新都会产生新的<code>workInProgress Fiber树</code>，通过<code>current</code>与<code>workInProgress</code>的替换，完成<code>DOM</code>更新。</p><p>接下来我们以具体例子讲解<code>mount时</code>、<code>update时</code>的构建&#x2F;替换流程。</p><h2 id="mount时"><a href="#mount时" class="headerlink" title="mount时"></a>mount时</h2><p>考虑如下例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [num, add] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> add(num + 1)&#125;&gt;&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><ol><li>首次执行<code>ReactDOM.render</code>会创建<code>fiberRootNode</code>（源码中叫<code>fiberRoot</code>）和<code>rootFiber</code>。其中<code>fiberRootNode</code>是整个应用的根节点，<code>rootFiber</code>是<code>&lt;App/&gt;</code>所在组件树的根节点。</li></ol><p>之所以要区分<code>fiberRootNode</code>与<code>rootFiber</code>，是因为在应用中我们可以多次调用<code>ReactDOM.render</code>渲染不同的组件树，他们会拥有不同的<code>rootFiber</code>。但是整个应用的根节点只有一个，那就是<code>fiberRootNode</code>。</p><p><code>fiberRootNode</code>的<code>current</code>会指向当前页面上已渲染内容对应<code>Fiber树</code>，即<code>current Fiber树</code>。</p><p><img src="https://react.iamkasong.com/img/rootfiber.png" alt="rootFiber"></p><p><code>fiberRootNode.current = rootFiber;</code></p><p>由于是首屏渲染，页面中还没有挂载任何<code>DOM</code>，所以<code>fiberRootNode.current</code>指向的<code>rootFiber</code>没有任何<code>子Fiber节点</code>（即<code>current Fiber树</code>为空）。</p><ol start="2"><li>接下来进入<code>render阶段</code>，根据组件返回的<code>JSX</code>在内存中依次创建<code>Fiber节点</code>并连接在一起构建<code>Fiber树</code>，被称为<code>workInProgress Fiber树</code>。（下图中右侧为内存中构建的树，左侧为页面显示的树）</li></ol><p>在构建<code>workInProgress Fiber树</code>时会尝试复用<code>current Fiber树</code>中已有的<code>Fiber节点</code>内的属性，在<code>首屏渲染</code>时只有<code>rootFiber</code>存在对应的<code>current fiber</code>（即<code>rootFiber.alternate</code>）。</p><p><img src="https://react.iamkasong.com/img/workInProgressFiber.png"></p><ol start="3"><li>图中右侧已构建完的<code>workInProgress Fiber树</code>在<code>commit阶段</code>渲染到页面。</li></ol><p>此时<code>DOM</code>更新为右侧树对应的样子。<code>fiberRootNode</code>的<code>current</code>指针指向<code>workInProgress Fiber树</code>使其变为<code>current Fiber 树</code>。</p><p><img src="https://react.iamkasong.com/img/wipTreeFinish.png"></p><h2 id="update时"><a href="#update时" class="headerlink" title="update时"></a>update时</h2><ol><li><p>接下来我们点击<code>p节点</code>触发状态改变，这会开启一次新的<code>render阶段</code>并构建一棵新的<code>workInProgress Fiber 树</code>。</p><p><img src="https://react.iamkasong.com/img/wipTreeUpdate.png"></p></li></ol><p>和<code>mount</code>时一样，<code>workInProgress fiber</code>的创建可以复用<code>current Fiber树</code>对应的节点数据。</p><ol start="2"><li><code>workInProgress Fiber 树</code>在<code>render阶段</code>完成构建后进入<code>commit阶段</code>渲染到页面上。渲染完毕后，<code>workInProgress Fiber 树</code>变为<code>current Fiber 树</code>。</li></ol><p><img src="https://react.iamkasong.com/img/currentTreeUpdate.png"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">在`React`中最多会同时存在两棵`Fiber树`。当前屏幕上显示内容对应的`Fiber树`称为`current Fiber树`，正在内存中构建的`Fiber树`称为`workInProgress Fiber树`。</summary>
    
    
    
    <category term="React" scheme="https://batype.gitee.io/songs-note/categories/React/"/>
    
    <category term="Fiber" scheme="https://batype.gitee.io/songs-note/categories/React/Fiber/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://batype.gitee.io/songs-note/tags/JavaScript/"/>
    
    <category term="react" scheme="https://batype.gitee.io/songs-note/tags/react/"/>
    
    <category term="Fiber" scheme="https://batype.gitee.io/songs-note/tags/Fiber/"/>
    
  </entry>
  
  <entry>
    <title>unstate-next 的使用</title>
    <link href="https://batype.gitee.io/songs-note/react/components/unstate-next.html"/>
    <id>https://batype.gitee.io/songs-note/react/components/unstate-next.html</id>
    <published>2023-10-25T08:42:53.000Z</published>
    <updated>2023-10-25T09:09:20.337Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><p><a href="https://gitcode.net/qq_35490191/React-TypeScript">Code-Test</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save unstated-next</span><br><span class="line"></span><br><span class="line">yarn add unstated-next</span><br></pre></td></tr></table></figure><h4 id="createContainer"><a href="#createContainer" class="headerlink" title="createContainer"></a>createContainer</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createContainer &#125; <span class="keyword">from</span> <span class="string">&quot;unstated-next&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useCounter</span> = (<span class="params">props: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; initNum &#125; = props;</span><br><span class="line">    <span class="keyword">const</span> [num, changeNum] = useState&lt;<span class="built_in">number</span>&gt;(initNum);</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">decrement</span> = (<span class="params"></span>) =&gt; <span class="title function_">changeNum</span>(num - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="title function_">changeNum</span>(num + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;num, decrement, increment&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Counter</span> = <span class="title function_">createContainer</span>(useCounter);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="use-Provider-initialState"><a href="#use-Provider-initialState" class="headerlink" title="use Provider &amp;&amp; initialState"></a>use Provider &amp;&amp; initialState</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Counter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Context&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">TestCounter</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./TestCounter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Counter.Provider</span> <span class="attr">initialState</span>=<span class="string">&#123;&#123;</span> <span class="attr">initNum:</span> <span class="attr">1</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">TestCounter</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Counter.Provider</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="useContainer"><a href="#useContainer" class="headerlink" title="useContainer"></a>useContainer</h4><h5 id="TestCounter"><a href="#TestCounter" class="headerlink" title="TestCounter"></a>TestCounter</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Counter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Context&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">TestChild</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./TestChild&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">TestCounter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num, decrement &#125; = <span class="title class_">Counter</span>.<span class="title function_">useContainer</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;decrement&#125;</span>&gt;</span>减法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">TestChild</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TestChild"><a href="#TestChild" class="headerlink" title="TestChild"></a>TestChild</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Counter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Context&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">TestChild</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num, increment &#125; = <span class="title class_">Counter</span>.<span class="title function_">useContainer</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;num&#125; <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>加法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">unstated-next 的使用可以简化react state manager，可以替换React 原有的useContext 方法, 亦可以管理全局状态信息。</summary>
    
    
    
    <category term="React" scheme="https://batype.gitee.io/songs-note/categories/React/"/>
    
    <category term="components" scheme="https://batype.gitee.io/songs-note/categories/React/components/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://batype.gitee.io/songs-note/tags/TypeScript/"/>
    
    <category term="react" scheme="https://batype.gitee.io/songs-note/tags/react/"/>
    
    <category term="unstate-next" scheme="https://batype.gitee.io/songs-note/tags/unstate-next/"/>
    
  </entry>
  
  <entry>
    <title>nvm 管理node版本</title>
    <link href="https://batype.gitee.io/songs-note/web/npm/nvm.html"/>
    <id>https://batype.gitee.io/songs-note/web/npm/nvm.html</id>
    <published>2023-10-25T07:47:01.000Z</published>
    <updated>2023-10-25T07:47:22.516Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">nvm -- Node version manager。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/npm/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://batype.gitee.io/songs-note/tags/npm/"/>
    
    <category term="nvm" scheme="https://batype.gitee.io/songs-note/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>nrm 管理 npm registry</title>
    <link href="https://batype.gitee.io/songs-note/web/npm/nrm.html"/>
    <id>https://batype.gitee.io/songs-note/web/npm/nrm.html</id>
    <published>2023-10-25T07:25:17.000Z</published>
    <updated>2023-10-25T07:46:17.579Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><p><code>npm install -g nrm</code></p><h4 id="nrm-ls"><a href="#nrm-ls" class="headerlink" title="nrm ls"></a>nrm ls</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nrm ls</span><br><span class="line"></span><br><span class="line">npm ---------- https://registry.npmjs.org/</span><br><span class="line">yarn --------- https://registry.yarnpkg.com/</span><br><span class="line">tencent ------ https://mirrors.cloud.tencent.com/npm/</span><br><span class="line">cnpm --------- https://r.cnpmjs.org/</span><br><span class="line">taobao ------- https://registry.npmmirror.com/</span><br><span class="line">npmMirror ---- https://skimdb.npmjs.com/registry/</span><br></pre></td></tr></table></figure><h4 id="nrm-use"><a href="#nrm-use" class="headerlink" title="nrm use"></a>nrm use</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nrm use taobao</span><br><span class="line">Registry has been set to: https://registry.npmmirror.com/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Usage: nrm [options] [command]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version                           output the version number</span><br><span class="line">  -h, --help                              output usage information</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  ls                                      List all the registries</span><br><span class="line">  current [options]                       Show current registry name or URL</span><br><span class="line">  use &lt;registry&gt;                          Change registry to registry</span><br><span class="line">  add &lt;registry&gt; &lt;url&gt; [home]             Add one custom registry</span><br><span class="line">  login [options] &lt;registryName&gt; [value]  Set authorize information for a custom registry with a base64 encoded string or username and pasword</span><br><span class="line">  set-hosted-repo &lt;registry&gt; &lt;value&gt;      Set hosted npm repository for a custom registry to publish packages</span><br><span class="line">  set-scope &lt;scopeName&gt; &lt;value&gt;           Associating a scope with a registry</span><br><span class="line">  del-scope &lt;scopeName&gt;                   Remove a scope</span><br><span class="line">  set [options] &lt;registryName&gt;            Set custom registry attribute</span><br><span class="line">  rename &lt;registryName&gt; &lt;newName&gt;         Set custom registry name</span><br><span class="line">  del &lt;registry&gt;                          Delete one custom registry</span><br><span class="line">  home &lt;registry&gt; [browser]               Open the homepage of registry with optional browser</span><br><span class="line">  publish [options] [&lt;tarball&gt;|&lt;folder&gt;]  Publish package to current registry if current registry is a custom registry.</span><br><span class="line">   if you&#x27;re not using custom registry, this command will run npm publish directly</span><br><span class="line">  test [registry]                         Show response time for specific or all registries</span><br><span class="line">  help                                    Print this help </span><br><span class="line">   if you want to clear the NRM configuration when uninstall you can execute &quot;npm uninstall nrm -g -C or npm uninstall nrm -g --clean&quot;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">nrm -- NPM registry manager。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/npm/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://batype.gitee.io/songs-note/tags/npm/"/>
    
    <category term="nrm" scheme="https://batype.gitee.io/songs-note/tags/nrm/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 内容分页配置</title>
    <link href="https://batype.gitee.io/songs-note/hexo/config/pagination.html"/>
    <id>https://batype.gitee.io/songs-note/hexo/config/pagination.html</id>
    <published>2023-10-23T13:27:22.000Z</published>
    <updated>2023-10-25T09:13:46.017Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="per-page-config-yml"><a href="#per-page-config-yml" class="headerlink" title="per_page _config.yml"></a>per_page _config.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">20</span> <span class="comment"># 分页条数</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span> <span class="comment"># 自定义分页路径</span></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">Hexo 内容分页配置Pagination，有助于阅读能力的提升。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="框架" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Hexo" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Hexo/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Hexo" scheme="https://batype.gitee.io/songs-note/tags/Hexo/"/>
    
    <category term="Pagination" scheme="https://batype.gitee.io/songs-note/tags/Pagination/"/>
    
  </entry>
  
  <entry>
    <title>webpack 热更新的实现原理</title>
    <link href="https://batype.gitee.io/songs-note/web/webpack/hot/module/replacement.html"/>
    <id>https://batype.gitee.io/songs-note/web/webpack/hot/module/replacement.html</id>
    <published>2023-10-23T12:43:25.000Z</published>
    <updated>2023-10-25T09:13:46.020Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。<br>原理：<br><img src="https://pic.imgdb.cn/item/65366aa5c458853aefbf449c.png" alt="在这里插入图片描述"></p><p>⾸先要知道 server 端和 client 端都做了处理⼯作：</p><ol><li>在 webpack 的 watch 模式下，⽂件系统中某⼀个⽂件发⽣修改，webpack 监听到⽂件变化，根据配置⽂件对模块重新编译打包，并将打包后的代码通过简单的JavaScript对象保存在内存中。</li><li>webpack-dev-server 和 webpack 之间的接⼝交互，⽽在这⼀步，主要是 dev-server 的中间件webpack- dev-middleware和 webpack 之间的交互，webpack-dev-middleware 调⽤webpack暴露的 API 对代码变化进⾏监 控，并且告诉webpack，将代码打包到内存中。</li><li>webpack-dev-server 对⽂件变化的⼀个监控，这⼀步不同于第⼀步，并不是监控代码变化重新打包。当我们在配置⽂件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置⽂件夹中静态⽂件的变化，变化后会通知浏览器端对应⽤进⾏ live reload。注意，这⼉是浏览器刷新，和HMR 是两个概念。</li><li>webpack-dev-server 代码的⼯作，该步骤主要是通过sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建⽴⼀个 websocket ⻓连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中Server 监听静态⽂件变化的信息。浏览器端根据这些 socket 消息进⾏不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后⾯的步骤根据这⼀hash 值来进⾏模块热替换。</li><li>webpack-dev-server&#x2F;client 端并不能够请求更新的代码，也不会执⾏ 热 更 模 块 操 作 ， ⽽ 把 这 些 ⼯ 作⼜交回给了webpack，webpack&#x2F;hot&#x2F;dev-server 的 ⼯ 作就是根据webpack-dev-server&#x2F;client 传给它的信息以及dev-server的配置决定是刷新浏览器呢还是进⾏模块热更新。当然如果仅仅是刷新浏览器，也就没有后⾯那些步骤了。</li><li>HotModuleReplacement.runtime 是客户端HMR 的中枢，它接收到上⼀ 步 传 递 给 他 的 新 模 块 的hash 值，它通过JsonpMainTemplate.runtime 向 server 端发送Ajax 请求，服务端返回⼀个 json，该 json 包含了所有要更新的模块的hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。</li><li>⽽第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进⾏对⽐，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引⽤。</li></ol><p>最后⼀步，当 HMR 失败后，回退到 live reload 操作，也就是进⾏浏览器刷新来获取最新打包代码。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="WebPack" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/WebPack/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="WebPack" scheme="https://batype.gitee.io/songs-note/tags/WebPack/"/>
    
  </entry>
  
  <entry>
    <title>对原型、原型链的理解</title>
    <link href="https://batype.gitee.io/songs-note/javascript/prototype.html"/>
    <id>https://batype.gitee.io/songs-note/javascript/prototype.html</id>
    <published>2023-10-23T12:37:51.000Z</published>
    <updated>2023-10-25T09:13:46.018Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在 JavaScript 中是使用构造两数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造西数的所有实例共享的属性和方法。<br>当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造两数的prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在 浏览器中都实现了_proto_ 属性来访问这个属性，但是最好不要 使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法米获取对象的原型。 </p><p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象义会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 0bject.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。 </p><p>特点：JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。<br><img src="https://pic.imgdb.cn/item/65366accc458853aefbfcd92.jpg" alt="原型链图解"><br>那么原型链的终点是什么？如何打印出原型链的终点？</p><p>由于 Object 是构造函数，原型链终点 Ob ject.prototype._proto_，而 Object.prototype.<em>proto</em> &#x3D;&#x3D;&#x3D; null &#x2F;&#x2F; true，所以，原型链的终点是 null。原型链上的所有原型都是对象，所有的对象最终都是由 0bject 构造的，而 Object.prototype 的下一级是Object. prototype._proto_。</p><p><img src="https://pic.imgdb.cn/item/653668e4c458853aefb94875.jpg" alt="在这里插入图片描述"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="es6" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/es6/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://batype.gitee.io/songs-note/tags/JavaScript/"/>
    
    <category term="es6" scheme="https://batype.gitee.io/songs-note/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>var、let、const的区别</title>
    <link href="https://batype.gitee.io/songs-note/javascript/var/let/const.html"/>
    <id>https://batype.gitee.io/songs-note/javascript/var/let/const.html</id>
    <published>2023-10-23T12:34:19.000Z</published>
    <updated>2023-10-25T09:13:46.019Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="var-关键词"><a href="#var-关键词" class="headerlink" title="var 关键词"></a>var 关键词</h5><ol><li>var声明作用域<br>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="string">&quot;hello world&quot;</span>;   <span class="comment">// 局部变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>函数test()调用时会创建变量message并给它赋值，调用之后变量随即被销毁。因此，在函数test()之外调用变量message会报错</p><p>在函数内定义变量时省略var操作符，可以创建一个全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    message = <span class="string">&quot;hello world&quot;</span>;   <span class="comment">// 局部变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);  <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p>省略掉var操作符之后，message就变成了全局变量。只要调用一次函数test()，就会定义这个变量，并且可以在函数外部访问到。在局部作用域中定义的全局变量很难维护，不推荐这么做。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出ReferenceError。</p><ol start="2"><li>var声明提升<br>var在js中是支持预解析的，如下代码不会报错。这是因为使用var声明的变量会自动提升到函数作用域顶部：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>javaScript引擎，在代码预编译时，javaScript引擎会自动将所有代码里面的var关键字声明的语句都会提升到当前作用域的顶端,如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> age;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">    age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h5 id="let声明"><a href="#let声明" class="headerlink" title="let声明"></a>let声明</h5><ol><li>let声明作用域<br>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问，而var可以跨块访问</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var定义的变量</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// Matt</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// Matt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let定义的变量</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// ReferenceError: age没有定义</span></span><br></pre></td></tr></table></figure><p>let也不允许同一个块作用域中出现冗余声明（重复声明）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">let</span> age; <span class="comment">// SyntaxError；标识符age已经声明过了</span></span><br></pre></td></tr></table></figure><ol start="2"><li>暂时性死区<br>let、const与var的另一个重要的区别，let、const声明的变量不会在作用域中被提升。ES6新增的let、const关键字声明的变量会产生块级作用域，如果变量在当前作用域中被创建出来，由于此时还未完成语法绑定，所以是不能被访问的，如果访问就会抛出错误ReferenceError。因此，在这运行流程进入作用域创建变量，到变量可以被访问之间的这一段时间，就称之为暂时死区。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name会被提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// age不会被提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// ReferenceError：age没有定义</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>全局声明<br>与var关键字不同，var定义的全局变量会挂载到window对象上，使用window可以访问，而let在全局作用域中声明的变量不会成为window对象的属性</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span>); <span class="comment">// &#x27;Matt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">age</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ol start="4"><li>for循环中的var、let声明<br>for循环中var定义的迭代变量会渗透到循环体外部：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    <span class="comment">// 循环逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>改成使用let之后，这个问题就消失了，因为迭代变量的作用域仅限于for循环块内部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    <span class="comment">// 循环逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// ReferenceError: i没有定义</span></span><br></pre></td></tr></table></figure><p>使用var和let定义for循环中的变量，循环里使用定时器setTimeout后循环结果如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出5、5、5、5、5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出0、1、2、3、4</span></span><br></pre></td></tr></table></figure><p>let 是在代码块内有效，var 是在全局范围内有效。let 只能声明一次 ，var 可以声明多次。</p><p>当同步代码执行完毕后，开始执行异步的setTimeout代码，执行setTimeout时需要从当前作用域内寻找一个变量 i，for循环执行完毕，当前 i&#x3D;5，执行setTimeout时输出为5，任务队列中的剩余4个setTimeout也依次执行，输出为5。</p><p>变量 j 是用 let 声明的，当前的 i 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出0-4。</p><h5 id="const声明"><a href="#const声明" class="headerlink" title="const声明"></a>const声明</h5><p>const的行为与let基本相同，唯一一个重要的区别是：</p><p>const是用来定义常量的，而且定义的时候必须赋值，不赋值会报错，定义之后是不允许被修改的，修改const声明的变量会导致运行时错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">26</span>;</span><br><span class="line">age = <span class="number">36</span>; <span class="comment">// TypeError: 给常量赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const也不允许重复声明</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Nicholas&#x27;</span>; <span class="comment">// SyntaxError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const声明的作用域也是块</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;Nicholas&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// Matt</span></span><br></pre></td></tr></table></figure><p>而const声明的变量是一个对象时，修改这个对象内部的属性并不会报错。</p><p>这是因为const声明的是栈区里的内容不能修改，基本数据类型的值直接在栈内存中存储，而引用数据类型在栈区保存的是对象在堆区的地址，修改对象的属性，不会修改对象在栈区的地址，如果重新给对象person赋值，则会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Lili&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Matt&#x27;</span>; <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>JavaScript引擎会为for循环中的let声明分别创建独立的变量实例，虽然const变量跟let变量很相似，但是不能用const来声明迭代变量（因为迭代变量会自增）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;&#125; <span class="comment">// TypeError：给常量赋值</span></span><br></pre></td></tr></table></figure><p>不过，如果你只想用const声明一个不会被修改的for循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对for-of和for-in循环特别有意义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> j = <span class="number">7</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7, 7, 7, 7, 7</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a, b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">var、let、const三大基础类型使用非常广泛，所以需要切实熟练使用他们，更需要了解他们的所有属性。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="es6" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/es6/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://batype.gitee.io/songs-note/tags/JavaScript/"/>
    
    <category term="es6" scheme="https://batype.gitee.io/songs-note/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 开启公众号引流工具</title>
    <link href="https://batype.gitee.io/songs-note/hexo/config/readmore.html"/>
    <id>https://batype.gitee.io/songs-note/hexo/config/readmore.html</id>
    <published>2023-10-23T02:31:24.000Z</published>
    <updated>2023-10-23T02:45:02.608Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h3 id="配置博客信息"><a href="#配置博客信息" class="headerlink" title="配置博客信息"></a>配置博客信息</h3><p><img src="https://pic.imgdb.cn/item/6535dc4dc458853aef3ec866.jpg"></p><h3 id="hexo-config-yml-配置"><a href="#hexo-config-yml-配置" class="headerlink" title="hexo _config.yml 配置"></a>hexo _config.yml 配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="attr">readmore:</span></span><br><span class="line">    <span class="attr">blogId:</span> <span class="number">31652</span><span class="number">-1697970027416</span><span class="number">-119</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">BaType</span></span><br><span class="line">    <span class="attr">qrcode:</span> <span class="string">https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg</span></span><br><span class="line">    <span class="attr">keyword:</span> <span class="number">666</span></span><br></pre></td></tr></table></figure><p>其中,配置参数含义如下:</p><ul><li>blogId : [必选]OpenWrite 后台申请的博客唯一标识,例如:31652-1697970027416-119</li><li>name : [必选]OpenWrite 后台申请的博客名称,例如:BaType</li><li>qrcode : [必选]OpenWrite 后台申请的微信公众号二维码,例如:<a href="https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg">https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg</a></li><li>keyword : [必选]OpenWrite 后台申请的微信公众号后台回复关键字,例如:666</li></ul><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p><code>npm install hexo-plugin-readmore --save</code></p><h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><p><img src="https://pic.imgdb.cn/item/6535dddec458853aef428ef6.jpg"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">Hexo 开启公众号引流工具，可以通过阅读更多引流至微信公众平台。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="框架" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Hexo" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Hexo/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Hexo" scheme="https://batype.gitee.io/songs-note/tags/Hexo/"/>
    
    <category term="ReadMore" scheme="https://batype.gitee.io/songs-note/tags/ReadMore/"/>
    
  </entry>
  
  <entry>
    <title>type 的使用</title>
    <link href="https://batype.gitee.io/songs-note/typescript/use/type.html"/>
    <id>https://batype.gitee.io/songs-note/typescript/use/type.html</id>
    <published>2023-10-22T10:12:30.000Z</published>
    <updated>2023-10-23T02:28:19.371Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="type-的使用"><a href="#type-的使用" class="headerlink" title="type 的使用"></a>type 的使用</h4><p>作用 : 给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 )</p><h5 id="1-类型别名"><a href="#1-类型别名" class="headerlink" title="1. 类型别名"></a>1. 类型别名</h5><p><strong>语法 :</strong> <code>type 别名 = 类型</code></p><p><strong>实例 :</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">St</span> = <span class="built_in">string</span> <span class="comment">// 定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str1</span>:<span class="title class_">St</span> = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str2</span>:<span class="built_in">string</span> = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-自定义类型"><a href="#2-自定义类型" class="headerlink" title="2.自定义类型"></a>2.自定义类型</h5><p><strong>语法 :</strong> <code>type 别名 = 类型 | 类型1 | 类型2</code></p><p><strong>实例 :</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NewType</span> = <span class="built_in">string</span> | <span class="built_in">number</span> <span class="comment">// 定义类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="title class_">NewType</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">NewType</span> = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-泛型定义"><a href="#3-泛型定义" class="headerlink" title="3.泛型定义"></a>3.泛型定义</h5><p><strong>语法</strong>： <code>type 别名&lt;T&gt; = 类型&lt;T&gt; | 类型1&lt;T&gt; | 类型2&lt;T&gt;</code></p><p><strong>实例</strong> :</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NewType</span>&lt;T&gt; = &#123;</span><br><span class="line">   <span class="attr">name</span>: T</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> a : <span class="title class_">NewType</span>&lt;<span class="built_in">number</span>&gt; = &#123; <span class="attr">name</span>: <span class="number">0</span> &#125;</span><br><span class="line"> <span class="keyword">let</span> b : <span class="title class_">NewType</span>&lt;<span class="built_in">string</span>&gt; = &#123; <span class="attr">name</span>: <span class="string">&#x27;0&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h5 id="4-联合类型-相当于继承类型"><a href="#4-联合类型-相当于继承类型" class="headerlink" title="4.联合类型(相当于继承类型)"></a>4.联合类型(相当于继承类型)</h5><p><strong>语法</strong>：<code>type 别名 = 类型 &amp; 类型1 &amp; 类型2</code></p><p><strong>示例</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Job</span> = &#123;</span><br><span class="line">    <span class="attr">jobs</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = <span class="title class_">User</span> &amp; <span class="title class_">Job</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 ).</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://batype.gitee.io/songs-note/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>session-cookies 三个缓存 localStorage、sessionStorage、Cookies。</title>
    <link href="https://batype.gitee.io/songs-note/browser/session/cookies.html"/>
    <id>https://batype.gitee.io/songs-note/browser/session/cookies.html</id>
    <published>2023-10-22T10:06:18.000Z</published>
    <updated>2023-10-23T01:55:15.566Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h1 id="session-cookies"><a href="#session-cookies" class="headerlink" title="session-cookies"></a>session-cookies</h1><pre><code>session-cookies is localStorage、sessionStorage、Cookies。</code></pre><p> <a href="https://badge.fury.io/js/session-cookies"><img src="https://badge.fury.io/js/session-cookies.svg" /></a></p><p>session-cookies This plugin is used to summarize the browser’s three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.</p><p>session-cookies 这个插件是用来汇总浏览器的三个缓存 localStorage、sessionStorage、Cookies。该插件注重使用方便快捷下面是一些API汇总说明。</p><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><table><thead><tr><th align="center">名称</th><th align="center">获取所有</th><th align="center">获取单个</th><th align="center">设置单个</th><th align="center">移除单个</th><th align="center">清除所有</th></tr></thead><tbody><tr><td align="center">cookies</td><td align="center">getCookieList</td><td align="center">getCookie</td><td align="center">setCookie</td><td align="center">removeCookie</td><td align="center">clearCookie</td></tr><tr><td align="center">session</td><td align="center">getAllSessionStorage</td><td align="center">getSessionStorage</td><td align="center">setSessionStorage</td><td align="center">removeSessionStorage</td><td align="center">clearSessionStorage</td></tr><tr><td align="center">local</td><td align="center">getAllLocalStorage</td><td align="center">getLocalStorage</td><td align="center">setLocalStorage</td><td align="center">removeLocalStorage</td><td align="center">clearLocalStorage</td></tr></tbody></table><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i session-cookies</span><br></pre></td></tr></table></figure><h5 id="获取所有Cookies"><a href="#获取所有Cookies" class="headerlink" title="获取所有Cookies"></a>获取所有Cookies</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; cookies &#125; <span class="keyword">from</span> <span class="string">&#x27;session-cookies&#x27;</span></span><br><span class="line"></span><br><span class="line">cookies.<span class="title function_">getCookieList</span>(); <span class="comment">// 返回JSON结果数据</span></span><br><span class="line">cookies.<span class="title function_">getCookie</span>(<span class="string">&#x27;test&#x27;</span>); <span class="comment">// 返回属性值</span></span><br></pre></td></tr></table></figure><h5 id="设置单个"><a href="#设置单个" class="headerlink" title="设置单个"></a>设置单个</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookies.<span class="title function_">setCookie</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;1234567&#x27;</span>); <span class="comment">// 设置属性为字符串需要JSON.stringify</span></span><br></pre></td></tr></table></figure><h5 id="移除单个"><a href="#移除单个" class="headerlink" title="移除单个"></a>移除单个</h5><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookies.<span class="title function_">removeCookie</span>(<span class="string">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="清除所有"><a href="#清除所有" class="headerlink" title="清除所有"></a>清除所有</h5><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookies.<span class="title function_">clearCookie</span>();</span><br></pre></td></tr></table></figure><h4 id="附加API"><a href="#附加API" class="headerlink" title="附加API"></a>附加API</h4><table><thead><tr><th>根据index下标获取key值</th><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>getLocalStorageKeyFindIndex</td><td>index下标</td><td>返回key</td></tr><tr><td>getSessionStorageKeyFindIndex</td><td>index下标</td><td>返回key</td></tr></tbody></table><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; local &#125; <span class="keyword">from</span> <span class="string">&#x27;session-cookies&#x27;</span>;</span><br><span class="line"></span><br><span class="line">local.<span class="title function_">setLocalStorage</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">local.<span class="title function_">setLocalStorage</span>(<span class="string">&#x27;usename&#x27;</span>, <span class="string">&#x27;songshao&#x27;</span>);</span><br><span class="line">local.<span class="title function_">getLocalStorageKeyFindIndex</span>(<span class="number">0</span>); <span class="comment">// test</span></span><br><span class="line">local.<span class="title function_">getLocalStorageKeyFindIndex</span>(<span class="number">1</span>); <span class="comment">// username</span></span><br></pre></td></tr></table></figure><h3 id="Browsers"><a href="#Browsers" class="headerlink" title="Browsers"></a>Browsers</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只能使用0.1.5 以后版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://unpkg.com/session-cookies/lib/sessionCookies.js&#x27;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 其他接口同上面使用只需要增加 sessionCookies 全局配置。</span></span></span><br><span class="line"><span class="language-javascript">    sessionCookies.<span class="property">local</span>.<span class="title function_">setLocalStorage</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">session-cookies This plugin is used to summarize the browser’s three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.</summary>
    
    
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="Cache" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/Cache/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="cookies" scheme="https://batype.gitee.io/songs-note/tags/cookies/"/>
    
    <category term="localStorage" scheme="https://batype.gitee.io/songs-note/tags/localStorage/"/>
    
    <category term="sessionStorage" scheme="https://batype.gitee.io/songs-note/tags/sessionStorage/"/>
    
    <category term="TypeScript" scheme="https://batype.gitee.io/songs-note/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>网络劫持有哪几种，如何防范？</title>
    <link href="https://batype.gitee.io/songs-note/browser/network/hijack.html"/>
    <id>https://batype.gitee.io/songs-note/browser/network/hijack.html</id>
    <published>2023-10-21T14:06:18.000Z</published>
    <updated>2023-10-23T01:55:15.561Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="⽹络劫持"><a href="#⽹络劫持" class="headerlink" title="⽹络劫持"></a>⽹络劫持</h5><ol><li>DNS 劫持: (输⼊京东被强制跳转到淘宝这就属于dns 劫持)</li></ol><ul><li>DNS 强制解析: 通过修改运营商的本地 DNS 记录，来引导⽤户流量到缓存服务器</li><li>302 跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302 跳转的回复，引导⽤户获取内容</li></ul><ol start="2"><li>HTTP 劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的 http 响应内容(即加⼴告)</li></ol><h5 id="如何防范网络劫持？"><a href="#如何防范网络劫持？" class="headerlink" title="如何防范网络劫持？"></a>如何防范网络劫持？</h5><p>DNS 劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http 劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP 加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。</p><p>网络劫持指的是网络中的某个节点对数据进行恶意篡改和篡改，以达到非法获取用户信息或者控制用户设备的目的。以下是预防网络劫持的几个方法：</p><ol><li><p>使用HTTPS：HTTPS是一个安全的协议，对通信进行加密和身份验证，防止劫持者对数据进行篡改。使用HTTPS之前，可以使用SSL证书来验证服务器的身份。</p></li><li><p>使用VPN：VPN可以加密数据并建立一个虚拟私人网络，从而保护用户的数据和隐私。使用VPN可以防止网络劫持和嗅探攻击。</p></li><li><p>使用防火墙和反病毒软件：网络劫持者可能会通过恶意软件或病毒对用户设备进行攻击，使用防火墙和反病毒软件可以防止这种攻击。</p></li><li><p>更新操作系统和软件程序：最新版本的操作系统和软件程序通常包含了修复安全漏洞的补丁。不定期更新操作系统和软件程序可以减少遭受网络攻击的风险。</p></li><li><p>警惕钓鱼网站和不安全的链接：劫持者可能会伪造合法的网站或链接，引导用户向其提供个人信息或下载恶意软件。不要轻信不安全的链接，要时刻保持警惕。</p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">网路劫持可以导致非常严重是信息泄露或者信息被恶意篡改等，DNS 劫持由于涉嫌违法，已经被监管起来。</summary>
    
    
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网路安全" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/%E7%BD%91%E8%B7%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网路安全" scheme="https://batype.gitee.io/songs-note/tags/%E7%BD%91%E8%B7%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 开启 RSS</title>
    <link href="https://batype.gitee.io/songs-note/hexo/config/rss.html"/>
    <id>https://batype.gitee.io/songs-note/hexo/config/rss.html</id>
    <published>2023-10-21T13:32:38.000Z</published>
    <updated>2023-10-23T01:55:15.567Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="安装hexo-generator-feed-插件"><a href="#安装hexo-generator-feed-插件" class="headerlink" title="安装hexo-generator-feed 插件"></a>安装hexo-generator-feed 插件</h5><h6 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h6><p><code>npm install hexo-generator-feed -d</code></p><h6 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h6><p><code>yarn add hexo-generator-feed</code></p><h5 id="配置-config-themes-yml"><a href="#配置-config-themes-yml" class="headerlink" title="配置_config.[themes].yml"></a>配置_config.[themes].yml</h5><h6 id="增加导航栏菜单"><a href="#增加导航栏菜单" class="headerlink" title="增加导航栏菜单"></a>增加导航栏菜单</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure><h6 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">atom</span>  <span class="comment"># 类型为atom</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">atom.xml</span> <span class="comment"># 访问路径</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span> <span class="comment"># 分页</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="清除重启"><a href="#清除重启" class="headerlink" title="清除重启"></a>清除重启</h5><p><code>hexo clean &amp;&amp; hexo generate</code></p><h5 id="页面效果"><a href="#页面效果" class="headerlink" title="页面效果"></a>页面效果</h5><p><img src="https://pic.imgdb.cn/item/6533d473c458853aefb79c42.png" alt="atom.xml"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">Hexo 开启RSS，可以查看RSS版本的note 数据，也可以导入到其他blog环境。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="框架" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Hexo" scheme="https://batype.gitee.io/songs-note/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Hexo/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Hexo" scheme="https://batype.gitee.io/songs-note/tags/Hexo/"/>
    
    <category term="RSS" scheme="https://batype.gitee.io/songs-note/tags/RSS/"/>
    
  </entry>
  
  <entry>
    <title>什么是 CSRF 攻击？</title>
    <link href="https://batype.gitee.io/songs-note/web/cross/site/request/forgeries.html"/>
    <id>https://batype.gitee.io/songs-note/web/cross/site/request/forgeries.html</id>
    <published>2023-10-21T13:11:16.000Z</published>
    <updated>2023-10-23T01:55:15.629Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>CSRF（Cross-Site Request Forgeries） 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。</p><p>CSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。</p><h5 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h5><p>常见的 CSRF 攻击有三种：</p><ul><li>GET 类型的 CSRF 攻击，比如在网站中的一个img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交；</li><li>POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。</li><li>链接类型的 CSRF 攻击，比如在 a 标签的href 属性里构建一个请求，然后诱导用户去点击。</li></ul><h5 id="如何防御-CSRF-攻击？"><a href="#如何防御-CSRF-攻击？" class="headerlink" title="如何防御 CSRF 攻击？"></a>如何防御 CSRF 攻击？</h5><p>CSRF 攻击可以使用以下方法来防护：</p><p>进行同源检测，服务器根据 http 请求头中origin 或者referer信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer字段会告诉服务器该网页是从哪个页面链接过来的）</p><p>使用 CSRF Token 进行验证，服务器向用户返回一个随机数Token，当网站再次发起请求时，在请求参数中加入服务器端返回的token，然后服务器对这个 token 进行验证。这种方法解决了使用cookie单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个token，操作比较繁琐。</p><p>还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的session中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。</p><p>对 Cookie 进行双重验证，服务器在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到URL参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用cookie，但是不能访问获取 cookie 的特点。并且这种方法比CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。</p><p>在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。</summary>
    
    
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网络安全" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网络安全" scheme="https://batype.gitee.io/songs-note/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="CSRF" scheme="https://batype.gitee.io/songs-note/tags/CSRF/"/>
    
  </entry>
  
  <entry>
    <title>什么是 XSS 攻击？</title>
    <link href="https://batype.gitee.io/songs-note/web/cross/site/script.html"/>
    <id>https://batype.gitee.io/songs-note/web/cross/site/script.html</id>
    <published>2023-10-21T13:10:16.000Z</published>
    <updated>2023-10-23T01:55:15.631Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。</p><p>XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。</p><p>攻击者可以通过这种攻击方式可以进行以下操作：</p><ol><li>获取页面的数据，如 DOM、cookie、localStorage；</li><li>DOS 攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；</li><li>破坏页面结构；</li><li>流量劫持（将链接指向某网站）</li></ol><h5 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h5><p>XSS 可以分为存储型、反射型和 DOM 型：</p><ul><li>存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。</li><li>反射型指的是攻击者诱导用户访问一个带有恶意代码的URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成XSS 攻击。</li><li>DOM 型指的通过修改页面的 DOM 节点形成的XSS。</li></ul><h6 id="存储型-XSS-的攻击步骤："><a href="#存储型-XSS-的攻击步骤：" class="headerlink" title="存储型 XSS 的攻击步骤："></a>存储型 XSS 的攻击步骤：</h6><ol><li>攻击者将恶意代码提交到⽬标⽹站的数据库中。</li><li>⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。</li><li>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</li><li>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。<br>这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。</li></ol><h6 id="反射型-XSS-的攻击步骤："><a href="#反射型-XSS-的攻击步骤：" class="headerlink" title="反射型 XSS 的攻击步骤："></a>反射型 XSS 的攻击步骤：</h6><ol><li><p>攻击者构造出特殊的 URL，其中包含恶意代码。</p></li><li><p>⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码从URL中取出，拼接在 HTML 中返回给浏览器。</p></li><li><p>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</p></li><li><p>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</p><p>反射型 XSS 跟存储型 XSS 的区别是：存储型XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在URL ⾥。</p><p>反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。</p></li></ol><h6 id="DOM-型-XSS-的攻击步骤："><a href="#DOM-型-XSS-的攻击步骤：" class="headerlink" title="DOM 型 XSS 的攻击步骤："></a>DOM 型 XSS 的攻击步骤：</h6><ol><li><p>攻击者构造出特殊的 URL，其中包含恶意代码。</p></li><li><p>⽤户打开带有恶意代码的 URL。</p></li><li><p>⽤户浏览器接收到响应后解析执⾏，前端JavaScript 取出URL中的恶意代码并执⾏。</p></li><li><p>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</p><p><strong>DOM 型 XSS 跟前两种 XSS 的区别</strong>：DOM 型XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。</p></li></ol><h5 id="如何防御-XSS-攻击？"><a href="#如何防御-XSS-攻击？" class="headerlink" title="如何防御 XSS 攻击？"></a>如何防御 XSS 攻击？</h5><p>可以看到 XSS 危害如此之大，那么在开发网站时就要做好防御措施，具体措施如下：</p><p>可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。</p><p>使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。</p><ol><li><p>CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。</p></li><li><p>通常有两种方式来开启 CSP，一种是设置HTTP 首部中的Content-Security-Policy，一种是设置meta 标签的方式&lt;metahttp-equiv&#x3D;”Content-Security-Policy”&gt;<br>对一些敏感信息进行保护，比如 cookie 使用http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。</p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。</summary>
    
    
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网络安全" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网络安全" scheme="https://batype.gitee.io/songs-note/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="XSS" scheme="https://batype.gitee.io/songs-note/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>有哪些可能引起前端安全的问题?</title>
    <link href="https://batype.gitee.io/songs-note/web/security/question.html"/>
    <id>https://batype.gitee.io/songs-note/web/security/question.html</id>
    <published>2023-10-21T13:09:16.000Z</published>
    <updated>2023-10-23T01:55:15.631Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="跨站脚本-Cross-Site-Scripting-XSS"><a href="#跨站脚本-Cross-Site-Scripting-XSS" class="headerlink" title="跨站脚本 (Cross-Site Scripting, XSS)"></a><a href="https://blog.csdn.net/qq_35490191/article/details/132212266">跨站脚本 (Cross-Site Scripting, XSS)</a></h5><p>⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript &#x2F; CSS &#x2F; Flash 等；</p><h5 id="iframe-的滥⽤"><a href="#iframe-的滥⽤" class="headerlink" title="iframe 的滥⽤"></a>iframe 的滥⽤</h5><p>iframe 中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在 iframe 中运⾏JavaScirpt 脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；</p><h5 id="跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）"><a href="#跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）" class="headerlink" title="跨站点请求伪造（Cross-Site Request Forgeries，CSRF）"></a><a href="https://blog.csdn.net/qq_35490191/article/details/132220538">跨站点请求伪造（Cross-Site Request Forgeries，CSRF）</a></h5><p>指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击恶意</p><h5 id="第三⽅库"><a href="#第三⽅库" class="headerlink" title="第三⽅库"></a>第三⽅库</h5><p>⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript / CSS / Flash 等。</summary>
    
    
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网络安全" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网络安全" scheme="https://batype.gitee.io/songs-note/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>前端懒加载是什么?</title>
    <link href="https://batype.gitee.io/songs-note/web/lazy/loading.html"/>
    <id>https://batype.gitee.io/songs-note/web/lazy/loading.html</id>
    <published>2023-10-21T13:05:16.000Z</published>
    <updated>2023-10-23T01:55:15.632Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="懒加载的概念"><a href="#懒加载的概念" class="headerlink" title="懒加载的概念"></a>懒加载的概念</h5><p>懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。<br>如果使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。</p><h5 id="懒加载的特点"><a href="#懒加载的特点" class="headerlink" title="懒加载的特点"></a>懒加载的特点</h5><ul><li>减少无用资源的加载：使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。</li><li>提升用户体验: 如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。</li><li>防止加载过多图片而影响其他资源文件的加载：会影响网站应用的正常使用。</li></ul><h5 id="懒加载的实现原理"><a href="#懒加载的实现原理" class="headerlink" title="懒加载的实现原理"></a>懒加载的实现原理</h5><p>图片的加载是由 src 引起的，当对 src 赋值时，浏览器就会请求图片资源。根据这个原理，我们使用 HTML5 的data-xxx 属性来储存图片的路径，在需要加载图片的时候，将 data-xxx 中图片的路径赋值给src，这样就实现了图片的按需加载，即懒加载。</p><p><strong>注意</strong>：data-xxx 中的 xxx 可以自定义，这里我们使用data-src来定义。</p><p>懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。</p><p>使用原生 JavaScript 实现懒加载：</p><p><strong>知识点</strong>：</p><p>window.innerHeight 是浏览器可视区的高度</p><p>document.body.scrollTop</p><p>document.documentElement.scrollTop 是浏览器滚动的过的距离</p><p>imgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）</p><p>图片加载条件 ： img.offsetTop &lt; window.innerHeight+document.body.scrollTop;</p><p><img src="https://pic.imgdb.cn/item/6533ccf1c458853aef92497a.png" alt="在这里插入图片描述"></p><p>代码实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;container&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;loading.gif&#x27;</span> <span class="attr">data-src</span>=<span class="string">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;loading.gif&#x27;</span> <span class="attr">data-src</span>=<span class="string">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;loading.gif&#x27;</span> <span class="attr">data-src</span>=<span class="string">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;loading.gif&#x27;</span> <span class="attr">data-src</span>=<span class="string">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;loading.gif&#x27;</span> <span class="attr">data-src</span>=<span class="string">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;loading.gif&#x27;</span> <span class="attr">data-src</span>=<span class="string">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> imgs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">lazyLoad</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> winHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgs.<span class="property">lenght</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(imgs[i].<span class="property">offsetTop</span> &lt; scrollTop + winHeight) &#123;</span></span><br><span class="line"><span class="language-javascript">                imgs[i].<span class="property">src</span> = imgs[i].<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onsrcoll</span> = <span class="title function_">lazyLoad</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。</summary>
    
    
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="性能优化" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="性能优化" scheme="https://batype.gitee.io/songs-note/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>浅谈回流与重绘</title>
    <link href="https://batype.gitee.io/songs-note/web/reflux/and/redrawing.html"/>
    <id>https://batype.gitee.io/songs-note/web/reflux/and/redrawing.html</id>
    <published>2023-10-21T13:05:16.000Z</published>
    <updated>2023-10-23T01:55:15.633Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h5><p>当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。<br>下面这些操作会导致回流：</p><ul><li>页面的首次渲染</li><li>浏览器的窗口大小发生变化</li><li>元素的内容发生变化</li><li>元素的尺寸或者位置发生变化</li><li>元素的字体大小发生变化</li><li>激活 CSS 伪类</li><li>查询某些属性或者调用某些方法</li><li>添加或者删除可见的 DOM 元素</li></ul><p>在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的 DOM 元素重新排列，它的影响范围有两种：<br>全局范围：从根节点开始，对整个渲染树进行重新布局<br>局部范围：对渲染树的某部分或者一个渲染对象进行重新布局</p><h5 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h5><p>当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是重绘。</p><p>下面这些操作会导致重绘：<br>color、background 相关属性：background-color、background-image等<br>outline 相 关 属 性 ： outline-color 、outline-width、text-decoration<br>border-radius、visibility、box-shadow</p><p>注意： 当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。</p><h5 id="如何避免回流与重绘？"><a href="#如何避免回流与重绘？" class="headerlink" title="如何避免回流与重绘？"></a>如何避免回流与重绘？</h5><p>减少回流与重绘的措施：</p><p>操作 DOM 时，尽量在低层级的 DOM 节点进行操作不要使用 table 布局， 一个小的改动可能会使整个table 进行重新布局</p><p>使用 CSS 的表达式</p><p>不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</p><p>使用 absolute 或者 fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素</p><p>避免频繁操作 DOM，可以创建一个文档片段documentFragment，在它上面应用所有 DOM 操作，最后再把它添加到文档中</p><p>将元素先设置 display: none，操作结束后再把它显示出来。因为在display 属性为 none 的元素上进行的 DOM 操作不会引发回流和重绘。将 DOM 的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。</p><p>浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。</p><p>上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">回流与重绘，都是在浏览器响应过程中展示环节对数据进行对比，而产生的两种不同的方式。</summary>
    
    
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="性能优化" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="性能优化" scheme="https://batype.gitee.io/songs-note/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>节流和防抖</title>
    <link href="https://batype.gitee.io/songs-note/web/lodash/dubounce.html"/>
    <id>https://batype.gitee.io/songs-note/web/lodash/dubounce.html</id>
    <published>2023-10-21T13:00:16.000Z</published>
    <updated>2023-10-23T01:55:15.632Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="对节流与防抖的理解"><a href="#对节流与防抖的理解" class="headerlink" title="对节流与防抖的理解"></a>对节流与防抖的理解</h4><p>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件<br>又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因<br>为用户的多次点击向后端发送多次请求。<br>函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发<br>事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只<br>有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件<br>节流来降低事件调用的频率。</p><p>防抖函数的应用场景：</p><ul><li>按钮提交场景：防止多次提交按钮，只执行最后一次提交</li><li>服务端验证场景： 表达验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有索联想词功能类似生存环境可以使用lodash.debounce</li></ul><p>节流函数的适用场景：</p><ul><li>拖拽场景：固定实际内只执行一次，防止超高频次触发位置变动</li><li>缩放场景：监控浏览器resize</li><li>动画场景：避免短时间内多次触发动画引起性能问题</li></ul><h4 id="实现节流函数和防抖函数"><a href="#实现节流函数和防抖函数" class="headerlink" title="实现节流函数和防抖函数"></a>实现节流函数和防抖函数</h4><h5 id="函数防抖的实现"><a href="#函数防抖的实现" class="headerlink" title="函数防抖的实现"></a>函数防抖的实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>, args = [...<span class="variable language_">arguments</span>];</span><br><span class="line">        <span class="comment">// 如果此时存在定时器则取消之前的定时器重新计时</span></span><br><span class="line">        <span class="keyword">if</span>(timer) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数节流的实现"><a href="#函数节流的实现" class="headerlink" title="函数节流的实现"></a>函数节流的实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间戳版</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> preTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="variable language_">this</span>,</span><br><span class="line">        args = [...<span class="variable language_">arguments</span>],</span><br><span class="line">        nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果两次时间间隔超过了指定时间，则执行函数。</span></span><br><span class="line">        <span class="keyword">if</span>(nowTime - preTime &gt;= delay) &#123;</span><br><span class="line">            preTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">            <span class="keyword">return</span> fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器版</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fu, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>,</span><br><span class="line">        args = [...<span class="variable language_">arguments</span>];</span><br><span class="line">        <span class="keyword">if</span>(!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fu.<span class="title function_">apply</span>(context, args);</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">节流和防抖，有助于在输入或者点击某个按钮时进行优化事件响应。</summary>
    
    
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="性能优化" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="性能优化" scheme="https://batype.gitee.io/songs-note/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>如何对项目中的图片进行优化?</title>
    <link href="https://batype.gitee.io/songs-note/web/image/perform.html"/>
    <id>https://batype.gitee.io/songs-note/web/image/perform.html</id>
    <published>2023-10-21T12:52:25.000Z</published>
    <updated>2023-10-23T01:55:15.631Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="优化步骤方案"><a href="#优化步骤方案" class="headerlink" title="优化步骤方案"></a>优化步骤方案</h5><ol><li><p>不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片<br>完全可以用 CSS 去代替。</p></li><li><p>对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪<br>费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然<br>后去请求相应裁剪好的图片。</p></li><li><p>小图使用 base64 格式</p></li><li><p>将多个图标文件整合到一张图片中（雪碧图）</p></li><li><p>选择正确的图片格式：</p><ul><li><p>对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好</p></li><li><p>小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替</p></li><li><p>照片使用 JPEG</p></li></ul></li></ol><h5 id="常见的图片格式及使用场景"><a href="#常见的图片格式及使用场景" class="headerlink" title="常见的图片格式及使用场景"></a>常见的图片格式及使用场景</h5><ol><li><p>BMP：是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以 BMP 格式的图片通常是较大的文件。</p></li><li><p>GIF：是无损的、采用索引色的点阵图。采用 LZW 压缩算法进行<br>编码。文件小，是 GIF 格式的优点，同时，GIF 格式还具有支持动画<br>以及透明的优点。但是 GIF 格式仅支持 8bit 的索引色，所以 GIF 格<br>式适用于对色彩要求不高同时需要文件体积较小的场景。</p></li><li><p>JPEG：是有损的、采用直接色的点阵图。JPEG 的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG 非常适合用来存储照片，与 GIF 相比，JPEG 不适合用来存储企业 Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较 GIF更大。</p></li><li><p>PNG-8：是无损的、使用索引色的点阵图。PNG 是一种比较新的图片格式，PNG-8 是非常好的 GIF 格式替代者，在可能的情况下，应该尽可能的使用 PNG-8 而不是 GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8 还支持透明度的调节，而 GIF并不支持。除非需要动画的支持，否则没有理由使用 GIF而不是 PNG-8。</p></li><li><p>PNG-24：是无损的、使用直接色的点阵图。PNG-24 的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24 格式的文件大小要比 BMP 小得多。当然，PNG24 的图片还是要比 JPEG、GIF、PNG-8大得多。</p></li><li><p>SVG 是无损的矢量图。SVG 是矢量图意味着 SVG 图片由直线和曲线以及绘制它们的方法组成。当放大 SVG 图片时，看到的还是线和曲线，而不会出现像素点。这意味着 SVG 图片在放大时，不会失真，所以它非常适合用来绘制 Logo、Icon 等。</p></li><li><p>WebP：是谷歌开发的一种新图片格式，WebP 是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为 Web 而生的，什么叫为 Web 而生呢？就是说相同质量的图片，WebP 具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有 Chrome 浏览器和 Opera浏览器支持 WebP 格式，兼容性不太好。</p></li></ol><p>在无损压缩的情况下，相同质量的 WebP 图片，文件大小要比 PNG 小26%；<br>在有损压缩的情况下，具有相同图片精度的 WebP 图片，文件大小要比 JPEG 小 25%~34%；</p><p>WebP 图片格式支持图片透明度，一个无损压缩的 WebP 图片，如果要支持透明度只需要 22%的格外文件大小。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">为什么要优化项目中的图片，优化图片可以解决因为图片造成的加载时间过长，页面体验不佳。</summary>
    
    
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="性能优化" scheme="https://batype.gitee.io/songs-note/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/songs-note/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/songs-note/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="性能优化" scheme="https://batype.gitee.io/songs-note/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="Webpack" scheme="https://batype.gitee.io/songs-note/tags/Webpack/"/>
    
    <category term="图片" scheme="https://batype.gitee.io/songs-note/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
</feed>
