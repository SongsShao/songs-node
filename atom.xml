<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>batype-note</title>
  
  
  <link href="https://note.batype.com/atom.xml" rel="self"/>
  
  <link href="https://note.batype.com/"/>
  <updated>2023-11-13T07:53:41.026Z</updated>
  <id>https://note.batype.com/</id>
  
  <author>
    <name>songshao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux 配置缩写快捷操作</title>
    <link href="https://note.batype.com/linux/config/git-config.html"/>
    <id>https://note.batype.com/linux/config/git-config.html</id>
    <published>2023-11-13T07:52:24.000Z</published>
    <updated>2023-11-13T07:53:41.026Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>编辑~&#x2F;.zshrc 增加自定义配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alias gps=&quot;git push origin&quot;</span><br><span class="line">alias gcm=&quot;git add . &amp;&amp; git commit -m &quot;</span><br><span class="line">alias gpl=&quot;git pull origin&quot;</span><br><span class="line">alias gco=&quot;git checkout&quot;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">Git linux 配置缩写快捷操作，可以提升效能开发。</summary>
    
    
    
    <category term="linux" scheme="https://note.batype.com/categories/linux/"/>
    
    <category term="git" scheme="https://note.batype.com/categories/linux/git/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Git" scheme="https://note.batype.com/tags/Git/"/>
    
    <category term="linux" scheme="https://note.batype.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ubantu 安装Maven 和jdk 步骤</title>
    <link href="https://note.batype.com/linux/install/maven/jdk.html"/>
    <id>https://note.batype.com/linux/install/maven/jdk.html</id>
    <published>2023-11-13T07:35:10.000Z</published>
    <updated>2023-11-13T07:37:31.537Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>To install Maven and JDK (Java Development Kit) on Ubuntu, you can follow these steps:</p><p>Open a terminal on your Ubuntu system.</p><p>Update the package lists by running the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>Install Maven by running the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install maven</span><br></pre></td></tr></table></figure><p>This will install Maven and its dependencies.</p><p>Verify the installation by running the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn --version</span><br></pre></td></tr></table></figure><p>This should display the version of Maven installed on your system.</p><p>Install JDK (Java Development Kit) using the following steps:</p><p>a. Check if Java is already installed on your system by running the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>If Java is not installed, you will see an error message.</p><p>b. Install the default JDK package by running the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install default-jdk</span><br></pre></td></tr></table></figure><p>This will install the default JDK package available in the Ubuntu package repository.</p><p>c. Verify the installation by running the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -version</span><br></pre></td></tr></table></figure><p>This should display the version of the JDK installed on your system.</p><p>Additionally, you can also run the following command to check the Java Runtime Environment (JRE) version:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>This will display the JRE version.</p><p>That’s it! You have now installed Maven and JDK on your Ubuntu system. You can use Maven for building projects and the JDK for developing and running Java applications.</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">To install Maven and JDK (Java Development Kit) on Ubuntu, you can follow these steps。</summary>
    
    
    
    <category term="linux" scheme="https://note.batype.com/categories/linux/"/>
    
    <category term="maven" scheme="https://note.batype.com/categories/linux/maven/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="linux" scheme="https://note.batype.com/tags/linux/"/>
    
    <category term="maven" scheme="https://note.batype.com/tags/maven/"/>
    
    <category term="jdk" scheme="https://note.batype.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>zsh install</title>
    <link href="https://note.batype.com/linux/install/zsh.html"/>
    <id>https://note.batype.com/linux/install/zsh.html</id>
    <published>2023-11-13T06:32:08.000Z</published>
    <updated>2023-11-13T06:34:39.373Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>Manual Installation</p><h3 id="Clone-The-Repository"><a href="#Clone-The-Repository" class="headerlink" title="Clone The Repository"></a>Clone The Repository</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://githubfast.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure><h3 id="Optionally-Backup-Your-Existing-zshrc-File"><a href="#Optionally-Backup-Your-Existing-zshrc-File" class="headerlink" title="Optionally, Backup Your Existing ~&#x2F;.zshrc File"></a>Optionally, Backup Your Existing ~&#x2F;.zshrc File</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.zshrc ~/.zshrc.orig</span><br></pre></td></tr></table></figure><h3 id="Create-A-New-Zsh-Configuration-File"><a href="#Create-A-New-Zsh-Configuration-File" class="headerlink" title="Create A New Zsh Configuration File"></a>Create A New Zsh Configuration File</h3><p>You can create a new zsh config file by copying the template that we have included for you.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="Change-Your-Default-Shell"><a href="#Change-Your-Default-Shell" class="headerlink" title="Change Your Default Shell"></a>Change Your Default Shell</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which zsh</span><br><span class="line">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure><p>You must log out from your user session and log back in to see this change.</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">Oh My Zsh is an open source, community-driven framework for managing your zsh configuration.</summary>
    
    
    
    <category term="linux" scheme="https://note.batype.com/categories/linux/"/>
    
    <category term="zsh" scheme="https://note.batype.com/categories/linux/zsh/"/>
    
    
    <category term="linux" scheme="https://note.batype.com/tags/linux/"/>
    
    <category term="zsh" scheme="https://note.batype.com/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose install</title>
    <link href="https://note.batype.com/linux/install/docker-compose.html"/>
    <id>https://note.batype.com/linux/install/docker-compose.html</id>
    <published>2023-11-13T02:36:03.000Z</published>
    <updated>2023-11-13T02:38:55.291Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h3 id="Curl-下载"><a href="#Curl-下载" class="headerlink" title="Curl 下载"></a>Curl 下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="查询版本"><a href="#查询版本" class="headerlink" title="查询版本"></a>查询版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>需要将运行yml 命名为 docker-compose.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">ubantu use wechat, 使用的是模拟window环境打开wechat。</summary>
    
    
    
    <category term="linux" scheme="https://note.batype.com/categories/linux/"/>
    
    <category term="docker-compose" scheme="https://note.batype.com/categories/linux/docker-compose/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="linux" scheme="https://note.batype.com/tags/linux/"/>
    
    <category term="docker-compose" scheme="https://note.batype.com/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu解压Zip文件命令详解</title>
    <link href="https://note.batype.com/linux/use/zip.html"/>
    <id>https://note.batype.com/linux/use/zip.html</id>
    <published>2023-11-12T11:22:59.000Z</published>
    <updated>2023-11-13T02:34:49.730Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Ubuntu解压Zip文件的命令是“unzip”，它可以解压几乎所有的Zip文件。其基本的语法为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip [option] filename.zip</span><br></pre></td></tr></table></figure><p>其中，filename.zip表示要解压的Zip文件名，option参数是可选的，用来控制解压的行为，常用的option参数如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-d：指定解压到的目录，例如：unzip -d /home/user/untitled filename.zip，即将filename.zip解压到/home/user/untitled目录；</span><br><span class="line">-q：不显示详细信息，即不显示每个文件的解压进度信息；</span><br><span class="line">-o：覆盖目标文件，即如果目标文件存在就覆盖它；</span><br><span class="line">-P：指定Zip文件的密码。</span><br></pre></td></tr></table></figure><h3 id="解压Zip文件到当前路径"><a href="#解压Zip文件到当前路径" class="headerlink" title="解压Zip文件到当前路径"></a>解压Zip文件到当前路径</h3><p>解压一个Zip文件到当前路径很简单，只要在终端中输入“unzip filename.zip”即可。比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip archive.zip</span><br></pre></td></tr></table></figure><p>上述命令将会将“archive.zip”文件解压到当前路径中。如果你希望将Zip文件解压到另外一个路径，可以使用“-d”参数，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip archive.zip -d /home/user/some_folder</span><br></pre></td></tr></table></figure><p>上述命令将会将“archive.zip”文件解压到“&#x2F;home&#x2F;user&#x2F;some_folder”路径中。</p><h3 id="解压指定的文件"><a href="#解压指定的文件" class="headerlink" title="解压指定的文件"></a>解压指定的文件</h3><p>有时候我们只需要解压Zip文件中的某些文件，而不是全部文件，这时候可以使用“unzip -j”命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -j archive.zip file.txt</span><br></pre></td></tr></table></figure><p>上述命令将会将“archive.zip”文件中的“file.txt”文件解压到当前路径中。</p><h3 id="解压时覆盖已存在的文件"><a href="#解压时覆盖已存在的文件" class="headerlink" title="解压时覆盖已存在的文件"></a>解压时覆盖已存在的文件</h3><p>默认情况下，如果解压的目标文件已经存在，unzip命令会提示是否覆盖。如果你希望不进行提示，强制覆盖已经存在的文件，可以使用“-o”参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -o archive.zip</span><br></pre></td></tr></table></figure><p>上述命令将会解压“archive.zip”文件到当前路径中，如果有重名的文件会强制覆盖。</p><h3 id="解压时保留目录结构"><a href="#解压时保留目录结构" class="headerlink" title="解压时保留目录结构"></a>解压时保留目录结构</h3><p>默认情况下，unzip命令会将Zip文件中的所有文件解压到当前路径中，不管其原来所在的目录结构。如果你希望保留原来的目录结构，可以使用“unzip -j”命令，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip archive.zip -d /home/user/some_folder</span><br></pre></td></tr></table></figure><p>上述命令将会将“archive.zip”文件解压到“&#x2F;home&#x2F;user&#x2F;some_folder”路径中，并保留原来的目录结构。</p><h3 id="解压时指定密码"><a href="#解压时指定密码" class="headerlink" title="解压时指定密码"></a>解压时指定密码</h3><p>如果Zip文件设置了密码，那么我们需要在解压时指定密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -P secretPassword archive.zip</span><br></pre></td></tr></table></figure><p>上述命令将会解压“archive.zip”文件，并使用“secretPassword”作为密码。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">Ubuntu解压Zip文件的命令是“unzip”，它可以解压几乎所有的Zip文件。。</summary>
    
    
    
    <category term="linux" scheme="https://note.batype.com/categories/linux/"/>
    
    <category term="zip" scheme="https://note.batype.com/categories/linux/zip/"/>
    
    
    <category term="linux" scheme="https://note.batype.com/tags/linux/"/>
    
    <category term="zip" scheme="https://note.batype.com/tags/zip/"/>
    
  </entry>
  
  <entry>
    <title>deb  使用</title>
    <link href="https://note.batype.com/linux/install/deb.html"/>
    <id>https://note.batype.com/linux/install/deb.html</id>
    <published>2023-11-11T04:24:32.000Z</published>
    <updated>2023-11-13T02:34:49.726Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>使用dpkg命令：在终端中运行以下命令来安装.deb文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i &lt;filename&gt;.deb</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">使用dpkg命令：在终端中运行以下命令来安装.deb文件。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="es6" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/es6/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Git" scheme="https://note.batype.com/tags/Git/"/>
    
    <category term="linux" scheme="https://note.batype.com/tags/linux/"/>
    
    <category term="deb" scheme="https://note.batype.com/tags/deb/"/>
    
  </entry>
  
  <entry>
    <title>ubantu use wechat</title>
    <link href="https://note.batype.com/linux/install/wechat.html"/>
    <id>https://note.batype.com/linux/install/wechat.html</id>
    <published>2023-11-11T04:24:32.000Z</published>
    <updated>2023-11-13T02:34:49.729Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker.io</span><br></pre></td></tr></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull bestwu/wechat</span><br></pre></td></tr></table></figure><h3 id="允许所有用户访问图形界面"><a href="#允许所有用户访问图形界面" class="headerlink" title="允许所有用户访问图形界面"></a>允许所有用户访问图形界面</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhost +</span><br></pre></td></tr></table></figure><p>注意，这条命令可能会提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access control disabled, clients can connect from any host</span><br></pre></td></tr></table></figure><p>看到这样的提示信息，表示命令执行成功，不是什么报错信息。</p><h3 id="创建Docker容器"><a href="#创建Docker容器" class="headerlink" title="创建Docker容器"></a>创建Docker容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name wechat\</span><br><span class="line">    --device /dev/snd\</span><br><span class="line">    --ipc=host\</span><br><span class="line">    -v /tmp/.X11-unix:/tmp/.X11-unix\</span><br><span class="line">    -v /home/batype/WeChatFiles:/WeChatFiles\</span><br><span class="line">    -v /home/batype:/batype\</span><br><span class="line">    -e DISPLAY=unix$DISPLAY\</span><br><span class="line">    -e XMODIFIERS=@im=fcitx\</span><br><span class="line">    -e QT_IM_MODULE=fcitx\</span><br><span class="line">    -e GTK_IM_MODULE=fcitx\</span><br><span class="line">    -e GID=`id -g`\</span><br><span class="line">    -e UID=`id -u`\</span><br><span class="line">    bestwu/wechat</span><br></pre></td></tr></table></figure><p>注意！注意！注意！上述代码不能直接使用，需要一定的修改！！！</p><ul><li><p>将代码中的batype改成自己的用户名！！！</p></li><li><p>如果你是ibus输入法，将代码中的fcitx改成ibus！！！</p></li></ul><h3 id="等待微信启动"><a href="#等待微信启动" class="headerlink" title="等待微信启动"></a>等待微信启动</h3><p>注意！！！当你执行完docker run之后，大约需要等待1-2分钟后，才会弹出微信的登录窗口。一定要有信心，有耐心，不要放弃，要耐心等待1-2分钟！</p><p>等待完成后，即可看到微信的登录界面，扫码登录即可尽情使用！</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="微信的字体特别小"><a href="#微信的字体特别小" class="headerlink" title="微信的字体特别小"></a>微信的字体特别小</h4><p>安装完 Docker 微信后，字特别小，根本看不清，太费眼睛。</p><p>解决方法：</p><ol><li>进入容器内部</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it wechat bash</span><br></pre></td></tr></table></figure><ol start="2"><li>切换到wechat用户（此步骤不可省略，否则下面的步骤无法进行！！！）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su wechat</span><br></pre></td></tr></table></figure><ol start="3"><li>打开配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WINEPREFIX=~/.deepinwine/Deepin-WeChat/ deepin-wine winecfg</span><br></pre></td></tr></table></figure><ol start="4"><li>在弹出窗口中，打开“显示”选项卡，找到最下面“屏幕分辨率”，改成200dpi即可。</li></ol><h4 id="运行微信之后，出现一个wine-system-tray的小窗口"><a href="#运行微信之后，出现一个wine-system-tray的小窗口" class="headerlink" title="运行微信之后，出现一个wine system tray的小窗口"></a>运行微信之后，出现一个wine system tray的小窗口</h4><p>这是wine的系统栏，是正常现象，其实可以把那个窗口关掉，没什么影响。</p><h4 id="我不小心把微信的窗口叉掉了，怎么办"><a href="#我不小心把微信的窗口叉掉了，怎么办" class="headerlink" title="我不小心把微信的窗口叉掉了，怎么办"></a>我不小心把微信的窗口叉掉了，怎么办</h4><p>执行下面命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart wechat -t 0</span><br></pre></td></tr></table></figure><h4 id="无法输入中文"><a href="#无法输入中文" class="headerlink" title="无法输入中文"></a>无法输入中文</h4><p>这是因为你使用的是ibus输入法，而你未将启动命令中的ibus改成fcitx。</p><h4 id="播放视频没有声音"><a href="#播放视频没有声音" class="headerlink" title="播放视频没有声音"></a>播放视频没有声音</h4><p>首先删掉容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f wechat</span><br></pre></td></tr></table></figure><p>然后重新运行一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name wechat\</span><br><span class="line">    --device /dev/snd\</span><br><span class="line">    --ipc=host\</span><br><span class="line">    -v /tmp/.X11-unix:/tmp/.X11-unix\</span><br><span class="line">    -v /home/batype/WeChatFiles:/WeChatFiles\</span><br><span class="line">    -v /home/batype:/batype\</span><br><span class="line">    -e DISPLAY=unix$DISPLAY\</span><br><span class="line">    -e XMODIFIERS=@im=fcitx\</span><br><span class="line">    -e QT_IM_MODULE=fcitx\</span><br><span class="line">    -e GTK_IM_MODULE=fcitx\</span><br><span class="line">    -e AUDIO_GID=`getent group audio | cut -d: -f3`\</span><br><span class="line">    -e GID=`id -g`\</span><br><span class="line">    -e UID=`id -u`\</span><br><span class="line">    bestwu/wechat</span><br></pre></td></tr></table></figure><p>注意，加了这一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-e AUDIO_GID=`getent group audio | cut -d: -f3`\</span><br></pre></td></tr></table></figure><p>这样的话，播放视频就有声音了。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">ubantu use wechat, 使用的是模拟window环境打开wechat。</summary>
    
    
    
    <category term="linux" scheme="https://note.batype.com/categories/linux/"/>
    
    <category term="wechat" scheme="https://note.batype.com/categories/linux/wechat/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="linux" scheme="https://note.batype.com/tags/linux/"/>
    
    <category term="wechat" scheme="https://note.batype.com/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>vscode . open project</title>
    <link href="https://note.batype.com/linux/use/vscode/open/project.html"/>
    <id>https://note.batype.com/linux/use/vscode/open/project.html</id>
    <published>2023-11-09T09:01:53.000Z</published>
    <updated>2023-11-09T09:02:22.149Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>You are trying to start Visual Studio Code as a super user which isn’t recommended. If this was i…</p><p>在centos7 中通过wget 安装vscode(tar.gz格式)后，执行&#x2F;bin&#x2F;code出现提示：</p><p>You are trying to start Visual Studio Code as a super user which isn’t recommended. If this was intended, please add the argument –no-sandbox and specify an alternate user data directory using the –user-data-dir argument.<br>您正试图以超级用户身份启动Visual Studio代码，这是不推荐的。如果是这样，请添加参数“–no sandbox”，并使用“–user data dir”参数指定备用用户数据目录。</p><p>解决方法：<br>方法一：修改 ~&#x2F;.bashrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bashrc</span><br></pre></td></tr></table></figure><p>添加一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whereis code </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">code: /usr/bin/code /usr/share/code</span></span><br><span class="line">alias code=&#x27;/usr/share/code/code . --no-sandbox --unity-launch&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">You are trying to start Visual Studio Code as a super user which isn&#39;t recommended. If this was i...</summary>
    
    
    
    <category term="linux" scheme="https://note.batype.com/categories/linux/"/>
    
    <category term="vscode" scheme="https://note.batype.com/categories/linux/vscode/"/>
    
    
    <category term="linux" scheme="https://note.batype.com/tags/linux/"/>
    
    <category term="vscode" scheme="https://note.batype.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Git 使用</title>
    <link href="https://note.batype.com/linux/config/git.html"/>
    <id>https://note.batype.com/linux/config/git.html</id>
    <published>2023-11-07T13:40:32.000Z</published>
    <updated>2023-11-10T01:57:13.724Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>Git 是一个分布式版本控制系统，用于跟踪文件的变化并协作开发。以下是使用 Git 的基本步骤：</p><ol><li><p>安装 Git：首先，你需要在本地计算机上安装 Git。你可以从 Git 官方网站（<a href="https://git-scm.com/%EF%BC%89%E4%B8%8B%E8%BD%BD%E5%B9%B6%E6%8C%89%E7%85%A7%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E3%80%82">https://git-scm.com/）下载并按照安装指南进行安装。</a></p></li><li><p>创建一个 Git 仓库：进入你的项目文件夹，并使用以下命令初始化一个新的 Git 仓库：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ol start="3"><li>添加文件到暂存区：将需要进行版本控制的文件添加到 Git 的暂存区，使用以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;文件名&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>提交文件：将暂存区的文件提交到 Git 仓库，使用以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;提交说明&quot;</span><br></pre></td></tr></table></figure><ol start="5"><li>分支管理：</li></ol><p>Git 使用分支来管理不同的版本和功能。可以使用以下命令创建、切换、合并、暂存、还原暂存分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git branch          &lt;分支名&gt;        # 创建新分支</span><br><span class="line">git checkout        &lt;分支名&gt;        # 切换到分支</span><br><span class="line">git checkout -b     &lt;分支名&gt;        # 基于当前分支创建分支</span><br><span class="line">git merge           &lt;分支名&gt;        # 合并分支</span><br><span class="line">git branch                         # 查看分支列表</span><br><span class="line">git stash    save   &#x27;&#x27;             # 暂存分支</span><br><span class="line">git stash    pop                   # 恢复暂存：</span><br><span class="line">                                   # 恢复暂存的修改 这个指令将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下。</span><br></pre></td></tr></table></figure><ol start="6"><li>远程仓库：Git 还提供了远程仓库的功能，可以将本地仓库与远程仓库进行同步和协作。常用的远程仓库服务有 GitHub、GitLab 和 Bitbucket。可以使用以下命令与远程仓库进行交互：</li></ol><ul><li>添加远程仓库：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;远程仓库地址&gt;</span><br></pre></td></tr></table></figure><ul><li>将本地分支推送到远程仓库：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin &lt;分支名&gt;</span><br></pre></td></tr></table></figure><ul><li>将本地代码强制推送到远程仓库：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f || -force origin &lt;分支名&gt;</span><br></pre></td></tr></table></figure><ul><li>从远程仓库拉取最新代码：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin &lt;分支名&gt;</span><br></pre></td></tr></table></figure><p>这些是 Git 的基本用法，还有更多高级的用法和命令可以根据实际需要进行学习和掌握。你可以参考 Git 的官方文档或查找其他教程来深入了解 Git 的更多功能和用法。</p><ol start="7"><li>回退版本</li></ol><p>git reset 命令用于回退版本，可以指定退回某一次提交的版本。git reset 命令语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset [--soft | --mixed | --hard] [HEAD]</span><br></pre></td></tr></table></figure><ul><li>–mixed</li></ul><p>为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^                  # 回退所有内容到上一个版本</span><br><span class="line">git reset HEAD^ git_use.md       # 回退文件的版本到上一个版本</span><br><span class="line">git reset 0123adsfe3             # 回退到指定版本</span><br></pre></td></tr></table></figure><ul><li>–hard</li></ul><p>参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD             # 回退所有内容到上一个版本</span><br><span class="line">git reset --hard HEAD~3           # 回退上上上一个版本</span><br><span class="line">git reset –hard bae128            # 回退到某个版本回退点之前的所有信息</span><br><span class="line">git reset --hard origin/master    # 将本地的状态回退到和远程的一样</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="8"><li>删除本地和远程分支</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch  -d         &lt;分支名&gt;    # 删除本地</span><br><span class="line">git push    origin -d  &lt;分支名&gt;    # 删除远程分支</span><br></pre></td></tr></table></figure><ol start="9"><li>配置全局用户信息</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name   &quot;batype&quot;</span><br><span class="line">git config --global user.email  1175715363@qq.com</span><br></pre></td></tr></table></figure><ol start="10"><li>避免每次推送都输入密码</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><ol start="11"><li>当前 Git 仓库关联的远程仓库的 URL配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote add     origin &lt;url&gt; # 添加 origin 地址</span><br><span class="line">git remote set-url origin &lt;url&gt; # 更新 origin 地址</span><br><span class="line">git remote get-url origin       # 获取 origin 地址</span><br><span class="line">git remote remove  origin       # 移除 origin 地址</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">Git 是一个分布式版本控制系统，用于跟踪文件的变化并协作开发。</summary>
    
    
    
    <category term="linux" scheme="https://note.batype.com/categories/linux/"/>
    
    <category term="git" scheme="https://note.batype.com/categories/linux/git/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Git" scheme="https://note.batype.com/tags/Git/"/>
    
    <category term="linux" scheme="https://note.batype.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker 的安装和使用</title>
    <link href="https://note.batype.com/linux/install/docker.html"/>
    <id>https://note.batype.com/linux/install/docker.html</id>
    <published>2023-11-02T13:24:32.000Z</published>
    <updated>2023-11-13T02:34:49.728Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="Linux上安装Docker分为以下几步："><a href="#Linux上安装Docker分为以下几步：" class="headerlink" title="Linux上安装Docker分为以下几步："></a>Linux上安装Docker分为以下几步：</h4><ol><li>设置存储库。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>安装Docker引擎</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><ol start="3"><li>启动Docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><ol start="4"><li>设置docker开机自启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><ol start="5"><li>配置镜像加速器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://om7zpa5s.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><ol><li>查看</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><ol start="2"><li>搜索镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><ol start="3"><li>下载镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:version</span><br></pre></td></tr></table></figure><ol start="4"><li>删除镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker images // 查看image ID</span><br><span class="line"></span><br><span class="line">docker rmi -f feb5d9fea6a5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多个删除</span></span><br><span class="line">docker rmi -f feb5d9fea6a5 feb5d9fea6a5 </span><br><span class="line">docker rmi -f $(docker images -aq)    # 删除全部的镜像</span><br></pre></td></tr></table></figure><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><ol><li>新建容器并启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos /bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>列出所有运行的容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令参数可选项</span></span><br><span class="line">-a        # 列出当前正在运行的容器+历史运行过的容器</span><br><span class="line">-n=?    # 显示最近创建的容器（可以指定显示几条，比如-n=1）</span><br><span class="line">-q        # 只显示容器的编号</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>退出容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit        # 容器直接停止，并退出</span><br><span class="line">ctrl+P+Q    # 容器不停止，退出</span><br></pre></td></tr></table></figure><ol start="4"><li>删除容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id                    # 删除容器（不能删除正在运行的容器）如果要强制删除：docker rm -f 容器id</span><br><span class="line">docker rm -f $(docker ps -aq)        # 删除全部容器</span><br><span class="line">docker ps -a -q|xargs docker rm        # 删除所有容器</span><br><span class="line">docker rm 656c03b3be05</span><br></pre></td></tr></table></figure><ol start="5"><li>启动和停止容器的操作</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id # 启动容器</span><br><span class="line">docker restart 容器id # 重启</span><br><span class="line">docker stop 容器id # 停止</span><br><span class="line">docker kill 容器id # 强制停止</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h4><ol><li>后台启动容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d centos</span><br></pre></td></tr></table></figure><ol start="2"><li>查看日志</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker logs -tf 5694d2fc0a88</span><br><span class="line"></span><br><span class="line">docker run -d centos /bin/sh -c &quot;while true;do echo batype;sleep 1000;done&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>查看容器中的进程</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED         STATUS         PORTS     NAMES</span><br><span class="line">4f9b77aafa46   centos    &quot;/bin/sh -c &#x27;while t…&quot;   6 seconds ago   Up 5 seconds             tender_hofstadter</span><br><span class="line"></span><br><span class="line">docker top 4f9b77aafa46</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                14087               14066               0                   17:42               ?                   00:00:00            /bin/sh -c while true;do echo batype;sleep 1000;done</span><br><span class="line">root                14107               14087               0                   17:42               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1000</span><br></pre></td></tr></table></figure><ol start="4"><li>查看镜像的元数据</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 4f9b77aafa46</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;4f9b77aafa469b2e50ca296515d66b841f60f12343b1a45ddbdd09766e103d0f&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2023-11-03T09:42:35.034147379Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo batype;sleep 1000;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 14087,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="5"><li>进入当前正在运行的容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker exec -it 4f9b77aafa46 /bin/bash</span><br><span class="line">[root@4f9b77aafa46 /]# ps =ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 09:42 ?        00:00:00 /bin/sh -c while true;do echo batype;sleep 1000;done</span><br><span class="line">root        20     1  0 13:19 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1000</span><br><span class="line">root        21     0  0 13:30 pts/0    00:00:00 /bin/bash</span><br><span class="line">root        35    21  0 13:31 pts/0    00:00:00 ps -ef</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>从容器拷贝文件到主机</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:容器内路径 目的主机的路径</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# cd /home/</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# ls</span><br><span class="line">html</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS     NAMES</span><br><span class="line">4f9b77aafa46   centos    &quot;/bin/sh -c &#x27;while t…&quot;   4 hours ago   Up 4 hours             tender_hofstadter</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker exec -it 4f9b77aafa46 /bin/bash</span><br><span class="line">[root@4f9b77aafa46 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@4f9b77aafa46 /]# cd /home/</span><br><span class="line">[root@4f9b77aafa46 home]# ls</span><br><span class="line">[root@4f9b77aafa46 home]# touch test.java</span><br><span class="line">[root@4f9b77aafa46 home]# ls</span><br><span class="line">test.java</span><br><span class="line">[root@4f9b77aafa46 home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS     NAMES</span><br><span class="line">4f9b77aafa46   centos    &quot;/bin/sh -c &#x27;while t…&quot;   4 hours ago   Up 4 hours             tender_hofstadter</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker cp 4f9b77aafa46:/home/test.java /home</span><br><span class="line">Successfully copied 1.54kB to /home</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# ls</span><br><span class="line">html  test.java</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现，自动同步（容器内的/home路径和主机上的/home路径打通）</span></span><br></pre></td></tr></table></figure><h4 id="练习安装Nginx"><a href="#练习安装Nginx" class="headerlink" title="练习安装Nginx"></a>练习安装Nginx</h4><ol><li><p>搜索镜像：docker search nginx (建议去dockerHub上去搜索)</p></li><li><p>下载镜像：docker pull nginx</p></li><li><p>启动镜像</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">Digest:</span><br><span class="line">sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-d 后台运行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--name=<span class="string">&quot;nginx01&quot;</span>    给容器命名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p 宿主机端口:容器内部端口</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker run -d --name nginx01 -p 515:80 nginx</span><br><span class="line">614bbf44138a3e834008f5a33a71194c8e78d7f0e53bccbdfc4c9c9f0c0501cb</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                 NAMES</span><br><span class="line">614bbf44138a   nginx     &quot;/docker-entrypoint.…&quot;   8 seconds ago   Up 7 seconds   0.0.0.0:515-&gt;80/tcp, :::515-&gt;80/tcp   nginx01</span><br><span class="line">4f9b77aafa46   centos    &quot;/bin/sh -c &#x27;while t…&quot;   4 hours ago     Up 4 hours                                           tender_hofstadter</span><br></pre></td></tr></table></figure><ol start="4"><li>测试访问</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问指向端口515</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# curl 0.0.0.0:515</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br><span class="line">Unable to find image &#x27;portainer/portainer:latest&#x27; locally</span><br><span class="line">latest: Pulling from portainer/portainer</span><br><span class="line"></span><br><span class="line">Digest:</span><br><span class="line">  sha256:fb45b43738646048a0a0cc74fcee2865b69efde857e710126084ee5de9be0f3f</span><br><span class="line">Status: Downloaded newer image for portainer/portainer:latest</span><br><span class="line">a1b1156666edf6cad33eb299e35f543b823673a97a9756726d1fbc2cc571bc47</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">a1b1156666ed   portainer/portainer   &quot;/portainer&quot;             8 seconds ago   Up 7 seconds   0.0.0.0:8088-&gt;9000/tcp, :::8088-&gt;9000/tcp   dreamy_goodall</span><br><span class="line">614bbf44138a   nginx                 &quot;/docker-entrypoint.…&quot;   8 minutes ago   Up 8 minutes   0.0.0.0:515-&gt;80/tcp, :::515-&gt;80/tcp         nginx01</span><br><span class="line">4f9b77aafa46   centos                &quot;/bin/sh -c &#x27;while t…&quot;   4 hours ago     Up 4 hours                                                 tender_hofstadter</span><br></pre></td></tr></table></figure><ol start="2"><li>测试访问</li></ol><p><a href="http://www.batype.com:8088/">http://www.batype.com:8088/</a></p><ol><li><p>连接本地Local<br><img src="https://pic.imgdb.cn/item/6545012dc458853aefeef057.jpg" alt="Connect Portainer"></p></li><li><p>进入之的连接页面<br><img src="https://pic.imgdb.cn/item/654505fec458853aef03e9b1.jpg" alt="进入之的连接页面"></p></li></ol><h4 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交容器成为一个新的副本</span></span><br><span class="line">docker commit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令和git原理类似</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker commit -a=&quot;batype&quot; -m=&quot;test&quot; 614bbf44138a nginx001:18.16.0</span><br><span class="line">sha256:7fcdd59c72c118bccfc2a6d94953e7d18d4a1afadeea0eee304117e917f0aabe</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">nginx001              18.16.0   7fcdd59c72c1   12 seconds ago   141MB</span><br><span class="line">nginx                 latest    605c77e624dd   22 months ago    141MB</span><br><span class="line">mysql                 latest    3218b38490ce   22 months ago    516MB</span><br><span class="line">centos                latest    5d0da3dc9764   2 years ago      231MB</span><br><span class="line">portainer/portainer   latest    580c0e4e98b0   2 years ago      79.1MB</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED             STATUS             PORTS                                       NAMES</span><br><span class="line">a1b1156666ed   portainer/portainer   &quot;/portainer&quot;             About an hour ago   Up About an hour   0.0.0.0:8088-&gt;9000/tcp, :::8088-&gt;9000/tcp   dreamy_goodall</span><br><span class="line">614bbf44138a   nginx                 &quot;/docker-entrypoint.…&quot;   About an hour ago   Up About an hour   0.0.0.0:515-&gt;80/tcp, :::515-&gt;80/tcp         nginx01</span><br><span class="line">4f9b77aafa46   centos                &quot;/bin/sh -c &#x27;while t…&quot;   5 hours ago         Up 5 hours                                                     tender_hofstadter</span><br></pre></td></tr></table></figure><h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><h4 id="什么是容器数据卷？"><a href="#什么是容器数据卷？" class="headerlink" title="什么是容器数据卷？"></a>什么是容器数据卷？</h4><p>Docker容器数据卷，即Docker Volume（卷）。</p><p>当Docker容器运行的时候，会产生一系列的数据文件，这些数据文件会在关闭Docker容器时，直接消失的。但是其中产生部分的数据内容，我们是希望能够把它给保存起来，另作它用的。</p><p>关闭Docker容器&#x3D;删除内部除了image底层数据的其他全部内容，即删库跑路</p><p>所以我们期望：</p><p>将应用与运行的环境打包形成容器运行，伴随着容器运行产生的数据，我们希望这些数据能够持久化。<br>希望容器之间也能够实现数据的共享、</p><p>Docker容器产生的数据同步到本地,这样关闭容器的时候，数据是在本地的，不会影响数据的安全性。<br>docker的容器卷技术也就是将容器内部目录和本地目录进行一个同步，即挂载。</p><h4 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h4><p>主机目录和容器内的目录是映射关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录 镜像名 /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试，查看容器信息</span></span><br><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/654510aac458853aef35e748.jpg"></p><p>停止容器后，在主机的&#x2F;home&#x2F;ceshi文件夹下，修改文件或新增文件，启动容器，查看容器的&#x2F;home文件夹，发现容器内的数据依旧是同步的</p><ul><li>停止容器。</li><li>宿主机上修改文件。</li><li>启动容器。</li><li>容器内的数据依旧是同步的。</li></ul><h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><p><img src="https://pic.imgdb.cn/item/65451200c458853aef3c1f3c.jpg"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取镜像</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行容器，需要做数据目录挂载。（安装启动mysql，注意：需要配置密码）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">官方启动mysql</span></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my123456 -d mysql:5.7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置启动并同步数据</span></span><br><span class="line">docker run -d -p 8081:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="匿名挂载和具名挂载"><a href="#匿名挂载和具名挂载" class="headerlink" title="匿名挂载和具名挂载"></a>匿名挂载和具名挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如何确定是具名挂载，还是匿名挂载，还是指定路径挂载</span></span><br><span class="line">-v 容器内的路径                # 匿名挂载</span><br><span class="line">-v 卷名:容器内的路径        # 具名挂载</span><br><span class="line">-v /宿主机路径:容器内路径    # 指定路径挂载</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">具名挂载</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ mysql]# docker run -d -p 3344:80 --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line">7cd90c3b2f02f9b84e0dd659f0c8179d777b3c9b6c95e11da4db8a7831d0923e</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ mysql]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     cffb5d0a4839c2deff3d4c3fde9b86795632dd3ee42e256daf68fa3a33d888fd</span><br><span class="line">local     f9515933a80fac5357c7b26742d5870471ae5b21dcef34a79b60e2cc70a4c288</span><br><span class="line">local     juming-nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名挂载</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ mysql]# docker run -d --name nginx03 -v /etc/nginx nginx</span><br><span class="line">c27103b64da61544a65037ae16441f2b1ffe6f02ce0729768724752d8c4751f1</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ mysql]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     3303ec682317c64c023983cc615fa0db5cd6a88b77c4f7361d2594bc68618961</span><br><span class="line">local     cffb5d0a4839c2deff3d4c3fde9b86795632dd3ee42e256daf68fa3a33d888fd</span><br><span class="line">local     f9515933a80fac5357c7b26742d5870471ae5b21dcef34a79b60e2cc70a4c288</span><br><span class="line">local     juming-nginx</span><br></pre></td></tr></table></figure><p><strong>拓展</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 -v 容器内的路径:ro    rw    改变读写权限</span></span><br><span class="line">ro    read only    # 只读</span><br><span class="line">rw    read write    # 可读可写</span><br><span class="line">docker run -d -p 3345:80 --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line">docker run -d -p 3345:80 --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>dockerfile 就是用来构建 docker 镜像的构建文件。    命令脚本！</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本一个一个的命令，每个命令都是一层！</p><ol><li>创建一个名为dockerfile 的文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;volume01&quot;, &quot;volume02&quot;]</span><br><span class="line">CMD echo &quot;-----end-----&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><ol start="2"><li>编译</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f ./dockerfile_songs_note -t songs_note.centos:1.0 .</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6545ab56c458853aef9204f3.jpg"></p><ol start="3"><li>启动容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it 5f6352c38230 /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">图形选中的就是匿名挂载</span></span><br><span class="line">VOLUME [&quot;volume01&quot;, &quot;volume02&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6545ac56c458853aef949ef9.jpg"></p><ol start="4"><li>查看一下卷挂载的路径：docker inspect 容器id</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 95ab48f7bf47</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6545ad0ac458853aef967f53.jpg"></p><h4 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h4><p>多个容器同步数据（临时认父）</p><p>将两个容器或者更多容器之间的数据进行数据共享</p><ol><li>启动3个容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name docker01 songs_note.centos:1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器创建test.js 文件</span></span><br><span class="line">docker run -it -d --name docker02 --volumes-from docker01 songs_note.centos:1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器创建test1.js 文件</span></span><br><span class="line">docker run -it -d --name docker03 --volumes-from docker01 songs_note.centos:1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器创建test2.js 文件</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 容器docker01查看</span></span><br><span class="line">[root@ab2fb91dd8c5 volume01]# ls</span><br><span class="line">test.js  test1.js  test2.js</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除某一个容器</span></span><br><span class="line"> [root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker rm -f f0305bd4a916</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看其他容器文件是否还在</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker exec -it 1c7a3dbaf54e /bin/bash</span><br><span class="line">[root@1c7a3dbaf54e /]# cd volume01</span><br><span class="line">[root@1c7a3dbaf54e volume01]# ls</span><br><span class="line">test.js  test1.js  test2.js</span><br></pre></td></tr></table></figure><ol start="2"><li>多个mysql实现数据共享</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker run -d -p 7777:3306 -v /home/mysql/conf:/etc mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker run -d -p 7777:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>结论</strong>：<br>容器之间配置信息的传递，数据卷容器的生命同期一直持续到没有容器使用为止。<br>但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的！</p><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><h4 id="什么是DockerFile-？"><a href="#什么是DockerFile-？" class="headerlink" title="什么是DockerFile ？"></a>什么是DockerFile ？</h4><p>dockerfile是用来构建docker镜像的文件！命令参数脚本！</p><p><strong>构建步骤</strong>：</p><ol><li>编写一个dockerfile文件</li><li>docker build 构建成为一个镜像</li><li>docker run运行镜像</li><li>docker push发布镜像（DockerHub、阿里云镜像仓库！）</li></ol><h4 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h4><ol><li>每个保留关键字（指令）都是必须是大写字母</li><li>执行从上到下顺序执行</li><li>‘#’ 表示注释</li><li>每一个指令都会创建提交一个新的镜像层，并提交！</li></ol><p>dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p><p>DockerFile：构建文件，定义了一切的步骤，源代码。<br>Dockerlmages：通过DockerFile构建生成的镜像，最终发布和运行的产品。<br>Docker容器：容器就是镜像运行起来提供服务的。</p><h4 id="DockerFile的命令"><a href="#DockerFile的命令" class="headerlink" title="DockerFile的命令"></a>DockerFile的命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM         # 基础镜像，一起从这里开始构建</span><br><span class="line">MAINTAINER   # 镜像作者：姓名-邮箱</span><br><span class="line">RUN          # 镜像构建的时候需要运行的命令</span><br><span class="line">ADD          # 步骤：tomcat镜像，这个tomcat压缩包！添加内容</span><br><span class="line">WORKDIR      # 镜像的工作目录</span><br><span class="line">VOLUME       # 挂载的目录</span><br><span class="line">EXPOSE       # 暴露端口配置</span><br><span class="line">CMD          # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT   # 指定这个容器启动的时候要运行的命令，可以追加命令</span><br><span class="line">ONBUILD      # 当构建一个被继承DockerFile 这个时候就会运行ONBUILD 的指令，触发指令。</span><br><span class="line">CPOY         # 类似ADD，将我们的文件拷贝到镜像中</span><br><span class="line">ENV          # 构建的时候设置环境变量！</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol><li>编写dockerfile的文件</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> batye&lt;<span class="number">1175715363</span>@qq.com&gt;</span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install net-tools</span></span><br><span class="line">EXPOST <span class="number">8001</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;----end----&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><ol start="2"><li>构建文件镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f dockerFile_test -t vim.centos:0.0.1 .</span><br></pre></td></tr></table></figure><ol start="3"><li>原生contos7</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker run -it centos</span><br><span class="line">[root@566d6bd3f48d /]# pwd</span><br><span class="line">/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作目录为根目录</span></span><br><span class="line">[root@566d6bd3f48d /]# vim</span><br><span class="line">bash: vim: command not found</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有vim 工具</span></span><br><span class="line">[root@566d6bd3f48d /]# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><ol start="4"><li>vim.centos增加配置以后的镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker run -it vim.centos:0.0.1</span><br><span class="line">[root@53bfee4c6557 local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line">[root@53bfee4c6557 local]# vim</span><br><span class="line"></span><br><span class="line">[root@53bfee4c6557 local]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.5  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:05  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 8  bytes 656 (656.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@53bfee4c6557 local]# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><ol start="5"><li>列出本地进行的变更历史</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history 692aba72d901</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6545f262c458853aef77e132.jpg" alt="docker history 692aba72d901"></p><ol start="6"><li>CMD和ENTRYPOINT区别</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMD            # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT     # 指定这个容器启动的时候要运行的命令，可以追加命令</span><br></pre></td></tr></table></figure><ul><li><p>测试CMD</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 编写dockerfile文件</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# vim dockerfile-cmd-test</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# cat dockerfile-cmd-test</span><br><span class="line">FROM centos:7</span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 构建镜像</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker build -f dockerfile-cmd-test -t cmdtest .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. run运行，发现我们的<span class="string">&quot;ls -a&quot;</span>命令生效、执行</span></span><br><span class="line">docker run 06f2cc65ea4a</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 06f2cc65ea4a </span><br></pre></td></tr></table></figure><p>  <img src="https://pic.imgdb.cn/item/6545f420c458853aef7e35a4.jpg" alt="docker run 06f2cc65ea4a "></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 我们先追加一个命令<span class="string">&quot;l&quot;</span>,构成<span class="string">&quot;ls -al&quot;</span>命令，发现报错</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker run ec0d2dd226b3 -l</span><br><span class="line">docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: &quot;-l&quot;: executable file not found in $PATH: unknown.</span><br><span class="line">ERRO[0000] error waiting for container:</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">原因：CMD命令的情况下，<span class="string">&quot;-l&quot;</span>替换了CMD[<span class="string">&quot;1s&quot;</span>，<span class="string">&quot;-a&quot;</span>]命令，因为<span class="string">&quot;-l&quot;</span>不是命令，所以报错！</span></span><br></pre></td></tr></table></figure></li><li><p>测试ENTRYPOINT</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 编写dockerfile文件</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# vim dockerfile-entrypoint-test</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# cat dockerfile-entrypoint-test</span><br><span class="line">FROM centos:7</span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 构建镜像</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker build -f dockerfile-entrypoint-test -t entrypointtest .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. run运行，发现我们的<span class="string">&quot;ls -a&quot;</span>命令生效、执行</span></span><br><span class="line">docker run 5184c7d459a0</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6545fc1bc458853aef99f91e.jpg" alt="docker run 5184c7d459a0"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 5184c7d459a0 -l</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6545fb94c458853aef982c74.jpg" alt="docker run 5184c7d459a0 -l"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">原因：ENTRYPOINT命令的情况下，<span class="string">&quot;-l&quot;</span>追加在ENTRYPOINT [<span class="string">&quot;1s&quot;</span>，<span class="string">&quot;-a&quot;</span>]命令后面，得到<span class="string">&quot;ls -al&quot;</span>的命令，所以命令正常执行！</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（我们的追加命令，是直接拼接在我们的ENTRYPOINT命令的后面）</span></span><br></pre></td></tr></table></figure></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">当Docker容器运行的时候，会产生一系列的数据文件，这些数据文件会在关闭Docker容器时，直接消失的。但是其中产生部分的数据内容，我们是希望能够把它给保存起来，另作它用的。。</summary>
    
    
    
    <category term="linux" scheme="https://note.batype.com/categories/linux/"/>
    
    <category term="docker" scheme="https://note.batype.com/categories/linux/docker/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="linux" scheme="https://note.batype.com/tags/linux/"/>
    
    <category term="docker" scheme="https://note.batype.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Scp 复制文件到服务器</title>
    <link href="https://note.batype.com/linux/use/scp.html"/>
    <id>https://note.batype.com/linux/use/scp.html</id>
    <published>2023-11-02T13:24:32.000Z</published>
    <updated>2023-11-09T09:04:39.841Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="复制文件夹到服务器"><a href="#复制文件夹到服务器" class="headerlink" title="复制文件夹到服务器"></a>复制文件夹到服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r key root@4*.1*8.1*0.70:/etc/nginx/conf.d/cert</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">Scp 复制文件到服务器。</summary>
    
    
    
    <category term="linux" scheme="https://note.batype.com/categories/linux/"/>
    
    <category term="scp" scheme="https://note.batype.com/categories/linux/scp/"/>
    
    
    <category term="linux" scheme="https://note.batype.com/tags/linux/"/>
    
    <category term="scp" scheme="https://note.batype.com/tags/scp/"/>
    
  </entry>
  
  <entry>
    <title>React 实现原理</title>
    <link href="https://note.batype.com/react/implement.html"/>
    <id>https://note.batype.com/react/implement.html</id>
    <published>2023-10-27T02:58:50.000Z</published>
    <updated>2023-11-09T03:19:13.310Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h3 id="实现jsx"><a href="#实现jsx" class="headerlink" title="实现jsx"></a>实现jsx</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    hello<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &quot;<span class="attr">red</span>&quot; &#125;&#125;&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编译后"><a href="#编译后" class="headerlink" title="编译后"></a>编译后</h3><p><img src="https://pic.imgdb.cn/item/653b2718c458853aef75775a.jpg" alt="jsx 编译之后"></p><h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><ol><li><p>jsx-dev-runtime.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; jsxDEV &#125; <span class="keyword">from</span> <span class="string">&quot;./jsx/ReactJSXElement&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ReactJSXElement.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hasOwnProperty <span class="keyword">from</span> <span class="string">&#x27;../../shared/hasOwnProperty&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dom 类型</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">REACT_ELEMENT_TYPE</span>  &#125; <span class="keyword">from</span> <span class="string">&#x27;../../shared/ReactSymbols&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">RESERVED_PROPS</span> = &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">ref</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">__self</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">__source</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasValidKey</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> config.<span class="property">key</span> !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasValidRef</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> config.<span class="property">ref</span> !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReactElement 创建</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ReactElement</span>(<span class="params">type, key, ref, props, owner</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 这个标签允许我们唯一地将其标识为React元素</span></span><br><span class="line">        <span class="attr">$$typeof</span>: <span class="variable constant_">REACT_ELEMENT_TYPE</span>,</span><br><span class="line">        type,</span><br><span class="line">        key,</span><br><span class="line">        ref,</span><br><span class="line">        props,</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">jsxDEV</span>(<span class="params">type, config</span>) &#123;</span><br><span class="line">    <span class="comment">// 提取保留名称</span></span><br><span class="line">    <span class="keyword">const</span> props = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> key = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> ref = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">hasValidKey</span>(config)) &#123;</span><br><span class="line">        key = config.<span class="property">key</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">hasValidRef</span>(config)) &#123;</span><br><span class="line">        ref = config.<span class="property">ref</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> propName <span class="keyword">in</span> config) &#123;</span><br><span class="line">        <span class="keyword">if</span>(hasOwnProperty.<span class="title function_">call</span>(config, propName) &amp;&amp;</span><br><span class="line">        !<span class="variable constant_">RESERVED_PROPS</span>.<span class="title function_">hasOwnProperty</span>(propName)</span><br><span class="line">        ) &#123;</span><br><span class="line">            props[propName] = config[propName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">ReactElement</span>(type, key, ref, props)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>hasOwnProperty.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; hasOwnProperty &#125; = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> hasOwnProperty;</span><br></pre></td></tr></table></figure></li><li><p>ReactSymbols.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于标记类似 ReactElement 类型的符号。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">REACT_ELEMENT_TYPE</span> = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;react.element&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="根节点和根fiber"><a href="#根节点和根fiber" class="headerlink" title="根节点和根fiber"></a>根节点和根fiber</h3><ul><li>需要给react提供一个根节点，之后每个节点都是渲染在根节点内部的。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>根fiber可以通俗理解为一个装着所有虚拟dom的容器，每个虚拟dom又单独对应一个fiber，</li><li>渲染可以以单个fiber为单位暂停 &#x2F; 恢复。</li><li>需要创建两个根 <code>fiber</code> 去相互替换展示。</li></ul><h4 id="创建根节点"><a href="#创建根节点" class="headerlink" title="创建根节点"></a>创建根节点</h4><p>更改main.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(root)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先要建一个<code>FiberRootNode</code>根节点，也就是所有DOM的根，本质就是 <code>div#root</code>。</p><p>根节点和<code>fiber</code>关系：</p><p><img src="https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg" alt="根节点和`fiber`关系"></p><p><code>FiberRootNode</code> 和 <code>HostRootFiber</code> 中间使用 <code>current</code> 相连；</p><p><code>HostRootFiber</code> 和 <code>FiberRootNode</code> 中间使用 <code>stateNode</code> 相连。</p><h4 id="实现createRoot"><a href="#实现createRoot" class="headerlink" title="实现createRoot"></a>实现createRoot</h4><p>分这么多文件的主要是因为很多其他逻辑要处理，暂时都给省略了。虽然比较绕，但其实本质就是把<code>div#root</code>做了几层包装。</p><ol><li><p>client.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&quot;./src/client/ReactDOMRoot&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>ReactDOMRoot.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContainer &#125; <span class="keyword">from</span> <span class="string">&quot;react-reconciler/src/ReactFiberReconciler&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ReactDOMRoot</span>(<span class="params">internalRoot</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">_internalRoot</span> = internalRoot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个根 实际就是一个被包装过的真实DOM节点</span></span><br><span class="line"><span class="comment">// container: div#root</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createRoot</span>(<span class="params">container</span>) &#123;</span><br><span class="line"><span class="comment">// 1. 创建容器   6. 接收到有#root的容器</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">createContainer</span>(container);</span><br><span class="line"><span class="comment">// 7. 容器传给 ReactDOMRoot</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReactDOMRoot</span>(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ReactFiberReconciler.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createFiberRoot &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactFiberRoot&quot;</span>;</span><br><span class="line"><span class="comment">// 创建容器 containerInfo: 容器信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createContainer</span>(<span class="params">containerInfo</span>) &#123;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">createFiberRoot</span>(containerInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ReactFiberRoot.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FiberRootNode</span>(<span class="params">containerInfo</span>) &#123;</span><br><span class="line"><span class="comment">// 4. 把DOM节点放到容器</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">containerInfo</span> = containerInfo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createFiberRoot</span>(<span class="params">containerInfo</span>) &#123;</span><br><span class="line"><span class="comment">// 3. 创建根容器</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="keyword">new</span> <span class="title class_">FiberRootNode</span>(containerInfo);</span><br><span class="line"><span class="comment">// 这个位置在下一步要创建 FiberRoot</span></span><br><span class="line"><span class="comment">// 5. 把容器返回出去</span></span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>现在根节点<code>FiberRootNode</code>创建好了，最后<code>root</code>的打印结果：</p><p><img src="https://pic.imgdb.cn/item/653b2e66c458853aef8a195c.jpg" alt="FiberRootNode"></p><h4 id="fiber"><a href="#fiber" class="headerlink" title="fiber"></a>fiber</h4><p>在创建根fiber之前先了解一下fiber</p><h4 id="为什么需要有fiber？"><a href="#为什么需要有fiber？" class="headerlink" title="为什么需要有fiber？"></a>为什么需要有fiber？</h4><ul><li>react以前没有fiber整个计算过程不能暂停，会导致时间过长</li><li>浏览器刷新频率为 60Hz,大概 16.6 毫秒渲染一次，而 JS 线程和渲染线程是互斥的，所以如果 JS 线程执行任务时间超过 16.6ms 的话，就会导致掉帧、卡顿，解决方案就是 React 利用空闲的时间进行更新，不影响渲染进行的渲染</li><li>把一个耗时任务切分成一个个小任务，分布在每一帧里。这个的方式就叫时间切片</li></ul><p>我们需要把渲染变成一个可中断，可暂停，可恢复的过程。<br>注：可以去搜一下 requestIdleCallback API ，react封装了一个类似的方法让每帧时间固定 5ms。</p><h4 id="什么是fiber？"><a href="#什么是fiber？" class="headerlink" title="什么是fiber？"></a>什么是fiber？</h4><ul><li><p>Fiber 是一个执行单元</p><p>  Fiber 是一个执行单元,每次执行完一个执行单元，React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去。</p><p>  react 中一帧的过程：</p><p>  <img src="https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg" alt="react 中一帧的过程"></p></li><li><p>Fiber 是一种数据结构<br>  React 目前的做法是使用链表, 每个虚拟节点内部表示为一个Fiber<br>  从顶点开始遍历<br>  如果有第一个儿子，先遍历第一个儿子<br>  如果没有第一个儿子，标志着此节点遍历完成<br>  如果有弟弟遍历弟弟<br>  如果有没有下一个弟弟，返回父节点标识完成父节点遍历，如果有叔叔遍历叔叔<br>  没有父节点遍历结束</p><p>  遍历结构：<br>  <img src="https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg" alt="遍历结构"></p><p>  遍历过程：<br>  <img src="https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg" alt="遍历过程"></p></li></ul><h4 id="创建根fiber"><a href="#创建根fiber" class="headerlink" title="创建根fiber"></a>创建根fiber</h4><p>真实DOM需要一个根容器，<code>fiber</code>同样需要一个根<code>fiber</code>。</p><p>相当于每个虚拟DOM都会创建一个对应的<code>Fiber</code>，再创建真实DOM</p><p>虚拟DOM &#x3D;&gt; Fiber &#x3D;&gt; 真实DOM</p><p>在刚刚创建FiberRootNode的函数里去创建<code>HostRootFiber</code>并互相指向对方。</p><p><img src="https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg" alt="根节点和`fiber`关系"></p><ol><li><p>ReactFiberRoot.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createHostRootFiber &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactFiber&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FiberRootNode</span>(<span class="params">containerInfo</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">containerInfo</span> = containerInfo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createFiberRoot</span>(<span class="params">containerInfo</span>) &#123;</span><br><span class="line"><span class="comment">// 之前创建的根节点容器</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="keyword">new</span> <span class="title class_">FiberRootNode</span>(containerInfo);</span><br><span class="line"><span class="comment">// 1. 创建根fiber. hostRoot就是根节点dev#root</span></span><br><span class="line"><span class="comment">// 未初始化的fiber</span></span><br><span class="line"><span class="keyword">const</span> uninitializedFiber = <span class="title function_">createHostRootFiber</span>();</span><br><span class="line"><span class="comment">// 当前渲染页面的fiber.</span></span><br><span class="line"><span class="comment">// 6. 根容器的current指向当前的根fiber</span></span><br><span class="line">root.<span class="property">current</span> = uninitializedFiber;</span><br><span class="line">uninitializedFiber.<span class="property">stateNode</span> = root;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ReactFiber.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 工作标签</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HostRoot</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactWorkTags&quot;</span>;</span><br><span class="line"><span class="comment">// 5. 副作用标识</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NoFlags</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactFiberFlags&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">FiberNode</span>(<span class="params">tag, pendingProps, key</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tag</span> = tag;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">type</span> = <span class="literal">null</span>; <span class="comment">// fiber类型, 来自于虚拟DOM节点的type   (span h1 p)</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">stateNode</span> = <span class="literal">null</span>; <span class="comment">// 此fiber对应的真实DOM节点</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">return</span> = <span class="literal">null</span>; <span class="comment">// 指向父节点</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">child</span> = <span class="literal">null</span>; <span class="comment">// 指向第一个子节点</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sibling</span> = <span class="literal">null</span>; <span class="comment">// 指向弟弟</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">pendingProps</span> = pendingProps; <span class="comment">// 等待生效的属性</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">memoizedProps</span> = <span class="literal">null</span>; <span class="comment">// 已经生效的属性</span></span><br><span class="line"><span class="comment">// 虚拟DOM会提供pendingProps给创建fiber的属性，等处理完复制给memoizedProps</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个fiber还会有自己的状态，每一种fiber状态存的类型都不一样</span></span><br><span class="line"><span class="comment">// 比如：类组件对应的fiber存的就是实例的状态，HostRoot存的就是要渲染的元素</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">memoizedState</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个fiber可能还有自己的更新队列</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">updateQueue</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. &quot;./ReactFiberFlags&quot;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">flags</span> = <span class="title class_">NoFlags</span>; <span class="comment">// 副作用标识，表示对此fiber节点进行何种操作</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">subtreeFlags</span> = <span class="title class_">NoFlags</span>; <span class="comment">// 子节点对应的副作用标识</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">alternate</span> = <span class="literal">null</span>; <span class="comment">// 轮替 (缓存了另一个fiber节点实例) diff时用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createFiberNode</span>(<span class="params">tag, pendingProps, key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FiberNode</span>(tag, pendingProps, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createHostRootFiber</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">createFiberNode</span>(<span class="title class_">HostRoot</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ReactWorkTags.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每种虚拟DOM都会对应自己的fiber的类型</span></span><br><span class="line"><span class="comment">// 根Fiber的Tag</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HostRoot</span> = <span class="number">3</span>; <span class="comment">// 根节点</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HostComponent</span> = <span class="number">5</span>; <span class="comment">// 原生节点 span div p</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HostText</span> = <span class="number">6</span>; <span class="comment">// 纯文本节点</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ReactFiberFlags.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有任何操作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">NoFlags</span> = <span class="number">0b000000000000000000000000000000</span>;</span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Placement</span> = <span class="number">0b000000000000000000000000000010</span>;</span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Update</span> = <span class="number">0b000000000000000000000000000100</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看最后root的打印结果：根fiber和节点容器互相指向</p></li></ol><p><img src="https://pic.imgdb.cn/item/653b5beac458853aef1a1a12.jpg" alt="根fiber和节点容器互相指向"></p><pre><code>current指的是当前根容器正在显示或者已经渲染好的fiber树</code></pre><p>react采用了双缓存区的技术，可以把将要显示的图片绘制在缓存区中，需要展示的时候直接拿来替换掉。 alternate 轮替。</p><p><img src="https://pic.imgdb.cn/item/653bc1f2c458853aefb79377.jpg"></p><h4 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h4><p>打开ReactFiberRoot.js文件，在return root之前加一行代码，给根fiber加上一个更新队列，之后更新渲染任务都是放到这个队列里面。</p><ol><li><p>ReactFiberRoot.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">import</span> &#123; initialUpdateQueue &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactFiberClassUpdateQueue&quot;</span>;</span><br><span class="line">...</span><br><span class="line">+ <span class="title function_">initialUpdateQueue</span>(uninitializedFiber);</span><br><span class="line"><span class="keyword">return</span> root;</span><br></pre></td></tr></table></figure></li><li><p>ReactFiberClassUpdateQueue.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initialUpdateQueue</span>(<span class="params">fiber</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建一个更新队列</span></span><br><span class="line">    <span class="comment">// pending 是循环链表</span></span><br><span class="line">    <span class="keyword">const</span> queue = &#123;</span><br><span class="line">        <span class="attr">shared</span>: &#123;</span><br><span class="line">            <span class="attr">pending</span>: <span class="literal">null</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fiber.<span class="property">updateQueue</span> = queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>如下图所示在fiber树中增加了updateQueue 队列</p><p><img src="https://pic.imgdb.cn/item/653bc2bdc458853aefbd2de4.jpg" alt="updateQueue 队列"></p><h3 id="构建轮替的根fiber"><a href="#构建轮替的根fiber" class="headerlink" title="构建轮替的根fiber"></a>构建轮替的根fiber</h3><h4 id="fiber是怎么运作的"><a href="#fiber是怎么运作的" class="headerlink" title="fiber是怎么运作的"></a>fiber是怎么运作的</h4><pre><code>为什么要轮替在上一篇已经说过了，这一篇写一下fiber的单项循环链表。</code></pre><p>假如我们有一个jsx 的dom结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;A1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;B1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;C1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;C2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;B2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在以前没有用fiber渲染是这样的，这个渲染方式是递归渲染如果数据很多就可能会卡顿。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vDom = &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;A1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;props&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;className&quot;</span>: <span class="string">&quot;A1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">                <span class="string">&quot;key&quot;</span>: <span class="string">&quot;B1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;props&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;className&quot;</span>: <span class="string">&quot;B1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;key&quot;</span>: <span class="string">&quot;C1&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;props&quot;</span>: &#123; <span class="string">&quot;className&quot;</span>: <span class="string">&quot;C1&quot;</span>&#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;key&quot;</span>: <span class="string">&quot;C2&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;props&quot;</span>: &#123;<span class="string">&quot;className&quot;</span>: <span class="string">&quot;C2&quot;</span>&#125;,</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">                <span class="string">&quot;key&quot;</span>: <span class="string">&quot;B2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;props&quot;</span>: &#123;<span class="string">&quot;className&quot;</span>: <span class="string">&quot;B2&quot;</span>&#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把vDom一气呵成渲染到页面</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">element, container</span>) &#123;</span><br><span class="line">    <span class="comment">// 把虚拟DOM创建成真实DOM</span></span><br><span class="line">    <span class="keyword">let</span> dom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(element.<span class="property">type</span>);</span><br><span class="line">    <span class="comment">// 遍历属性</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(element.<span class="property">props</span>).<span class="title function_">filter</span>(<span class="function"><span class="params">key</span> =&gt;</span> key !== <span class="string">&#x27;children&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        dom[key] = element.<span class="property">props</span>[key];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 把子节点渲染到父节点上</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(element.<span class="property">props</span>.<span class="property">children</span>))&#123;</span><br><span class="line">        element.<span class="property">props</span>.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span>=&gt;</span><span class="title function_">render</span>(child,dom));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把真实节点挂载到容器</span></span><br><span class="line">    container.<span class="title function_">appendChild</span>(dom);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(element, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><p>下面是fiber的渲染方式，可以中断、暂停、恢复渲染。深度优先</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把虚拟DOM构建成Fiber树</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">A1</span> = &#123; <span class="attr">type</span>: <span class="string">&#x27;div&#x27;</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">&#x27;A1&#x27;</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">B1</span> = &#123; <span class="attr">type</span>: <span class="string">&#x27;div&#x27;</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">&#x27;B1&#x27;</span> &#125;, <span class="attr">return</span>: <span class="variable constant_">A1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">B2</span> = &#123; <span class="attr">type</span>: <span class="string">&#x27;div&#x27;</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">&#x27;B2&#x27;</span> &#125;, <span class="attr">return</span>: <span class="variable constant_">A1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">C1</span> = &#123; <span class="attr">type</span>: <span class="string">&#x27;div&#x27;</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">&#x27;C1&#x27;</span> &#125;, <span class="attr">return</span>: <span class="variable constant_">B1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">C2</span> = &#123; <span class="attr">type</span>: <span class="string">&#x27;div&#x27;</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">&#x27;C2&#x27;</span> &#125;, <span class="attr">return</span>: <span class="variable constant_">B1</span> &#125;;</span><br><span class="line"><span class="variable constant_">A1</span>.<span class="property">child</span> = <span class="variable constant_">B1</span>;</span><br><span class="line"><span class="variable constant_">B1</span>.<span class="property">sibling</span> = <span class="variable constant_">B2</span>;</span><br><span class="line"><span class="variable constant_">B1</span>.<span class="property">child</span> = <span class="variable constant_">C1</span>;</span><br><span class="line"><span class="variable constant_">C1</span>.<span class="property">sibling</span> = <span class="variable constant_">C2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下一个工作单元</span></span><br><span class="line"><span class="keyword">let</span> nextUnitOfWork = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasRemainingTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 模拟有时间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// render 工作循序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">workLoop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 有下一个节点并且有时间时</span></span><br><span class="line">    <span class="comment">// 每一个任务执行完都可以放弃，让浏览器执行更高优先级的任务</span></span><br><span class="line">    <span class="keyword">while</span>(nextUnitOfWork &amp;&amp; <span class="title function_">hasRemainingTime</span>()) &#123;</span><br><span class="line">        <span class="comment">// 执行下一个任务并返回下一个任务</span></span><br><span class="line">        nextUnitOfWork = <span class="title function_">performUnitOfWork</span>(fiber);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render 阶段结束&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 执行完后返回下一个节点</span></span><br><span class="line"><span class="string">function performUnitOfWork(fiber) &#123;</span></span><br><span class="line"><span class="string">    // 执行渲染</span></span><br><span class="line"><span class="string">    let child = beginWork(fiber);</span></span><br><span class="line"><span class="string">    if(child) &#123;</span></span><br><span class="line"><span class="string">        return child;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    // 如果没有子节点说明当前节点已经完成了渲染工作</span></span><br><span class="line"><span class="string">    while(fiber) &#123;</span></span><br><span class="line"><span class="string">        // 可以结束此fiber的渲染了 </span></span><br><span class="line"><span class="string">        completeUnitOfWork(fiber);</span></span><br><span class="line"><span class="string">        // 如果有弟弟就返回弟弟</span></span><br><span class="line"><span class="string">        if(fiber.sibling) &#123;</span></span><br><span class="line"><span class="string">            return fiber.sibling;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        // 否则就返回上一层</span></span><br><span class="line"><span class="string">        fiber = fiber.return;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function beginWork(fiber) &#123;</span></span><br><span class="line"><span class="string">    console.log(&#x27;</span>beginWork<span class="string">&#x27;, fiber.props.className);</span></span><br><span class="line"><span class="string">    // 执行完成后返回第一个子节点</span></span><br><span class="line"><span class="string">    return fiber.child;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function completeUnitOfWork(fiber) &#123;</span></span><br><span class="line"><span class="string">    // 标记当前这个fiber街道已经完成</span></span><br><span class="line"><span class="string">    console.log(&#x27;</span>completeUnitOfWork<span class="string">&#x27;, fiber.props.className);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>上面的这些代码是预先熟悉一下，fiber 是怎么运行，下面正式进入构建的代码逻辑。</p><h4 id="队列的单向链表"><a href="#队列的单向链表" class="headerlink" title="队列的单向链表"></a>队列的单向链表</h4><ol><li><p>在main.js 中增加下面代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root.<span class="title function_">render</span>(element)</span><br></pre></td></tr></table></figure></li><li><p>ReactDOMRoot.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; updateContainer &#125; <span class="keyword">from</span> <span class="string">&#x27;../react-reconciler/src/ReactFiberReconciler&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="title class_">ReactDomRoot</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">render</span> = <span class="keyword">function</span> (<span class="params">children</span>) &#123;</span><br><span class="line"><span class="comment">// 1. 获取容器</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="variable language_">this</span>.<span class="property">_internalRoot</span>;</span><br><span class="line"><span class="title function_">updateContainer</span>(children, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ReactFiberReconciler.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createUpdate, enqueueUpdate &#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactFiberClassUpdateQueue&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新容器, 把虚拟DOM变成真实DOM 插入到container容器中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; element 虚拟DOM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; container 容器   FiberRootNode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateContainer</span>(<span class="params">element, container</span>) &#123;</span><br><span class="line"><span class="comment">// 获取根fiber</span></span><br><span class="line"><span class="keyword">const</span> current = container.<span class="property">current</span>;</span><br><span class="line"><span class="comment">// 创建更新队列</span></span><br><span class="line"><span class="keyword">const</span> update = <span class="title function_">createUpdate</span>();</span><br><span class="line">update.<span class="property">payload</span> = &#123;element&#125;;</span><br><span class="line"><span class="comment">// 3. 把此更新任务对象添加到current这个根Fiber的更新队列里</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> root = <span class="title function_">enqueueUpdate</span>(current, update);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ReactFiberClassUpdateQueue.js</p></li></ol><p><img src="https://pic.imgdb.cn/item/653e40f6c458853aefe48306.jpg" alt="ReactFiberClassUpdateQueue.js"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; markUpdateLaneFromFiberToRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactFiberConcurrentUpdate&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 更新状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">UpdateState</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> update = &#123;<span class="attr">tag</span>: <span class="title class_">UpdateState</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> update;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">enqueueUpdate</span>(<span class="params">fiber, update</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取根fiber的更新队列 (上一篇最后加的)</span></span><br><span class="line">    <span class="keyword">const</span> updateQueue = fiber.<span class="property">updateQueue</span>;</span><br><span class="line">    <span class="comment">// 获取等待执行的任务</span></span><br><span class="line">    <span class="keyword">const</span> pending = updateQueue.<span class="property">shared</span>.<span class="property">pending</span>;</span><br><span class="line">    <span class="comment">// 说明初始化的状态</span></span><br><span class="line">    <span class="keyword">if</span>(pending === <span class="literal">null</span>) &#123;</span><br><span class="line">        update.<span class="property">next</span> = update;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        update.<span class="property">next</span> = pending.<span class="property">next</span>;</span><br><span class="line">        pending.<span class="property">next</span> = update;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让等待更新指向当前update 开始更新</span></span><br><span class="line">    updateQueue.<span class="property">shared</span>.<span class="property">pending</span> = update;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从当前的fiber 到返回找到并返回根节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">markUpdateLaneFromFiberToRoot</span>(fiber);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="冒泡获取根节点容器"><a href="#冒泡获取根节点容器" class="headerlink" title="冒泡获取根节点容器"></a>冒泡获取根节点容器</h4><p>ReactFiberConcurrentUpdate.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HostRoot</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactWorkTags&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本来此文件要处理更新优先级问题，把不同的fiber优先级冒泡一路标记到根节点。</span></span><br><span class="line"><span class="comment"> * 目前现在值实现向上冒泡找到根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">sourceFiber</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">markUpdateLaneFromFiberToRoot</span>(<span class="params">sourceFiber</span>) &#123;</span><br><span class="line">    <span class="comment">// 当前父fiber</span></span><br><span class="line">    <span class="keyword">let</span> parent = sourceFiber.<span class="property">return</span>;</span><br><span class="line">    <span class="comment">// 当前fiber</span></span><br><span class="line">    <span class="keyword">let</span> node = sourceFiber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一直找到 父fiber 为null</span></span><br><span class="line">    <span class="keyword">while</span>(parent !== <span class="literal">null</span>) &#123;</span><br><span class="line">        node = parent;</span><br><span class="line">        parent = parent.<span class="property">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回当前root节点</span></span><br><span class="line">    <span class="keyword">if</span>(node.<span class="property">tag</span> === <span class="title class_">HostRoot</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> root = node.<span class="property">stateNode</span>;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="调度更新"><a href="#调度更新" class="headerlink" title="调度更新"></a>调度更新</h4><p>到目前为止更新对象已经添加到了根fiber的更新队列上，现在需要开始进行调度更新。</p><ol><li><p>ReactFiberReconciler.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; scheduleUpdateOnFiber &#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactFiberWorkLoop&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateContainer</span>(<span class="params">element, container</span>) &#123;</span><br><span class="line">...</span><br><span class="line">+ <span class="title function_">scheduleUpdateOnFiber</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ReactFiberWorkLoop.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; scheduleCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;./scheduler&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">scheduleUpdateOnFiber</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="title function_">ensureRootIsScheduled</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ensureRootIsScheduled</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">// 告诉浏览器要执行performConcurrentWorkOnRoot 参数定死为root</span></span><br><span class="line">    <span class="title function_">scheduleCallback</span>(performConcurrentWorkOnRoot.<span class="title function_">bind</span>(<span class="literal">null</span>, root));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">performConcurrentWorkOnRoot</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(root, <span class="string">&#x27;performConcurrentWorkOnRoot&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;scheduler&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./src/forks/Scheduler&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;forks&#x2F;Scheduler.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处后面会实现优先级队列</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">scheduleCallback</span>(<span class="params">callback</span>) &#123;</span><br><span class="line"><span class="title function_">requestIdleCallback</span>(callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印FiberRootNode</p></li></ol><p><img src="https://pic.imgdb.cn/item/653e496bc458853aef00deb1.jpg" alt="输出的FiberRootNode"></p><h3 id="工作循环"><a href="#工作循环" class="headerlink" title="工作循环"></a>工作循环</h3><p><img src="https://pic.imgdb.cn/item/653e4d86c458853aef11c6ea.jpg" alt="工作循环"></p><p>我们已经创建好一个根节点容器和一个空的根fiber（黑色部分），在图中看到还有一个正在构建中的根fiber。<br>根节点的current指的是当前的根fiber，是会和构建中的根fiber轮替工作（双缓冲），现在需要构建一个新的根fiber并且把fiber树写在里面。<br>一个是表示当前页面已经渲染完成的fiber树，一个是正在构建中还没有生效、更没有更新到页面的fiber树</p><h4 id="建立新的hostRootFiber"><a href="#建立新的hostRootFiber" class="headerlink" title="建立新的hostRootFiber"></a>建立新的hostRootFiber</h4><ol><li><p>ReactFiberWorkLoop.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; creatWorkInProgress &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactFiber&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正在进行中的工作</span></span><br><span class="line"><span class="keyword">let</span> workInProgress = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * (被告知浏览器确保执行的函数)</span></span><br><span class="line"><span class="comment"> * 根据当前的fiber节点构建fiber树, 创建真实的dom节点, 插入到容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">performConcurrentWorkOnRoot</span>(<span class="params">root</span>) &#123;</span><br><span class="line"><span class="comment">// 1. 初次渲染的时候以同步方式渲染根节点, 因为要尽快展示 (初始化)</span></span><br><span class="line"><span class="title function_">renderRootSync</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prepareFreshStack</span>(<span class="params">root</span>) &#123;</span><br><span class="line"><span class="comment">// 5. 根据老fiber构建新fiber (初始化)</span></span><br><span class="line">workInProgress = <span class="title function_">creatWorkInProgress</span>(root.<span class="property">current</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderRootSync</span>(<span class="params">root</span>) &#123;</span><br><span class="line"><span class="comment">// 2. 先构建了一个空的栈</span></span><br><span class="line"><span class="title function_">prepareFreshStack</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ReactFiber.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据老fiber和新的属性构建新fiber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; current 老fiber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; pendingProps 新的属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">creatWorkInProgress</span>(<span class="params">current, pendingProps</span>) &#123;</span><br><span class="line">    <span class="comment">// 3. 拿到老fiber的轮替 第一次没有 (初始化)</span></span><br><span class="line">    <span class="keyword">let</span> workInProgress = current.<span class="property">alternate</span>;</span><br><span class="line">    <span class="keyword">if</span>(workInProgress === <span class="literal">null</span>) &#123;</span><br><span class="line">        workInProgress = <span class="title function_">createFiberNode</span>(current.<span class="property">tag</span>, pendingProps, current.<span class="property">key</span>);</span><br><span class="line">        workInProgress.<span class="property">type</span> = current.<span class="property">type</span>;</span><br><span class="line">        workInProgress.<span class="property">stateNode</span> = current.<span class="property">stateNode</span>;</span><br><span class="line"></span><br><span class="line">        workInProgress.<span class="property">stateNode</span> = current;</span><br><span class="line">        current.<span class="property">alternate</span> =  workInProgress;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果有，说明是更新，只能改属性就可以复用</span></span><br><span class="line">        workInProgress.<span class="property">pendingProps</span> = current.<span class="property">pendingProps</span>;</span><br><span class="line">        workInProgress.<span class="property">type</span> = current.<span class="property">type</span>;</span><br><span class="line">        workInProgress.<span class="property">flags</span> = current.<span class="property">flags</span>;</span><br><span class="line">        workInProgress.<span class="property">subtreeFlags</span> = <span class="title class_">NoFlags</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 复制属性</span></span><br><span class="line">    workInProgress.<span class="property">child</span> = current.<span class="property">child</span>;</span><br><span class="line">    workInProgress.<span class="property">memoizedProps</span> = current.<span class="property">memoizedProps</span>;</span><br><span class="line">    workInProgress.<span class="property">memoizedState</span> = current.<span class="property">memoizedState</span>;</span><br><span class="line">    workInProgress.<span class="property">updateQueue</span> = current.<span class="property">updateQueue</span>;</span><br><span class="line">    workInProgress.<span class="property">sibling</span> = current.<span class="property">sibling</span>;</span><br><span class="line">    workInProgress.<span class="property">index</span> = current.<span class="property">index</span>;</span><br><span class="line">    <span class="keyword">return</span> workInProgress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="执行工作单元"><a href="#执行工作单元" class="headerlink" title="执行工作单元"></a>执行工作单元</h4><p>然后在新的根fiber里构建更新fiber树</p><ol><li><p>ReactFiberWorkLoop.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; beginWork &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactFiberBeginWork&quot;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderRootSync</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">// 2. 先构建一个空的栈</span></span><br><span class="line">    <span class="title function_">prepareFreshStack</span>(root);</span><br><span class="line">    <span class="comment">// 1. 现在的 workInProgress 是新的根fiber</span></span><br><span class="line">    <span class="title function_">workLoopSync</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工作同步循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">workLoopSync</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span>(workInProgress !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 2. 执行工作单元</span></span><br><span class="line">        <span class="title function_">performUnitOfWork</span>(workInProgress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">performUnitOfWork</span>(<span class="params">unitOfWork</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> current = unitOfWork.<span class="property">alternate</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> next = <span class="title function_">beginWork</span>(current, unitOfWork);</span><br><span class="line"></span><br><span class="line">    unitOfWork.<span class="property">memoizedProps</span> = unitOfWork.<span class="property">pendingProps</span>;</span><br><span class="line">    <span class="keyword">if</span>(next === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 说明已经完成</span></span><br><span class="line">        <span class="comment">// 完成工作单元</span></span><br><span class="line">        <span class="comment">// completeUnitOfWork(); // 这个方法之后写 先模拟一下完成工作</span></span><br><span class="line">        workInProgress = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果有子节点就成为下一个工作单元</span></span><br><span class="line">        workInProgress = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ReactFiberBeginWork.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HostComponent</span>, <span class="title class_">HostRoot</span>, <span class="title class_">HostText</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactWorkTags&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; processUpdateQueue &#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactFiberClassUpdateQueue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 5. 根据 `新的` 虚拟dom去构建  `新的` fiber链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; current 老fiber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; workInProgress 新fiber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 下一个工作单元</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">beginWork</span>(<span class="params">current, workInProgress</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beginWork&quot;</span>, workInProgress);</span><br><span class="line">    <span class="comment">// 判断类型不同处理方式返回子节点或者弟弟</span></span><br><span class="line">    <span class="keyword">switch</span>(workInProgress.<span class="property">tag</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">HostRoot</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">updateHostRoot</span>(current, workInProgress);</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">HostComponent</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">updateHostComponent</span>(current, workInProgress);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">HostText</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateHostRoot</span>(<span class="params">current, workInProgress</span>) &#123;</span><br><span class="line">    <span class="comment">// 需要知道它的子虚拟dom, 知道它的儿子的虚拟dom信息</span></span><br><span class="line">    <span class="comment">// 之前在根fiber的更新队列加的虚拟dom, 可以在这获取</span></span><br><span class="line">    <span class="title function_">processUpdateQueue</span>(workInProgress);</span><br><span class="line">    <span class="keyword">const</span> nextState = workInProgress.<span class="property">memoizedState</span>;</span><br><span class="line">    <span class="comment">// 获取虚拟节点</span></span><br><span class="line">    <span class="keyword">const</span> nextChildren = nextState.<span class="property">element</span>;</span><br><span class="line">    <span class="title function_">reconcileChildren</span>(current, workInProgress, nextChildren);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> workInProgress.<span class="property">child</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateHostComponents</span>(<span class="params">current, workInProgress</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="获取更新队列的虚拟dom"><a href="#获取更新队列的虚拟dom" class="headerlink" title="获取更新队列的虚拟dom"></a>获取更新队列的虚拟dom</h4><p>写上一步引入的<code>processUpdateQueue</code>方法</p><ol><li>ReactFiberClassUpdateQueue.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; markUpdateLaneFromFiberToRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactFiberConcurrentUpdate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initialUpdateQueue</span>(<span class="params">fiber</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建一个更新队列</span></span><br><span class="line">    <span class="comment">// pending 是循环链表</span></span><br><span class="line">    <span class="keyword">const</span> queue = &#123;</span><br><span class="line">        <span class="attr">shared</span>: &#123;</span><br><span class="line">            <span class="attr">pending</span>: <span class="literal">null</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fiber.<span class="property">updateQueue</span> = queue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">UpdateState</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> update = &#123;<span class="attr">tag</span>: <span class="title class_">UpdateState</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> update;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">enqueueUpdate</span>(<span class="params">fiber, update</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取根fiber的更新队列 (上一篇最后加的)</span></span><br><span class="line">    <span class="keyword">const</span> updateQueue = fiber.<span class="property">updateQueue</span>;</span><br><span class="line">    <span class="comment">// 获取等待执行的任务</span></span><br><span class="line">    <span class="keyword">const</span> pending = updateQueue.<span class="property">shared</span>.<span class="property">pending</span>;</span><br><span class="line">    <span class="comment">// 说明初始化的状态</span></span><br><span class="line">    <span class="keyword">if</span>(pending === <span class="literal">null</span>) &#123;</span><br><span class="line">        update.<span class="property">next</span> = update;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        update.<span class="property">next</span> = pending.<span class="property">next</span>;</span><br><span class="line">        pending.<span class="property">next</span> = update;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让等待更新指向当前update 开始更新</span></span><br><span class="line">    updateQueue.<span class="property">shared</span>.<span class="property">pending</span> = update;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从当前的fiber 到返回找到并返回根节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">markUpdateLaneFromFiberToRoot</span>(fiber);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据老状态和更新队列的更新计算最新的状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; workInProgress 要计算的fiber</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">processUpdateQueue</span>(<span class="params">workInProgress</span>) &#123;</span><br><span class="line">    <span class="comment">// 拿到更新队列</span></span><br><span class="line">    <span class="keyword">const</span> queue = workInProgress.<span class="property">updateQueue</span>;</span><br><span class="line">    <span class="comment">// 等待生效的队列</span></span><br><span class="line">    <span class="keyword">const</span> pendingQueue = queue.<span class="property">shared</span>.<span class="property">pending</span>;</span><br><span class="line">    <span class="comment">// 如果有更新, 或者更新队列里有内容</span></span><br><span class="line">    <span class="keyword">if</span>(pendingQueue !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 清除等待生效的更新 因为在这就要使用了可以清除了</span></span><br><span class="line">        queue.<span class="property">shared</span>.<span class="property">pending</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 获取最后一个等待生效的更新 </span></span><br><span class="line">        <span class="keyword">const</span> lastPendingUpdate = pendingQueue;</span><br><span class="line">        <span class="comment">// 第一个等待生效的更新</span></span><br><span class="line">        <span class="keyword">const</span> firstPendingUpdate = pendingQueue.<span class="property">next</span>;</span><br><span class="line">        <span class="comment">// 把更新链表剪开, 变成单向链表</span></span><br><span class="line">        lastPendingUpdate.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 获取老状态 (会不停更新和计算赋值新状态, 所以起名newState)</span></span><br><span class="line">        <span class="keyword">let</span> newState = workInProgress.<span class="property">memoizedState</span>;</span><br><span class="line">        <span class="keyword">let</span> update = firstPendingUpdate;</span><br><span class="line">        <span class="keyword">while</span>(update) &#123;</span><br><span class="line">            <span class="comment">// 根据老状态和更新计算新状态</span></span><br><span class="line">            newState = <span class="title function_">getStateFromUpdate</span>(update, newState);</span><br><span class="line">            update = update.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把最终计算到的状态赋值给 memoizedState</span></span><br><span class="line">        workInProgress.<span class="property">memoizedState</span> = newState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据老状态和更新, 计算新状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; update 更新</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; prevState 上一个状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 新状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStateFromUpdate</span>(<span class="params">update, prevState</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span>(update.<span class="property">tag</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">UpdateState</span>:</span><br><span class="line">            <span class="keyword">const</span> &#123; payload &#125; = update;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">assign</span>(&#123;&#125;, prevState, payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="根据子虚拟dom创建子fiber节点"><a href="#根据子虚拟dom创建子fiber节点" class="headerlink" title="根据子虚拟dom创建子fiber节点"></a>根据子虚拟dom创建子fiber节点</h4><p>上上步还有一个<code>reconcileChildren</code>没有定义</p><ol><li><p>ReactFiberBeginWork.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mountChildFibers, reconcileChildFibers &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactChildFiber&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据新的虚拟dom生成新的fiber链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; current 老的父fiber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; workInProgress 新的父fiber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; nextChildren 新的子虚拟dom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reconcileChildren</span>(<span class="params">current, workInProgress, nextChildren</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果此新fiber没有老fiber, 说明是新创建的</span></span><br><span class="line">    <span class="keyword">if</span> (current === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 挂在子fiber</span></span><br><span class="line">        workInProgress.<span class="property">child</span> = <span class="title function_">mountChildFibers</span>(workInProgress, <span class="literal">null</span>, next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 更新:  协调子fiber列表 需要做DOM-DIFF   (初始化时的根fiber是有老fiber的(一开始创建的))</span></span><br><span class="line">        workInProgress.<span class="property">child</span> = <span class="title function_">reconcileChildFibers</span>(</span><br><span class="line">        workInProgress,</span><br><span class="line">        current.<span class="property">child</span>,</span><br><span class="line">        nextChildren</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ReactChildFiber.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createFiberFromElement &#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactFiber&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">REACT_ELEMENT_TYPE</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../../shared/ReactSymbols&#x27;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; shouldTrackSideEffect 是否跟踪副作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createChildReconciler</span>(<span class="params">shouldTrackSideEffect</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reconcileSingElement</span>(<span class="params">returnFiber, currentFirstFiber, element</span>) &#123;</span><br><span class="line">        <span class="comment">// 因为我们实现的是初次挂载, 老节点currentFirstFiber是没有的, </span></span><br><span class="line">        <span class="comment">// 所以可以直接根据虚拟dom创建fiber节点</span></span><br><span class="line">        <span class="keyword">const</span> created = <span class="title function_">createFiberFromElement</span>(element);</span><br><span class="line">        created.<span class="property">return</span> = returnFiber;</span><br><span class="line">        <span class="keyword">return</span> created;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较子fiber  (DOM-DIFF) 就是用老的fiber链表和新的虚拟dom进行比较</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; returnFiber 新父fiber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; currentFirstFiber 当前的第一个子fiber(老fiber的第一个儿子)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; newChild 新的子虚拟dom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reconcileChildFibers</span>(<span class="params">returnFiber, currentFirstFiber, newChild</span>) &#123;</span><br><span class="line">        <span class="comment">// 现在暂时只考虑新的节点只有一个的情况</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> newChild === <span class="string">&#x27;object&#x27;</span> &amp;&amp; newChild !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (newChild.<span class="property">$$typeof</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="attr">REACT_ELEMENT_TYPE</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">reconcileSingElement</span>(</span><br><span class="line">                        returnFiber,</span><br><span class="line">                        currentFirstFiber,</span><br><span class="line">                        newChild</span><br><span class="line">                    );</span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reconcileChildFibers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有老父fiber 更新</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reconcileChildFibers = <span class="title function_">createChildReconciler</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 没有老的父fiber 更新</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mountChildFibers = <span class="title function_">createChildReconciler</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li><li><p>ReactFiber.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createFiberFromElement</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> type = element.<span class="property">type</span>;</span><br><span class="line">    <span class="keyword">const</span> key = element.<span class="property">key</span>;</span><br><span class="line">    <span class="keyword">const</span> pendingProps = element.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">const</span> fiber = <span class="title function_">createFiberFromTypeAndProps</span>(</span><br><span class="line">        type,</span><br><span class="line">        key,</span><br><span class="line">        pendingProps</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> fiber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createFiberFromTypeAndProps</span>(<span class="params">type, key, pendingProps</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fiberTag = <span class="title class_">IndeterminateComponent</span>;</span><br><span class="line">    <span class="keyword">const</span> fiber = <span class="title function_">createFiberNode</span>(fiberTag, pendingProps, key);</span><br><span class="line">    fiber.<span class="property">type</span> = type;</span><br><span class="line">    <span class="keyword">return</span> fiber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="完成工作单元"><a href="#完成工作单元" class="headerlink" title="完成工作单元"></a>完成工作单元</h3><ol><li>ReactFiberWorkLoop.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">completeUnitOfWork</span>(<span class="params">unitOfWork</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (next === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 说明已经完成</span></span><br><span class="line">    <span class="comment">// 完成工作单元</span></span><br><span class="line">    + <span class="title function_">completeUnitOfWork</span>(unitOfWork); <span class="comment">// 这个方法之后写 先模拟一下完成工作</span></span><br><span class="line">        <span class="comment">// workInProgress = null;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果有子节点就成为下一个工作单元</span></span><br><span class="line">        workInProgress = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">completeUnitOfWork</span>(<span class="params">unitOfWork</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> completeWork = unitOfWork;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 拿到他的父节点和当前节点RootFiber</span></span><br><span class="line">        <span class="keyword">const</span> current = completeWork.<span class="property">alternate</span>;</span><br><span class="line">        <span class="keyword">const</span> returnFiber = completeWork.<span class="property">return</span>;</span><br><span class="line">        <span class="keyword">let</span> next = <span class="title function_">completeWork</span>(current, completeWork);</span><br><span class="line">        <span class="comment">// 如果下一个节点不为空</span></span><br><span class="line">        <span class="keyword">if</span>(next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        workInProgress = next;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> siblingFiber = completeWork.<span class="property">sibling</span>;</span><br><span class="line">        <span class="comment">// 如果兄弟节点不为空</span></span><br><span class="line">        <span class="keyword">if</span>(siblingFiber !== <span class="literal">null</span>) &#123;</span><br><span class="line">        workInProgress = siblingFiber;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回父节点</span></span><br><span class="line">        completeWork = returnFiber;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span>(completeWork !== <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。</summary>
    
    
    
    <category term="React" scheme="https://note.batype.com/categories/React/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://note.batype.com/tags/JavaScript/"/>
    
    <category term="react" scheme="https://note.batype.com/tags/react/"/>
    
    <category term="JSX" scheme="https://note.batype.com/tags/JSX/"/>
    
  </entry>
  
  <entry>
    <title>unstate-next 的实现原理</title>
    <link href="https://note.batype.com/react/components/unstate-next-implement.html"/>
    <id>https://note.batype.com/react/components/unstate-next-implement.html</id>
    <published>2023-10-26T07:49:35.000Z</published>
    <updated>2023-11-09T03:19:13.299Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="定义实现Container接口"><a href="#定义实现Container接口" class="headerlink" title="定义实现Container接口"></a>定义实现Container接口</h4><p>需要实现包装方法和获取数据的hooks</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Container</span>&lt;<span class="title class_">Value</span>, <span class="title class_">State</span>&gt; &#123;</span><br><span class="line"><span class="title class_">Provider</span>: <span class="title class_">React</span>.<span class="property">ComponentType</span>&lt;<span class="title class_">ContainerProviderProps</span>&lt;<span class="title class_">State</span>&gt;&gt;;</span><br><span class="line"><span class="attr">useContainer</span>: <span class="function">() =&gt;</span> <span class="title class_">Value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义实现Provider接口"><a href="#定义实现Provider接口" class="headerlink" title="定义实现Provider接口"></a>定义实现Provider接口</h4><p>定义接口需要初始化参数和需要使用的子节点。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ContainerProviderProps 定义类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">State</span>&#125; <span class="variable">State</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">State</span>&#125; <span class="variable">initialState</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">React.ReactNode</span>&#125; <span class="variable">children</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ContainerProviderProps</span>&lt;<span class="title class_">State</span> = <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">initialState?: <span class="title class_">State</span>;</span><br><span class="line"><span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="createContainer-方法"><a href="#createContainer-方法" class="headerlink" title="createContainer 方法"></a>createContainer 方法</h4><p>在 <code>createContainer</code> 方法中，使用后会返回两个方法 <code>Provider</code> 和 <code>useContainer</code>。</p><p>步骤：</p><ol><li>使用React.createContext 创建Context；</li><li>自定义hooks 获取属性；</li><li>需要使用Context 子组件使用Provider 包装， 将数据写入Context；</li><li>使用React.useContext 从 Context 中获取属性</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> createContainer&lt;<span class="title class_">Value</span>, <span class="title class_">State</span> = <span class="built_in">void</span>&gt;(</span><br><span class="line"><span class="attr">useHook</span>: <span class="function">(<span class="params">initialState?: State</span>) =&gt;</span> <span class="title class_">Value</span></span><br><span class="line">): <span class="title class_">Container</span>&lt;<span class="title class_">Value</span>, <span class="title class_">State</span>&gt; &#123;</span><br><span class="line"><span class="comment">// 使用React.createContext 创建Context</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title class_">React</span>.<span class="property">createContext</span>&lt;<span class="title class_">Value</span> | <span class="keyword">typeof</span> <span class="variable constant_">EMPTY</span>&gt;(<span class="variable constant_">EMPTY</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Provider</span>(<span class="params">props: ContainerProviderProps&lt;State&gt;</span>) &#123;</span><br><span class="line">    <span class="comment">// 自定义hooks 获取属性</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="title function_">useHook</span>(props.<span class="property">initialState</span>);</span><br><span class="line">    <span class="comment">// 需要使用Context 子组件使用Provider 包装， 将数据写入Context。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span>&gt;</span>&#123;props?.children&#125;<span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useContainer</span>(<span class="params"></span>): <span class="title class_">Value</span> &#123;</span><br><span class="line">    <span class="comment">// 使用React.useContext 从 Context 中获取属性</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="title class_">React</span>.<span class="title function_">useContext</span>(<span class="title class_">Context</span>);</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="variable constant_">EMPTY</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Component must be wrapped with &lt;Container.Provider&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title class_">Provider</span>,</span><br><span class="line">    useContainer,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="useContainer"><a href="#useContainer" class="headerlink" title="useContainer"></a>useContainer</h4><p>使用useContainer 从 Container 中直接获取属性。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> useContainer&lt;<span class="title class_">Value</span>, <span class="title class_">State</span> = <span class="built_in">void</span>&gt;(</span><br><span class="line"><span class="attr">container</span>: <span class="title class_">Container</span>&lt;<span class="title class_">Value</span>, <span class="title class_">State</span>&gt;</span><br><span class="line">): <span class="title class_">Value</span> &#123;</span><br><span class="line"><span class="keyword">return</span> container.<span class="title function_">useContainer</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="unstate-next-使用"><a href="#unstate-next-使用" class="headerlink" title="unstate-next 使用"></a><a href="./unstate-next-use.html">unstate-next 使用</a></h4><h4 id="实现code"><a href="#实现code" class="headerlink" title="实现code"></a>实现code</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">EMPTY</span>: unique <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ContainerProviderProps 定义类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">State</span>&#125; <span class="variable">State</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">State</span>&#125; <span class="variable">initialState</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">React.ReactNode</span>&#125; <span class="variable">children</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ContainerProviderProps</span>&lt;<span class="title class_">State</span> = <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">initialState?: <span class="title class_">State</span>;</span><br><span class="line"><span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Container</span>&lt;<span class="title class_">Value</span>, <span class="title class_">State</span>&gt; &#123;</span><br><span class="line"><span class="title class_">Provider</span>: <span class="title class_">React</span>.<span class="property">ComponentType</span>&lt;<span class="title class_">ContainerProviderProps</span>&lt;<span class="title class_">State</span>&gt;&gt;;</span><br><span class="line"><span class="attr">useContainer</span>: <span class="function">() =&gt;</span> <span class="title class_">Value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> createContainer&lt;<span class="title class_">Value</span>, <span class="title class_">State</span> = <span class="built_in">void</span>&gt;(</span><br><span class="line"><span class="attr">useHook</span>: <span class="function">(<span class="params">initialState?: State</span>) =&gt;</span> <span class="title class_">Value</span></span><br><span class="line">): <span class="title class_">Container</span>&lt;<span class="title class_">Value</span>, <span class="title class_">State</span>&gt; &#123;</span><br><span class="line"><span class="comment">// 使用React.createContext 创建Context</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title class_">React</span>.<span class="property">createContext</span>&lt;<span class="title class_">Value</span> | <span class="keyword">typeof</span> <span class="variable constant_">EMPTY</span>&gt;(<span class="variable constant_">EMPTY</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Provider</span>(<span class="params">props: ContainerProviderProps&lt;State&gt;</span>) &#123;</span><br><span class="line">    <span class="comment">// 自定义hooks 获取属性</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="title function_">useHook</span>(props.<span class="property">initialState</span>);</span><br><span class="line">    <span class="comment">// 需要使用Context 子组件使用Provider 包装， 将数据写入Context。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span>&gt;</span>&#123;props?.children&#125;<span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useContainer</span>(<span class="params"></span>): <span class="title class_">Value</span> &#123;</span><br><span class="line">    <span class="comment">// 使用React.useContext 从 Context 中获取属性</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="title class_">React</span>.<span class="title function_">useContext</span>(<span class="title class_">Context</span>);</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="variable constant_">EMPTY</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Component must be wrapped with &lt;Container.Provider&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title class_">Provider</span>,</span><br><span class="line">    useContainer,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> useContainer&lt;<span class="title class_">Value</span>, <span class="title class_">State</span> = <span class="built_in">void</span>&gt;(</span><br><span class="line"><span class="attr">container</span>: <span class="title class_">Container</span>&lt;<span class="title class_">Value</span>, <span class="title class_">State</span>&gt;</span><br><span class="line">): <span class="title class_">Value</span> &#123;</span><br><span class="line"><span class="keyword">return</span> container.<span class="title function_">useContainer</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">unstate-next 的实现原理，根据 React.createContext 和 React.useContext 方法重新包装，简化使用步骤。</summary>
    
    
    
    <category term="React" scheme="https://note.batype.com/categories/React/"/>
    
    <category term="components" scheme="https://note.batype.com/categories/React/components/"/>
    
    <category term="unstate-next" scheme="https://note.batype.com/categories/React/components/unstate-next/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/tags/TypeScript/"/>
    
    <category term="react" scheme="https://note.batype.com/tags/react/"/>
    
    <category term="unstate-next" scheme="https://note.batype.com/tags/unstate-next/"/>
    
  </entry>
  
  <entry>
    <title>Fiber架构工作原理</title>
    <link href="https://note.batype.com/react/fiber/works.html"/>
    <id>https://note.batype.com/react/fiber/works.html</id>
    <published>2023-10-25T10:12:49.000Z</published>
    <updated>2023-11-09T03:19:13.306Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="什么是“双缓存”？"><a href="#什么是“双缓存”？" class="headerlink" title="什么是“双缓存”？"></a>什么是“双缓存”？</h2><p>“双缓存”是一种常见的图形处理技术，用于在图像渲染中实现平滑的、无闪烁的更新效果。它通过使用两个缓冲区（即两块内存区域）来完成。其中一个缓冲区用于显示图像，而另一个缓冲区则用于在后台进行图像的更新和绘制。当更新完成后，通过交换两个缓冲区的引用，以实现无缝的切换和更新。</p><p>在图形处理中使用双缓存的好处包括：</p><ol><li>无闪烁：通过在后台缓冲区进行绘制，然后将绘制结果一次性地切换到显示缓冲区，可以避免在图像更新过程中的闪烁问题。这对于实时图形、动画和视频等应用非常重要。</li><li>平滑更新：使用双缓冲可以实现平滑的更新效果。在后台缓冲区进行绘制和更新，然后在更新完成后将其切换到显示缓冲区，可以避免直接在显示缓冲区上进行绘制和修改，从而减少了可能出现的可见的渲染中间状态。</li><li>减少渲染延迟：使用双缓冲可以减少渲染延迟。由于绘制和更新发生在后台缓冲区，因此可以在绘制完成后立即切换到显示缓冲区，从而减少了等待绘制完成的时间，提高了渲染效率和响应时间。</li></ol><p>双缓存技术在图形处理、动画、视频播放和游戏开发等领域得到广泛应用。在图形库、操作系统和桌面应用程序中，双缓存被用于实现平滑的图像渲染和交互效果。在前端开发中，双缓存也被广泛应用于图形绘制和动画效果的实现，以提供更好的用户体验。</p><p><code>React</code>使用“双缓存”来完成<code>Fiber树</code>的构建与替换——对应着<code>DOM树</code>的创建与更新。</p><h2 id="双缓存Fiber树"><a href="#双缓存Fiber树" class="headerlink" title="双缓存Fiber树"></a>双缓存Fiber树</h2><p>在<code>React</code>中最多会同时存在两棵<code>Fiber树</code>。当前屏幕上显示内容对应的<code>Fiber树</code>称为<code>current Fiber树</code>，正在内存中构建的<code>Fiber树</code>称为<code>workInProgress Fiber树</code>。</p><p><code>current Fiber树</code>中的<code>Fiber节点</code>被称为<code>current fiber</code>，<code>workInProgress Fiber树</code>中的<code>Fiber节点</code>被称为<code>workInProgress fiber</code>，他们通过<code>alternate</code>属性连接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">currentFiber.<span class="property">alternate</span> === workInProgressFiber;</span><br><span class="line">workInProgressFiber.<span class="property">alternate</span> === currentFiber;</span><br></pre></td></tr></table></figure><p><code>React </code>应用的根节点通过使 <code>current </code> 指针在不同 <code>Fiber树</code> 的 <code>rootFiber</code> 间切换来完成 <code>current Fiber</code> 树指向的切换。</p><p>即当 <code>workInProgress Fiber树</code> 构建完成交给 <code>Renderer</code> 渲染在页面上后，应用根节点的 <code>current</code> 指针指向 <code>workInProgress Fiber树</code> ，此时<code>workInProgress Fiber树</code>就变为<code>current Fiber树</code>。</p><p>每次状态更新都会产生新的<code>workInProgress Fiber树</code>，通过<code>current</code>与<code>workInProgress</code>的替换，完成<code>DOM</code>更新。</p><p>接下来我们以具体例子讲解<code>mount时</code>、<code>update时</code>的构建&#x2F;替换流程。</p><h2 id="mount时"><a href="#mount时" class="headerlink" title="mount时"></a>mount时</h2><p>考虑如下例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><ol><li>首次执行<code>ReactDOM.render</code>会创建<code>fiberRootNode</code>（源码中叫<code>fiberRoot</code>）和<code>rootFiber</code>。其中<code>fiberRootNode</code>是整个应用的根节点，<code>rootFiber</code>是<code>&lt;App/&gt;</code>所在组件树的根节点。</li></ol><p>之所以要区分<code>fiberRootNode</code>与<code>rootFiber</code>，是因为在应用中我们可以多次调用<code>ReactDOM.render</code>渲染不同的组件树，他们会拥有不同的<code>rootFiber</code>。但是整个应用的根节点只有一个，那就是<code>fiberRootNode</code>。</p><p><code>fiberRootNode</code>的<code>current</code>会指向当前页面上已渲染内容对应<code>Fiber树</code>，即<code>current Fiber树</code>。</p><p><img src="https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg" alt="fiberRootNode"></p><p><code>fiberRootNode.current = rootFiber;</code></p><p>由于是首屏渲染，页面中还没有挂载任何<code>DOM</code>，所以<code>fiberRootNode.current</code>指向的<code>rootFiber</code>没有任何<code>子Fiber节点</code>（即<code>current Fiber树</code>为空）。</p><ol start="2"><li>接下来进入<code>render阶段</code>，根据组件返回的<code>JSX</code>在内存中依次创建<code>Fiber节点</code>并连接在一起构建<code>Fiber树</code>，被称为<code>workInProgress Fiber树</code>。（下图中右侧为内存中构建的树，左侧为页面显示的树）</li></ol><p>在构建<code>workInProgress Fiber树</code>时会尝试复用<code>current Fiber树</code>中已有的<code>Fiber节点</code>内的属性，在<code>首屏渲染</code>时只有<code>rootFiber</code>存在对应的<code>current fiber</code>（即<code>rootFiber.alternate</code>）。</p><p><img src="https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg"></p><ol start="3"><li>图中右侧已构建完的<code>workInProgress Fiber树</code>在<code>commit阶段</code>渲染到页面。</li></ol><p>此时<code>DOM</code>更新为右侧树对应的样子。<code>fiberRootNode</code>的<code>current</code>指针指向<code>workInProgress Fiber树</code>使其变为<code>current Fiber 树</code>。</p><p><img src="https://react.iamkasong.com/img/wipTreeFinish.png"></p><h2 id="update时"><a href="#update时" class="headerlink" title="update时"></a>update时</h2><ol><li><p>接下来我们点击<code>p节点</code>触发状态改变，这会开启一次新的<code>render阶段</code>并构建一棵新的<code>workInProgress Fiber 树</code>。</p><p><img src="https://react.iamkasong.com/img/wipTreeUpdate.png"></p></li></ol><p>和<code>mount</code>时一样，<code>workInProgress fiber</code>的创建可以复用<code>current Fiber树</code>对应的节点数据。</p><ol start="2"><li><code>workInProgress Fiber 树</code>在<code>render阶段</code>完成构建后进入<code>commit阶段</code>渲染到页面上。渲染完毕后，<code>workInProgress Fiber 树</code>变为<code>current Fiber 树</code>。</li></ol><p><img src="https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg" alt="渲染过程"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">在`React`中最多会同时存在两棵`Fiber树`。当前屏幕上显示内容对应的`Fiber树`称为`current Fiber树`，正在内存中构建的`Fiber树`称为`workInProgress Fiber树`。</summary>
    
    
    
    <category term="React" scheme="https://note.batype.com/categories/React/"/>
    
    <category term="Fiber" scheme="https://note.batype.com/categories/React/Fiber/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://note.batype.com/tags/JavaScript/"/>
    
    <category term="react" scheme="https://note.batype.com/tags/react/"/>
    
    <category term="Fiber" scheme="https://note.batype.com/tags/Fiber/"/>
    
  </entry>
  
  <entry>
    <title>unstate-next 的使用</title>
    <link href="https://note.batype.com/react/components/unstate-next-use.html"/>
    <id>https://note.batype.com/react/components/unstate-next-use.html</id>
    <published>2023-10-25T08:42:53.000Z</published>
    <updated>2023-11-09T03:19:13.301Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><p><a href="https://gitcode.net/qq_35490191/React-TypeScript">Code-Test</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save unstated-next</span><br><span class="line"></span><br><span class="line">yarn add unstated-next</span><br></pre></td></tr></table></figure><h4 id="createContainer"><a href="#createContainer" class="headerlink" title="createContainer"></a>createContainer</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createContainer &#125; <span class="keyword">from</span> <span class="string">&quot;unstated-next&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useCounter</span> = (<span class="params">props: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; initNum &#125; = props;</span><br><span class="line">    <span class="keyword">const</span> [num, changeNum] = useState&lt;<span class="built_in">number</span>&gt;(initNum);</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">decrement</span> = (<span class="params"></span>) =&gt; <span class="title function_">changeNum</span>(num - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="title function_">changeNum</span>(num + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;num, decrement, increment&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Counter</span> = <span class="title function_">createContainer</span>(useCounter);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="use-Provider-initialState"><a href="#use-Provider-initialState" class="headerlink" title="use Provider &amp;&amp; initialState"></a>use Provider &amp;&amp; initialState</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Counter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Context&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">TestCounter</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./TestCounter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Counter.Provider</span> <span class="attr">initialState</span>=<span class="string">&#123;&#123;</span> <span class="attr">initNum:</span> <span class="attr">1</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">TestCounter</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Counter.Provider</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="useContainer"><a href="#useContainer" class="headerlink" title="useContainer"></a>useContainer</h4><h5 id="TestCounter"><a href="#TestCounter" class="headerlink" title="TestCounter"></a>TestCounter</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Counter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Context&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">TestChild</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./TestChild&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">TestCounter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num, decrement &#125; = <span class="title class_">Counter</span>.<span class="title function_">useContainer</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;decrement&#125;</span>&gt;</span>减法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">TestChild</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TestChild"><a href="#TestChild" class="headerlink" title="TestChild"></a>TestChild</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Counter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Context&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">TestChild</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num, increment &#125; = <span class="title class_">Counter</span>.<span class="title function_">useContainer</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;num&#125; <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>加法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">unstated-next 的使用可以简化react state manager，可以替换React 原有的useContext 方法, 亦可以管理全局状态信息。</summary>
    
    
    
    <category term="React" scheme="https://note.batype.com/categories/React/"/>
    
    <category term="components" scheme="https://note.batype.com/categories/React/components/"/>
    
    <category term="unstate-next" scheme="https://note.batype.com/categories/React/components/unstate-next/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/tags/TypeScript/"/>
    
    <category term="react" scheme="https://note.batype.com/tags/react/"/>
    
    <category term="unstate-next" scheme="https://note.batype.com/tags/unstate-next/"/>
    
  </entry>
  
  <entry>
    <title>nvm 管理node版本</title>
    <link href="https://note.batype.com/web/npm/nvm.html"/>
    <id>https://note.batype.com/web/npm/nvm.html</id>
    <published>2023-10-25T07:47:01.000Z</published>
    <updated>2023-11-09T03:19:13.315Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="Windows-上安装"><a href="#Windows-上安装" class="headerlink" title="Windows 上安装"></a>Windows 上安装</h4><p><a href="https://github.com/nvm-sh/nvm">nvm_github</a></p><ol><li>点击 “Code” 按钮，然后选择 “Download ZIP” 下载 ZIP 文件。</li><li>解压缩 ZIP 文件：解压缩下载的 ZIP 文件，将解压后的文件夹放在您想要安装 NVM 的位置。</li><li>配置环境变量：打开命令提示符或 PowerShell，并运行以下命令来配置 NVM 的环境变量：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setx NVM_HOME &quot;解压缩文件夹的完整路径&quot;</span><br><span class="line">setx NVM_SYMLINK &quot;解压缩文件夹的完整路径&quot;</span><br></pre></td></tr></table></figure><h4 id="Linux-上安装"><a href="#Linux-上安装" class="headerlink" title="Linux 上安装"></a>Linux 上安装</h4><ol><li>下载 NVM 安装脚本：打开终端并运行以下命令下载 NVM 安装脚本：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span><br></pre></td></tr></table></figure><p>这将从 NVM GitHub 存储库下载并运行安装脚本。</p><ol start="2"><li>配置 NVM 环境变量：安装脚本运行后，会将 NVM 相关的路径和初始化脚本添加到您的个人配置文件（如 <del>&#x2F;.bashrc、</del>&#x2F;.zshrc 等）。要使这些更改生效，可以运行以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>如果您使用的是其他 Shell，替换 ~&#x2F;.bashrc 为您实际使用的配置文件。</p><h4 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm --version</span><br></pre></td></tr></table></figure><h4 id="安装node-js-版本"><a href="#安装node-js-版本" class="headerlink" title="安装node.js 版本"></a>安装node.js 版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install &lt;version&gt;</span><br></pre></td></tr></table></figure><p><strong>例如</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 16.13.0</span><br></pre></td></tr></table></figure><p>安装成功后，NVM 会自动将该版本设置为默认版本。</p><h4 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h4><p>切换 Node.js 版本：如果您有多个安装的 Node.js 版本，可以使用以下命令切换不同的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure><p><strong>例如</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 18.16.0</span><br></pre></td></tr></table></figure><p>这将将您的当前 Shell 会话设置为使用指定的 Node.js 版本。</p><h4 id="查询当前版本"><a href="#查询当前版本" class="headerlink" title="查询当前版本"></a>查询当前版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use node</span><br></pre></td></tr></table></figure><h4 id="查询当前node路径"><a href="#查询当前node路径" class="headerlink" title="查询当前node路径"></a>查询当前node路径</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm which 18.16.0</span><br><span class="line">/Users/shaosong/.nvm/versions/node/v18.16.0/bin/node</span><br></pre></td></tr></table></figure><h4 id="listing-Version"><a href="#listing-Version" class="headerlink" title="listing Version"></a>listing Version</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure><h4 id="设置默认version"><a href="#设置默认version" class="headerlink" title="设置默认version"></a>设置默认version</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm alias default 18.16.0</span><br></pre></td></tr></table></figure><p>现在，您已经在 Linux 上成功安装了 NVM。您可以使用 nvm use 命令切换不同的 Node.js 版本，并使用 node 和 npm 命令来管理您的 Node.js 环境。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">nvm -- Node version manager。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/npm/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://note.batype.com/tags/npm/"/>
    
    <category term="nvm" scheme="https://note.batype.com/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>nrm 管理 npm registry</title>
    <link href="https://note.batype.com/web/npm/nrm.html"/>
    <id>https://note.batype.com/web/npm/nrm.html</id>
    <published>2023-10-25T07:25:17.000Z</published>
    <updated>2023-11-09T03:19:13.314Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><p><code>npm install -g nrm</code></p><h4 id="nrm-ls"><a href="#nrm-ls" class="headerlink" title="nrm ls"></a>nrm ls</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nrm ls</span><br><span class="line"></span><br><span class="line">npm ---------- https://registry.npmjs.org/</span><br><span class="line">yarn --------- https://registry.yarnpkg.com/</span><br><span class="line">tencent ------ https://mirrors.cloud.tencent.com/npm/</span><br><span class="line">cnpm --------- https://r.cnpmjs.org/</span><br><span class="line">taobao ------- https://registry.npmmirror.com/</span><br><span class="line">npmMirror ---- https://skimdb.npmjs.com/registry/</span><br></pre></td></tr></table></figure><h4 id="nrm-use"><a href="#nrm-use" class="headerlink" title="nrm use"></a>nrm use</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nrm use taobao</span><br><span class="line">Registry has been set to: https://registry.npmmirror.com/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Usage: nrm [options] [command]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version                           output the version number</span><br><span class="line">  -h, --help                              output usage information</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  ls                                      List all the registries</span><br><span class="line">  current [options]                       Show current registry name or URL</span><br><span class="line">  use &lt;registry&gt;                          Change registry to registry</span><br><span class="line">  add &lt;registry&gt; &lt;url&gt; [home]             Add one custom registry</span><br><span class="line">  login [options] &lt;registryName&gt; [value]  Set authorize information for a custom registry with a base64 encoded string or username and pasword</span><br><span class="line">  set-hosted-repo &lt;registry&gt; &lt;value&gt;      Set hosted npm repository for a custom registry to publish packages</span><br><span class="line">  set-scope &lt;scopeName&gt; &lt;value&gt;           Associating a scope with a registry</span><br><span class="line">  del-scope &lt;scopeName&gt;                   Remove a scope</span><br><span class="line">  set [options] &lt;registryName&gt;            Set custom registry attribute</span><br><span class="line">  rename &lt;registryName&gt; &lt;newName&gt;         Set custom registry name</span><br><span class="line">  del &lt;registry&gt;                          Delete one custom registry</span><br><span class="line">  home &lt;registry&gt; [browser]               Open the homepage of registry with optional browser</span><br><span class="line">  publish [options] [&lt;tarball&gt;|&lt;folder&gt;]  Publish package to current registry if current registry is a custom registry.</span><br><span class="line">   if you&#x27;re not using custom registry, this command will run npm publish directly</span><br><span class="line">  test [registry]                         Show response time for specific or all registries</span><br><span class="line">  help                                    Print this help </span><br><span class="line">   if you want to clear the NRM configuration when uninstall you can execute &quot;npm uninstall nrm -g -C or npm uninstall nrm -g --clean&quot;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">nrm -- NPM registry manager。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/npm/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://note.batype.com/tags/npm/"/>
    
    <category term="nrm" scheme="https://note.batype.com/tags/nrm/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 内容分页配置</title>
    <link href="https://note.batype.com/hexo/config/pagination.html"/>
    <id>https://note.batype.com/hexo/config/pagination.html</id>
    <published>2023-10-23T13:27:22.000Z</published>
    <updated>2023-11-09T03:19:13.291Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="per-page-config-yml"><a href="#per-page-config-yml" class="headerlink" title="per_page _config.yml"></a>per_page _config.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">20</span> <span class="comment"># 分页条数</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span> <span class="comment"># 自定义分页路径</span></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">Hexo 内容分页配置Pagination，有助于阅读能力的提升。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="框架" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Hexo" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Hexo/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Hexo" scheme="https://note.batype.com/tags/Hexo/"/>
    
    <category term="Pagination" scheme="https://note.batype.com/tags/Pagination/"/>
    
  </entry>
  
  <entry>
    <title>webpack 热更新的实现原理</title>
    <link href="https://note.batype.com/web/webpack/hot/module/replacement.html"/>
    <id>https://note.batype.com/web/webpack/hot/module/replacement.html</id>
    <published>2023-10-23T12:43:25.000Z</published>
    <updated>2023-11-09T03:19:13.316Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。<br>原理：<br><img src="https://pic.imgdb.cn/item/65366aa5c458853aefbf449c.png" alt="在这里插入图片描述"></p><p>⾸先要知道 server 端和 client 端都做了处理⼯作：</p><ol><li>在 webpack 的 watch 模式下，⽂件系统中某⼀个⽂件发⽣修改，webpack 监听到⽂件变化，根据配置⽂件对模块重新编译打包，并将打包后的代码通过简单的JavaScript对象保存在内存中。</li><li>webpack-dev-server 和 webpack 之间的接⼝交互，⽽在这⼀步，主要是 dev-server 的中间件webpack- dev-middleware和 webpack 之间的交互，webpack-dev-middleware 调⽤webpack暴露的 API 对代码变化进⾏监 控，并且告诉webpack，将代码打包到内存中。</li><li>webpack-dev-server 对⽂件变化的⼀个监控，这⼀步不同于第⼀步，并不是监控代码变化重新打包。当我们在配置⽂件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置⽂件夹中静态⽂件的变化，变化后会通知浏览器端对应⽤进⾏ live reload。注意，这⼉是浏览器刷新，和HMR 是两个概念。</li><li>webpack-dev-server 代码的⼯作，该步骤主要是通过sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建⽴⼀个 websocket ⻓连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中Server 监听静态⽂件变化的信息。浏览器端根据这些 socket 消息进⾏不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后⾯的步骤根据这⼀hash 值来进⾏模块热替换。</li><li>webpack-dev-server&#x2F;client 端并不能够请求更新的代码，也不会执⾏ 热 更 模 块 操 作 ， ⽽ 把 这 些 ⼯ 作⼜交回给了webpack，webpack&#x2F;hot&#x2F;dev-server 的 ⼯ 作就是根据webpack-dev-server&#x2F;client 传给它的信息以及dev-server的配置决定是刷新浏览器呢还是进⾏模块热更新。当然如果仅仅是刷新浏览器，也就没有后⾯那些步骤了。</li><li>HotModuleReplacement.runtime 是客户端HMR 的中枢，它接收到上⼀ 步 传 递 给 他 的 新 模 块 的hash 值，它通过JsonpMainTemplate.runtime 向 server 端发送Ajax 请求，服务端返回⼀个 json，该 json 包含了所有要更新的模块的hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。</li><li>⽽第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进⾏对⽐，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引⽤。</li></ol><p>最后⼀步，当 HMR 失败后，回退到 live reload 操作，也就是进⾏浏览器刷新来获取最新打包代码。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="WebPack" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/WebPack/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://note.batype.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="WebPack" scheme="https://note.batype.com/tags/WebPack/"/>
    
  </entry>
  
  <entry>
    <title>对原型、原型链的理解</title>
    <link href="https://note.batype.com/javascript/prototype.html"/>
    <id>https://note.batype.com/javascript/prototype.html</id>
    <published>2023-10-23T12:37:51.000Z</published>
    <updated>2023-11-09T03:19:13.295Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在 JavaScript 中是使用构造两数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造西数的所有实例共享的属性和方法。<br>当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造两数的prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在 浏览器中都实现了_proto_ 属性来访问这个属性，但是最好不要 使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法米获取对象的原型。 </p><p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象义会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 0bject.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。 </p><p>特点：JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。<br><img src="https://pic.imgdb.cn/item/65366accc458853aefbfcd92.jpg" alt="原型链图解"><br>那么原型链的终点是什么？如何打印出原型链的终点？</p><p>由于 Object 是构造函数，原型链终点 Ob ject.prototype._proto_，而 Object.prototype.<em>proto</em> &#x3D;&#x3D;&#x3D; null &#x2F;&#x2F; true，所以，原型链的终点是 null。原型链上的所有原型都是对象，所有的对象最终都是由 0bject 构造的，而 Object.prototype 的下一级是Object. prototype._proto_。</p><p><img src="https://pic.imgdb.cn/item/653668e4c458853aefb94875.jpg" alt="在这里插入图片描述"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="es6" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/es6/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://note.batype.com/tags/JavaScript/"/>
    
    <category term="es6" scheme="https://note.batype.com/tags/es6/"/>
    
  </entry>
  
</feed>
