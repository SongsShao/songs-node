<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>songs-note</title>
  
  
  <link href="https://batype.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://batype.gitee.io/"/>
  <updated>2023-11-04T10:35:42.300Z</updated>
  <id>https://batype.gitee.io/</id>
  
  <author>
    <name>songshao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux docker install</title>
    <link href="https://batype.gitee.io/linux/install/docker.html"/>
    <id>https://batype.gitee.io/linux/install/docker.html</id>
    <published>2023-11-02T13:24:32.000Z</published>
    <updated>2023-11-04T10:35:42.300Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="Linux上安装Docker分为以下几步："><a href="#Linux上安装Docker分为以下几步：" class="headerlink" title="Linux上安装Docker分为以下几步："></a>Linux上安装Docker分为以下几步：</h4><ol><li>设置存储库。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>安装Docker引擎</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><ol start="3"><li>启动Docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><ol start="4"><li>设置docker开机自启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><ol start="5"><li>配置镜像加速器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://om7zpa5s.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><ol><li>查看</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><ol start="2"><li>搜索镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><ol start="3"><li>下载镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:version</span><br></pre></td></tr></table></figure><ol start="4"><li>删除镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker images // 查看image ID</span><br><span class="line"></span><br><span class="line">docker rmi -f feb5d9fea6a5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多个删除</span></span><br><span class="line">docker rmi -f feb5d9fea6a5 feb5d9fea6a5 </span><br><span class="line">docker rmi -f $(docker images -aq)    # 删除全部的镜像</span><br></pre></td></tr></table></figure><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><ol><li>新建容器并启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos /bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>列出所有运行的容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令参数可选项</span></span><br><span class="line">-a        # 列出当前正在运行的容器+历史运行过的容器</span><br><span class="line">-n=?    # 显示最近创建的容器（可以指定显示几条，比如-n=1）</span><br><span class="line">-q        # 只显示容器的编号</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>退出容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit        # 容器直接停止，并退出</span><br><span class="line">ctrl+P+Q    # 容器不停止，退出</span><br></pre></td></tr></table></figure><ol start="4"><li>删除容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id                    # 删除容器（不能删除正在运行的容器）如果要强制删除：docker rm -f 容器id</span><br><span class="line">docker rm -f $(docker ps -aq)        # 删除全部容器</span><br><span class="line">docker ps -a -q|xargs docker rm        # 删除所有容器</span><br><span class="line">docker rm 656c03b3be05</span><br></pre></td></tr></table></figure><ol start="5"><li>启动和停止容器的操作</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id # 启动容器</span><br><span class="line">docker restart 容器id # 重启</span><br><span class="line">docker stop 容器id # 停止</span><br><span class="line">docker kill 容器id # 强制停止</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h4><ol><li>后台启动容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d centos</span><br></pre></td></tr></table></figure><ol start="2"><li>查看日志</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker logs -tf 5694d2fc0a88</span><br><span class="line"></span><br><span class="line">docker run -d centos /bin/sh -c &quot;while true;do echo batype;sleep 1000;done&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>查看容器中的进程</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED         STATUS         PORTS     NAMES</span><br><span class="line">4f9b77aafa46   centos    &quot;/bin/sh -c &#x27;while t…&quot;   6 seconds ago   Up 5 seconds             tender_hofstadter</span><br><span class="line"></span><br><span class="line">docker top 4f9b77aafa46</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                14087               14066               0                   17:42               ?                   00:00:00            /bin/sh -c while true;do echo batype;sleep 1000;done</span><br><span class="line">root                14107               14087               0                   17:42               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1000</span><br></pre></td></tr></table></figure><ol start="4"><li>查看镜像的元数据</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 4f9b77aafa46</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;4f9b77aafa469b2e50ca296515d66b841f60f12343b1a45ddbdd09766e103d0f&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2023-11-03T09:42:35.034147379Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo batype;sleep 1000;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 14087,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="5"><li>进入当前正在运行的容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker exec -it 4f9b77aafa46 /bin/bash</span><br><span class="line">[root@4f9b77aafa46 /]# ps =ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 09:42 ?        00:00:00 /bin/sh -c while true;do echo batype;sleep 1000;done</span><br><span class="line">root        20     1  0 13:19 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1000</span><br><span class="line">root        21     0  0 13:30 pts/0    00:00:00 /bin/bash</span><br><span class="line">root        35    21  0 13:31 pts/0    00:00:00 ps -ef</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>从容器拷贝文件到主机</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:容器内路径 目的主机的路径</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# cd /home/</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# ls</span><br><span class="line">html</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS     NAMES</span><br><span class="line">4f9b77aafa46   centos    &quot;/bin/sh -c &#x27;while t…&quot;   4 hours ago   Up 4 hours             tender_hofstadter</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker exec -it 4f9b77aafa46 /bin/bash</span><br><span class="line">[root@4f9b77aafa46 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@4f9b77aafa46 /]# cd /home/</span><br><span class="line">[root@4f9b77aafa46 home]# ls</span><br><span class="line">[root@4f9b77aafa46 home]# touch test.java</span><br><span class="line">[root@4f9b77aafa46 home]# ls</span><br><span class="line">test.java</span><br><span class="line">[root@4f9b77aafa46 home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS     NAMES</span><br><span class="line">4f9b77aafa46   centos    &quot;/bin/sh -c &#x27;while t…&quot;   4 hours ago   Up 4 hours             tender_hofstadter</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker cp 4f9b77aafa46:/home/test.java /home</span><br><span class="line">Successfully copied 1.54kB to /home</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# ls</span><br><span class="line">html  test.java</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现，自动同步（容器内的/home路径和主机上的/home路径打通）</span></span><br></pre></td></tr></table></figure><h4 id="练习安装Nginx"><a href="#练习安装Nginx" class="headerlink" title="练习安装Nginx"></a>练习安装Nginx</h4><ol><li><p>搜索镜像：docker search nginx (建议去dockerHub上去搜索)</p></li><li><p>下载镜像：docker pull nginx</p></li><li><p>启动镜像</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">Digest:</span><br><span class="line">sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-d 后台运行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--name=<span class="string">&quot;nginx01&quot;</span>    给容器命名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p 宿主机端口:容器内部端口</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker run -d --name nginx01 -p 515:80 nginx</span><br><span class="line">614bbf44138a3e834008f5a33a71194c8e78d7f0e53bccbdfc4c9c9f0c0501cb</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                 NAMES</span><br><span class="line">614bbf44138a   nginx     &quot;/docker-entrypoint.…&quot;   8 seconds ago   Up 7 seconds   0.0.0.0:515-&gt;80/tcp, :::515-&gt;80/tcp   nginx01</span><br><span class="line">4f9b77aafa46   centos    &quot;/bin/sh -c &#x27;while t…&quot;   4 hours ago     Up 4 hours                                           tender_hofstadter</span><br></pre></td></tr></table></figure><ol start="4"><li>测试访问</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问指向端口515</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# curl 0.0.0.0:515</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br><span class="line">Unable to find image &#x27;portainer/portainer:latest&#x27; locally</span><br><span class="line">latest: Pulling from portainer/portainer</span><br><span class="line"></span><br><span class="line">Digest:</span><br><span class="line">  sha256:fb45b43738646048a0a0cc74fcee2865b69efde857e710126084ee5de9be0f3f</span><br><span class="line">Status: Downloaded newer image for portainer/portainer:latest</span><br><span class="line">a1b1156666edf6cad33eb299e35f543b823673a97a9756726d1fbc2cc571bc47</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">a1b1156666ed   portainer/portainer   &quot;/portainer&quot;             8 seconds ago   Up 7 seconds   0.0.0.0:8088-&gt;9000/tcp, :::8088-&gt;9000/tcp   dreamy_goodall</span><br><span class="line">614bbf44138a   nginx                 &quot;/docker-entrypoint.…&quot;   8 minutes ago   Up 8 minutes   0.0.0.0:515-&gt;80/tcp, :::515-&gt;80/tcp         nginx01</span><br><span class="line">4f9b77aafa46   centos                &quot;/bin/sh -c &#x27;while t…&quot;   4 hours ago     Up 4 hours                                                 tender_hofstadter</span><br></pre></td></tr></table></figure><ol start="2"><li>测试访问</li></ol><p><a href="http://www.batype.com:8088/">http://www.batype.com:8088/</a></p><ol><li><p>连接本地Local<br><img src="https://pic.imgdb.cn/item/6545012dc458853aefeef057.jpg" alt="Connect Portainer"></p></li><li><p>进入之的连接页面<br><img src="https://pic.imgdb.cn/item/654505fec458853aef03e9b1.jpg" alt="进入之的连接页面"></p></li></ol><h4 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交容器成为一个新的副本</span></span><br><span class="line">docker commit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令和git原理类似</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker commit -a=&quot;batype&quot; -m=&quot;test&quot; 614bbf44138a nginx001:18.16.0</span><br><span class="line">sha256:7fcdd59c72c118bccfc2a6d94953e7d18d4a1afadeea0eee304117e917f0aabe</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">nginx001              18.16.0   7fcdd59c72c1   12 seconds ago   141MB</span><br><span class="line">nginx                 latest    605c77e624dd   22 months ago    141MB</span><br><span class="line">mysql                 latest    3218b38490ce   22 months ago    516MB</span><br><span class="line">centos                latest    5d0da3dc9764   2 years ago      231MB</span><br><span class="line">portainer/portainer   latest    580c0e4e98b0   2 years ago      79.1MB</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED             STATUS             PORTS                                       NAMES</span><br><span class="line">a1b1156666ed   portainer/portainer   &quot;/portainer&quot;             About an hour ago   Up About an hour   0.0.0.0:8088-&gt;9000/tcp, :::8088-&gt;9000/tcp   dreamy_goodall</span><br><span class="line">614bbf44138a   nginx                 &quot;/docker-entrypoint.…&quot;   About an hour ago   Up About an hour   0.0.0.0:515-&gt;80/tcp, :::515-&gt;80/tcp         nginx01</span><br><span class="line">4f9b77aafa46   centos                &quot;/bin/sh -c &#x27;while t…&quot;   5 hours ago         Up 5 hours                                                     tender_hofstadter</span><br></pre></td></tr></table></figure><h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><h4 id="什么是容器数据卷？"><a href="#什么是容器数据卷？" class="headerlink" title="什么是容器数据卷？"></a>什么是容器数据卷？</h4><p>Docker容器数据卷，即Docker Volume（卷）。</p><p>当Docker容器运行的时候，会产生一系列的数据文件，这些数据文件会在关闭Docker容器时，直接消失的。但是其中产生部分的数据内容，我们是希望能够把它给保存起来，另作它用的。</p><p>关闭Docker容器&#x3D;删除内部除了image底层数据的其他全部内容，即删库跑路</p><p>所以我们期望：</p><p>将应用与运行的环境打包形成容器运行，伴随着容器运行产生的数据，我们希望这些数据能够持久化。<br>希望容器之间也能够实现数据的共享、</p><p>Docker容器产生的数据同步到本地,这样关闭容器的时候，数据是在本地的，不会影响数据的安全性。<br>docker的容器卷技术也就是将容器内部目录和本地目录进行一个同步，即挂载。</p><h4 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h4><p>主机目录和容器内的目录是映射关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录 镜像名 /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试，查看容器信息</span></span><br><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/654510aac458853aef35e748.jpg"></p><p>停止容器后，在主机的&#x2F;home&#x2F;ceshi文件夹下，修改文件或新增文件，启动容器，查看容器的&#x2F;home文件夹，发现容器内的数据依旧是同步的</p><ul><li>停止容器。</li><li>宿主机上修改文件。</li><li>启动容器。</li><li>容器内的数据依旧是同步的。</li></ul><h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><p><img src="https://pic.imgdb.cn/item/65451200c458853aef3c1f3c.jpg"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取镜像</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行容器，需要做数据目录挂载。（安装启动mysql，注意：需要配置密码）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">官方启动mysql</span></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my123456 -d mysql:5.7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置启动并同步数据</span></span><br><span class="line">docker run -d -p 8081:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="匿名挂载和具名挂载"><a href="#匿名挂载和具名挂载" class="headerlink" title="匿名挂载和具名挂载"></a>匿名挂载和具名挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如何确定是具名挂载，还是匿名挂载，还是指定路径挂载</span></span><br><span class="line">-v 容器内的路径                # 匿名挂载</span><br><span class="line">-v 卷名:容器内的路径        # 具名挂载</span><br><span class="line">-v /宿主机路径:容器内路径    # 指定路径挂载</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">具名挂载</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ mysql]# docker run -d -p 3344:80 --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line">7cd90c3b2f02f9b84e0dd659f0c8179d777b3c9b6c95e11da4db8a7831d0923e</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ mysql]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     cffb5d0a4839c2deff3d4c3fde9b86795632dd3ee42e256daf68fa3a33d888fd</span><br><span class="line">local     f9515933a80fac5357c7b26742d5870471ae5b21dcef34a79b60e2cc70a4c288</span><br><span class="line">local     juming-nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名挂载</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ mysql]# docker run -d --name nginx03 -v /etc/nginx nginx</span><br><span class="line">c27103b64da61544a65037ae16441f2b1ffe6f02ce0729768724752d8c4751f1</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ mysql]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     3303ec682317c64c023983cc615fa0db5cd6a88b77c4f7361d2594bc68618961</span><br><span class="line">local     cffb5d0a4839c2deff3d4c3fde9b86795632dd3ee42e256daf68fa3a33d888fd</span><br><span class="line">local     f9515933a80fac5357c7b26742d5870471ae5b21dcef34a79b60e2cc70a4c288</span><br><span class="line">local     juming-nginx</span><br></pre></td></tr></table></figure><p><strong>拓展</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 -v 容器内的路径:ro    rw    改变读写权限</span></span><br><span class="line">ro    read only    # 只读</span><br><span class="line">rw    read write    # 可读可写</span><br><span class="line">docker run -d -p 3345:80 --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line">docker run -d -p 3345:80 --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>dockerfile 就是用来构建 docker 镜像的构建文件。    命令脚本！</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本一个一个的命令，每个命令都是一层！</p><ol><li>创建一个名为dockerfile 的文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;volume01&quot;, &quot;volume02&quot;]</span><br><span class="line">CMD echo &quot;-----end-----&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><ol start="2"><li>编译</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f ./dockerfile_songs_note -t songs_note.centos:1.0 .</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6545ab56c458853aef9204f3.jpg"></p><ol start="3"><li>启动容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it 5f6352c38230 /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">图形选中的就是匿名挂载</span></span><br><span class="line">VOLUME [&quot;volume01&quot;, &quot;volume02&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6545ac56c458853aef949ef9.jpg"></p><ol start="4"><li>查看一下卷挂载的路径：docker inspect 容器id</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 95ab48f7bf47</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6545ad0ac458853aef967f53.jpg"></p><h4 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h4><p>多个容器同步数据（临时认父）</p><p>将两个容器或者更多容器之间的数据进行数据共享</p><ol><li>启动3个容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name docker01 songs_note.centos:1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器创建test.js 文件</span></span><br><span class="line">docker run -it -d --name docker02 --volumes-from docker01 songs_note.centos:1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器创建test1.js 文件</span></span><br><span class="line">docker run -it -d --name docker03 --volumes-from docker01 songs_note.centos:1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器创建test2.js 文件</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 容器docker01查看</span></span><br><span class="line">[root@ab2fb91dd8c5 volume01]# ls</span><br><span class="line">test.js  test1.js  test2.js</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除某一个容器</span></span><br><span class="line"> [root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker rm -f f0305bd4a916</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看其他容器文件是否还在</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker exec -it 1c7a3dbaf54e /bin/bash</span><br><span class="line">[root@1c7a3dbaf54e /]# cd volume01</span><br><span class="line">[root@1c7a3dbaf54e volume01]# ls</span><br><span class="line">test.js  test1.js  test2.js</span><br></pre></td></tr></table></figure><ol start="2"><li>多个mysql实现数据共享</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker run -d -p 7777:3306 -v /home/mysql/conf:/etc mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker run -d -p 7777:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>结论</strong>：<br>容器之间配置信息的传递，数据卷容器的生命同期一直持续到没有容器使用为止。<br>但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的！</p><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><h4 id="什么是DockerFile-？"><a href="#什么是DockerFile-？" class="headerlink" title="什么是DockerFile ？"></a>什么是DockerFile ？</h4><p>dockerfile是用来构建docker镜像的文件！命令参数脚本！</p><p><strong>构建步骤</strong>：</p><ol><li>编写一个dockerfile文件</li><li>docker build 构建成为一个镜像</li><li>docker run运行镜像</li><li>docker push发布镜像（DockerHub、阿里云镜像仓库！）</li></ol><h4 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h4><ol><li>每个保留关键字（指令）都是必须是大写字母</li><li>执行从上到下顺序执行</li><li>‘#’ 表示注释</li><li>每一个指令都会创建提交一个新的镜像层，并提交！</li></ol><p>dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p><p>DockerFile：构建文件，定义了一切的步骤，源代码。<br>Dockerlmages：通过DockerFile构建生成的镜像，最终发布和运行的产品。<br>Docker容器：容器就是镜像运行起来提供服务的。</p><h4 id="DockerFile的命令"><a href="#DockerFile的命令" class="headerlink" title="DockerFile的命令"></a>DockerFile的命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM         # 基础镜像，一起从这里开始构建</span><br><span class="line">MAINTAINER   # 镜像作者：姓名-邮箱</span><br><span class="line">RUN          # 镜像构建的时候需要运行的命令</span><br><span class="line">ADD          # 步骤：tomcat镜像，这个tomcat压缩包！添加内容</span><br><span class="line">WORKDIR      # 镜像的工作目录</span><br><span class="line">VOLUME       # 挂载的目录</span><br><span class="line">EXPOSE       # 暴露端口配置</span><br><span class="line">CMD          # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT   # 指定这个容器启动的时候要运行的命令，可以追加命令</span><br><span class="line">ONBUILD      # 当构建一个被继承DockerFile 这个时候就会运行ONBUILD 的指令，触发指令。</span><br><span class="line">CPOY         # 类似ADD，将我们的文件拷贝到镜像中</span><br><span class="line">ENV          # 构建的时候设置环境变量！</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol><li>编写dockerfile的文件</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> batye&lt;<span class="number">1175715363</span>@qq.com&gt;</span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install net-tools</span></span><br><span class="line">EXPOST <span class="number">8001</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;----end----&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><ol start="2"><li>构建文件镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f dockerFile_test -t vim.centos:0.0.1 .</span><br></pre></td></tr></table></figure><ol start="3"><li>原生contos7</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker run -it centos</span><br><span class="line">[root@566d6bd3f48d /]# pwd</span><br><span class="line">/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作目录为根目录</span></span><br><span class="line">[root@566d6bd3f48d /]# vim</span><br><span class="line">bash: vim: command not found</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有vim 工具</span></span><br><span class="line">[root@566d6bd3f48d /]# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><ol start="4"><li>vim.centos增加配置以后的镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker run -it vim.centos:0.0.1</span><br><span class="line">[root@53bfee4c6557 local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line">[root@53bfee4c6557 local]# vim</span><br><span class="line"></span><br><span class="line">[root@53bfee4c6557 local]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.5  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:05  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 8  bytes 656 (656.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@53bfee4c6557 local]# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><ol start="5"><li>列出本地进行的变更历史</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history 692aba72d901</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6545f262c458853aef77e132.jpg" alt="docker history 692aba72d901"></p><ol start="6"><li>CMD和ENTRYPOINT区别</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMD            # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT     # 指定这个容器启动的时候要运行的命令，可以追加命令</span><br></pre></td></tr></table></figure><ul><li><p>测试CMD</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 编写dockerfile文件</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# vim dockerfile-cmd-test</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# cat dockerfile-cmd-test</span><br><span class="line">FROM centos:7</span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 构建镜像</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker build -f dockerfile-cmd-test -t cmdtest .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. run运行，发现我们的<span class="string">&quot;ls -a&quot;</span>命令生效、执行</span></span><br><span class="line">docker run 06f2cc65ea4a</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 06f2cc65ea4a </span><br></pre></td></tr></table></figure><p>  <img src="https://pic.imgdb.cn/item/6545f420c458853aef7e35a4.jpg" alt="docker run 06f2cc65ea4a "></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 我们先追加一个命令<span class="string">&quot;l&quot;</span>,构成<span class="string">&quot;ls -al&quot;</span>命令，发现报错</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker run ec0d2dd226b3 -l</span><br><span class="line">docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: &quot;-l&quot;: executable file not found in $PATH: unknown.</span><br><span class="line">ERRO[0000] error waiting for container:</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">原因：CMD命令的情况下，<span class="string">&quot;-l&quot;</span>替换了CMD[<span class="string">&quot;1s&quot;</span>，<span class="string">&quot;-a&quot;</span>]命令，因为<span class="string">&quot;-l&quot;</span>不是命令，所以报错！</span></span><br></pre></td></tr></table></figure></li><li><p>测试ENTRYPOINT</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 编写dockerfile文件</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# vim dockerfile-entrypoint-test</span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# cat dockerfile-entrypoint-test</span><br><span class="line">FROM centos:7</span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 构建镜像</span></span><br><span class="line">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker build -f dockerfile-entrypoint-test -t entrypointtest .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. run运行，发现我们的<span class="string">&quot;ls -a&quot;</span>命令生效、执行</span></span><br><span class="line">docker run 5184c7d459a0</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6545fc1bc458853aef99f91e.jpg" alt="docker run 5184c7d459a0"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 5184c7d459a0 -l</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6545fb94c458853aef982c74.jpg" alt="docker run 5184c7d459a0 -l"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">原因：ENTRYPOINT命令的情况下，<span class="string">&quot;-l&quot;</span>追加在ENTRYPOINT [<span class="string">&quot;1s&quot;</span>，<span class="string">&quot;-a&quot;</span>]命令后面，得到<span class="string">&quot;ls -al&quot;</span>的命令，所以命令正常执行！</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（我们的追加命令，是直接拼接在我们的ENTRYPOINT命令的后面）</span></span><br></pre></td></tr></table></figure></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">单一的 Promise 链并不能发现 async/await 的优势。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="es6" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/es6/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://batype.gitee.io/tags/JavaScript/"/>
    
    <category term="es6" scheme="https://batype.gitee.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>Scp</title>
    <link href="https://batype.gitee.io/linux/install/scp.html"/>
    <id>https://batype.gitee.io/linux/install/scp.html</id>
    <published>2023-11-02T13:24:32.000Z</published>
    <updated>2023-11-03T13:29:07.538Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="复制文件夹到服务器"><a href="#复制文件夹到服务器" class="headerlink" title="复制文件夹到服务器"></a>复制文件夹到服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r key root@47.108.140.70:/etc/nginx/conf.d/cert</span><br></pre></td></tr></table></figure><p>ssh <a href="mailto:&#114;&#111;&#x6f;&#x74;&#64;&#x34;&#x37;&#x2e;&#x31;&#48;&#x38;&#46;&#49;&#52;&#x30;&#x2e;&#55;&#x30;">&#114;&#111;&#x6f;&#x74;&#64;&#x34;&#x37;&#x2e;&#x31;&#48;&#x38;&#46;&#49;&#52;&#x30;&#x2e;&#55;&#x30;</a></p><p>scp -r public&#x2F; <a href="mailto:&#x72;&#x6f;&#x6f;&#116;&#x40;&#52;&#55;&#46;&#49;&#48;&#56;&#x2e;&#49;&#52;&#x30;&#x2e;&#x37;&#48;">&#x72;&#x6f;&#x6f;&#116;&#x40;&#52;&#55;&#46;&#49;&#48;&#56;&#x2e;&#49;&#52;&#x30;&#x2e;&#x37;&#48;</a>:&#x2F;home&#x2F;html&#x2F;songs-note&#x2F;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.batype.com;</span><br><span class="line">    ssl_certificate /etc/nginx/conf.d/cert/www.batype.com/www.batype.com.pem;</span><br><span class="line">    </span><br><span class="line">    ssl_certificate_key /etc/nginx/conf.d/cert/www.batype.com/www.batype.com.key;</span><br><span class="line">    root         /home/html/songs-note;</span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        try_files $uri $uri/ =404;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.batype.com;</span><br><span class="line">    #http转https(前提是已经配置nginx ssl证书)</span><br><span class="line">    rewrite ^/(.*)$ https://www.batype.com/$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    # HTTPS</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name www.batype.com;                         #网站域名</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /etc/nginx/conf.d/cert/www.batype.com/www.batype.com.pem;         #(证书公钥)</span><br><span class="line">    ssl_certificate_key /etc/nginx/conf.d/cert/www.batype.com/www.batype.com.key;             #(证书私钥)</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    #ssl_protocols SSLv2 SSLv3 TLSv1;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    #ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        gzip_static on;</span><br><span class="line">        root /home/html/songs-note;; #html访问路径</span><br><span class="line">        index index.html;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    # location /admin &#123;</span><br><span class="line">    #     proxy_pass http://127.0.0.1:6060/admin;</span><br><span class="line">    #     proxy_read_timeout 300s;</span><br><span class="line">    #     proxy_set_header Host $host;</span><br><span class="line">    #     proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    #     proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    #     proxy_set_header Connection $connection_upgrade;</span><br><span class="line">    #     proxy_http_version 1.1;</span><br><span class="line">    # &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  batype.mukang.net;</span><br><span class="line">      location / &#123;</span><br><span class="line">        gzip_static on;</span><br><span class="line">        root /home/html/songs-note; #html访问路径</span><br><span class="line">        index index.html;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    # HTTPS</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name https://batype.mukang.net; #www.batype.com;   #网站域名</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /etc/nginx/conf.d/cert/www.batype.com/www.batype.com.pem;         #(证书公钥)</span><br><span class="line">    ssl_certificate_key /etc/nginx/conf.d/cert/www.batype.com/www.batype.com.key;             #(证书私钥)</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    #ssl_protocols SSLv2 SSLv3 TLSv1;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    #ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">  </span><br><span class="line">    # location /admin &#123;</span><br><span class="line">    #     proxy_pass http://127.0.0.1:6060/admin;</span><br><span class="line">    #     proxy_read_timeout 300s;</span><br><span class="line">    #     proxy_set_header Host $host;</span><br><span class="line">    #     proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    #     proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    #     proxy_set_header Connection $connection_upgrade;</span><br><span class="line">    #     proxy_http_version 1.1;</span><br><span class="line">    # &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">单一的 Promise 链并不能发现 async/await 的优势。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="es6" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/es6/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://batype.gitee.io/tags/JavaScript/"/>
    
    <category term="es6" scheme="https://batype.gitee.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>React 实现原理</title>
    <link href="https://batype.gitee.io/react/implement.html"/>
    <id>https://batype.gitee.io/react/implement.html</id>
    <published>2023-10-27T02:58:50.000Z</published>
    <updated>2023-11-01T14:24:14.295Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h3 id="实现jsx"><a href="#实现jsx" class="headerlink" title="实现jsx"></a>实现jsx</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    hello<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &quot;<span class="attr">red</span>&quot; &#125;&#125;&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编译后"><a href="#编译后" class="headerlink" title="编译后"></a>编译后</h3><p><img src="https://pic.imgdb.cn/item/653b2718c458853aef75775a.jpg" alt="jsx 编译之后"></p><h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><ol><li><p>jsx-dev-runtime.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; jsxDEV &#125; <span class="keyword">from</span> <span class="string">&quot;./jsx/ReactJSXElement&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ReactJSXElement.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hasOwnProperty <span class="keyword">from</span> <span class="string">&#x27;../../shared/hasOwnProperty&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dom 类型</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">REACT_ELEMENT_TYPE</span>  &#125; <span class="keyword">from</span> <span class="string">&#x27;../../shared/ReactSymbols&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">RESERVED_PROPS</span> = &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">ref</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">__self</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">__source</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasValidKey</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> config.<span class="property">key</span> !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasValidRef</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> config.<span class="property">ref</span> !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReactElement 创建</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ReactElement</span>(<span class="params">type, key, ref, props, owner</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 这个标签允许我们唯一地将其标识为React元素</span></span><br><span class="line">        <span class="attr">$$typeof</span>: <span class="variable constant_">REACT_ELEMENT_TYPE</span>,</span><br><span class="line">        type,</span><br><span class="line">        key,</span><br><span class="line">        ref,</span><br><span class="line">        props,</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">jsxDEV</span>(<span class="params">type, config</span>) &#123;</span><br><span class="line">    <span class="comment">// 提取保留名称</span></span><br><span class="line">    <span class="keyword">const</span> props = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> key = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> ref = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">hasValidKey</span>(config)) &#123;</span><br><span class="line">        key = config.<span class="property">key</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">hasValidRef</span>(config)) &#123;</span><br><span class="line">        ref = config.<span class="property">ref</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> propName <span class="keyword">in</span> config) &#123;</span><br><span class="line">        <span class="keyword">if</span>(hasOwnProperty.<span class="title function_">call</span>(config, propName) &amp;&amp;</span><br><span class="line">        !<span class="variable constant_">RESERVED_PROPS</span>.<span class="title function_">hasOwnProperty</span>(propName)</span><br><span class="line">        ) &#123;</span><br><span class="line">            props[propName] = config[propName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">ReactElement</span>(type, key, ref, props)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>hasOwnProperty.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; hasOwnProperty &#125; = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> hasOwnProperty;</span><br></pre></td></tr></table></figure></li><li><p>ReactSymbols.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于标记类似 ReactElement 类型的符号。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">REACT_ELEMENT_TYPE</span> = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;react.element&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="根节点和根fiber"><a href="#根节点和根fiber" class="headerlink" title="根节点和根fiber"></a>根节点和根fiber</h3><ul><li>需要给react提供一个根节点，之后每个节点都是渲染在根节点内部的。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>根fiber可以通俗理解为一个装着所有虚拟dom的容器，每个虚拟dom又单独对应一个fiber，</li><li>渲染可以以单个fiber为单位暂停 &#x2F; 恢复。</li><li>需要创建两个根 <code>fiber</code> 去相互替换展示。</li></ul><h4 id="创建根节点"><a href="#创建根节点" class="headerlink" title="创建根节点"></a>创建根节点</h4><p>更改main.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(root)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先要建一个<code>FiberRootNode</code>根节点，也就是所有DOM的根，本质就是 <code>div#root</code>。</p><p>根节点和<code>fiber</code>关系：</p><p><img src="https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg" alt="根节点和`fiber`关系"></p><p><code>FiberRootNode</code> 和 <code>HostRootFiber</code> 中间使用 <code>current</code> 相连；</p><p><code>HostRootFiber</code> 和 <code>FiberRootNode</code> 中间使用 <code>stateNode</code> 相连。</p><h4 id="实现createRoot"><a href="#实现createRoot" class="headerlink" title="实现createRoot"></a>实现createRoot</h4><p>分这么多文件的主要是因为很多其他逻辑要处理，暂时都给省略了。虽然比较绕，但其实本质就是把<code>div#root</code>做了几层包装。</p><ol><li><p>client.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&quot;./src/client/ReactDOMRoot&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>ReactDOMRoot.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContainer &#125; <span class="keyword">from</span> <span class="string">&quot;react-reconciler/src/ReactFiberReconciler&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ReactDOMRoot</span>(<span class="params">internalRoot</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">_internalRoot</span> = internalRoot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个根 实际就是一个被包装过的真实DOM节点</span></span><br><span class="line"><span class="comment">// container: div#root</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createRoot</span>(<span class="params">container</span>) &#123;</span><br><span class="line"><span class="comment">// 1. 创建容器   6. 接收到有#root的容器</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">createContainer</span>(container);</span><br><span class="line"><span class="comment">// 7. 容器传给 ReactDOMRoot</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReactDOMRoot</span>(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ReactFiberReconciler.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createFiberRoot &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactFiberRoot&quot;</span>;</span><br><span class="line"><span class="comment">// 创建容器 containerInfo: 容器信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createContainer</span>(<span class="params">containerInfo</span>) &#123;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">createFiberRoot</span>(containerInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ReactFiberRoot.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FiberRootNode</span>(<span class="params">containerInfo</span>) &#123;</span><br><span class="line"><span class="comment">// 4. 把DOM节点放到容器</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">containerInfo</span> = containerInfo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createFiberRoot</span>(<span class="params">containerInfo</span>) &#123;</span><br><span class="line"><span class="comment">// 3. 创建根容器</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="keyword">new</span> <span class="title class_">FiberRootNode</span>(containerInfo);</span><br><span class="line"><span class="comment">// 这个位置在下一步要创建 FiberRoot</span></span><br><span class="line"><span class="comment">// 5. 把容器返回出去</span></span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>现在根节点<code>FiberRootNode</code>创建好了，最后<code>root</code>的打印结果：</p><p><img src="https://pic.imgdb.cn/item/653b2e66c458853aef8a195c.jpg" alt="FiberRootNode"></p><h4 id="fiber"><a href="#fiber" class="headerlink" title="fiber"></a>fiber</h4><p>在创建根fiber之前先了解一下fiber</p><h4 id="为什么需要有fiber？"><a href="#为什么需要有fiber？" class="headerlink" title="为什么需要有fiber？"></a>为什么需要有fiber？</h4><ul><li>react以前没有fiber整个计算过程不能暂停，会导致时间过长</li><li>浏览器刷新频率为 60Hz,大概 16.6 毫秒渲染一次，而 JS 线程和渲染线程是互斥的，所以如果 JS 线程执行任务时间超过 16.6ms 的话，就会导致掉帧、卡顿，解决方案就是 React 利用空闲的时间进行更新，不影响渲染进行的渲染</li><li>把一个耗时任务切分成一个个小任务，分布在每一帧里。这个的方式就叫时间切片</li></ul><p>我们需要把渲染变成一个可中断，可暂停，可恢复的过程。<br>注：可以去搜一下 requestIdleCallback API ，react封装了一个类似的方法让每帧时间固定 5ms。</p><h4 id="什么是fiber？"><a href="#什么是fiber？" class="headerlink" title="什么是fiber？"></a>什么是fiber？</h4><ul><li><p>Fiber 是一个执行单元</p><p>  Fiber 是一个执行单元,每次执行完一个执行单元，React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去。</p><p>  react 中一帧的过程：</p><p>  <img src="https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg" alt="react 中一帧的过程"></p></li><li><p>Fiber 是一种数据结构<br>  React 目前的做法是使用链表, 每个虚拟节点内部表示为一个Fiber<br>  从顶点开始遍历<br>  如果有第一个儿子，先遍历第一个儿子<br>  如果没有第一个儿子，标志着此节点遍历完成<br>  如果有弟弟遍历弟弟<br>  如果有没有下一个弟弟，返回父节点标识完成父节点遍历，如果有叔叔遍历叔叔<br>  没有父节点遍历结束</p><p>  遍历结构：<br>  <img src="https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg" alt="遍历结构"></p><p>  遍历过程：<br>  <img src="https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg" alt="遍历过程"></p></li></ul><h4 id="创建根fiber"><a href="#创建根fiber" class="headerlink" title="创建根fiber"></a>创建根fiber</h4><p>真实DOM需要一个根容器，<code>fiber</code>同样需要一个根<code>fiber</code>。</p><p>相当于每个虚拟DOM都会创建一个对应的<code>Fiber</code>，再创建真实DOM</p><p>虚拟DOM &#x3D;&gt; Fiber &#x3D;&gt; 真实DOM</p><p>在刚刚创建FiberRootNode的函数里去创建<code>HostRootFiber</code>并互相指向对方。</p><p><img src="https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg" alt="根节点和`fiber`关系"></p><ol><li><p>ReactFiberRoot.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createHostRootFiber &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactFiber&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FiberRootNode</span>(<span class="params">containerInfo</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">containerInfo</span> = containerInfo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createFiberRoot</span>(<span class="params">containerInfo</span>) &#123;</span><br><span class="line"><span class="comment">// 之前创建的根节点容器</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="keyword">new</span> <span class="title class_">FiberRootNode</span>(containerInfo);</span><br><span class="line"><span class="comment">// 1. 创建根fiber. hostRoot就是根节点dev#root</span></span><br><span class="line"><span class="comment">// 未初始化的fiber</span></span><br><span class="line"><span class="keyword">const</span> uninitializedFiber = <span class="title function_">createHostRootFiber</span>();</span><br><span class="line"><span class="comment">// 当前渲染页面的fiber.</span></span><br><span class="line"><span class="comment">// 6. 根容器的current指向当前的根fiber</span></span><br><span class="line">root.<span class="property">current</span> = uninitializedFiber;</span><br><span class="line">uninitializedFiber.<span class="property">stateNode</span> = root;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ReactFiber.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 工作标签</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HostRoot</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactWorkTags&quot;</span>;</span><br><span class="line"><span class="comment">// 5. 副作用标识</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NoFlags</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactFiberFlags&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">FiberNode</span>(<span class="params">tag, pendingProps, key</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tag</span> = tag;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">type</span> = <span class="literal">null</span>; <span class="comment">// fiber类型, 来自于虚拟DOM节点的type   (span h1 p)</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">stateNode</span> = <span class="literal">null</span>; <span class="comment">// 此fiber对应的真实DOM节点</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">return</span> = <span class="literal">null</span>; <span class="comment">// 指向父节点</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">child</span> = <span class="literal">null</span>; <span class="comment">// 指向第一个子节点</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sibling</span> = <span class="literal">null</span>; <span class="comment">// 指向弟弟</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">pendingProps</span> = pendingProps; <span class="comment">// 等待生效的属性</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">memoizedProps</span> = <span class="literal">null</span>; <span class="comment">// 已经生效的属性</span></span><br><span class="line"><span class="comment">// 虚拟DOM会提供pendingProps给创建fiber的属性，等处理完复制给memoizedProps</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个fiber还会有自己的状态，每一种fiber状态存的类型都不一样</span></span><br><span class="line"><span class="comment">// 比如：类组件对应的fiber存的就是实例的状态，HostRoot存的就是要渲染的元素</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">memoizedState</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个fiber可能还有自己的更新队列</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">updateQueue</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. &quot;./ReactFiberFlags&quot;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">flags</span> = <span class="title class_">NoFlags</span>; <span class="comment">// 副作用标识，表示对此fiber节点进行何种操作</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">subtreeFlags</span> = <span class="title class_">NoFlags</span>; <span class="comment">// 子节点对应的副作用标识</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">alternate</span> = <span class="literal">null</span>; <span class="comment">// 轮替 (缓存了另一个fiber节点实例) diff时用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createFiberNode</span>(<span class="params">tag, pendingProps, key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FiberNode</span>(tag, pendingProps, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createHostRootFiber</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">createFiberNode</span>(<span class="title class_">HostRoot</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ReactWorkTags.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每种虚拟DOM都会对应自己的fiber的类型</span></span><br><span class="line"><span class="comment">// 根Fiber的Tag</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HostRoot</span> = <span class="number">3</span>; <span class="comment">// 根节点</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HostComponent</span> = <span class="number">5</span>; <span class="comment">// 原生节点 span div p</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HostText</span> = <span class="number">6</span>; <span class="comment">// 纯文本节点</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ReactFiberFlags.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有任何操作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">NoFlags</span> = <span class="number">0b000000000000000000000000000000</span>;</span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Placement</span> = <span class="number">0b000000000000000000000000000010</span>;</span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Update</span> = <span class="number">0b000000000000000000000000000100</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看最后root的打印结果：根fiber和节点容器互相指向</p></li></ol><p><img src="https://pic.imgdb.cn/item/653b5beac458853aef1a1a12.jpg" alt="根fiber和节点容器互相指向"></p><pre><code>current指的是当前根容器正在显示或者已经渲染好的fiber树</code></pre><p>react采用了双缓存区的技术，可以把将要显示的图片绘制在缓存区中，需要展示的时候直接拿来替换掉。 alternate 轮替。</p><p><img src="https://pic.imgdb.cn/item/653bc1f2c458853aefb79377.jpg"></p><h4 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h4><p>打开ReactFiberRoot.js文件，在return root之前加一行代码，给根fiber加上一个更新队列，之后更新渲染任务都是放到这个队列里面。</p><ol><li><p>ReactFiberRoot.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">import</span> &#123; initialUpdateQueue &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactFiberClassUpdateQueue&quot;</span>;</span><br><span class="line">...</span><br><span class="line">+ <span class="title function_">initialUpdateQueue</span>(uninitializedFiber);</span><br><span class="line"><span class="keyword">return</span> root;</span><br></pre></td></tr></table></figure></li><li><p>ReactFiberClassUpdateQueue.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initialUpdateQueue</span>(<span class="params">fiber</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建一个更新队列</span></span><br><span class="line">    <span class="comment">// pending 是循环链表</span></span><br><span class="line">    <span class="keyword">const</span> queue = &#123;</span><br><span class="line">        <span class="attr">shared</span>: &#123;</span><br><span class="line">            <span class="attr">pending</span>: <span class="literal">null</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fiber.<span class="property">updateQueue</span> = queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>如下图所示在fiber树中增加了updateQueue 队列</p><p><img src="https://pic.imgdb.cn/item/653bc2bdc458853aefbd2de4.jpg" alt="updateQueue 队列"></p><h3 id="构建轮替的根fiber"><a href="#构建轮替的根fiber" class="headerlink" title="构建轮替的根fiber"></a>构建轮替的根fiber</h3><h4 id="fiber是怎么运作的"><a href="#fiber是怎么运作的" class="headerlink" title="fiber是怎么运作的"></a>fiber是怎么运作的</h4><pre><code>为什么要轮替在上一篇已经说过了，这一篇写一下fiber的单项循环链表。</code></pre><p>假如我们有一个jsx 的dom结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;A1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;B1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;C1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;C2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;B2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在以前没有用fiber渲染是这样的，这个渲染方式是递归渲染如果数据很多就可能会卡顿。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vDom = &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;A1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;props&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;className&quot;</span>: <span class="string">&quot;A1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">                <span class="string">&quot;key&quot;</span>: <span class="string">&quot;B1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;props&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;className&quot;</span>: <span class="string">&quot;B1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;key&quot;</span>: <span class="string">&quot;C1&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;props&quot;</span>: &#123; <span class="string">&quot;className&quot;</span>: <span class="string">&quot;C1&quot;</span>&#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;key&quot;</span>: <span class="string">&quot;C2&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;props&quot;</span>: &#123;<span class="string">&quot;className&quot;</span>: <span class="string">&quot;C2&quot;</span>&#125;,</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">                <span class="string">&quot;key&quot;</span>: <span class="string">&quot;B2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;props&quot;</span>: &#123;<span class="string">&quot;className&quot;</span>: <span class="string">&quot;B2&quot;</span>&#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把vDom一气呵成渲染到页面</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">element, container</span>) &#123;</span><br><span class="line">    <span class="comment">// 把虚拟DOM创建成真实DOM</span></span><br><span class="line">    <span class="keyword">let</span> dom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(element.<span class="property">type</span>);</span><br><span class="line">    <span class="comment">// 遍历属性</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(element.<span class="property">props</span>).<span class="title function_">filter</span>(<span class="function"><span class="params">key</span> =&gt;</span> key !== <span class="string">&#x27;children&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        dom[key] = element.<span class="property">props</span>[key];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 把子节点渲染到父节点上</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(element.<span class="property">props</span>.<span class="property">children</span>))&#123;</span><br><span class="line">        element.<span class="property">props</span>.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span>=&gt;</span><span class="title function_">render</span>(child,dom));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把真实节点挂载到容器</span></span><br><span class="line">    container.<span class="title function_">appendChild</span>(dom);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(element, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><p>下面是fiber的渲染方式，可以中断、暂停、恢复渲染。深度优先</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把虚拟DOM构建成Fiber树</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">A1</span> = &#123; <span class="attr">type</span>: <span class="string">&#x27;div&#x27;</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">&#x27;A1&#x27;</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">B1</span> = &#123; <span class="attr">type</span>: <span class="string">&#x27;div&#x27;</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">&#x27;B1&#x27;</span> &#125;, <span class="attr">return</span>: <span class="variable constant_">A1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">B2</span> = &#123; <span class="attr">type</span>: <span class="string">&#x27;div&#x27;</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">&#x27;B2&#x27;</span> &#125;, <span class="attr">return</span>: <span class="variable constant_">A1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">C1</span> = &#123; <span class="attr">type</span>: <span class="string">&#x27;div&#x27;</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">&#x27;C1&#x27;</span> &#125;, <span class="attr">return</span>: <span class="variable constant_">B1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">C2</span> = &#123; <span class="attr">type</span>: <span class="string">&#x27;div&#x27;</span>, <span class="attr">props</span>: &#123; <span class="attr">className</span>: <span class="string">&#x27;C2&#x27;</span> &#125;, <span class="attr">return</span>: <span class="variable constant_">B1</span> &#125;;</span><br><span class="line"><span class="variable constant_">A1</span>.<span class="property">child</span> = <span class="variable constant_">B1</span>;</span><br><span class="line"><span class="variable constant_">B1</span>.<span class="property">sibling</span> = <span class="variable constant_">B2</span>;</span><br><span class="line"><span class="variable constant_">B1</span>.<span class="property">child</span> = <span class="variable constant_">C1</span>;</span><br><span class="line"><span class="variable constant_">C1</span>.<span class="property">sibling</span> = <span class="variable constant_">C2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下一个工作单元</span></span><br><span class="line"><span class="keyword">let</span> nextUnitOfWork = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasRemainingTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 模拟有时间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// render 工作循序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">workLoop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 有下一个节点并且有时间时</span></span><br><span class="line">    <span class="comment">// 每一个任务执行完都可以放弃，让浏览器执行更高优先级的任务</span></span><br><span class="line">    <span class="keyword">while</span>(nextUnitOfWork &amp;&amp; <span class="title function_">hasRemainingTime</span>()) &#123;</span><br><span class="line">        <span class="comment">// 执行下一个任务并返回下一个任务</span></span><br><span class="line">        nextUnitOfWork = <span class="title function_">performUnitOfWork</span>(fiber);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render 阶段结束&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 执行完后返回下一个节点</span></span><br><span class="line"><span class="string">function performUnitOfWork(fiber) &#123;</span></span><br><span class="line"><span class="string">    // 执行渲染</span></span><br><span class="line"><span class="string">    let child = beginWork(fiber);</span></span><br><span class="line"><span class="string">    if(child) &#123;</span></span><br><span class="line"><span class="string">        return child;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    // 如果没有子节点说明当前节点已经完成了渲染工作</span></span><br><span class="line"><span class="string">    while(fiber) &#123;</span></span><br><span class="line"><span class="string">        // 可以结束此fiber的渲染了 </span></span><br><span class="line"><span class="string">        completeUnitOfWork(fiber);</span></span><br><span class="line"><span class="string">        // 如果有弟弟就返回弟弟</span></span><br><span class="line"><span class="string">        if(fiber.sibling) &#123;</span></span><br><span class="line"><span class="string">            return fiber.sibling;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        // 否则就返回上一层</span></span><br><span class="line"><span class="string">        fiber = fiber.return;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function beginWork(fiber) &#123;</span></span><br><span class="line"><span class="string">    console.log(&#x27;</span>beginWork<span class="string">&#x27;, fiber.props.className);</span></span><br><span class="line"><span class="string">    // 执行完成后返回第一个子节点</span></span><br><span class="line"><span class="string">    return fiber.child;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function completeUnitOfWork(fiber) &#123;</span></span><br><span class="line"><span class="string">    // 标记当前这个fiber街道已经完成</span></span><br><span class="line"><span class="string">    console.log(&#x27;</span>completeUnitOfWork<span class="string">&#x27;, fiber.props.className);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>上面的这些代码是预先熟悉一下，fiber 是怎么运行，下面正式进入构建的代码逻辑。</p><h4 id="队列的单向链表"><a href="#队列的单向链表" class="headerlink" title="队列的单向链表"></a>队列的单向链表</h4><ol><li><p>在main.js 中增加下面代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root.<span class="title function_">render</span>(element)</span><br></pre></td></tr></table></figure></li><li><p>ReactDOMRoot.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; updateContainer &#125; <span class="keyword">from</span> <span class="string">&#x27;../react-reconciler/src/ReactFiberReconciler&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="title class_">ReactDomRoot</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">render</span> = <span class="keyword">function</span> (<span class="params">children</span>) &#123;</span><br><span class="line"><span class="comment">// 1. 获取容器</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="variable language_">this</span>.<span class="property">_internalRoot</span>;</span><br><span class="line"><span class="title function_">updateContainer</span>(children, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ReactFiberReconciler.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createUpdate, enqueueUpdate &#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactFiberClassUpdateQueue&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新容器, 把虚拟DOM变成真实DOM 插入到container容器中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; element 虚拟DOM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; container 容器   FiberRootNode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateContainer</span>(<span class="params">element, container</span>) &#123;</span><br><span class="line"><span class="comment">// 获取根fiber</span></span><br><span class="line"><span class="keyword">const</span> current = container.<span class="property">current</span>;</span><br><span class="line"><span class="comment">// 创建更新队列</span></span><br><span class="line"><span class="keyword">const</span> update = <span class="title function_">createUpdate</span>();</span><br><span class="line">update.<span class="property">payload</span> = &#123;element&#125;;</span><br><span class="line"><span class="comment">// 3. 把此更新任务对象添加到current这个根Fiber的更新队列里</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> root = <span class="title function_">enqueueUpdate</span>(current, update);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ReactFiberClassUpdateQueue.js</p></li></ol><p><img src="https://pic.imgdb.cn/item/653e40f6c458853aefe48306.jpg" alt="ReactFiberClassUpdateQueue.js"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; markUpdateLaneFromFiberToRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactFiberConcurrentUpdate&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 更新状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">UpdateState</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> update = &#123;<span class="attr">tag</span>: <span class="title class_">UpdateState</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> update;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">enqueueUpdate</span>(<span class="params">fiber, update</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取根fiber的更新队列 (上一篇最后加的)</span></span><br><span class="line">    <span class="keyword">const</span> updateQueue = fiber.<span class="property">updateQueue</span>;</span><br><span class="line">    <span class="comment">// 获取等待执行的任务</span></span><br><span class="line">    <span class="keyword">const</span> pending = updateQueue.<span class="property">shared</span>.<span class="property">pending</span>;</span><br><span class="line">    <span class="comment">// 说明初始化的状态</span></span><br><span class="line">    <span class="keyword">if</span>(pending === <span class="literal">null</span>) &#123;</span><br><span class="line">        update.<span class="property">next</span> = update;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        update.<span class="property">next</span> = pending.<span class="property">next</span>;</span><br><span class="line">        pending.<span class="property">next</span> = update;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让等待更新指向当前update 开始更新</span></span><br><span class="line">    updateQueue.<span class="property">shared</span>.<span class="property">pending</span> = update;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从当前的fiber 到返回找到并返回根节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">markUpdateLaneFromFiberToRoot</span>(fiber);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="冒泡获取根节点容器"><a href="#冒泡获取根节点容器" class="headerlink" title="冒泡获取根节点容器"></a>冒泡获取根节点容器</h4><p>ReactFiberConcurrentUpdate.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HostRoot</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactWorkTags&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本来此文件要处理更新优先级问题，把不同的fiber优先级冒泡一路标记到根节点。</span></span><br><span class="line"><span class="comment"> * 目前现在值实现向上冒泡找到根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">sourceFiber</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">markUpdateLaneFromFiberToRoot</span>(<span class="params">sourceFiber</span>) &#123;</span><br><span class="line">    <span class="comment">// 当前父fiber</span></span><br><span class="line">    <span class="keyword">let</span> parent = sourceFiber.<span class="property">return</span>;</span><br><span class="line">    <span class="comment">// 当前fiber</span></span><br><span class="line">    <span class="keyword">let</span> node = sourceFiber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一直找到 父fiber 为null</span></span><br><span class="line">    <span class="keyword">while</span>(parent !== <span class="literal">null</span>) &#123;</span><br><span class="line">        node = parent;</span><br><span class="line">        parent = parent.<span class="property">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回当前root节点</span></span><br><span class="line">    <span class="keyword">if</span>(node.<span class="property">tag</span> === <span class="title class_">HostRoot</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> root = node.<span class="property">stateNode</span>;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="调度更新"><a href="#调度更新" class="headerlink" title="调度更新"></a>调度更新</h4><p>到目前为止更新对象已经添加到了根fiber的更新队列上，现在需要开始进行调度更新。</p><ol><li><p>ReactFiberReconciler.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; scheduleUpdateOnFiber &#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactFiberWorkLoop&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateContainer</span>(<span class="params">element, container</span>) &#123;</span><br><span class="line">...</span><br><span class="line">+ <span class="title function_">scheduleUpdateOnFiber</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ReactFiberWorkLoop.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; scheduleCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;./scheduler&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">scheduleUpdateOnFiber</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="title function_">ensureRootIsScheduled</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ensureRootIsScheduled</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">// 告诉浏览器要执行performConcurrentWorkOnRoot 参数定死为root</span></span><br><span class="line">    <span class="title function_">scheduleCallback</span>(performConcurrentWorkOnRoot.<span class="title function_">bind</span>(<span class="literal">null</span>, root));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">performConcurrentWorkOnRoot</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(root, <span class="string">&#x27;performConcurrentWorkOnRoot&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;scheduler&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./src/forks/Scheduler&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;forks&#x2F;Scheduler.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处后面会实现优先级队列</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">scheduleCallback</span>(<span class="params">callback</span>) &#123;</span><br><span class="line"><span class="title function_">requestIdleCallback</span>(callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印FiberRootNode</p></li></ol><p><img src="https://pic.imgdb.cn/item/653e496bc458853aef00deb1.jpg" alt="输出的FiberRootNode"></p><h3 id="工作循环"><a href="#工作循环" class="headerlink" title="工作循环"></a>工作循环</h3><p><img src="https://pic.imgdb.cn/item/653e4d86c458853aef11c6ea.jpg" alt="工作循环"></p><p>我们已经创建好一个根节点容器和一个空的根fiber（黑色部分），在图中看到还有一个正在构建中的根fiber。<br>根节点的current指的是当前的根fiber，是会和构建中的根fiber轮替工作（双缓冲），现在需要构建一个新的根fiber并且把fiber树写在里面。<br>一个是表示当前页面已经渲染完成的fiber树，一个是正在构建中还没有生效、更没有更新到页面的fiber树</p><h4 id="建立新的hostRootFiber"><a href="#建立新的hostRootFiber" class="headerlink" title="建立新的hostRootFiber"></a>建立新的hostRootFiber</h4><ol><li><p>ReactFiberWorkLoop.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; creatWorkInProgress &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactFiber&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正在进行中的工作</span></span><br><span class="line"><span class="keyword">let</span> workInProgress = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * (被告知浏览器确保执行的函数)</span></span><br><span class="line"><span class="comment"> * 根据当前的fiber节点构建fiber树, 创建真实的dom节点, 插入到容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">performConcurrentWorkOnRoot</span>(<span class="params">root</span>) &#123;</span><br><span class="line"><span class="comment">// 1. 初次渲染的时候以同步方式渲染根节点, 因为要尽快展示 (初始化)</span></span><br><span class="line"><span class="title function_">renderRootSync</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prepareFreshStack</span>(<span class="params">root</span>) &#123;</span><br><span class="line"><span class="comment">// 5. 根据老fiber构建新fiber (初始化)</span></span><br><span class="line">workInProgress = <span class="title function_">creatWorkInProgress</span>(root.<span class="property">current</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderRootSync</span>(<span class="params">root</span>) &#123;</span><br><span class="line"><span class="comment">// 2. 先构建了一个空的栈</span></span><br><span class="line"><span class="title function_">prepareFreshStack</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ReactFiber.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据老fiber和新的属性构建新fiber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; current 老fiber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; pendingProps 新的属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">creatWorkInProgress</span>(<span class="params">current, pendingProps</span>) &#123;</span><br><span class="line">    <span class="comment">// 3. 拿到老fiber的轮替 第一次没有 (初始化)</span></span><br><span class="line">    <span class="keyword">let</span> workInProgress = current.<span class="property">alternate</span>;</span><br><span class="line">    <span class="keyword">if</span>(workInProgress === <span class="literal">null</span>) &#123;</span><br><span class="line">        workInProgress = <span class="title function_">createFiberNode</span>(current.<span class="property">tag</span>, pendingProps, current.<span class="property">key</span>);</span><br><span class="line">        workInProgress.<span class="property">type</span> = current.<span class="property">type</span>;</span><br><span class="line">        workInProgress.<span class="property">stateNode</span> = current.<span class="property">stateNode</span>;</span><br><span class="line"></span><br><span class="line">        workInProgress.<span class="property">stateNode</span> = current;</span><br><span class="line">        current.<span class="property">alternate</span> =  workInProgress;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果有，说明是更新，只能改属性就可以复用</span></span><br><span class="line">        workInProgress.<span class="property">pendingProps</span> = current.<span class="property">pendingProps</span>;</span><br><span class="line">        workInProgress.<span class="property">type</span> = current.<span class="property">type</span>;</span><br><span class="line">        workInProgress.<span class="property">flags</span> = current.<span class="property">flags</span>;</span><br><span class="line">        workInProgress.<span class="property">subtreeFlags</span> = <span class="title class_">NoFlags</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 复制属性</span></span><br><span class="line">    workInProgress.<span class="property">child</span> = current.<span class="property">child</span>;</span><br><span class="line">    workInProgress.<span class="property">memoizedProps</span> = current.<span class="property">memoizedProps</span>;</span><br><span class="line">    workInProgress.<span class="property">memoizedState</span> = current.<span class="property">memoizedState</span>;</span><br><span class="line">    workInProgress.<span class="property">updateQueue</span> = current.<span class="property">updateQueue</span>;</span><br><span class="line">    workInProgress.<span class="property">sibling</span> = current.<span class="property">sibling</span>;</span><br><span class="line">    workInProgress.<span class="property">index</span> = current.<span class="property">index</span>;</span><br><span class="line">    <span class="keyword">return</span> workInProgress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="执行工作单元"><a href="#执行工作单元" class="headerlink" title="执行工作单元"></a>执行工作单元</h4><p>然后在新的根fiber里构建更新fiber树</p><ol><li><p>ReactFiberWorkLoop.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; beginWork &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactFiberBeginWork&quot;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderRootSync</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">// 2. 先构建一个空的栈</span></span><br><span class="line">    <span class="title function_">prepareFreshStack</span>(root);</span><br><span class="line">    <span class="comment">// 1. 现在的 workInProgress 是新的根fiber</span></span><br><span class="line">    <span class="title function_">workLoopSync</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工作同步循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">workLoopSync</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span>(workInProgress !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 2. 执行工作单元</span></span><br><span class="line">        <span class="title function_">performUnitOfWork</span>(workInProgress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">performUnitOfWork</span>(<span class="params">unitOfWork</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> current = unitOfWork.<span class="property">alternate</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> next = <span class="title function_">beginWork</span>(current, unitOfWork);</span><br><span class="line"></span><br><span class="line">    unitOfWork.<span class="property">memoizedProps</span> = unitOfWork.<span class="property">pendingProps</span>;</span><br><span class="line">    <span class="keyword">if</span>(next === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 说明已经完成</span></span><br><span class="line">        <span class="comment">// 完成工作单元</span></span><br><span class="line">        <span class="comment">// completeUnitOfWork(); // 这个方法之后写 先模拟一下完成工作</span></span><br><span class="line">        workInProgress = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果有子节点就成为下一个工作单元</span></span><br><span class="line">        workInProgress = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ReactFiberBeginWork.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HostComponent</span>, <span class="title class_">HostRoot</span>, <span class="title class_">HostText</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactWorkTags&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; processUpdateQueue &#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactFiberClassUpdateQueue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 5. 根据 `新的` 虚拟dom去构建  `新的` fiber链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; current 老fiber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; workInProgress 新fiber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 下一个工作单元</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">beginWork</span>(<span class="params">current, workInProgress</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beginWork&quot;</span>, workInProgress);</span><br><span class="line">    <span class="comment">// 判断类型不同处理方式返回子节点或者弟弟</span></span><br><span class="line">    <span class="keyword">switch</span>(workInProgress.<span class="property">tag</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">HostRoot</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">updateHostRoot</span>(current, workInProgress);</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">HostComponent</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">updateHostComponent</span>(current, workInProgress);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">HostText</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateHostRoot</span>(<span class="params">current, workInProgress</span>) &#123;</span><br><span class="line">    <span class="comment">// 需要知道它的子虚拟dom, 知道它的儿子的虚拟dom信息</span></span><br><span class="line">    <span class="comment">// 之前在根fiber的更新队列加的虚拟dom, 可以在这获取</span></span><br><span class="line">    <span class="title function_">processUpdateQueue</span>(workInProgress);</span><br><span class="line">    <span class="keyword">const</span> nextState = workInProgress.<span class="property">memoizedState</span>;</span><br><span class="line">    <span class="comment">// 获取虚拟节点</span></span><br><span class="line">    <span class="keyword">const</span> nextChildren = nextState.<span class="property">element</span>;</span><br><span class="line">    <span class="title function_">reconcileChildren</span>(current, workInProgress, nextChildren);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> workInProgress.<span class="property">child</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateHostComponents</span>(<span class="params">current, workInProgress</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="获取更新队列的虚拟dom"><a href="#获取更新队列的虚拟dom" class="headerlink" title="获取更新队列的虚拟dom"></a>获取更新队列的虚拟dom</h4><p>写上一步引入的<code>processUpdateQueue</code>方法</p><ol><li>ReactFiberClassUpdateQueue.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; markUpdateLaneFromFiberToRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactFiberConcurrentUpdate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initialUpdateQueue</span>(<span class="params">fiber</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建一个更新队列</span></span><br><span class="line">    <span class="comment">// pending 是循环链表</span></span><br><span class="line">    <span class="keyword">const</span> queue = &#123;</span><br><span class="line">        <span class="attr">shared</span>: &#123;</span><br><span class="line">            <span class="attr">pending</span>: <span class="literal">null</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fiber.<span class="property">updateQueue</span> = queue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">UpdateState</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> update = &#123;<span class="attr">tag</span>: <span class="title class_">UpdateState</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> update;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">enqueueUpdate</span>(<span class="params">fiber, update</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取根fiber的更新队列 (上一篇最后加的)</span></span><br><span class="line">    <span class="keyword">const</span> updateQueue = fiber.<span class="property">updateQueue</span>;</span><br><span class="line">    <span class="comment">// 获取等待执行的任务</span></span><br><span class="line">    <span class="keyword">const</span> pending = updateQueue.<span class="property">shared</span>.<span class="property">pending</span>;</span><br><span class="line">    <span class="comment">// 说明初始化的状态</span></span><br><span class="line">    <span class="keyword">if</span>(pending === <span class="literal">null</span>) &#123;</span><br><span class="line">        update.<span class="property">next</span> = update;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        update.<span class="property">next</span> = pending.<span class="property">next</span>;</span><br><span class="line">        pending.<span class="property">next</span> = update;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让等待更新指向当前update 开始更新</span></span><br><span class="line">    updateQueue.<span class="property">shared</span>.<span class="property">pending</span> = update;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从当前的fiber 到返回找到并返回根节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">markUpdateLaneFromFiberToRoot</span>(fiber);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据老状态和更新队列的更新计算最新的状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; workInProgress 要计算的fiber</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">processUpdateQueue</span>(<span class="params">workInProgress</span>) &#123;</span><br><span class="line">    <span class="comment">// 拿到更新队列</span></span><br><span class="line">    <span class="keyword">const</span> queue = workInProgress.<span class="property">updateQueue</span>;</span><br><span class="line">    <span class="comment">// 等待生效的队列</span></span><br><span class="line">    <span class="keyword">const</span> pendingQueue = queue.<span class="property">shared</span>.<span class="property">pending</span>;</span><br><span class="line">    <span class="comment">// 如果有更新, 或者更新队列里有内容</span></span><br><span class="line">    <span class="keyword">if</span>(pendingQueue !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 清除等待生效的更新 因为在这就要使用了可以清除了</span></span><br><span class="line">        queue.<span class="property">shared</span>.<span class="property">pending</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 获取最后一个等待生效的更新 </span></span><br><span class="line">        <span class="keyword">const</span> lastPendingUpdate = pendingQueue;</span><br><span class="line">        <span class="comment">// 第一个等待生效的更新</span></span><br><span class="line">        <span class="keyword">const</span> firstPendingUpdate = pendingQueue.<span class="property">next</span>;</span><br><span class="line">        <span class="comment">// 把更新链表剪开, 变成单向链表</span></span><br><span class="line">        lastPendingUpdate.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 获取老状态 (会不停更新和计算赋值新状态, 所以起名newState)</span></span><br><span class="line">        <span class="keyword">let</span> newState = workInProgress.<span class="property">memoizedState</span>;</span><br><span class="line">        <span class="keyword">let</span> update = firstPendingUpdate;</span><br><span class="line">        <span class="keyword">while</span>(update) &#123;</span><br><span class="line">            <span class="comment">// 根据老状态和更新计算新状态</span></span><br><span class="line">            newState = <span class="title function_">getStateFromUpdate</span>(update, newState);</span><br><span class="line">            update = update.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把最终计算到的状态赋值给 memoizedState</span></span><br><span class="line">        workInProgress.<span class="property">memoizedState</span> = newState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据老状态和更新, 计算新状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; update 更新</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; prevState 上一个状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 新状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStateFromUpdate</span>(<span class="params">update, prevState</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span>(update.<span class="property">tag</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">UpdateState</span>:</span><br><span class="line">            <span class="keyword">const</span> &#123; payload &#125; = update;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">assign</span>(&#123;&#125;, prevState, payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="根据子虚拟dom创建子fiber节点"><a href="#根据子虚拟dom创建子fiber节点" class="headerlink" title="根据子虚拟dom创建子fiber节点"></a>根据子虚拟dom创建子fiber节点</h4><p>上上步还有一个<code>reconcileChildren</code>没有定义</p><ol><li><p>ReactFiberBeginWork.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mountChildFibers, reconcileChildFibers &#125; <span class="keyword">from</span> <span class="string">&quot;./ReactChildFiber&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据新的虚拟dom生成新的fiber链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; current 老的父fiber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; workInProgress 新的父fiber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; nextChildren 新的子虚拟dom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reconcileChildren</span>(<span class="params">current, workInProgress, nextChildren</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果此新fiber没有老fiber, 说明是新创建的</span></span><br><span class="line">    <span class="keyword">if</span> (current === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 挂在子fiber</span></span><br><span class="line">        workInProgress.<span class="property">child</span> = <span class="title function_">mountChildFibers</span>(workInProgress, <span class="literal">null</span>, next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 更新:  协调子fiber列表 需要做DOM-DIFF   (初始化时的根fiber是有老fiber的(一开始创建的))</span></span><br><span class="line">        workInProgress.<span class="property">child</span> = <span class="title function_">reconcileChildFibers</span>(</span><br><span class="line">        workInProgress,</span><br><span class="line">        current.<span class="property">child</span>,</span><br><span class="line">        nextChildren</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>ReactChildFiber.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createFiberFromElement &#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactFiber&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">REACT_ELEMENT_TYPE</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../../shared/ReactSymbols&#x27;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; shouldTrackSideEffect 是否跟踪副作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createChildReconciler</span>(<span class="params">shouldTrackSideEffect</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reconcileSingElement</span>(<span class="params">returnFiber, currentFirstFiber, element</span>) &#123;</span><br><span class="line">        <span class="comment">// 因为我们实现的是初次挂载, 老节点currentFirstFiber是没有的, </span></span><br><span class="line">        <span class="comment">// 所以可以直接根据虚拟dom创建fiber节点</span></span><br><span class="line">        <span class="keyword">const</span> created = <span class="title function_">createFiberFromElement</span>(element);</span><br><span class="line">        created.<span class="property">return</span> = returnFiber;</span><br><span class="line">        <span class="keyword">return</span> created;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较子fiber  (DOM-DIFF) 就是用老的fiber链表和新的虚拟dom进行比较</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; returnFiber 新父fiber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; currentFirstFiber 当前的第一个子fiber(老fiber的第一个儿子)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; newChild 新的子虚拟dom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reconcileChildFibers</span>(<span class="params">returnFiber, currentFirstFiber, newChild</span>) &#123;</span><br><span class="line">        <span class="comment">// 现在暂时只考虑新的节点只有一个的情况</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> newChild === <span class="string">&#x27;object&#x27;</span> &amp;&amp; newChild !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (newChild.<span class="property">$$typeof</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="attr">REACT_ELEMENT_TYPE</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">reconcileSingElement</span>(</span><br><span class="line">                        returnFiber,</span><br><span class="line">                        currentFirstFiber,</span><br><span class="line">                        newChild</span><br><span class="line">                    );</span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reconcileChildFibers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有老父fiber 更新</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reconcileChildFibers = <span class="title function_">createChildReconciler</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 没有老的父fiber 更新</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mountChildFibers = <span class="title function_">createChildReconciler</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li><li><p>ReactFiber.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createFiberFromElement</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> type = element.<span class="property">type</span>;</span><br><span class="line">    <span class="keyword">const</span> key = element.<span class="property">key</span>;</span><br><span class="line">    <span class="keyword">const</span> pendingProps = element.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">const</span> fiber = <span class="title function_">createFiberFromTypeAndProps</span>(</span><br><span class="line">        type,</span><br><span class="line">        key,</span><br><span class="line">        pendingProps</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> fiber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createFiberFromTypeAndProps</span>(<span class="params">type, key, pendingProps</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fiberTag = <span class="title class_">IndeterminateComponent</span>;</span><br><span class="line">    <span class="keyword">const</span> fiber = <span class="title function_">createFiberNode</span>(fiberTag, pendingProps, key);</span><br><span class="line">    fiber.<span class="property">type</span> = type;</span><br><span class="line">    <span class="keyword">return</span> fiber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="完成工作单元"><a href="#完成工作单元" class="headerlink" title="完成工作单元"></a>完成工作单元</h3><ol><li>ReactFiberWorkLoop.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">completeUnitOfWork</span>(<span class="params">unitOfWork</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (next === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 说明已经完成</span></span><br><span class="line">    <span class="comment">// 完成工作单元</span></span><br><span class="line">    + <span class="title function_">completeUnitOfWork</span>(unitOfWork); <span class="comment">// 这个方法之后写 先模拟一下完成工作</span></span><br><span class="line">        <span class="comment">// workInProgress = null;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果有子节点就成为下一个工作单元</span></span><br><span class="line">        workInProgress = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">completeUnitOfWork</span>(<span class="params">unitOfWork</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> completeWork = unitOfWork;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 拿到他的父节点和当前节点RootFiber</span></span><br><span class="line">        <span class="keyword">const</span> current = completeWork.<span class="property">alternate</span>;</span><br><span class="line">        <span class="keyword">const</span> returnFiber = completeWork.<span class="property">return</span>;</span><br><span class="line">        <span class="keyword">let</span> next = <span class="title function_">completeWork</span>(current, completeWork);</span><br><span class="line">        <span class="comment">// 如果下一个节点不为空</span></span><br><span class="line">        <span class="keyword">if</span>(next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        workInProgress = next;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> siblingFiber = completeWork.<span class="property">sibling</span>;</span><br><span class="line">        <span class="comment">// 如果兄弟节点不为空</span></span><br><span class="line">        <span class="keyword">if</span>(siblingFiber !== <span class="literal">null</span>) &#123;</span><br><span class="line">        workInProgress = siblingFiber;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回父节点</span></span><br><span class="line">        completeWork = returnFiber;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span>(completeWork !== <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。</summary>
    
    
    
    <category term="React" scheme="https://batype.gitee.io/categories/React/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://batype.gitee.io/tags/JavaScript/"/>
    
    <category term="react" scheme="https://batype.gitee.io/tags/react/"/>
    
    <category term="JSX" scheme="https://batype.gitee.io/tags/JSX/"/>
    
  </entry>
  
  <entry>
    <title>unstate-next 的实现原理</title>
    <link href="https://batype.gitee.io/react/components/unstate-next-implement.html"/>
    <id>https://batype.gitee.io/react/components/unstate-next-implement.html</id>
    <published>2023-10-26T07:49:35.000Z</published>
    <updated>2023-10-26T12:50:44.436Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="定义实现Container接口"><a href="#定义实现Container接口" class="headerlink" title="定义实现Container接口"></a>定义实现Container接口</h4><p>需要实现包装方法和获取数据的hooks</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Container</span>&lt;<span class="title class_">Value</span>, <span class="title class_">State</span>&gt; &#123;</span><br><span class="line"><span class="title class_">Provider</span>: <span class="title class_">React</span>.<span class="property">ComponentType</span>&lt;<span class="title class_">ContainerProviderProps</span>&lt;<span class="title class_">State</span>&gt;&gt;;</span><br><span class="line"><span class="attr">useContainer</span>: <span class="function">() =&gt;</span> <span class="title class_">Value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义实现Provider接口"><a href="#定义实现Provider接口" class="headerlink" title="定义实现Provider接口"></a>定义实现Provider接口</h4><p>定义接口需要初始化参数和需要使用的子节点。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ContainerProviderProps 定义类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">State</span>&#125; <span class="variable">State</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">State</span>&#125; <span class="variable">initialState</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">React.ReactNode</span>&#125; <span class="variable">children</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ContainerProviderProps</span>&lt;<span class="title class_">State</span> = <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">initialState?: <span class="title class_">State</span>;</span><br><span class="line"><span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="createContainer-方法"><a href="#createContainer-方法" class="headerlink" title="createContainer 方法"></a>createContainer 方法</h4><p>在 <code>createContainer</code> 方法中，使用后会返回两个方法 <code>Provider</code> 和 <code>useContainer</code>。</p><p>步骤：</p><ol><li>使用React.createContext 创建Context；</li><li>自定义hooks 获取属性；</li><li>需要使用Context 子组件使用Provider 包装， 将数据写入Context；</li><li>使用React.useContext 从 Context 中获取属性</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> createContainer&lt;<span class="title class_">Value</span>, <span class="title class_">State</span> = <span class="built_in">void</span>&gt;(</span><br><span class="line"><span class="attr">useHook</span>: <span class="function">(<span class="params">initialState?: State</span>) =&gt;</span> <span class="title class_">Value</span></span><br><span class="line">): <span class="title class_">Container</span>&lt;<span class="title class_">Value</span>, <span class="title class_">State</span>&gt; &#123;</span><br><span class="line"><span class="comment">// 使用React.createContext 创建Context</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title class_">React</span>.<span class="property">createContext</span>&lt;<span class="title class_">Value</span> | <span class="keyword">typeof</span> <span class="variable constant_">EMPTY</span>&gt;(<span class="variable constant_">EMPTY</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Provider</span>(<span class="params">props: ContainerProviderProps&lt;State&gt;</span>) &#123;</span><br><span class="line">    <span class="comment">// 自定义hooks 获取属性</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="title function_">useHook</span>(props.<span class="property">initialState</span>);</span><br><span class="line">    <span class="comment">// 需要使用Context 子组件使用Provider 包装， 将数据写入Context。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span>&gt;</span>&#123;props?.children&#125;<span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useContainer</span>(<span class="params"></span>): <span class="title class_">Value</span> &#123;</span><br><span class="line">    <span class="comment">// 使用React.useContext 从 Context 中获取属性</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="title class_">React</span>.<span class="title function_">useContext</span>(<span class="title class_">Context</span>);</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="variable constant_">EMPTY</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Component must be wrapped with &lt;Container.Provider&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title class_">Provider</span>,</span><br><span class="line">    useContainer,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="useContainer"><a href="#useContainer" class="headerlink" title="useContainer"></a>useContainer</h4><p>使用useContainer 从 Container 中直接获取属性。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> useContainer&lt;<span class="title class_">Value</span>, <span class="title class_">State</span> = <span class="built_in">void</span>&gt;(</span><br><span class="line"><span class="attr">container</span>: <span class="title class_">Container</span>&lt;<span class="title class_">Value</span>, <span class="title class_">State</span>&gt;</span><br><span class="line">): <span class="title class_">Value</span> &#123;</span><br><span class="line"><span class="keyword">return</span> container.<span class="title function_">useContainer</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="unstate-next-使用"><a href="#unstate-next-使用" class="headerlink" title="unstate-next 使用"></a><a href="./unstate-next-use.html">unstate-next 使用</a></h4><h4 id="实现code"><a href="#实现code" class="headerlink" title="实现code"></a>实现code</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">EMPTY</span>: unique <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ContainerProviderProps 定义类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">State</span>&#125; <span class="variable">State</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">State</span>&#125; <span class="variable">initialState</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">React.ReactNode</span>&#125; <span class="variable">children</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ContainerProviderProps</span>&lt;<span class="title class_">State</span> = <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">initialState?: <span class="title class_">State</span>;</span><br><span class="line"><span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Container</span>&lt;<span class="title class_">Value</span>, <span class="title class_">State</span>&gt; &#123;</span><br><span class="line"><span class="title class_">Provider</span>: <span class="title class_">React</span>.<span class="property">ComponentType</span>&lt;<span class="title class_">ContainerProviderProps</span>&lt;<span class="title class_">State</span>&gt;&gt;;</span><br><span class="line"><span class="attr">useContainer</span>: <span class="function">() =&gt;</span> <span class="title class_">Value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> createContainer&lt;<span class="title class_">Value</span>, <span class="title class_">State</span> = <span class="built_in">void</span>&gt;(</span><br><span class="line"><span class="attr">useHook</span>: <span class="function">(<span class="params">initialState?: State</span>) =&gt;</span> <span class="title class_">Value</span></span><br><span class="line">): <span class="title class_">Container</span>&lt;<span class="title class_">Value</span>, <span class="title class_">State</span>&gt; &#123;</span><br><span class="line"><span class="comment">// 使用React.createContext 创建Context</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title class_">React</span>.<span class="property">createContext</span>&lt;<span class="title class_">Value</span> | <span class="keyword">typeof</span> <span class="variable constant_">EMPTY</span>&gt;(<span class="variable constant_">EMPTY</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Provider</span>(<span class="params">props: ContainerProviderProps&lt;State&gt;</span>) &#123;</span><br><span class="line">    <span class="comment">// 自定义hooks 获取属性</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="title function_">useHook</span>(props.<span class="property">initialState</span>);</span><br><span class="line">    <span class="comment">// 需要使用Context 子组件使用Provider 包装， 将数据写入Context。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span>&gt;</span>&#123;props?.children&#125;<span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useContainer</span>(<span class="params"></span>): <span class="title class_">Value</span> &#123;</span><br><span class="line">    <span class="comment">// 使用React.useContext 从 Context 中获取属性</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="title class_">React</span>.<span class="title function_">useContext</span>(<span class="title class_">Context</span>);</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="variable constant_">EMPTY</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Component must be wrapped with &lt;Container.Provider&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title class_">Provider</span>,</span><br><span class="line">    useContainer,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> useContainer&lt;<span class="title class_">Value</span>, <span class="title class_">State</span> = <span class="built_in">void</span>&gt;(</span><br><span class="line"><span class="attr">container</span>: <span class="title class_">Container</span>&lt;<span class="title class_">Value</span>, <span class="title class_">State</span>&gt;</span><br><span class="line">): <span class="title class_">Value</span> &#123;</span><br><span class="line"><span class="keyword">return</span> container.<span class="title function_">useContainer</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">unstate-next 的实现原理，根据 React.createContext 和 React.useContext 方法重新包装，简化使用步骤。</summary>
    
    
    
    <category term="React" scheme="https://batype.gitee.io/categories/React/"/>
    
    <category term="components" scheme="https://batype.gitee.io/categories/React/components/"/>
    
    <category term="unstate-next" scheme="https://batype.gitee.io/categories/React/components/unstate-next/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://batype.gitee.io/tags/TypeScript/"/>
    
    <category term="react" scheme="https://batype.gitee.io/tags/react/"/>
    
    <category term="unstate-next" scheme="https://batype.gitee.io/tags/unstate-next/"/>
    
  </entry>
  
  <entry>
    <title>Fiber架构工作原理</title>
    <link href="https://batype.gitee.io/react/fiber/works.html"/>
    <id>https://batype.gitee.io/react/fiber/works.html</id>
    <published>2023-10-25T10:12:49.000Z</published>
    <updated>2023-10-27T13:18:10.726Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="什么是“双缓存”？"><a href="#什么是“双缓存”？" class="headerlink" title="什么是“双缓存”？"></a>什么是“双缓存”？</h2><p>“双缓存”是一种常见的图形处理技术，用于在图像渲染中实现平滑的、无闪烁的更新效果。它通过使用两个缓冲区（即两块内存区域）来完成。其中一个缓冲区用于显示图像，而另一个缓冲区则用于在后台进行图像的更新和绘制。当更新完成后，通过交换两个缓冲区的引用，以实现无缝的切换和更新。</p><p>在图形处理中使用双缓存的好处包括：</p><ol><li>无闪烁：通过在后台缓冲区进行绘制，然后将绘制结果一次性地切换到显示缓冲区，可以避免在图像更新过程中的闪烁问题。这对于实时图形、动画和视频等应用非常重要。</li><li>平滑更新：使用双缓冲可以实现平滑的更新效果。在后台缓冲区进行绘制和更新，然后在更新完成后将其切换到显示缓冲区，可以避免直接在显示缓冲区上进行绘制和修改，从而减少了可能出现的可见的渲染中间状态。</li><li>减少渲染延迟：使用双缓冲可以减少渲染延迟。由于绘制和更新发生在后台缓冲区，因此可以在绘制完成后立即切换到显示缓冲区，从而减少了等待绘制完成的时间，提高了渲染效率和响应时间。</li></ol><p>双缓存技术在图形处理、动画、视频播放和游戏开发等领域得到广泛应用。在图形库、操作系统和桌面应用程序中，双缓存被用于实现平滑的图像渲染和交互效果。在前端开发中，双缓存也被广泛应用于图形绘制和动画效果的实现，以提供更好的用户体验。</p><p><code>React</code>使用“双缓存”来完成<code>Fiber树</code>的构建与替换——对应着<code>DOM树</code>的创建与更新。</p><h2 id="双缓存Fiber树"><a href="#双缓存Fiber树" class="headerlink" title="双缓存Fiber树"></a>双缓存Fiber树</h2><p>在<code>React</code>中最多会同时存在两棵<code>Fiber树</code>。当前屏幕上显示内容对应的<code>Fiber树</code>称为<code>current Fiber树</code>，正在内存中构建的<code>Fiber树</code>称为<code>workInProgress Fiber树</code>。</p><p><code>current Fiber树</code>中的<code>Fiber节点</code>被称为<code>current fiber</code>，<code>workInProgress Fiber树</code>中的<code>Fiber节点</code>被称为<code>workInProgress fiber</code>，他们通过<code>alternate</code>属性连接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">currentFiber.<span class="property">alternate</span> === workInProgressFiber;</span><br><span class="line">workInProgressFiber.<span class="property">alternate</span> === currentFiber;</span><br></pre></td></tr></table></figure><p><code>React </code>应用的根节点通过使 <code>current </code> 指针在不同 <code>Fiber树</code> 的 <code>rootFiber</code> 间切换来完成 <code>current Fiber</code> 树指向的切换。</p><p>即当 <code>workInProgress Fiber树</code> 构建完成交给 <code>Renderer</code> 渲染在页面上后，应用根节点的 <code>current</code> 指针指向 <code>workInProgress Fiber树</code> ，此时<code>workInProgress Fiber树</code>就变为<code>current Fiber树</code>。</p><p>每次状态更新都会产生新的<code>workInProgress Fiber树</code>，通过<code>current</code>与<code>workInProgress</code>的替换，完成<code>DOM</code>更新。</p><p>接下来我们以具体例子讲解<code>mount时</code>、<code>update时</code>的构建&#x2F;替换流程。</p><h2 id="mount时"><a href="#mount时" class="headerlink" title="mount时"></a>mount时</h2><p>考虑如下例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><ol><li>首次执行<code>ReactDOM.render</code>会创建<code>fiberRootNode</code>（源码中叫<code>fiberRoot</code>）和<code>rootFiber</code>。其中<code>fiberRootNode</code>是整个应用的根节点，<code>rootFiber</code>是<code>&lt;App/&gt;</code>所在组件树的根节点。</li></ol><p>之所以要区分<code>fiberRootNode</code>与<code>rootFiber</code>，是因为在应用中我们可以多次调用<code>ReactDOM.render</code>渲染不同的组件树，他们会拥有不同的<code>rootFiber</code>。但是整个应用的根节点只有一个，那就是<code>fiberRootNode</code>。</p><p><code>fiberRootNode</code>的<code>current</code>会指向当前页面上已渲染内容对应<code>Fiber树</code>，即<code>current Fiber树</code>。</p><p><img src="https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg" alt="fiberRootNode"></p><p><code>fiberRootNode.current = rootFiber;</code></p><p>由于是首屏渲染，页面中还没有挂载任何<code>DOM</code>，所以<code>fiberRootNode.current</code>指向的<code>rootFiber</code>没有任何<code>子Fiber节点</code>（即<code>current Fiber树</code>为空）。</p><ol start="2"><li>接下来进入<code>render阶段</code>，根据组件返回的<code>JSX</code>在内存中依次创建<code>Fiber节点</code>并连接在一起构建<code>Fiber树</code>，被称为<code>workInProgress Fiber树</code>。（下图中右侧为内存中构建的树，左侧为页面显示的树）</li></ol><p>在构建<code>workInProgress Fiber树</code>时会尝试复用<code>current Fiber树</code>中已有的<code>Fiber节点</code>内的属性，在<code>首屏渲染</code>时只有<code>rootFiber</code>存在对应的<code>current fiber</code>（即<code>rootFiber.alternate</code>）。</p><p><img src="https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg"></p><ol start="3"><li>图中右侧已构建完的<code>workInProgress Fiber树</code>在<code>commit阶段</code>渲染到页面。</li></ol><p>此时<code>DOM</code>更新为右侧树对应的样子。<code>fiberRootNode</code>的<code>current</code>指针指向<code>workInProgress Fiber树</code>使其变为<code>current Fiber 树</code>。</p><p><img src="https://react.iamkasong.com/img/wipTreeFinish.png"></p><h2 id="update时"><a href="#update时" class="headerlink" title="update时"></a>update时</h2><ol><li><p>接下来我们点击<code>p节点</code>触发状态改变，这会开启一次新的<code>render阶段</code>并构建一棵新的<code>workInProgress Fiber 树</code>。</p><p><img src="https://react.iamkasong.com/img/wipTreeUpdate.png"></p></li></ol><p>和<code>mount</code>时一样，<code>workInProgress fiber</code>的创建可以复用<code>current Fiber树</code>对应的节点数据。</p><ol start="2"><li><code>workInProgress Fiber 树</code>在<code>render阶段</code>完成构建后进入<code>commit阶段</code>渲染到页面上。渲染完毕后，<code>workInProgress Fiber 树</code>变为<code>current Fiber 树</code>。</li></ol><p><img src="https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg" alt="渲染过程"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">在`React`中最多会同时存在两棵`Fiber树`。当前屏幕上显示内容对应的`Fiber树`称为`current Fiber树`，正在内存中构建的`Fiber树`称为`workInProgress Fiber树`。</summary>
    
    
    
    <category term="React" scheme="https://batype.gitee.io/categories/React/"/>
    
    <category term="Fiber" scheme="https://batype.gitee.io/categories/React/Fiber/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://batype.gitee.io/tags/JavaScript/"/>
    
    <category term="react" scheme="https://batype.gitee.io/tags/react/"/>
    
    <category term="Fiber" scheme="https://batype.gitee.io/tags/Fiber/"/>
    
  </entry>
  
  <entry>
    <title>unstate-next 的使用</title>
    <link href="https://batype.gitee.io/react/components/unstate-next-use.html"/>
    <id>https://batype.gitee.io/react/components/unstate-next-use.html</id>
    <published>2023-10-25T08:42:53.000Z</published>
    <updated>2023-10-26T12:50:44.436Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><p><a href="https://gitcode.net/qq_35490191/React-TypeScript">Code-Test</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save unstated-next</span><br><span class="line"></span><br><span class="line">yarn add unstated-next</span><br></pre></td></tr></table></figure><h4 id="createContainer"><a href="#createContainer" class="headerlink" title="createContainer"></a>createContainer</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createContainer &#125; <span class="keyword">from</span> <span class="string">&quot;unstated-next&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useCounter</span> = (<span class="params">props: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; initNum &#125; = props;</span><br><span class="line">    <span class="keyword">const</span> [num, changeNum] = useState&lt;<span class="built_in">number</span>&gt;(initNum);</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">decrement</span> = (<span class="params"></span>) =&gt; <span class="title function_">changeNum</span>(num - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="title function_">changeNum</span>(num + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;num, decrement, increment&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Counter</span> = <span class="title function_">createContainer</span>(useCounter);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="use-Provider-initialState"><a href="#use-Provider-initialState" class="headerlink" title="use Provider &amp;&amp; initialState"></a>use Provider &amp;&amp; initialState</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Counter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Context&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">TestCounter</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./TestCounter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Counter.Provider</span> <span class="attr">initialState</span>=<span class="string">&#123;&#123;</span> <span class="attr">initNum:</span> <span class="attr">1</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">TestCounter</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Counter.Provider</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="useContainer"><a href="#useContainer" class="headerlink" title="useContainer"></a>useContainer</h4><h5 id="TestCounter"><a href="#TestCounter" class="headerlink" title="TestCounter"></a>TestCounter</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Counter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Context&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">TestChild</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./TestChild&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">TestCounter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num, decrement &#125; = <span class="title class_">Counter</span>.<span class="title function_">useContainer</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;decrement&#125;</span>&gt;</span>减法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">TestChild</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TestChild"><a href="#TestChild" class="headerlink" title="TestChild"></a>TestChild</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Counter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Context&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">TestChild</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num, increment &#125; = <span class="title class_">Counter</span>.<span class="title function_">useContainer</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;num&#125; <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>加法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">unstated-next 的使用可以简化react state manager，可以替换React 原有的useContext 方法, 亦可以管理全局状态信息。</summary>
    
    
    
    <category term="React" scheme="https://batype.gitee.io/categories/React/"/>
    
    <category term="components" scheme="https://batype.gitee.io/categories/React/components/"/>
    
    <category term="unstate-next" scheme="https://batype.gitee.io/categories/React/components/unstate-next/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://batype.gitee.io/tags/TypeScript/"/>
    
    <category term="react" scheme="https://batype.gitee.io/tags/react/"/>
    
    <category term="unstate-next" scheme="https://batype.gitee.io/tags/unstate-next/"/>
    
  </entry>
  
  <entry>
    <title>nvm 管理node版本</title>
    <link href="https://batype.gitee.io/web/npm/nvm.html"/>
    <id>https://batype.gitee.io/web/npm/nvm.html</id>
    <published>2023-10-25T07:47:01.000Z</published>
    <updated>2023-10-26T12:50:44.451Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="Windows-上安装"><a href="#Windows-上安装" class="headerlink" title="Windows 上安装"></a>Windows 上安装</h4><p><a href="https://github.com/nvm-sh/nvm">nvm_github</a></p><ol><li>点击 “Code” 按钮，然后选择 “Download ZIP” 下载 ZIP 文件。</li><li>解压缩 ZIP 文件：解压缩下载的 ZIP 文件，将解压后的文件夹放在您想要安装 NVM 的位置。</li><li>配置环境变量：打开命令提示符或 PowerShell，并运行以下命令来配置 NVM 的环境变量：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setx NVM_HOME &quot;解压缩文件夹的完整路径&quot;</span><br><span class="line">setx NVM_SYMLINK &quot;解压缩文件夹的完整路径&quot;</span><br></pre></td></tr></table></figure><h4 id="Linux-上安装"><a href="#Linux-上安装" class="headerlink" title="Linux 上安装"></a>Linux 上安装</h4><ol><li>下载 NVM 安装脚本：打开终端并运行以下命令下载 NVM 安装脚本：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span><br></pre></td></tr></table></figure><p>这将从 NVM GitHub 存储库下载并运行安装脚本。</p><ol start="2"><li>配置 NVM 环境变量：安装脚本运行后，会将 NVM 相关的路径和初始化脚本添加到您的个人配置文件（如 <del>&#x2F;.bashrc、</del>&#x2F;.zshrc 等）。要使这些更改生效，可以运行以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>如果您使用的是其他 Shell，替换 ~&#x2F;.bashrc 为您实际使用的配置文件。</p><h4 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm --version</span><br></pre></td></tr></table></figure><h4 id="安装node-js-版本"><a href="#安装node-js-版本" class="headerlink" title="安装node.js 版本"></a>安装node.js 版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install &lt;version&gt;</span><br></pre></td></tr></table></figure><p><strong>例如</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 16.13.0</span><br></pre></td></tr></table></figure><p>安装成功后，NVM 会自动将该版本设置为默认版本。</p><h4 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h4><p>切换 Node.js 版本：如果您有多个安装的 Node.js 版本，可以使用以下命令切换不同的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure><p><strong>例如</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 18.16.0</span><br></pre></td></tr></table></figure><p>这将将您的当前 Shell 会话设置为使用指定的 Node.js 版本。</p><h4 id="查询当前版本"><a href="#查询当前版本" class="headerlink" title="查询当前版本"></a>查询当前版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use node</span><br></pre></td></tr></table></figure><h4 id="查询当前node路径"><a href="#查询当前node路径" class="headerlink" title="查询当前node路径"></a>查询当前node路径</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm which 18.16.0</span><br><span class="line">/Users/shaosong/.nvm/versions/node/v18.16.0/bin/node</span><br></pre></td></tr></table></figure><h4 id="listing-Version"><a href="#listing-Version" class="headerlink" title="listing Version"></a>listing Version</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure><h4 id="设置默认version"><a href="#设置默认version" class="headerlink" title="设置默认version"></a>设置默认version</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm alias default 18.16.0</span><br></pre></td></tr></table></figure><p>现在，您已经在 Linux 上成功安装了 NVM。您可以使用 nvm use 命令切换不同的 Node.js 版本，并使用 node 和 npm 命令来管理您的 Node.js 环境。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">nvm -- Node version manager。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/npm/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://batype.gitee.io/tags/npm/"/>
    
    <category term="nvm" scheme="https://batype.gitee.io/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>nrm 管理 npm registry</title>
    <link href="https://batype.gitee.io/web/npm/nrm.html"/>
    <id>https://batype.gitee.io/web/npm/nrm.html</id>
    <published>2023-10-25T07:25:17.000Z</published>
    <updated>2023-10-26T12:50:44.436Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><p><code>npm install -g nrm</code></p><h4 id="nrm-ls"><a href="#nrm-ls" class="headerlink" title="nrm ls"></a>nrm ls</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nrm ls</span><br><span class="line"></span><br><span class="line">npm ---------- https://registry.npmjs.org/</span><br><span class="line">yarn --------- https://registry.yarnpkg.com/</span><br><span class="line">tencent ------ https://mirrors.cloud.tencent.com/npm/</span><br><span class="line">cnpm --------- https://r.cnpmjs.org/</span><br><span class="line">taobao ------- https://registry.npmmirror.com/</span><br><span class="line">npmMirror ---- https://skimdb.npmjs.com/registry/</span><br></pre></td></tr></table></figure><h4 id="nrm-use"><a href="#nrm-use" class="headerlink" title="nrm use"></a>nrm use</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nrm use taobao</span><br><span class="line">Registry has been set to: https://registry.npmmirror.com/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Usage: nrm [options] [command]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version                           output the version number</span><br><span class="line">  -h, --help                              output usage information</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  ls                                      List all the registries</span><br><span class="line">  current [options]                       Show current registry name or URL</span><br><span class="line">  use &lt;registry&gt;                          Change registry to registry</span><br><span class="line">  add &lt;registry&gt; &lt;url&gt; [home]             Add one custom registry</span><br><span class="line">  login [options] &lt;registryName&gt; [value]  Set authorize information for a custom registry with a base64 encoded string or username and pasword</span><br><span class="line">  set-hosted-repo &lt;registry&gt; &lt;value&gt;      Set hosted npm repository for a custom registry to publish packages</span><br><span class="line">  set-scope &lt;scopeName&gt; &lt;value&gt;           Associating a scope with a registry</span><br><span class="line">  del-scope &lt;scopeName&gt;                   Remove a scope</span><br><span class="line">  set [options] &lt;registryName&gt;            Set custom registry attribute</span><br><span class="line">  rename &lt;registryName&gt; &lt;newName&gt;         Set custom registry name</span><br><span class="line">  del &lt;registry&gt;                          Delete one custom registry</span><br><span class="line">  home &lt;registry&gt; [browser]               Open the homepage of registry with optional browser</span><br><span class="line">  publish [options] [&lt;tarball&gt;|&lt;folder&gt;]  Publish package to current registry if current registry is a custom registry.</span><br><span class="line">   if you&#x27;re not using custom registry, this command will run npm publish directly</span><br><span class="line">  test [registry]                         Show response time for specific or all registries</span><br><span class="line">  help                                    Print this help </span><br><span class="line">   if you want to clear the NRM configuration when uninstall you can execute &quot;npm uninstall nrm -g -C or npm uninstall nrm -g --clean&quot;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">nrm -- NPM registry manager。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/npm/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="npm" scheme="https://batype.gitee.io/tags/npm/"/>
    
    <category term="nrm" scheme="https://batype.gitee.io/tags/nrm/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 内容分页配置</title>
    <link href="https://batype.gitee.io/hexo/config/pagination.html"/>
    <id>https://batype.gitee.io/hexo/config/pagination.html</id>
    <published>2023-10-23T13:27:22.000Z</published>
    <updated>2023-10-23T13:27:24.363Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="per-page-config-yml"><a href="#per-page-config-yml" class="headerlink" title="per_page _config.yml"></a>per_page _config.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">20</span> <span class="comment"># 分页条数</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span> <span class="comment"># 自定义分页路径</span></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">Hexo 内容分页配置Pagination，有助于阅读能力的提升。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="框架" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Hexo" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Hexo/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Hexo" scheme="https://batype.gitee.io/tags/Hexo/"/>
    
    <category term="Pagination" scheme="https://batype.gitee.io/tags/Pagination/"/>
    
  </entry>
  
  <entry>
    <title>webpack 热更新的实现原理</title>
    <link href="https://batype.gitee.io/web/webpack/hot/module/replacement.html"/>
    <id>https://batype.gitee.io/web/webpack/hot/module/replacement.html</id>
    <published>2023-10-23T12:43:25.000Z</published>
    <updated>2023-10-23T12:44:35.814Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。<br>原理：<br><img src="https://pic.imgdb.cn/item/65366aa5c458853aefbf449c.png" alt="在这里插入图片描述"></p><p>⾸先要知道 server 端和 client 端都做了处理⼯作：</p><ol><li>在 webpack 的 watch 模式下，⽂件系统中某⼀个⽂件发⽣修改，webpack 监听到⽂件变化，根据配置⽂件对模块重新编译打包，并将打包后的代码通过简单的JavaScript对象保存在内存中。</li><li>webpack-dev-server 和 webpack 之间的接⼝交互，⽽在这⼀步，主要是 dev-server 的中间件webpack- dev-middleware和 webpack 之间的交互，webpack-dev-middleware 调⽤webpack暴露的 API 对代码变化进⾏监 控，并且告诉webpack，将代码打包到内存中。</li><li>webpack-dev-server 对⽂件变化的⼀个监控，这⼀步不同于第⼀步，并不是监控代码变化重新打包。当我们在配置⽂件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置⽂件夹中静态⽂件的变化，变化后会通知浏览器端对应⽤进⾏ live reload。注意，这⼉是浏览器刷新，和HMR 是两个概念。</li><li>webpack-dev-server 代码的⼯作，该步骤主要是通过sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建⽴⼀个 websocket ⻓连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中Server 监听静态⽂件变化的信息。浏览器端根据这些 socket 消息进⾏不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后⾯的步骤根据这⼀hash 值来进⾏模块热替换。</li><li>webpack-dev-server&#x2F;client 端并不能够请求更新的代码，也不会执⾏ 热 更 模 块 操 作 ， ⽽ 把 这 些 ⼯ 作⼜交回给了webpack，webpack&#x2F;hot&#x2F;dev-server 的 ⼯ 作就是根据webpack-dev-server&#x2F;client 传给它的信息以及dev-server的配置决定是刷新浏览器呢还是进⾏模块热更新。当然如果仅仅是刷新浏览器，也就没有后⾯那些步骤了。</li><li>HotModuleReplacement.runtime 是客户端HMR 的中枢，它接收到上⼀ 步 传 递 给 他 的 新 模 块 的hash 值，它通过JsonpMainTemplate.runtime 向 server 端发送Ajax 请求，服务端返回⼀个 json，该 json 包含了所有要更新的模块的hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。</li><li>⽽第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进⾏对⽐，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引⽤。</li></ol><p>最后⼀步，当 HMR 失败后，回退到 live reload 操作，也就是进⾏浏览器刷新来获取最新打包代码。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="WebPack" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/WebPack/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="WebPack" scheme="https://batype.gitee.io/tags/WebPack/"/>
    
  </entry>
  
  <entry>
    <title>对原型、原型链的理解</title>
    <link href="https://batype.gitee.io/javascript/prototype.html"/>
    <id>https://batype.gitee.io/javascript/prototype.html</id>
    <published>2023-10-23T12:37:51.000Z</published>
    <updated>2023-10-23T12:45:14.869Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在 JavaScript 中是使用构造两数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造西数的所有实例共享的属性和方法。<br>当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造两数的prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在 浏览器中都实现了_proto_ 属性来访问这个属性，但是最好不要 使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法米获取对象的原型。 </p><p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象义会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 0bject.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。 </p><p>特点：JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。<br><img src="https://pic.imgdb.cn/item/65366accc458853aefbfcd92.jpg" alt="原型链图解"><br>那么原型链的终点是什么？如何打印出原型链的终点？</p><p>由于 Object 是构造函数，原型链终点 Ob ject.prototype._proto_，而 Object.prototype.<em>proto</em> &#x3D;&#x3D;&#x3D; null &#x2F;&#x2F; true，所以，原型链的终点是 null。原型链上的所有原型都是对象，所有的对象最终都是由 0bject 构造的，而 Object.prototype 的下一级是Object. prototype._proto_。</p><p><img src="https://pic.imgdb.cn/item/653668e4c458853aefb94875.jpg" alt="在这里插入图片描述"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="es6" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/es6/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://batype.gitee.io/tags/JavaScript/"/>
    
    <category term="es6" scheme="https://batype.gitee.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>var、let、const的区别</title>
    <link href="https://batype.gitee.io/javascript/var/let/const.html"/>
    <id>https://batype.gitee.io/javascript/var/let/const.html</id>
    <published>2023-10-23T12:34:19.000Z</published>
    <updated>2023-10-23T12:35:56.937Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="var-关键词"><a href="#var-关键词" class="headerlink" title="var 关键词"></a>var 关键词</h5><ol><li>var声明作用域<br>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="string">&quot;hello world&quot;</span>;   <span class="comment">// 局部变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>函数test()调用时会创建变量message并给它赋值，调用之后变量随即被销毁。因此，在函数test()之外调用变量message会报错</p><p>在函数内定义变量时省略var操作符，可以创建一个全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    message = <span class="string">&quot;hello world&quot;</span>;   <span class="comment">// 局部变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);  <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p>省略掉var操作符之后，message就变成了全局变量。只要调用一次函数test()，就会定义这个变量，并且可以在函数外部访问到。在局部作用域中定义的全局变量很难维护，不推荐这么做。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出ReferenceError。</p><ol start="2"><li>var声明提升<br>var在js中是支持预解析的，如下代码不会报错。这是因为使用var声明的变量会自动提升到函数作用域顶部：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>javaScript引擎，在代码预编译时，javaScript引擎会自动将所有代码里面的var关键字声明的语句都会提升到当前作用域的顶端,如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> age;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">    age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h5 id="let声明"><a href="#let声明" class="headerlink" title="let声明"></a>let声明</h5><ol><li>let声明作用域<br>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问，而var可以跨块访问</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var定义的变量</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// Matt</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// Matt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let定义的变量</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// ReferenceError: age没有定义</span></span><br></pre></td></tr></table></figure><p>let也不允许同一个块作用域中出现冗余声明（重复声明）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">let</span> age; <span class="comment">// SyntaxError；标识符age已经声明过了</span></span><br></pre></td></tr></table></figure><ol start="2"><li>暂时性死区<br>let、const与var的另一个重要的区别，let、const声明的变量不会在作用域中被提升。ES6新增的let、const关键字声明的变量会产生块级作用域，如果变量在当前作用域中被创建出来，由于此时还未完成语法绑定，所以是不能被访问的，如果访问就会抛出错误ReferenceError。因此，在这运行流程进入作用域创建变量，到变量可以被访问之间的这一段时间，就称之为暂时死区。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name会被提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// age不会被提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// ReferenceError：age没有定义</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>全局声明<br>与var关键字不同，var定义的全局变量会挂载到window对象上，使用window可以访问，而let在全局作用域中声明的变量不会成为window对象的属性</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span>); <span class="comment">// &#x27;Matt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">age</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ol start="4"><li>for循环中的var、let声明<br>for循环中var定义的迭代变量会渗透到循环体外部：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    <span class="comment">// 循环逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>改成使用let之后，这个问题就消失了，因为迭代变量的作用域仅限于for循环块内部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    <span class="comment">// 循环逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// ReferenceError: i没有定义</span></span><br></pre></td></tr></table></figure><p>使用var和let定义for循环中的变量，循环里使用定时器setTimeout后循环结果如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出5、5、5、5、5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出0、1、2、3、4</span></span><br></pre></td></tr></table></figure><p>let 是在代码块内有效，var 是在全局范围内有效。let 只能声明一次 ，var 可以声明多次。</p><p>当同步代码执行完毕后，开始执行异步的setTimeout代码，执行setTimeout时需要从当前作用域内寻找一个变量 i，for循环执行完毕，当前 i&#x3D;5，执行setTimeout时输出为5，任务队列中的剩余4个setTimeout也依次执行，输出为5。</p><p>变量 j 是用 let 声明的，当前的 i 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出0-4。</p><h5 id="const声明"><a href="#const声明" class="headerlink" title="const声明"></a>const声明</h5><p>const的行为与let基本相同，唯一一个重要的区别是：</p><p>const是用来定义常量的，而且定义的时候必须赋值，不赋值会报错，定义之后是不允许被修改的，修改const声明的变量会导致运行时错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">26</span>;</span><br><span class="line">age = <span class="number">36</span>; <span class="comment">// TypeError: 给常量赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const也不允许重复声明</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Nicholas&#x27;</span>; <span class="comment">// SyntaxError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const声明的作用域也是块</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;Nicholas&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// Matt</span></span><br></pre></td></tr></table></figure><p>而const声明的变量是一个对象时，修改这个对象内部的属性并不会报错。</p><p>这是因为const声明的是栈区里的内容不能修改，基本数据类型的值直接在栈内存中存储，而引用数据类型在栈区保存的是对象在堆区的地址，修改对象的属性，不会修改对象在栈区的地址，如果重新给对象person赋值，则会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Lili&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Matt&#x27;</span>; <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>JavaScript引擎会为for循环中的let声明分别创建独立的变量实例，虽然const变量跟let变量很相似，但是不能用const来声明迭代变量（因为迭代变量会自增）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;&#125; <span class="comment">// TypeError：给常量赋值</span></span><br></pre></td></tr></table></figure><p>不过，如果你只想用const声明一个不会被修改的for循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对for-of和for-in循环特别有意义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> j = <span class="number">7</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7, 7, 7, 7, 7</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a, b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">var、let、const三大基础类型使用非常广泛，所以需要切实熟练使用他们，更需要了解他们的所有属性。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="es6" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/es6/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://batype.gitee.io/tags/JavaScript/"/>
    
    <category term="es6" scheme="https://batype.gitee.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 开启公众号引流工具</title>
    <link href="https://batype.gitee.io/hexo/config/readmore.html"/>
    <id>https://batype.gitee.io/hexo/config/readmore.html</id>
    <published>2023-10-23T02:31:24.000Z</published>
    <updated>2023-10-23T12:33:02.357Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h3 id="配置博客信息"><a href="#配置博客信息" class="headerlink" title="配置博客信息"></a>配置博客信息</h3><p><img src="https://pic.imgdb.cn/item/6535dc4dc458853aef3ec866.jpg"></p><h3 id="hexo-config-yml-配置"><a href="#hexo-config-yml-配置" class="headerlink" title="hexo _config.yml 配置"></a>hexo _config.yml 配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="attr">readmore:</span></span><br><span class="line">    <span class="attr">blogId:</span> <span class="number">31652</span><span class="number">-1697970027416</span><span class="number">-119</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">BaType</span></span><br><span class="line">    <span class="attr">qrcode:</span> <span class="string">https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg</span></span><br><span class="line">    <span class="attr">keyword:</span> <span class="number">666</span></span><br></pre></td></tr></table></figure><p>其中,配置参数含义如下:</p><ul><li>blogId : [必选]OpenWrite 后台申请的博客唯一标识,例如:31652-1697970027416-119</li><li>name : [必选]OpenWrite 后台申请的博客名称,例如:BaType</li><li>qrcode : [必选]OpenWrite 后台申请的微信公众号二维码,例如:<a href="https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg">https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg</a></li><li>keyword : [必选]OpenWrite 后台申请的微信公众号后台回复关键字,例如:666</li></ul><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p><code>npm install hexo-plugin-readmore --save</code></p><h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><p><img src="https://pic.imgdb.cn/item/6535dddec458853aef428ef6.jpg"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">Hexo 开启公众号引流工具，可以通过阅读更多引流至微信公众平台。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="框架" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Hexo" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Hexo/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Hexo" scheme="https://batype.gitee.io/tags/Hexo/"/>
    
    <category term="ReadMore" scheme="https://batype.gitee.io/tags/ReadMore/"/>
    
  </entry>
  
  <entry>
    <title>type 的使用</title>
    <link href="https://batype.gitee.io/typescript/use/type.html"/>
    <id>https://batype.gitee.io/typescript/use/type.html</id>
    <published>2023-10-22T10:12:30.000Z</published>
    <updated>2023-10-23T12:33:02.357Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="type-的使用"><a href="#type-的使用" class="headerlink" title="type 的使用"></a>type 的使用</h4><p>作用 : 给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 )</p><h5 id="1-类型别名"><a href="#1-类型别名" class="headerlink" title="1. 类型别名"></a>1. 类型别名</h5><p><strong>语法 :</strong> <code>type 别名 = 类型</code></p><p><strong>实例 :</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">St</span> = <span class="built_in">string</span> <span class="comment">// 定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str1</span>:<span class="title class_">St</span> = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str2</span>:<span class="built_in">string</span> = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-自定义类型"><a href="#2-自定义类型" class="headerlink" title="2.自定义类型"></a>2.自定义类型</h5><p><strong>语法 :</strong> <code>type 别名 = 类型 | 类型1 | 类型2</code></p><p><strong>实例 :</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NewType</span> = <span class="built_in">string</span> | <span class="built_in">number</span> <span class="comment">// 定义类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="title class_">NewType</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">NewType</span> = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-泛型定义"><a href="#3-泛型定义" class="headerlink" title="3.泛型定义"></a>3.泛型定义</h5><p><strong>语法</strong>： <code>type 别名&lt;T&gt; = 类型&lt;T&gt; | 类型1&lt;T&gt; | 类型2&lt;T&gt;</code></p><p><strong>实例</strong> :</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NewType</span>&lt;T&gt; = &#123;</span><br><span class="line">   <span class="attr">name</span>: T</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> a : <span class="title class_">NewType</span>&lt;<span class="built_in">number</span>&gt; = &#123; <span class="attr">name</span>: <span class="number">0</span> &#125;</span><br><span class="line"> <span class="keyword">let</span> b : <span class="title class_">NewType</span>&lt;<span class="built_in">string</span>&gt; = &#123; <span class="attr">name</span>: <span class="string">&#x27;0&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h5 id="4-联合类型-相当于继承类型"><a href="#4-联合类型-相当于继承类型" class="headerlink" title="4.联合类型(相当于继承类型)"></a>4.联合类型(相当于继承类型)</h5><p><strong>语法</strong>：<code>type 别名 = 类型 &amp; 类型1 &amp; 类型2</code></p><p><strong>示例</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Job</span> = &#123;</span><br><span class="line">    <span class="attr">jobs</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = <span class="title class_">User</span> &amp; <span class="title class_">Job</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 ).</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://batype.gitee.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>session-cookies 三个缓存 localStorage、sessionStorage、Cookies。</title>
    <link href="https://batype.gitee.io/browser/session/cookies.html"/>
    <id>https://batype.gitee.io/browser/session/cookies.html</id>
    <published>2023-10-22T10:06:18.000Z</published>
    <updated>2023-10-22T10:08:23.922Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h1 id="session-cookies"><a href="#session-cookies" class="headerlink" title="session-cookies"></a>session-cookies</h1><pre><code>session-cookies is localStorage、sessionStorage、Cookies。</code></pre><p> <a href="https://badge.fury.io/js/session-cookies"><img src="https://badge.fury.io/js/session-cookies.svg" /></a></p><p>session-cookies This plugin is used to summarize the browser’s three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.</p><p>session-cookies 这个插件是用来汇总浏览器的三个缓存 localStorage、sessionStorage、Cookies。该插件注重使用方便快捷下面是一些API汇总说明。</p><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><table><thead><tr><th align="center">名称</th><th align="center">获取所有</th><th align="center">获取单个</th><th align="center">设置单个</th><th align="center">移除单个</th><th align="center">清除所有</th></tr></thead><tbody><tr><td align="center">cookies</td><td align="center">getCookieList</td><td align="center">getCookie</td><td align="center">setCookie</td><td align="center">removeCookie</td><td align="center">clearCookie</td></tr><tr><td align="center">session</td><td align="center">getAllSessionStorage</td><td align="center">getSessionStorage</td><td align="center">setSessionStorage</td><td align="center">removeSessionStorage</td><td align="center">clearSessionStorage</td></tr><tr><td align="center">local</td><td align="center">getAllLocalStorage</td><td align="center">getLocalStorage</td><td align="center">setLocalStorage</td><td align="center">removeLocalStorage</td><td align="center">clearLocalStorage</td></tr></tbody></table><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i session-cookies</span><br></pre></td></tr></table></figure><h5 id="获取所有Cookies"><a href="#获取所有Cookies" class="headerlink" title="获取所有Cookies"></a>获取所有Cookies</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; cookies &#125; <span class="keyword">from</span> <span class="string">&#x27;session-cookies&#x27;</span></span><br><span class="line"></span><br><span class="line">cookies.<span class="title function_">getCookieList</span>(); <span class="comment">// 返回JSON结果数据</span></span><br><span class="line">cookies.<span class="title function_">getCookie</span>(<span class="string">&#x27;test&#x27;</span>); <span class="comment">// 返回属性值</span></span><br></pre></td></tr></table></figure><h5 id="设置单个"><a href="#设置单个" class="headerlink" title="设置单个"></a>设置单个</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookies.<span class="title function_">setCookie</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;1234567&#x27;</span>); <span class="comment">// 设置属性为字符串需要JSON.stringify</span></span><br></pre></td></tr></table></figure><h5 id="移除单个"><a href="#移除单个" class="headerlink" title="移除单个"></a>移除单个</h5><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookies.<span class="title function_">removeCookie</span>(<span class="string">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="清除所有"><a href="#清除所有" class="headerlink" title="清除所有"></a>清除所有</h5><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookies.<span class="title function_">clearCookie</span>();</span><br></pre></td></tr></table></figure><h4 id="附加API"><a href="#附加API" class="headerlink" title="附加API"></a>附加API</h4><table><thead><tr><th>根据index下标获取key值</th><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>getLocalStorageKeyFindIndex</td><td>index下标</td><td>返回key</td></tr><tr><td>getSessionStorageKeyFindIndex</td><td>index下标</td><td>返回key</td></tr></tbody></table><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; local &#125; <span class="keyword">from</span> <span class="string">&#x27;session-cookies&#x27;</span>;</span><br><span class="line"></span><br><span class="line">local.<span class="title function_">setLocalStorage</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">local.<span class="title function_">setLocalStorage</span>(<span class="string">&#x27;usename&#x27;</span>, <span class="string">&#x27;songshao&#x27;</span>);</span><br><span class="line">local.<span class="title function_">getLocalStorageKeyFindIndex</span>(<span class="number">0</span>); <span class="comment">// test</span></span><br><span class="line">local.<span class="title function_">getLocalStorageKeyFindIndex</span>(<span class="number">1</span>); <span class="comment">// username</span></span><br></pre></td></tr></table></figure><h3 id="Browsers"><a href="#Browsers" class="headerlink" title="Browsers"></a>Browsers</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只能使用0.1.5 以后版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://unpkg.com/session-cookies/lib/sessionCookies.js&#x27;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 其他接口同上面使用只需要增加 sessionCookies 全局配置。</span></span></span><br><span class="line"><span class="language-javascript">    sessionCookies.<span class="property">local</span>.<span class="title function_">setLocalStorage</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">session-cookies This plugin is used to summarize the browser’s three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.</summary>
    
    
    
    <category term="浏览器" scheme="https://batype.gitee.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="Cache" scheme="https://batype.gitee.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/Cache/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="cookies" scheme="https://batype.gitee.io/tags/cookies/"/>
    
    <category term="localStorage" scheme="https://batype.gitee.io/tags/localStorage/"/>
    
    <category term="sessionStorage" scheme="https://batype.gitee.io/tags/sessionStorage/"/>
    
    <category term="TypeScript" scheme="https://batype.gitee.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>网络劫持有哪几种，如何防范？</title>
    <link href="https://batype.gitee.io/browser/network/hijack.html"/>
    <id>https://batype.gitee.io/browser/network/hijack.html</id>
    <published>2023-10-21T14:06:18.000Z</published>
    <updated>2023-10-21T14:06:20.298Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="⽹络劫持"><a href="#⽹络劫持" class="headerlink" title="⽹络劫持"></a>⽹络劫持</h5><ol><li>DNS 劫持: (输⼊京东被强制跳转到淘宝这就属于dns 劫持)</li></ol><ul><li>DNS 强制解析: 通过修改运营商的本地 DNS 记录，来引导⽤户流量到缓存服务器</li><li>302 跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302 跳转的回复，引导⽤户获取内容</li></ul><ol start="2"><li>HTTP 劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的 http 响应内容(即加⼴告)</li></ol><h5 id="如何防范网络劫持？"><a href="#如何防范网络劫持？" class="headerlink" title="如何防范网络劫持？"></a>如何防范网络劫持？</h5><p>DNS 劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http 劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP 加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。</p><p>网络劫持指的是网络中的某个节点对数据进行恶意篡改和篡改，以达到非法获取用户信息或者控制用户设备的目的。以下是预防网络劫持的几个方法：</p><ol><li><p>使用HTTPS：HTTPS是一个安全的协议，对通信进行加密和身份验证，防止劫持者对数据进行篡改。使用HTTPS之前，可以使用SSL证书来验证服务器的身份。</p></li><li><p>使用VPN：VPN可以加密数据并建立一个虚拟私人网络，从而保护用户的数据和隐私。使用VPN可以防止网络劫持和嗅探攻击。</p></li><li><p>使用防火墙和反病毒软件：网络劫持者可能会通过恶意软件或病毒对用户设备进行攻击，使用防火墙和反病毒软件可以防止这种攻击。</p></li><li><p>更新操作系统和软件程序：最新版本的操作系统和软件程序通常包含了修复安全漏洞的补丁。不定期更新操作系统和软件程序可以减少遭受网络攻击的风险。</p></li><li><p>警惕钓鱼网站和不安全的链接：劫持者可能会伪造合法的网站或链接，引导用户向其提供个人信息或下载恶意软件。不要轻信不安全的链接，要时刻保持警惕。</p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">网路劫持可以导致非常严重是信息泄露或者信息被恶意篡改等，DNS 劫持由于涉嫌违法，已经被监管起来。</summary>
    
    
    
    <category term="浏览器" scheme="https://batype.gitee.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网路安全" scheme="https://batype.gitee.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/%E7%BD%91%E8%B7%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网路安全" scheme="https://batype.gitee.io/tags/%E7%BD%91%E8%B7%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 开启 RSS</title>
    <link href="https://batype.gitee.io/hexo/config/rss.html"/>
    <id>https://batype.gitee.io/hexo/config/rss.html</id>
    <published>2023-10-21T13:32:38.000Z</published>
    <updated>2023-10-21T13:54:06.202Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="安装hexo-generator-feed-插件"><a href="#安装hexo-generator-feed-插件" class="headerlink" title="安装hexo-generator-feed 插件"></a>安装hexo-generator-feed 插件</h5><h6 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h6><p><code>npm install hexo-generator-feed -d</code></p><h6 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h6><p><code>yarn add hexo-generator-feed</code></p><h5 id="配置-config-themes-yml"><a href="#配置-config-themes-yml" class="headerlink" title="配置_config.[themes].yml"></a>配置_config.[themes].yml</h5><h6 id="增加导航栏菜单"><a href="#增加导航栏菜单" class="headerlink" title="增加导航栏菜单"></a>增加导航栏菜单</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure><h6 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">atom</span>  <span class="comment"># 类型为atom</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">atom.xml</span> <span class="comment"># 访问路径</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span> <span class="comment"># 分页</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="清除重启"><a href="#清除重启" class="headerlink" title="清除重启"></a>清除重启</h5><p><code>hexo clean &amp;&amp; hexo generate</code></p><h5 id="页面效果"><a href="#页面效果" class="headerlink" title="页面效果"></a>页面效果</h5><p><img src="https://pic.imgdb.cn/item/6533d473c458853aefb79c42.png" alt="atom.xml"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">Hexo 开启RSS，可以查看RSS版本的note 数据，也可以导入到其他blog环境。</summary>
    
    
    
    <category term="前端" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="框架" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Hexo" scheme="https://batype.gitee.io/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Hexo/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Hexo" scheme="https://batype.gitee.io/tags/Hexo/"/>
    
    <category term="RSS" scheme="https://batype.gitee.io/tags/RSS/"/>
    
  </entry>
  
  <entry>
    <title>什么是 CSRF 攻击？</title>
    <link href="https://batype.gitee.io/web/cross/site/request/forgeries.html"/>
    <id>https://batype.gitee.io/web/cross/site/request/forgeries.html</id>
    <published>2023-10-21T13:11:16.000Z</published>
    <updated>2023-10-21T14:19:24.690Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>CSRF（Cross-Site Request Forgeries） 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。</p><p>CSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。</p><h5 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h5><p>常见的 CSRF 攻击有三种：</p><ul><li>GET 类型的 CSRF 攻击，比如在网站中的一个img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交；</li><li>POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。</li><li>链接类型的 CSRF 攻击，比如在 a 标签的href 属性里构建一个请求，然后诱导用户去点击。</li></ul><h5 id="如何防御-CSRF-攻击？"><a href="#如何防御-CSRF-攻击？" class="headerlink" title="如何防御 CSRF 攻击？"></a>如何防御 CSRF 攻击？</h5><p>CSRF 攻击可以使用以下方法来防护：</p><p>进行同源检测，服务器根据 http 请求头中origin 或者referer信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer字段会告诉服务器该网页是从哪个页面链接过来的）</p><p>使用 CSRF Token 进行验证，服务器向用户返回一个随机数Token，当网站再次发起请求时，在请求参数中加入服务器端返回的token，然后服务器对这个 token 进行验证。这种方法解决了使用cookie单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个token，操作比较繁琐。</p><p>还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的session中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。</p><p>对 Cookie 进行双重验证，服务器在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到URL参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用cookie，但是不能访问获取 cookie 的特点。并且这种方法比CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。</p><p>在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。</summary>
    
    
    
    <category term="浏览器" scheme="https://batype.gitee.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网络安全" scheme="https://batype.gitee.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网络安全" scheme="https://batype.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="CSRF" scheme="https://batype.gitee.io/tags/CSRF/"/>
    
  </entry>
  
  <entry>
    <title>什么是 XSS 攻击？</title>
    <link href="https://batype.gitee.io/web/cross/site/script.html"/>
    <id>https://batype.gitee.io/web/cross/site/script.html</id>
    <published>2023-10-21T13:10:16.000Z</published>
    <updated>2023-10-21T14:15:32.698Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。</p><p>XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。</p><p>攻击者可以通过这种攻击方式可以进行以下操作：</p><ol><li>获取页面的数据，如 DOM、cookie、localStorage；</li><li>DOS 攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；</li><li>破坏页面结构；</li><li>流量劫持（将链接指向某网站）</li></ol><h5 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h5><p>XSS 可以分为存储型、反射型和 DOM 型：</p><ul><li>存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。</li><li>反射型指的是攻击者诱导用户访问一个带有恶意代码的URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成XSS 攻击。</li><li>DOM 型指的通过修改页面的 DOM 节点形成的XSS。</li></ul><h6 id="存储型-XSS-的攻击步骤："><a href="#存储型-XSS-的攻击步骤：" class="headerlink" title="存储型 XSS 的攻击步骤："></a>存储型 XSS 的攻击步骤：</h6><ol><li>攻击者将恶意代码提交到⽬标⽹站的数据库中。</li><li>⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。</li><li>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</li><li>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。<br>这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。</li></ol><h6 id="反射型-XSS-的攻击步骤："><a href="#反射型-XSS-的攻击步骤：" class="headerlink" title="反射型 XSS 的攻击步骤："></a>反射型 XSS 的攻击步骤：</h6><ol><li><p>攻击者构造出特殊的 URL，其中包含恶意代码。</p></li><li><p>⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码从URL中取出，拼接在 HTML 中返回给浏览器。</p></li><li><p>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</p></li><li><p>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</p><p>反射型 XSS 跟存储型 XSS 的区别是：存储型XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在URL ⾥。</p><p>反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。</p></li></ol><h6 id="DOM-型-XSS-的攻击步骤："><a href="#DOM-型-XSS-的攻击步骤：" class="headerlink" title="DOM 型 XSS 的攻击步骤："></a>DOM 型 XSS 的攻击步骤：</h6><ol><li><p>攻击者构造出特殊的 URL，其中包含恶意代码。</p></li><li><p>⽤户打开带有恶意代码的 URL。</p></li><li><p>⽤户浏览器接收到响应后解析执⾏，前端JavaScript 取出URL中的恶意代码并执⾏。</p></li><li><p>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</p><p><strong>DOM 型 XSS 跟前两种 XSS 的区别</strong>：DOM 型XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。</p></li></ol><h5 id="如何防御-XSS-攻击？"><a href="#如何防御-XSS-攻击？" class="headerlink" title="如何防御 XSS 攻击？"></a>如何防御 XSS 攻击？</h5><p>可以看到 XSS 危害如此之大，那么在开发网站时就要做好防御措施，具体措施如下：</p><p>可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。</p><p>使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。</p><ol><li><p>CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。</p></li><li><p>通常有两种方式来开启 CSP，一种是设置HTTP 首部中的Content-Security-Policy，一种是设置meta 标签的方式&lt;metahttp-equiv&#x3D;”Content-Security-Policy”&gt;<br>对一些敏感信息进行保护，比如 cookie 使用http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。</p></li></ol></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。</summary>
    
    
    
    <category term="浏览器" scheme="https://batype.gitee.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网络安全" scheme="https://batype.gitee.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网络安全" scheme="https://batype.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="XSS" scheme="https://batype.gitee.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>有哪些可能引起前端安全的问题?</title>
    <link href="https://batype.gitee.io/web/security/question.html"/>
    <id>https://batype.gitee.io/web/security/question.html</id>
    <published>2023-10-21T13:09:16.000Z</published>
    <updated>2023-10-21T14:19:22.875Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h5 id="跨站脚本-Cross-Site-Scripting-XSS"><a href="#跨站脚本-Cross-Site-Scripting-XSS" class="headerlink" title="跨站脚本 (Cross-Site Scripting, XSS)"></a><a href="https://blog.csdn.net/qq_35490191/article/details/132212266">跨站脚本 (Cross-Site Scripting, XSS)</a></h5><p>⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript &#x2F; CSS &#x2F; Flash 等；</p><h5 id="iframe-的滥⽤"><a href="#iframe-的滥⽤" class="headerlink" title="iframe 的滥⽤"></a>iframe 的滥⽤</h5><p>iframe 中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在 iframe 中运⾏JavaScirpt 脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；</p><h5 id="跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）"><a href="#跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）" class="headerlink" title="跨站点请求伪造（Cross-Site Request Forgeries，CSRF）"></a><a href="https://blog.csdn.net/qq_35490191/article/details/132220538">跨站点请求伪造（Cross-Site Request Forgeries，CSRF）</a></h5><p>指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击恶意</p><h5 id="第三⽅库"><a href="#第三⽅库" class="headerlink" title="第三⽅库"></a>第三⽅库</h5><p>⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "31652-1697970027416-119",        "name": "BaType",        "qrcode": "https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg",        "keyword": "666"    });}</script>]]></content>
    
    
    <summary type="html">⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript / CSS / Flash 等。</summary>
    
    
    
    <category term="浏览器" scheme="https://batype.gitee.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网络安全" scheme="https://batype.gitee.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="前端" scheme="https://batype.gitee.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://batype.gitee.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="网络安全" scheme="https://batype.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
