<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>batype-note</title>
  
  
  <link href="https://note.batype.com/rss.xml" rel="self"/>
  
  <link href="https://note.batype.com/"/>
  <updated>2024-03-30T14:21:40.317Z</updated>
  <id>https://note.batype.com/</id>
  
  <author>
    <name>songshao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP 详解</title>
    <link href="https://note.batype.com/browser/protocol/http.html"/>
    <id>https://note.batype.com/browser/protocol/http.html</id>
    <published>2024-03-29T13:35:04.054Z</published>
    <updated>2024-03-30T14:21:40.317Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTTP（Hypertext-Transfer-Protocol）基本信息"><a href="#HTTP（Hypertext-Transfer-Protocol）基本信息" class="headerlink" title="HTTP（Hypertext Transfer Protocol）基本信息"></a>HTTP（Hypertext Transfer Protocol）基本信息</h3><p>HTTP（Hypertext Transfer Protocol）是一种用于在网络上传输超文本数据的协议。它是一种客户端-服务器协议，客户端发送请求，服务器返回响应。HTTP是Web的基础，用于在Web浏览器和Web服务器之间传输数据。</p><p>以下是HTTP的一些关键概念和详解：</p><ol><li><p>请求和响应</p><p> HTTP通信是基于请求-响应模型。客户端发送HTTP请求到服务器，服务器处理请求并返回HTTP响应。</p></li><li><p>URL（Uniform Resource Locator）</p><p> URL是用于标识资源的地址。它由协议类型（如http:&#x2F;&#x2F;或https:&#x2F;&#x2F;）、域名或IP地址、端口号（可选）、路径和查询参数组成。<br> URL（Uniform Resource Locator）是用于标识资源的地址。</p><p> 下面是一个URL的图解示例：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">┌─────────────────────────────────────────────────────┐</span><br><span class="line">│                        URL                          │</span><br><span class="line">├───────────┬─────────────┬─────────┬───────┬───────┤</span><br><span class="line">│  协议类型   │    域名/IP   │ 端口号  │  路径  │ 查询参数 │</span><br><span class="line">├───────────┴─────────────┴─────────┴───────┴───────┤</span><br><span class="line">│                     示例：                           │</span><br><span class="line">│   https://www.example.com:8080/path/to/resource?q=1 │</span><br><span class="line">└─────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><ul><li>协议类型（Protocol）：指定使用的协议，如HTTP、HTTPS、FTP等。</li><li>域名或IP地址（Domain&#x2F;IP）：标识资源所在的主机名或IP地址。</li><li>端口号（Port）：可选项，用于指定与服务器通信的端口号，默认使用协议的默认端口号（如HTTP的默认端口号是80）。</li><li>路径（Path）：指定资源在服务器上的路径，用斜杠（&#x2F;）分隔不同的目录或文件。</li><li>查询参数（Query Parameters）：可选项，用于向服务器传递额外的参数，以键值对的形式出现，多个参数使用&amp;符号分隔。</li></ul><p> 在示例中，URL是以HTTPS协议访问的，域名为<a href="http://www.example.com,使用了8080端口号.路径为/path/to/resource%EF%BC%8C%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0%E4%B8%BAq=1%E3%80%82">www.example.com，使用了8080端口号。路径为/path/to/resource，查询参数为q=1。</a></p><p> URL的结构可以根据不同的协议和应用场景有所变化，但基本的组成部分是协议类型、域名或IP地址、端口号、路径和查询参数。通过URL，我们可以定位和访问互联网上的各种资源。</p></li><li><p>HTTP方法</p><p> HTTP定义了一组方法，用于指定对资源的操作类型。常见的HTTP方法有GET（获取资源）、POST（提交数据创建资源）、PUT（更新资源）、DELETE（删除资源）、PATCH（更新资源）、OPTIONS（获取资源支持的HTTP方法）、HEAD（获取资源头信息）。</p><ul><li><p><strong>GET</strong>：用于获取资源。客户端发送GET请求到服务器，服务器返回请求的资源。GET请求通常不应该对服务器端产生副作用，即不应该修改服务器上的数据。</p></li><li><p><strong>POST</strong>：用于提交数据创建资源。客户端发送POST请求到服务器，请求创建一个新的资源。POST请求通常用于提交表单数据、上传文件等操作。</p></li><li><p><strong>PUT</strong>：用于更新资源。客户端发送PUT请求到服务器，请求更新指定的资源。PUT请求应该是幂等的，即多次执行相同的PUT请求结果应该是一致的。</p></li><li><p><strong>DELETE</strong>：用于删除资源。客户端发送DELETE请求到服务器，请求删除指定的资源。</p></li><li><p><strong>PATCH</strong>：用于局部更新资源。客户端发送PATCH请求到服务器，请求对指定的资源进行部分更新。</p></li><li><p><strong>HEAD</strong>：类似于GET请求，但只返回响应头信息，不返回响应体。HEAD请求常用于获取资源的元数据，如文件大小、修改时间等，而不需要获取完整的资源内容。</p></li><li><p><strong>OPTIONS</strong>：用于获取服务器支持的HTTP方法和其他选项。客户端发送OPTIONS请求到服务器，服务器返回支持的方法和其他信息，用于客户端了解服务器的功能和配置</p></li></ul></li><li><p>请求头</p><p> HTTP请求包含一组请求头，用于传递关于请求的元数据，如User-Agent（客户端标识）、Content-Type（请求体的数据类型）、Authorization（身份验证信息）等。</p></li><li><p>响应头</p><p> HTTP响应也包含一组响应头，用于传递关于响应的元数据，如Content-Type（响应体的数据类型）、Content-Length（响应体长度）、Cache-Control（缓存策略）等。</p></li><li><p>状态码</p><p> HTTP响应包含一个状态码，用于表示请求的处理结果。常见的状态码有200（成功）、404（资源未找到）、500（服务器内部错误）等。</p><p> 以下是HTTP状态码的分类：</p><ul><li>1xx（信息性状态码）：表示接收的请求正在处理。</li><li>2xx（成功状态码）：表示请求成功被服务器接收、理解、并接受。</li><li>3xx（重定向状态码）：需要后续操作才能完成这一请求。</li><li>4xx（客户端错误状态码）：表示请求包含语法错误或无法完成。</li><li>5xx（服务器错误状态码）：服务器在处理请求的过程中发生了错误。</li></ul></li><li><p>请求体和响应体</p><p> 某些HTTP请求和响应可能包含一个可选的消息体，用于传递数据。请求体通常用于POST或PUT请求发送数据，而响应体用于返回请求的结果数据。</p></li><li><p>Cookie</p><p> Cookie是一种在客户端和服务器之间传递的小型数据，用于跟踪和识别用户。服务器可以通过设置响应头中的Set-Cookie字段来发送Cookie给客户端，客户端在后续的请求中会自动将Cookie包含在请求头中发送给服务器。</p></li><li><p>缓存</p><p> HTTP支持缓存机制，可以减少对服务器的请求次数，提高性能。服务器可以通过设置响应头中的Cache-Control字段来控制缓存策略，客户端可以通过设置请求头中的If-Modified-Since或If-None-Match字段来验证缓存的有效性。</p></li></ol><p>HTTP是一个无状态协议，每个请求和响应之间是相互独立的。为了跟踪用户状态，HTTP引入了Cookie等机制。此外，HTTP还支持HTTPS（HTTP Secure）协议，通过加密和身份验证来提供更安全的通信。</p><h3 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h3><p>HTTP 协议的请求报文和响应报文的基本结构相同，由三大部分组成：</p><ul><li>起始行（start line）： 描述请求或相应的基本信息；</li><li>头部字段集合（header）：使用  <code>key-value</code> 形式更详细地说明报文</li><li>消息体（entity）：实际传输的数据，它不一定是纯文本，可以是图片、视频等二进制数据。</li></ul><p>HTTP报文由请求报文和响应报文两种格式组成，它们的基本结构如下：</p><ol><li>请求报文格式：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;方法&gt; &lt;URL&gt; &lt;协议版本&gt;  : 请求行</span><br><span class="line">&lt;请求头部字段1&gt;: &lt;值1&gt;</span><br><span class="line">&lt;请求头部字段2&gt;: &lt;值2&gt;</span><br><span class="line">...</span><br><span class="line">&lt;空行&gt;</span><br><span class="line">&lt;请求体&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>请求行</strong></p><ul><li>方法：指定请求的方法，如GET、POST等。</li><li>URL：请求的目标资源的URL。</li><li>协议版本：使用的HTTP协议版本，如HTTP&#x2F;1.1。</li></ul></li><li><p><strong>请求头部字段</strong></p><ul><li>包含了请求的各种附加信息，如User-Agent、Content-Type等。</li></ul></li><li><p><strong>空行</strong></p><ul><li>用于分隔请求头部和请求体。</li></ul></li><li><p><strong>请求体</strong></p><ul><li>可选项，包含了请求的主体内容，如POST请求中的表单数据、PUT请求中的更新内容等。</li></ul></li></ul><ol start="2"><li>响应报文格式：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;协议版本&gt; &lt;状态码&gt; &lt;状态码描述&gt;: 响应行</span><br><span class="line">&lt;响应头部字段1&gt;: &lt;值1&gt;</span><br><span class="line">&lt;响应头部字段2&gt;: &lt;值2&gt;</span><br><span class="line">...</span><br><span class="line">&lt;空行&gt;</span><br><span class="line">&lt;响应体&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>响应行</strong></p><ul><li>协议版本：使用的HTTP协议版本，如HTTP&#x2F;1.1。</li><li>状态码：表示服务器对请求的处理结果，如200表示成功，404表示资源未找到等。</li><li>状态码描述：对状态码的简短描述。</li></ul></li><li><p><strong>响应头部字段</strong></p><ul><li>包含了响应的各种附加信息，如Content-Type、Content-Length等。</li></ul></li><li><p><strong>空行</strong></p><ul><li>用于分隔响应头部和响应体。</li></ul></li><li><p><strong>响应体</strong></p><ul><li>包含了响应的主体内容，如HTML页面、JSON数据等。</li></ul></li></ul><p>HTTP报文的格式是文本格式，使用ASCII编码。请求报文由客户端发送到服务器，响应报文由服务器返回给客户端。报文中的请求头部和响应头部字段提供了关于请求和响应的元数据信息，而请求体和响应体则包含了具体的数据内容。通过这种报文格式，客户端和服务器可以进行有效的通信和数据交换。</p><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><h4 id="1xx（信息性状态码）"><a href="#1xx（信息性状态码）" class="headerlink" title="1xx（信息性状态码）"></a>1xx（信息性状态码）</h4><p><code>1xx</code> 状态码是<code>HTTP</code>协议中的信息性状态码，表示请求已被接受，但还未完成。通常情况下，服务器会在响应中发送一些额外的信息，以帮助客户端了解请求的状态。</p><p>常见的1xx状态码包括：</p><ul><li>100 Continue（继续）：表示服务器已经收到请求的头部，并且客户端应该继续发送请求的主题部分。</li><li>101 Switching Protocols（切换协议）：表示服务器已经理解客户端的请求，并将切换到不同的协议，如从<code>HTTP</code>切换到<code>WebSocket</code>。 </li><li>102 Processing（处理中）：表示服务器正在处理请求，但尚未完成。</li><li>103 Early Hints（早期提示）：表示服务器已经开始处理请求，但仍在生成响应的过程中，可以在响应头部发送一些提示信息。</li></ul><p>这些1xx状态码主要用于在请求-响应过程中提供一些中间状态信息，以便客户端和服务器能够更好地进行通信和处理。</p><h4 id="2xx（成功状态码）"><a href="#2xx（成功状态码）" class="headerlink" title="2xx（成功状态码）"></a>2xx（成功状态码）</h4><p>2xx状态码是HTTP协议中的成功状态码，表示服务器成功处理了客户端的请求。</p><p>以下是一些常见的2xx状态码：</p><ul><li><p>200 OK（成功）：表示请求已成功处理，并返回了请求的内容。</p></li><li><p>201 Created（已创建）：表示请求已成功处理，并在服务器上创建了新的资源。</p></li><li><p>202 Accepted（已接受）：表示服务器已经接受了请求，但尚未完成处理。通常用于异步操作，告知客户端请求已接受，但处理尚未完成。</p></li><li><p>204 No Content（无内容）：表示服务器成功处理了请求，但没有返回任何内容。通常用于不需要返回具体内容的请求，如DELETE请求。</p></li></ul><p>这些2xx状态码表示客户端的请求已经成功处理，并且服务器能够提供相应的响应。不同的2xx状态码可以提供不同的信息，客户端可以根据这些状态码来判断请求的结果和下一步的操作。</p>]]></content>
    
    
    <summary type="html">HTTP（Hypertext Transfer Protocol）是一种用于在网络上传输超文本数据的协议。它是一种客户端-服务器协议，客户端发送请求，服务器返回响应。HTTP是Web的基础，用于在Web浏览器和Web服务器之间传输数据</summary>
    
    
    
    <category term="浏览器" scheme="https://note.batype.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="protocol" scheme="https://note.batype.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/protocol/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://note.batype.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="http" scheme="https://note.batype.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>事件循环（Event Loop）</title>
    <link href="https://note.batype.com/javascript/eventloop.html"/>
    <id>https://note.batype.com/javascript/eventloop.html</id>
    <published>2024-03-28T13:10:45.079Z</published>
    <updated>2024-03-28T14:55:07.556Z</updated>
    
    <content type="html"><![CDATA[<p>事件循环（Event Loop）是计算机程序中的一个设计模式，用于处理异步操作，特别是在图形用户界面程序和服务器端应用程序中。事件循环模式通过等待并分派事件或回调函数来驱动程序的执行流程，而不是通过直接执行代码的方式。</p><p>在编程领域，事件循环通常余非阻塞I&#x2F;O和异步编程模型结合使用。这种模式允许程序在等待一个长时间操作（如网络请求或磁盘I&#x2F;O）完成时继续处理其他任务。一旦长时间操作完成，相关的回调函数就会被放入事件循环中等待执行。</p><p>事件循环的基本工作原理如下：</p><ol><li>事件循环开始时，它首先检查是否有任何事件或回调函数需要执行。</li><li>如果没有事件或回调函数需要执行，事件循环将进入休眠状态，等待新事件或回调函数的到来。</li><li>当有事件或回调函数需要执行时，事件循环从等待队列中取出事件或回调函数，并将其放入执行队列中。</li><li>事件循环从执行队列中取出事件或回调函数，并执行它们。</li><li>执行完成后，事件循环将事件或回调函数从执行队列中移除，并继续等待新的事件或回调函数。</li></ol><p>在JavaScript中，事件循环通常由JavaScript引擎和宿主环境（如浏览器或Node.js）共同实现。JavaScript引擎负责执行代码，而宿主环境负责管理事件和回调函数。</p><p>如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>执行过程：</p><ol><li>现将 <code>console.log(&#39;1&#39;);</code> 放入执行队列中，并立即执行。</li><li>将 <code>setTimeout(() =&gt; &#123; console.log(&#39;2&#39;); setTimeout(() =&gt; &#123; console.log(&#39;3&#39;); &#125;, 0); &#125;, 0);</code> 放入宏任务队列中。</li><li>将 <code>console.log(&#39;4&#39;);</code> 放入执行队列中，并立即执行。</li><li>将 <code>() =&gt; &#123; console.log(&#39;2&#39;); setTimeout(() =&gt; &#123; console.log(&#39;3&#39;); &#125;, 0); &#125;</code> 放入微任务队列中；</li><li>当执行队列执行完以后去，微任务队列中查看是否有需要执行代码的回调函数，发现 <code>() =&gt; &#123; console.log(&#39;2&#39;); setTimeout(() =&gt; &#123; console.log(&#39;3&#39;); &#125;, 0); &#125;</code>；</li><li>将 <code>console.log(&#39;2&#39;);</code> 放入执行队列中，并立即执行。</li><li>将 <code>setTimeout(() =&gt; &#123; console.log(&#39;3&#39;); &#125;, 0);</code> 放入宏任务队列中；</li><li>将 <code>() =&gt; &#123; console.log(&#39;3&#39;); &#125;</code> 放入微任务队列中；</li><li>当执行队列执行完以后去，微任务队列中查看是否有需要执行代码的回调函数，发现 <code>() =&gt; &#123; console.log(&#39;3&#39;); &#125;</code>；</li><li>将 <code>console.log(&#39;3&#39;);</code> 放入执行队列中，并立即执行。</li></ol><p>微任务（Microtask）和宏任务（Macrotask）是JavaScript中事件循环机制的两个重要概念，它们决定了异步代码的执行时机和顺序。以下是微任务和宏任务的主要区别以及它们各自包含的任务类型：</p><h3 id="微任务（Microtask）"><a href="#微任务（Microtask）" class="headerlink" title="微任务（Microtask）"></a>微任务（Microtask）</h3><ol><li><p><strong>定义</strong>：<br>微任务是一类非常小的任务，它们通常与当前执行栈中的代码有关，并且总是在当前执行栈清空后立即执行。</p></li><li><p><strong>特点</strong>：</p><ul><li>微任务具有高优先级，它们总是在宏任务之前执行。</li><li>微任务可以快速响应状态的变化，因为它们在每次事件循环迭代的末尾执行。</li><li>微任务的执行不会阻塞后续代码的执行。</li></ul></li><li><p><strong>包含的任务类型</strong>：</p><ul><li><code>Promise</code>的<code>.then()</code>回调函数。</li><li><code>MutationObserver</code>的回调函数。</li><li>手动添加的微任务，例如使用<code>queueMicrotask()</code>函数。</li></ul></li></ol><h3 id="宏任务（Macrotask）"><a href="#宏任务（Macrotask）" class="headerlink" title="宏任务（Macrotask）"></a>宏任务（Macrotask）</h3><ol><li><p><strong>定义</strong>：<br>宏任务是一类较大的任务，它们通常与用户交互或I&#x2F;O操作有关，并且总是在微任务执行完毕后执行。</p></li><li><p><strong>特点</strong>：</p><ul><li>宏任务具有较低的优先级，它们总是在微任务之后执行。</li><li>宏任务的执行可能会阻塞后续代码的执行，因为它们通常涉及到等待外部事件或资源。</li><li>宏任务的执行次数通常比微任务多，因为每次事件循环迭代可能包含多个宏任务。</li></ul></li><li><p><strong>包含的任务类型</strong>：</p><ul><li><code>setTimeout</code>和<code>setInterval</code>的回调函数。</li><li><code>requestAnimationFrame</code>的回调函数。</li><li><code>setImmediate</code>（在Node.js中可用）的回调函数。</li><li>浏览器事件，如点击、滚动、键盘输入等。</li><li>网络请求、文件读写等I&#x2F;O操作完成后的回调函数。</li></ul></li></ol><h3 id="事件循环中的执行顺序"><a href="#事件循环中的执行顺序" class="headerlink" title="事件循环中的执行顺序"></a>事件循环中的执行顺序</h3><p>在JavaScript的事件循环中，微任务和宏任务按照以下顺序执行：</p><ol><li>执行当前执行栈中的所有同步代码。</li><li>清空当前执行栈。</li><li>执行所有微任务队列中的微任务。</li><li>执行所有宏任务队列中的宏任务。</li><li>重复步骤1-4，直到微任务和宏任务队列都为空。</li></ol><p>这种机制确保了JavaScript能够以非阻塞的方式处理异步事件，同时保证了高优先级任务（如用户交互和状态变化）能够及时响应。开发者可以利用微任务和宏任务的特性来优化代码性能和用户体验。</p><p>下面实例代码包括微任务和宏任务：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 同步代码执行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="comment">// 3. 宏任务执行</span></span><br><span class="line"><span class="keyword">const</span> timeoutId = <span class="built_in">setTimeout</span>(</span><br><span class="line">    <span class="comment">// 4. 微任务执行</span></span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 3. 宏任务执行</span></span><br><span class="line"><span class="keyword">const</span> intervalId = <span class="built_in">setInterval</span>(</span><br><span class="line">    <span class="comment">// 4. 微任务执行</span></span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">        <span class="built_in">clearInterval</span>(intervalId);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 1. 同步代码执行</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2. 微任务执行</span></span><br><span class="line"><span class="title function_">promise</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 1. 同步代码执行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>结果</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>大家猜一下下面<strong>实例3</strong>的结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">    (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8&#x27;</span>);</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line">    (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;10&#x27;</span>);</span><br><span class="line">    &#125;)();</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> intervalId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    <span class="built_in">clearInterval</span>(intervalId);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    (<span class="function">()=&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">事件循环（Event Loop）是计算机程序中的一个设计模式，用于处理异步操作，特别是在图形用户界面程序和服务器端应用程序中。事件循环模式通过等待并分派事件或回调函数来驱动程序的执行流程，而不是通过直接执行代码的方式。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="javascript" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/javascript/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://note.batype.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="Event Loop" scheme="https://note.batype.com/tags/Event-Loop/"/>
    
  </entry>
  
  <entry>
    <title>TCP（Transmission Control Protocol，传输控制协议）</title>
    <link href="https://note.batype.com/browser/protocol/tcp.html"/>
    <id>https://note.batype.com/browser/protocol/tcp.html</id>
    <published>2024-03-27T13:27:21.065Z</published>
    <updated>2024-03-27T13:52:01.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP（Transmission-Control-Protocol，传输控制协议）"><a href="#TCP（Transmission-Control-Protocol，传输控制协议）" class="headerlink" title="TCP（Transmission Control Protocol，传输控制协议）"></a>TCP（Transmission Control Protocol，传输控制协议）</h2><p>TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，广泛用于互联网中的数据传输。它是TCP&#x2F;IP模型中的核心协议之一，与IP（Internet Protocol，互联网协议）协同工作，负责在多个网络设备之间传输数据。</p><p>TCP 协议的主要特点和功能包括：</p><ol><li><p>面向连接:</p><p> 在数据传输开始之前，TCP 需要在两端建立一个连接，通常通过三次握手（three-way handshake）过程完成。</p></li><li><p>可靠性传输:</p><p> TCP 提供可靠的数据传输服务，确保数据无差错、不丢失、不重复，并且按序到达。它通过序列号、确认应答（ACKs）、超时重传等机制实现这一点。</p></li><li><p>流量控制:</p><p> TCP 使用滑动窗口协议来进行流量控制，防止快速发送方淹没慢速接收方。</p></li><li><p>拥塞控制:</p><p> TCP 实现拥塞控制算法，如慢启动（Slow Start）、拥塞避免（Congestion Avoidance）、快速重传（Fast Retransmit）和快速恢复（Fast Recovery），以避免网络拥塞。</p></li><li><p>全双工通信:</p><p> TCP 提供全双工服务，意味着数据可以在两个方向上同时传输，双方都可以是发送者和接收者。</p></li><li><p>顺序控制和数据重组:</p><p> TCP 在数据包传输中使用序列号对数据包进行排序，确保接收端可以根据这些序列号将数据重新组合成原始的数据流。</p></li><li><p>错误检测:</p><p> TCP 头部包含校验和（checksum）字段，用于检测数据在传输过程中的任何错误。</p></li><li><p>连接管理:</p><p> TCP 协议管理和维护连接的生命周期，包括连接的建立、数据传输和连接的终止（通常通过四次挥手（four-way handshake）过程实现）。</p></li></ol><p>在TCP&#x2F;IP协议栈中，TCP位于传输层，正上方是应用层，应用层协议如HTTP、FTP等使用TCP来保证数据传输的可靠性；正下方是网络层，网络层协议如IP负责将数据包路由到正确的目的地。TCP处理的是端到端的通信，确保数据能够在应用程序之间准确无误地传输。</p><p>由于TCP提供的可靠性和面向连接的特性，它广泛用于需要保证数据完整性和正确顺序的应用场景，如网页浏览、文件传输、电子邮件发送等。</p><h2 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h2><p>TCP三次握手（Three-way Handshake）是建立TCP&#x2F;IP网络连接的标准过程，其目的是在两个网络主机之间创建一个可靠的连接。这个过程确保了双方都准备好接收和发送数据，并且同步了双方的初始序列号，用于数据包的正确排序和可靠传输。下面是TCP三次握手的详细步骤：</p><h3 id="第一次握手：SYN"><a href="#第一次握手：SYN" class="headerlink" title="第一次握手：SYN"></a>第一次握手：SYN</h3><ol><li><p><strong>客户端发送SYN包</strong>:</p><ul><li>客户端选择一个初始序列号（ISN）并向服务器发送一个SYN（同步）包。这个SYN包包含客户端的初始序列号，并且SYN标志位被设置为1，其他标志位（如ACK）被设置为0。</li></ul></li></ol><h3 id="第二次握手：SYN-ACK"><a href="#第二次握手：SYN-ACK" class="headerlink" title="第二次握手：SYN-ACK"></a>第二次握手：SYN-ACK</h3><ol start="2"><li><p><strong>服务器回应SYN-ACK包</strong>:</p><ul><li>服务器接收到SYN包后，发送一个SYN-ACK（同步-确认）包作为回应。该包含有服务器自己的初始序列号，同时将客户端的初始序列号加1，并在ACK字段中回传此值，以确认接收到客户端的SYN。此时，SYN和ACK标志位都被设置为1。</li></ul></li></ol><h3 id="第三次握手：ACK"><a href="#第三次握手：ACK" class="headerlink" title="第三次握手：ACK"></a>第三次握手：ACK</h3><ol start="3"><li><p><strong>客户端发送ACK包</strong>:</p><ul><li>客户端收到SYN-ACK包后，将服务器的序列号加1，并将这个值放在ACK包的确认字段中，发送给服务器。这个ACK包的ACK标志位设置为1，表示确认。</li></ul></li></ol><h3 id="握手完成"><a href="#握手完成" class="headerlink" title="握手完成"></a>握手完成</h3><ol start="4"><li><p><strong>连接建立</strong>:</p><ul><li>服务器接收到客户端的ACK包后，三次握手完成，客户端和服务器之间建立了一个双向的可靠连接。之后，数据可以在双方之间开始传输。</li></ul></li></ol><p>这个过程的关键在于两次增量序列号的交换，这保证了双方都能确认对方已准备好进行通信，并且正确地维护了TCP的状态信息。三次握手可以防止历史连接的初始化数据段突然出现在当前连接中，从而导致不可预料的问题。</p><p>简化的表示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">客户端                     服务器</span><br><span class="line">  |-----SYN(X)------------&gt;|</span><br><span class="line">  |&lt;----SYN(Y), ACK(X+1)---|</span><br><span class="line">  |-----ACK(Y+1)----------&gt;|</span><br></pre></td></tr></table></figure><p>其中，X 和 Y 分别是客户端和服务器选择的初始序列号。</p><p>值得注意的是，TCP三次握手仅仅是建立连接的一部分，数据传输会在三次握手之后开始，而在数据传输结束后，TCP用另一个独立的四次挥手（Four-way Handshake）过程来关闭连接。</p><h2 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h2><p>TCP（传输控制协议）四次挥手是用于终止一个已经建立的TCP连接的过程。这个过程确保了双方都能够完成数据传输并且正确关闭连接。以下是TCP四次挥手的详细步骤：</p><h3 id="第一次挥手：FIN-WAIT-1"><a href="#第一次挥手：FIN-WAIT-1" class="headerlink" title="第一次挥手：FIN_WAIT_1"></a>第一次挥手：FIN_WAIT_1</h3><ul><li>假设客户端决定关闭连接，它发送一个FIN（结束）标志的TCP段给服务器，表示客户端已经没有数据要发送了。</li><li>客户端进入FIN_WAIT_1状态，等待服务器的确认。</li></ul><h3 id="第二次挥手：CLOSE-WAIT"><a href="#第二次挥手：CLOSE-WAIT" class="headerlink" title="第二次挥手：CLOSE_WAIT"></a>第二次挥手：CLOSE_WAIT</h3><ul><li>服务器收到这个FIN段后，发送一个ACK（确认）标志的TCP段作为回应，确认已经收到客户端的终止请求。</li><li>服务器进入CLOSE_WAIT状态，此时客户端收到ACK后进入FIN_WAIT_2状态。</li><li>此时，客户端到服务器的连接已经关闭，但是服务器如果还有数据要发送，可以继续发送。</li></ul><h3 id="第三次挥手：LAST-ACK"><a href="#第三次挥手：LAST-ACK" class="headerlink" title="第三次挥手：LAST_ACK"></a>第三次挥手：LAST_ACK</h3><ul><li>当服务器完成数据发送后，它也会决定关闭连接，发送一个FIN标志的TCP段给客户端。</li><li>服务器进入LAST_ACK状态，等待客户端的确认。</li></ul><h3 id="第四次挥手：TIME-WAIT"><a href="#第四次挥手：TIME-WAIT" class="headerlink" title="第四次挥手：TIME_WAIT"></a>第四次挥手：TIME_WAIT</h3><ul><li>客户端收到服务器的FIN段后，发送一个ACK标志的TCP段作为回应，确认已经收到服务器的终止请求。</li><li>客户端进入TIME_WAIT状态，持续2个最大段生命周期（MSL）的时间后，确保服务器能够接收到确认，然后关闭连接。</li><li>服务器收到ACK后，关闭连接，进入CLOSED状态。</li></ul><p>这个过程确保了双方都有机会完成数据传输并清理连接。如果在四次挥手过程中的任何一步发生网络延迟或丢包，TCP协议会重试发送丢失的段，直到成功完成四次挥手过程。这个过程是TCP提供可靠传输服务的关键机制之一。</p><p>简化的表示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 客户端                       服务器</span><br><span class="line">FIN_WAIT_1    |-----FIN----&gt;|</span><br><span class="line">FIN_WAIT_2    |&lt;----ACK-----| CLOSE_WAIT</span><br><span class="line">              |&lt;----FIN-----| LAST_ACK</span><br><span class="line">TIME_WAIT     |-----ACK----&gt;| CLOSED</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，广泛用于互联网中的数据传输。它是TCP/IP模型中的核心协议之一，与IP（Internet Protocol，互联网协议）协同工作，负责在多个网络设备之间传输数据。</summary>
    
    
    
    <category term="浏览器" scheme="https://note.batype.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="protocol" scheme="https://note.batype.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/protocol/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://note.batype.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="TCP" scheme="https://note.batype.com/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>TLS（Transport Layer Security，传输层安全协议）三次握手</title>
    <link href="https://note.batype.com/browser/protocol/tls.html"/>
    <id>https://note.batype.com/browser/protocol/tls.html</id>
    <published>2024-03-26T13:26:14.066Z</published>
    <updated>2024-03-26T13:29:10.192Z</updated>
    
    <content type="html"><![CDATA[<p>TLS（Transport Layer Security，传输层安全协议）三次握手是建立安全层通信的一个过程，它确保了数据在两个通信实体之间的传输是加密和身份验证的。TLS是一种安全协议，通常用于在网络中传输数据时提供保密性和数据完整性保护。TLS也可以用作其他协议的底层安全层，例如HTTPS（超文本传输安全协议）是HTTP协议的安全版本，它使用了TLS&#x2F;SSL协议进行数据传输。</p><p>TLS三次握手过程如下：</p><ol><li><p><strong>客户端Hello（ClientHello）</strong>:</p><ul><li>客户端开始建立连接，发送一个ClientHello消息给服务器。这个消息包括客户端支持的TLS版本、一个客户端生成的随机数（ClientRandom），以及客户端支持的加密套件列表（cipher suites）。</li><li>客户端还可能会请求服务器的证书，以及其它与安全相关的信息。</li></ul></li><li><p><strong>服务器Hello（ServerHello）</strong>:</p><ul><li>服务器收到ClientHello消息后，会从客户端提供的加密套件列表中选择一个加密算法，并在ServerHello消息中通知客户端。</li><li>服务器也会生成一个随机数（ServerRandom），并把自己的证书（包含公钥）发送给客户端。如果服务器需要对客户端进行身份验证，它也可以发送一个证书请求。</li></ul></li><li><p><strong>客户端验证（Client Verification）</strong>:</p><ul><li>客户端收到服务器的证书后，会验证其有效性（例如，检查证书是否过期，是否由受信任的证书颁发机构签发等）。</li><li>客户端会生成第三个随机数（ClientVerifyRandom），并使用服务器的公钥加密这个随机数，然后将加密后的数据发送给服务器（Pre-Master Secret）。</li><li>如果服务器请求了客户端证书，客户端也会发送自己的证书。</li></ul></li><li><p><strong>服务器完成（Server Finished）</strong>:</p><ul><li>服务器使用自己的私钥解密收到的Pre-Master Secret。</li><li>服务器和客户端都将使用ClientRandom、ServerRandom和ClientVerifyRandom这三个随机数，通过一定的算法生成相同的会话密钥（Session Key）。</li><li>服务器发送Finished消息给客户端，这个消息是使用新生成的会话密钥加密的。</li></ul></li><li><p><strong>客户端完成（Client Finished）</strong>:</p><ul><li>客户端收到服务器的Finished消息后，使用会话密钥解密，并验证消息的正确性。</li><li>客户端也发送一个Finished消息给服务器，同样使用会话密钥加密。</li></ul></li></ol><p>完成以上步骤后，客户端和服务器就建立了一个安全的连接，可以开始安全地传输数据。需要注意的是，TLS协议中的“三次握手”与TCP协议的三次握手是不同的概念。TLS的三次握手是指在TLS密钥交换过程中的步骤，而TCP的三次握手是指在建立一个可靠的传输层连接的过程中的步骤。</p>]]></content>
    
    
    <summary type="html">TLS（Transport Layer Security，传输层安全协议）三次握手是建立安全层通信的一个过程，它确保了数据在两个通信实体之间的传输是加密和身份验证的。TLS是一种安全协议，通常用于在网络中传输数据时提供保密性和数据完整性保护。TLS也可以用作其他协议的底层安全层，例如HTTPS（超文本传输安全协议）是HTTP协议的安全版本，它使用了TLS/SSL协议进行数据传输。</summary>
    
    
    
    <category term="浏览器" scheme="https://note.batype.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="protocol" scheme="https://note.batype.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/protocol/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://note.batype.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="TLS" scheme="https://note.batype.com/tags/TLS/"/>
    
  </entry>
  
  <entry>
    <title>实现 ReturnType</title>
    <link href="https://note.batype.com/typescript/questions/returntype.html"/>
    <id>https://note.batype.com/typescript/questions/returntype.html</id>
    <published>2024-03-26T13:23:13.104Z</published>
    <updated>2024-03-26T13:23:13.104Z</updated>
    
    <content type="html"><![CDATA[<p>不使用 <code>ReturnType</code> 实现 TypeScript 的 <code>ReturnType&lt;T&gt;</code> 泛型。</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">v: <span class="built_in">boolean</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (v)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> a = <span class="title class_">MyReturnType</span>&lt;<span class="keyword">typeof</span> fn&gt; <span class="comment">// 应推导出 &quot;1 | 2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyReturnType</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Function</span>&gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; infer R</span><br><span class="line">? R</span><br><span class="line">: <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">v: <span class="built_in">boolean</span></span>) =&gt; (v ? <span class="number">1</span> : <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn1</span> = (<span class="params">v: <span class="built_in">boolean</span>, w: <span class="built_in">any</span></span>) =&gt; (v ? <span class="number">1</span> : <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> fnType = <span class="title class_">MyReturnType</span>&lt;<span class="keyword">typeof</span> fn&gt;;</span><br><span class="line"><span class="keyword">type</span> fnType1 = <span class="title class_">MyReturnType</span>&lt;<span class="keyword">typeof</span> fn1&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ComplexObject</span> = &#123;</span><br><span class="line">    <span class="attr">a</span>: [<span class="number">12</span>, <span class="string">&quot;foo&quot;</span>];</span><br><span class="line">    <span class="attr">bar</span>: <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="title function_">prev</span>(): <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> fnType2 = <span class="title class_">MyReturnType</span>&lt;<span class="function">() =&gt;</span> <span class="title class_">ComplexObject</span>&gt;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">不使用 `ReturnType` 实现 TypeScript 的 `ReturnType&lt;T&gt;` 泛型。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/type/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/tags/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/tags/type/"/>
    
  </entry>
  
  <entry>
    <title>实现类似Vue的类型支持的简化版本</title>
    <link href="https://note.batype.com/typescript/questions/SimpleVue.html"/>
    <id>https://note.batype.com/typescript/questions/SimpleVue.html</id>
    <published>2024-03-26T13:23:13.104Z</published>
    <updated>2024-03-26T13:23:13.105Z</updated>
    
    <content type="html"><![CDATA[<p>实现类似Vue的类型支持的简化版本。</p><p>通过提供一个函数<code>SimpleVue</code>（类似于<code>Vue.extend</code>或<code>defineComponent</code>），它应该正确地推断出 computed 和 methods 内部的<code>this</code>类型。</p><p>在此挑战中，我们假设<code>SimpleVue</code>接受只带有<code>data</code>，<code>computed</code>和<code>methods</code>字段的Object作为其唯一的参数，</p><ul><li><p><code>data</code>是一个简单的函数，它返回一个提供上下文<code>this</code>的对象，但是你无法在<code>data</code>中获取其他的计算属性或方法。</p></li><li><p><code>computed</code>是将<code>this</code>作为上下文的函数的对象，进行一些计算并返回结果。在上下文中应暴露计算出的值而不是函数。</p></li><li><p><code>methods</code>是函数的对象，其上下文也为<code>this</code>。函数中可以访问<code>data</code>，<code>computed</code>以及其他<code>methods</code>中的暴露的字段。 <code>computed</code>与<code>methods</code>的不同之处在于<code>methods</code>在上下文中按原样暴露为函数。</p></li></ul><p><code>SimpleVue</code>的返回值类型可以是任意的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = <span class="title class_">SimpleVue</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">firstname</span>: <span class="string">&#x27;Type&#x27;</span>,</span><br><span class="line">      <span class="attr">lastname</span>: <span class="string">&#x27;Challenges&#x27;</span>,</span><br><span class="line">      <span class="attr">amount</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">fullname</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastname</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">hi</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">fullname</span>.<span class="title function_">toLowerCase</span>())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DataType</span>&lt;T&gt; = T <span class="keyword">extends</span> &#123; <span class="title function_">data</span>(): infer D &#125; ? D : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ComputedType</span>&lt;T, D&gt; = T <span class="keyword">extends</span> &#123; <span class="attr">computed</span>: infer C &#125;</span><br><span class="line">? &#123;</span><br><span class="line">    [K <span class="keyword">in</span> keyof C]: C[K] <span class="keyword">extends</span> (<span class="attr">this</span>: D) =&gt; infer R ? R : <span class="built_in">never</span>;</span><br><span class="line">    &#125;</span><br><span class="line">: &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MethodsType</span>&lt;T, D, C&gt; = T <span class="keyword">extends</span> &#123; <span class="attr">methods</span>: infer M &#125;</span><br><span class="line">? &#123;</span><br><span class="line">    [K <span class="keyword">in</span> keyof M]: M[K] <span class="keyword">extends</span> (<span class="attr">this</span>: D &amp; C) =&gt; infer R ? R : <span class="built_in">never</span>;</span><br><span class="line">    &#125;</span><br><span class="line">: &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title class_">SimpleVue</span>&lt;T&gt;(<span class="attr">options</span>: T): &#123;</span><br><span class="line"><span class="attr">data</span>: <span class="title class_">DataType</span>&lt;T&gt;;</span><br><span class="line"><span class="attr">computed</span>: <span class="title class_">ComputedType</span>&lt;T, <span class="title class_">DataType</span>&lt;T&gt;&gt;;</span><br><span class="line"><span class="attr">methods</span>: <span class="title class_">MethodsType</span>&lt;T, <span class="title class_">DataType</span>&lt;T&gt;, <span class="title class_">ComputedType</span>&lt;T, <span class="title class_">DataType</span>&lt;T&gt;&gt;&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">通过提供一个函数`SimpleVue`（类似于`Vue.extend`或`defineComponent`），它应该正确地推断出 computed 和 methods 内部的`this`类型。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/type/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/tags/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/tags/type/"/>
    
  </entry>
  
  <entry>
    <title>实现 Pick</title>
    <link href="https://note.batype.com/typescript/questions/pick.html"/>
    <id>https://note.batype.com/typescript/questions/pick.html</id>
    <published>2024-03-26T13:23:13.103Z</published>
    <updated>2024-03-26T13:23:13.103Z</updated>
    
    <content type="html"><![CDATA[<p>不使用 <code>Pick&lt;T, K&gt;</code> ，实现 TS 内置的 <code>Pick&lt;T, K&gt;</code> 的功能</p><p><strong>从类型 <code>T</code> 中选出符合 <code>K</code> 的属性，构造一个新的类型</strong>。</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">MyPick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&#x27;title&#x27;</span> | <span class="string">&#x27;completed&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;Clean room&#x27;</span>,</span><br><span class="line">    <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1. K extends keyof T, K继承所有的T的key属性为type</span></span><br><span class="line"><span class="comment">// 2. P in keyof T 拿出所有的key，在extends K，如果是true，则返回 P</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyPick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">[P <span class="keyword">in</span> keyof T <span class="keyword">as</span> P <span class="keyword">extends</span> K ? P : <span class="built_in">never</span>]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreviewMy</span> = <span class="title class_">MyPick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;title&quot;</span> | <span class="string">&quot;completed&quot;</span>&gt;;</span><br><span class="line"><span class="comment">// type TodoPreviewMy = &#123;</span></span><br><span class="line"><span class="comment">//     title: string;</span></span><br><span class="line"><span class="comment">//     completed: boolean;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreviewMy</span> = &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Clean room&quot;</span>,</span><br><span class="line">    <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">不使用 `Pick&lt;T, K&gt;` ，实现 TS 内置的 `Pick&lt;T, K&gt;` 的功能.</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/type/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/tags/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/tags/type/"/>
    
  </entry>
  
  <entry>
    <title>对象属性只读 Readonly</title>
    <link href="https://note.batype.com/typescript/questions/Readonly.html"/>
    <id>https://note.batype.com/typescript/questions/Readonly.html</id>
    <published>2024-03-26T13:23:13.103Z</published>
    <updated>2024-03-26T13:23:13.103Z</updated>
    
    <content type="html"><![CDATA[<p>不要使用内置的<code>Readonly&lt;T&gt;</code>，自己实现一个。</p><p>泛型 <code>Readonly&lt;T&gt;</code> 会接收一个 _泛型参数_，并返回一个完全一样的类型，只是所有属性都会是只读 (readonly) 的。</p><p>也就是不可以再对该对象的属性赋值。</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">MyReadonly</span>&lt;<span class="title class_">Todo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Hey&quot;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;foobar&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">todo.<span class="property">title</span> = <span class="string">&quot;Hello&quot;</span> <span class="comment">// Error: cannot reassign a readonly property</span></span><br><span class="line">todo.<span class="property">description</span> = <span class="string">&quot;barFoo&quot;</span> <span class="comment">// Error: cannot reassign a readonly property</span></span><br></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyReadonly</span>&lt;T&gt; = &#123;</span><br><span class="line"><span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">不要使用内置的`Readonly&lt;T&gt;`，自己实现一个。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/type/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/tags/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/tags/type/"/>
    
  </entry>
  
  <entry>
    <title>对象部分属性只读 Readonly</title>
    <link href="https://note.batype.com/typescript/questions/Readonly2.html"/>
    <id>https://note.batype.com/typescript/questions/Readonly2.html</id>
    <published>2024-03-26T13:23:13.103Z</published>
    <updated>2024-03-26T13:23:13.104Z</updated>
    
    <content type="html"><![CDATA[<p>实现一个泛型<code>MyReadonly2&lt;T, K&gt;</code>，它带有两种类型的参数<code>T</code>和<code>K</code>。</p><p>类型 <code>K</code> 指定 <code>T</code> 中要被设置为只读 (readonly) 的属性。如果未提供<code>K</code>，则应使所有属性都变为只读，就像普通的<code>Readonly&lt;T&gt;</code>一样。</p><p>例如</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">description</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">completed</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">MyReadonly2</span>&lt;<span class="title class_">Todo</span>, <span class="string">&#x27;title&#x27;</span> | <span class="string">&#x27;description&#x27;</span>&gt; = &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&quot;Hey&quot;</span>,</span><br><span class="line"><span class="attr">description</span>: <span class="string">&quot;foobar&quot;</span>,</span><br><span class="line"><span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">todo.<span class="property">title</span> = <span class="string">&quot;Hello&quot;</span> <span class="comment">// Error: cannot reassign a readonly property</span></span><br><span class="line">todo.<span class="property">description</span> = <span class="string">&quot;barFoo&quot;</span> <span class="comment">// Error: cannot reassign a readonly property</span></span><br><span class="line">todo.<span class="property">completed</span> = <span class="literal">true</span> <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>先取出需要 <code>readonly</code> 参数，然后在把不需要声明的参数用排除法加上。 </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyReadonly2</span>&lt;T, D <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> [P <span class="keyword">in</span> D]: T[P];</span><br><span class="line">&#125; &amp; &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T <span class="keyword">as</span> P <span class="keyword">extends</span> D ? <span class="built_in">never</span> : P]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实现一个泛型`MyReadonly2&lt;T, K&gt;`，它带有两种类型的参数`T`和`K`。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/type/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/tags/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/tags/type/"/>
    
  </entry>
  
  <entry>
    <title>对象属性只读（递归）DeepReadonly</title>
    <link href="https://note.batype.com/typescript/questions/DeepReadonly.html"/>
    <id>https://note.batype.com/typescript/questions/DeepReadonly.html</id>
    <published>2024-03-26T13:23:13.102Z</published>
    <updated>2024-03-26T13:23:13.102Z</updated>
    
    <content type="html"><![CDATA[<p>实现一个泛型 <code>DeepReadonly&lt;T&gt;</code>，它将对象的每个参数及其子对象递归地设为只读。</p><p>您可以假设在此挑战中我们仅处理对象。不考虑数组、函数、类等。但是，您仍然可以通过覆盖尽可能多的不同案例来挑战自己。</p><p>例如</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> X = &#123; </span><br><span class="line">    <span class="attr">x</span>: &#123; </span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">        <span class="attr">b</span>: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">y</span>: <span class="string">&#x27;hey&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Expected</span> = &#123; </span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">x</span>: &#123; </span><br><span class="line">        <span class="keyword">readonly</span> <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">        <span class="keyword">readonly</span> <span class="attr">b</span>: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">y</span>: <span class="string">&#x27;hey&#x27;</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Todo</span> = <span class="title class_">DeepReadonly</span>&lt;X&gt; <span class="comment">// should be same as `Expected`</span></span><br></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ol><li>属于基础类型则直接返回</li><li>数组、Map、Set需要拆分其内容属性</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Primitive</span> = <span class="literal">undefined</span> | <span class="built_in">string</span> | <span class="literal">null</span> | <span class="built_in">boolean</span> | <span class="built_in">number</span> | <span class="title class_">Function</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepReadonly</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Primitive</span></span><br><span class="line">    ? T</span><br><span class="line">    : T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;infer U&gt;</span><br><span class="line">    ? <span class="title class_">ReadonlyArray</span>&lt;<span class="title class_">DeepReadonly</span>&lt;T&gt;&gt;</span><br><span class="line">    : T <span class="keyword">extends</span> <span class="title class_">Map</span>&lt;infer K, infer V&gt;</span><br><span class="line">    ? <span class="title class_">ReadonlyMap</span>&lt;<span class="title class_">DeepReadonly</span>&lt;K&gt;, <span class="title class_">DeepReadonly</span>&lt;V&gt;&gt;</span><br><span class="line">    : T <span class="keyword">extends</span> <span class="title class_">Set</span>&lt;infer U&gt;</span><br><span class="line">    ? <span class="title class_">ReadonlySet</span>&lt;<span class="title class_">DeepReadonly</span>&lt;U&gt;&gt;</span><br><span class="line">    : &#123; <span class="keyword">readonly</span> [K <span class="keyword">in</span> keyof T]: <span class="title class_">DeepReadonly</span>&lt;T[K]&gt; &#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实现一个泛型 `DeepReadonly&lt;T&gt;`，它将对象的每个参数及其子对象递归地设为只读。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/type/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/tags/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/tags/type/"/>
    
  </entry>
  
  <entry>
    <title>获取只读属性 GetReadonlyKeys</title>
    <link href="https://note.batype.com/typescript/questions/GetReadonlyKeys.html"/>
    <id>https://note.batype.com/typescript/questions/GetReadonlyKeys.html</id>
    <published>2024-03-26T13:23:13.102Z</published>
    <updated>2024-03-26T13:23:13.102Z</updated>
    
    <content type="html"><![CDATA[<p>实现泛型<code>GetReadonlyKeys&lt;T&gt;</code>，<code>GetReadonlyKeys&lt;T&gt;</code>返回由对象 T 所有只读属性的键组成的联合类型。</p><p>例如</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">description</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Keys</span> = <span class="title class_">GetReadonlyKeys</span>&lt;<span class="title class_">Todo</span>&gt; <span class="comment">// expected to be &quot;title&quot; | &quot;description&quot;</span></span><br></pre></td></tr></table></figure><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><ol><li>映射类型：</li></ol><ul><li>使用了映射类型语法 <code>[P in keyof T]</code>，遍历 <code>T</code> 类型的所有键（包括公共和私有属性以及方法）。</li></ul><ol start="2"><li>条件类型与函数类型比较：</li></ol><ul><li>对于每个键 <code>P</code>，创建一个返回值为布尔类型的匿名函数类型 <code>&lt;I&gt;() =&gt; ...</code>。</li><li>第一个函数类型检查是否有一个对象类型，其具有属性 <code>I</code> 等于 <code>T[P]</code> 的类型，这实际上是为了确保当前键 <code>P</code> 的存在性。</li><li>第二个函数类型则检查是否有只读版本的对象类型，其中属性 I 是只读的且类型为 <code>T[P]</code>。</li></ul><ol start="3"><li>条件判断：</li></ol><ul><li>判断第一个函数类型是否能赋值给第二个函数类型，即判断 <code>T[P]</code> 是否是一个只读属性。</li><li>如果是，则结果为 <code>P</code>，表示该键 <code>P</code> 是只读属性。</li><li>否则，结果为 <code>never</code>，表示该键不是只读属性。</li></ul><ol start="4"><li>取可读属性键集合：</li></ol><ul><li>最终通过 <code>keyof</code> 运算符从映射类型中提取所有满足上述条件（即为只读属性）的键 <code>P</code> 构成的联合类型。</li></ul><ol start="5"><li>默认值<code>never</code>：</li></ol><ul><li>如果没有符合条件的只读属性，则整个映射类型的结果是空对象类型，因此 <code>keyof &#123;&#125;</code> 将得到 <code>never</code> 类型。</li></ul><p>综上所述，<code>GetReadonlyKeys&lt;T&gt;</code> 类型会返回 T 中所有声明为只读属性的键名组成的联合类型。如果 <code>T</code> 没有只读属性，则返回类型为 <code>never</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">GetReadonlyKeys</span>&lt;T&gt; = keyof &#123;</span><br><span class="line">    [</span><br><span class="line">        P <span class="keyword">in</span> keyof T <span class="keyword">as</span> (</span><br><span class="line">            &lt;I&gt;<span class="function">() =&gt;</span> I <span class="keyword">extends</span> (&#123; [I <span class="keyword">in</span> P]: T[I] &#125;) ? <span class="literal">true</span> : <span class="built_in">never</span></span><br><span class="line">        ) <span class="keyword">extends</span> (</span><br><span class="line">            &lt;I&gt;<span class="function">() =&gt;</span> I <span class="keyword">extends</span> (&#123; <span class="keyword">readonly</span> [I <span class="keyword">in</span> P]: T[I] &#125;) ? <span class="literal">true</span> : <span class="built_in">never</span></span><br><span class="line">        ) ? P : <span class="built_in">never</span></span><br><span class="line">    ] : <span class="built_in">never</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实现泛型`GetReadonlyKeys&lt;T&gt;`，`GetReadonlyKeys&lt;T&gt;`返回由对象 `T` 所有只读属性的键组成的联合类型。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/type/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/tags/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/tags/type/"/>
    
  </entry>
  
  <entry>
    <title>实现 Omit</title>
    <link href="https://note.batype.com/typescript/questions/omit.html"/>
    <id>https://note.batype.com/typescript/questions/omit.html</id>
    <published>2024-03-26T13:23:13.102Z</published>
    <updated>2024-03-26T13:23:13.103Z</updated>
    
    <content type="html"><![CDATA[<p>不使用 <code>Omit</code> 实现 <code>TypeScript</code> 的 <code>Omit&lt;T, K&gt;</code> 泛型。</p><p><code>Omit</code> 会创建一个省略 <code>K</code> 中字段的 <code>T</code> 对象。</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">MyOmit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&#x27;description&#x27;</span> | <span class="string">&#x27;title&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyOmit</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T <span class="keyword">as</span> P <span class="keyword">extends</span> K ? <span class="built_in">never</span> : P]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-expect-error</span></span><br><span class="line"><span class="keyword">type</span> error = <span class="title class_">MyOmit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;description&quot;</span> | <span class="string">&quot;invalid&quot;</span>&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">不使用 `Omit` 实现 `TypeScript` 的 `Omit&lt;T, K&gt;` 泛型。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/TypeScript/type/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://note.batype.com/tags/TypeScript/"/>
    
    <category term="type" scheme="https://note.batype.com/tags/type/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS 和 HTTP 的区别</title>
    <link href="https://note.batype.com/browser/protocol/http-https.html"/>
    <id>https://note.batype.com/browser/protocol/http-https.html</id>
    <published>2024-03-26T13:23:13.101Z</published>
    <updated>2024-03-26T13:23:13.101Z</updated>
    
    <content type="html"><![CDATA[<p><strong>HTTP</strong>: 是一种无状态的请求-响应协议。是互联网上应用最广泛的一种通讯协议，基于 TCP ，可以使浏览器工作效率更为高效，减少网络传输。</p><p><strong>HTTPS</strong>: 是 HTTP 的加强版，可以认为是 HTTP + SSL(Secure Socket Layer)。 在 HTTP 的基础之上增加了一系列的安全机制。一方面可以保证数据传输的安全，另一方面对访问者增加了验证机制。是目前现行架构下，最为安全的解决方案。</p><h2 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h2><ol><li><p>安全性</p><ul><li>HTTP 是明文传输协议，数据在传输过程中不加密，容易被篡改和窃听；</li><li>HTTPS 通过使用 SSL(Secure Sockets Layer) 和 TLS(Transport Layer Security) 协议对数据进行加密，确保数据在传输过程中的安全性，防止被窃听和篡改；</li></ul></li><li><p>数据传输协议</p><ul><li>HTTP 使用 TCP(Transmission Control Protocol) 作为传输协议，数据传输速度快；</li><li>HTTPS 在 HTTP 的基础之上加入了 SSL&#x2F;TLS 协议，需要进行加解密操作，数据传输速度慢；</li></ul></li><li><p>端口号</p><ul><li>HTTP 默认端口号 80；</li><li>HTTPS 默认端口号 443；</li></ul></li><li><p>证书</p><ul><li>HTTPS需要使用SSL证书，用于验证服务器的身份，并确保数据传输的安全；</li><li>HTTP不需要使用证书。</li></ul></li></ol><h2 id="HTTP-执行机制"><a href="#HTTP-执行机制" class="headerlink" title="HTTP 执行机制"></a>HTTP 执行机制</h2><ol><li><p>客户端发起请求:</p><p> 客户端向服务器发送 HTTP 请求。这个请求可以是不同类型的，如GET（请求数据），POST（提交数据），PUT（更新数据）等；</p></li><li><p>建立连接:</p><p> 客户端通过网络与服务器建立TCP连接，通常是到服务器的80端口。<br> 对于现代浏览器和服务器，通常使用更复杂的TCP握手过程，比如TCP快速打开（TFO）和TLS假开始（TLS False Start）。</p></li><li><p>发送请求:</p><p> 一旦TCP连接建立，客户端发送一个HTTP请求。HTTP请求包括一个请求行（指明动作如GET或POST）、请求头（包含元数据如User-Agent、Accept、Content-Type等）和请求体（对于POST请求，包含要提交的数据）。</p></li><li><p>服务器处理请求:</p><p> 服务器接收请求并根据请求类型处理它。服务器可能会查询数据库、读取文件或执行其他操作来生成响应。</p></li><li><p>服务器响应:</p><p> 服务器发送一个HTTP响应到客户端。响应包括一个状态行（包含状态码如200 OK或404 Not Found）、响应头（包含元数据如Content-Type、Cache-Control等）和响应体（包含请求的资源的实际数据）。</p></li><li><p>关闭连接:</p><ul><li>在HTTP&#x2F;1.0中，完成响应后，服务器关闭TCP连接;</li><li>在HTTP&#x2F;1.1中，默认使用持久连接（keep-alive），连接在多个请求和响应之后保持打开状态，除非客户端或服务器决定关闭它;</li><li>在HTTP&#x2F;2中，多个请求可以在同一个连接上并行无阻塞地进行，进一步提高效率。</li></ul></li><li><p>客户端处理响应:</p><p> 客户端接收响应并根据内容类型处理数据，如渲染HTML页面、解析JSON数据等。</p></li></ol><h2 id="HTTPS-执行机制"><a href="#HTTPS-执行机制" class="headerlink" title="HTTPS 执行机制"></a>HTTPS 执行机制</h2><ol><li><p>客户端请求:</p><p> 客户端通过在请求的URL中使用“https:&#x2F;&#x2F;”来发起一个HTTPS连接。</p></li><li><p>TLS 握手</p><p> 服务器在其端口443上监听HTTPS请求，并在收到请求时响应；<br> 服务器将其TLS证书发送给客户端。这个证书包含了服务器的公钥和证书颁发机构（CA）的签名；</p></li><li><p>证书验证:</p><p> 客户端验证服务器的证书是否有效，是否在有效期内，以及是否由受信任的CA签发。这个过程也包括检查证书的撤销状态。<br> 这一步，将执行以下步骤进行身份验证：</p><ul><li>验证证书链：客户端检查服务器证书是否由受信任的证书颁发机构（CA）签发，以及证书链是否有效；</li><li>检查有效期：客户端检查证书的有效期，确保证书当前有效期未过期；</li><li>检查撤销状态：客户端肯呢个会检查证书是否被撤销，这可以通过访问 CA 的在线证书状态协议 (OCSP) 服务器或者下载证书撤销列表(CRL) 来完成；</li><li>验证数字签名：客户端使用 CA 的公钥来解密证书的数字签名，以确保它是由正确的 CA 签发且未被篡改；</li></ul></li><li><p>密钥交换</p><p> 一旦确认证书有效，客户端使用服务器的公钥来加密生成一个随机的会话密钥，并将其发送给服务器；<br> 服务器用其私钥解密这个会话密钥。现在，客户端和服务器端都有了共同的会话密钥，用于后续通信的加密；</p></li><li><p>加密通信</p><p> 使用会话密钥，客户端和服务器端之间的所有数据传输都将被加密。这保证了数据传输的机密性和完整性；<br> 客户端和服务器会使用对称加密算法来加密进一步的通信；</p></li><li><p>数据交换</p><p> 客户端和服务器现在可以完全的交换HTTP数据。客户端发送加密的HTTP请求，服务器以加密的HTTP响应回复；</p></li><li><p>会话结束</p><p> 一旦会话完成，客户端和服务器将结束连接并丢弃会话密钥，确保每一个连接都使用一个新的随机密钥。</p></li></ol>]]></content>
    
    
    <summary type="html">HTTPS 在 HTTP 的基础之上增加了一系列的安全机制。一方面可以保证数据传输的安全，另一方面对访问者增加了验证机制。是目前现行架构下，最为安全的解决方案。</summary>
    
    
    
    <category term="浏览器" scheme="https://note.batype.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="protocol" scheme="https://note.batype.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/protocol/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://note.batype.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="http" scheme="https://note.batype.com/tags/http/"/>
    
    <category term="https" scheme="https://note.batype.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>服务器端渲染（Server-Side Rendering，简称 SSR）</title>
    <link href="https://note.batype.com/browser/render/ssr.html"/>
    <id>https://note.batype.com/browser/render/ssr.html</id>
    <published>2024-03-26T13:23:13.101Z</published>
    <updated>2024-03-26T13:23:13.101Z</updated>
    
    <content type="html"><![CDATA[<p>服务端渲染（Server-Side Rendering，简称 SSR）是一种 Web 应用的渲染方式，其中 HTML 是在服务器上生成的，并作为完整页面发送到客户端（通常是浏览器）。客户端然后解析和显示这个 HTML。这种方法与客户端渲染（Client-Side Rendering，简称 CSR）形成对比，在客户端渲染中，浏览器下载一个最小的 HTML 页面，随后使用JavaScript动态生成页面内容。</p><h2 id="服务端渲染的主要优势和特点包括"><a href="#服务端渲染的主要优势和特点包括" class="headerlink" title="服务端渲染的主要优势和特点包括"></a>服务端渲染的主要优势和特点包括</h2><ol><li><p>更快的首次加载:</p><p> 对于用户来说，SSR 可以更快地显示页面的首次可见内容，因为浏览器接收到的是已经渲染的页面。用户不需要等待所有的JavaScript加载、执行以及渲染完成。</p></li><li><p>搜索引擎优化（SEO）:</p><p> SSR 对 SEO 更加友好，因为搜索引擎爬虫可以直接抓取和索引服务器渲染的HTML内容。而在CSR中，爬虫可能需要等待JavaScript执行完成，有些搜索引擎的爬虫可能不会执行JavaScript，这会影响内容的可索引性。</p></li><li><p>共享重复功能:</p><p> 使用 SSR，服务器可以为多个请求重用页面生成的结果，比如通过缓存，提高效率。</p></li><li><p>更好的性能:</p><p> 对于计算能力较低的设备，SSR 可以提供更好的性能体验，因为服务器通常比客户端设备拥有更强的处理能力。</p></li><li><p>简化前端复杂性:</p><p> SSR 应用可能不需要像完全的客户端应用那样复杂的JavaScript框架或库。</p></li><li><p>更好的用户体验:</p><p> 用户看到的是完整的页面，因此在页面变得可交互之前，他们可以先阅读内容，而不是看到一个空白屏幕或加载指示符。</p></li></ol><p>然而，服务端渲染也有一些潜在的缺点：</p><ol><li><p>服务器负载:</p><p> SSR 可能会增加服务器的负载，因为服务器必须为每个请求生成页面内容。</p></li><li><p>时间到首字节（TTFB）:</p><p> 虽然用户可以更快地看到内容，但是生成页面内容的服务器处理时间可能会导致更长的时间到首字节。</p></li><li><p>客户端 JavaScript 还是需要:</p><p> 即使页面在服务器上预先渲染，通常客户端JavaScript仍然需要以便为页面添加交互功能。</p></li><li><p>复杂的缓存策略:</p><p> 如果页面内容经常变化，实现有效的服务器缓存策略可能会变得复杂。</p></li><li><p>延迟的交互:</p><p> 用户可能能够看到页面内容，但要等到JavaScript下载和执行完成后，页面才变得可交互。</p></li></ol><p>SSR 在许多现代 Web 开发框架和库中都得到了支持，如 Next.js（基于 React）、Nuxt.js（基于 Vue.js）和 Angular Universal。这些工具都提供了简化服务端渲染工作流程的功能。</p>]]></content>
    
    
    <summary type="html">服务端渲染（Server-Side Rendering，简称 SSR）是一种 Web 应用的渲染方式，其中 HTML 是在服务器上生成的，并作为完整页面发送到客户端（通常是浏览器）。</summary>
    
    
    
    <category term="浏览器" scheme="https://note.batype.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="render" scheme="https://note.batype.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/render/"/>
    
    <category term="SSR" scheme="https://note.batype.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/render/SSR/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="浏览器" scheme="https://note.batype.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="SSR" scheme="https://note.batype.com/tags/SSR/"/>
    
  </entry>
  
  <entry>
    <title>uni-app APP 更新版本提示</title>
    <link href="https://note.batype.com/uni-app/vue/update.html"/>
    <id>https://note.batype.com/uni-app/vue/update.html</id>
    <published>2023-12-21T08:28:05.000Z</published>
    <updated>2024-03-26T13:23:13.106Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AppUpdate-方法"><a href="#AppUpdate-方法" class="headerlink" title="AppUpdate 方法"></a>AppUpdate 方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> baseUrl <span class="keyword">from</span> <span class="string">&#x27;@/basecall/utils.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">AppUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> appleId = <span class="number">2021004105638058</span>;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">let</span> platform = uni.<span class="title function_">getSystemInfoSync</span>().<span class="property">platform</span>;</span><br><span class="line">  <span class="comment">//1. 获取当前版本号</span></span><br><span class="line">  <span class="keyword">let</span> curversion = <span class="number">100</span>;</span><br><span class="line">  plus.<span class="property">runtime</span>.<span class="title function_">getProperty</span>(plus.<span class="property">runtime</span>.<span class="property">appid</span>, <span class="keyword">function</span> (<span class="params">widgetInfo</span>) &#123;</span><br><span class="line">    curversion = widgetInfo.<span class="property">version</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当前版本&quot;</span>, curversion);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    2， 用当前版本号提交给服务端，判断是否需要更新，接口返回信息如下</span></span><br><span class="line"><span class="comment">        versionIdinteger(int64)</span></span><br><span class="line"><span class="comment">        versionId版本号string</span></span><br><span class="line"><span class="comment">        intro版本描述string</span></span><br><span class="line"><span class="comment">        forced是否强制更新boolean</span></span><br><span class="line"><span class="comment">        news是否是最新版本boolean</span></span><br><span class="line"><span class="comment">        urlapk地址string</span></span><br><span class="line"><span class="comment">        createTime创建时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: baseUrl.<span class="property">baseUrl</span> + <span class="string">&quot;/getVersion&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; versionId, forced, url, createTime &#125; = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">  uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;url&#x27;</span>, url);</span><br><span class="line">      <span class="keyword">let</span> currTimeStamp = <span class="keyword">new</span> <span class="title class_">Date</span>(createTime).<span class="title function_">getTime</span>();</span><br><span class="line">      <span class="comment">/* 判断是否是最新版 */</span></span><br><span class="line">      <span class="keyword">if</span> (versionId !== curversion) &#123;</span><br><span class="line">        <span class="comment">//forced true 强制更新 false 自然更新</span></span><br><span class="line">        <span class="keyword">if</span> (forced == <span class="string">&#x27;true&#x27;</span>) &#123;</span><br><span class="line">          uni.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;紧急升级通知&quot;</span>,</span><br><span class="line">            <span class="attr">content</span>:</span><br><span class="line">              <span class="string">&quot;亲爱的用户，为了提供更好的使用体验与功能改进，我们进行了系统升级。请立即完成强制升级，否则将无法正常使用APP。感谢您的配合与支持！&quot;</span>,</span><br><span class="line">            <span class="attr">confirmText</span>: <span class="string">&quot;立即更新&quot;</span>,</span><br><span class="line">            <span class="attr">showCancel</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (platform == <span class="string">&quot;ios&quot;</span>) &#123;</span><br><span class="line">                  plus.<span class="property">runtime</span>.<span class="title function_">launchApplication</span>(</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">action</span>: <span class="string">`itms-apps://itunes.apple.com/cn/app/id<span class="subst">$&#123;appleId&#125;</span>?mt=8`</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                      <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">                        <span class="string">&quot;Open system default browser failed: &quot;</span> + e.<span class="property">message</span></span><br><span class="line">                      );</span><br><span class="line">                    &#125;</span><br><span class="line">                  );</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                    <span class="attr">icon</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">                    <span class="attr">mask</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&quot;有新的版本发布，程序已启动自动更新。&quot;</span>,</span><br><span class="line">                    <span class="attr">duration</span>: <span class="number">5000</span>,</span><br><span class="line">                  &#125;);</span><br><span class="line">                  <span class="comment">//设置 最新版本apk的下载链接 这是固定的</span></span><br><span class="line">                  <span class="keyword">let</span> downloadApkUrl = url;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(downloadApkUrl);</span><br><span class="line">                  plus.<span class="property">runtime</span>.<span class="title function_">openURL</span>(downloadApkUrl);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          uni.<span class="title function_">getStorage</span>(&#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&quot;tip_version_update_time&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">              <span class="keyword">var</span> lastTimeStamp = res.<span class="property">data</span>; <span class="comment">// 本地时间戳</span></span><br><span class="line">              <span class="keyword">var</span> tipTimeLength = <span class="number">0</span>; <span class="comment">// 时间间隔</span></span><br><span class="line">              <span class="keyword">let</span> cha = lastTimeStamp + tipTimeLength - currTimeStamp;</span><br><span class="line">              <span class="keyword">if</span> (lastTimeStamp + tipTimeLength &gt; currTimeStamp) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当后台时间戳大于本地时间戳才会进入&quot;</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;立即更新&quot;</span>);</span><br><span class="line">                <span class="comment">//重新设置时间戳</span></span><br><span class="line">                uni.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">                  <span class="attr">key</span>: <span class="string">&quot;tip_version_update_time&quot;</span>,</span><br><span class="line">                  <span class="attr">data</span>: currTimeStamp,</span><br><span class="line">                  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setStorage-success&quot;</span>);</span><br><span class="line">                  &#125;,</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                uni.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">                  <span class="attr">title</span>: <span class="string">&quot;版本更新&quot;</span>,</span><br><span class="line">                  <span class="attr">content</span>:</span><br><span class="line">                    <span class="string">&quot;尊敬的用户，我们为您准备了最新的版本更新，内含诸多新功能与用户体验优化。点击立即升级，享受更多精彩和便利。&quot;</span>,</span><br><span class="line">                  <span class="attr">confirmText</span>: <span class="string">&quot;立即更新&quot;</span>,</span><br><span class="line">                  <span class="attr">cancelText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">                  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                      <span class="keyword">if</span> (platform == <span class="string">&quot;ios&quot;</span>) &#123;</span><br><span class="line">                        plus.<span class="property">runtime</span>.<span class="title function_">launchApplication</span>(</span><br><span class="line">                          &#123;</span><br><span class="line">                            <span class="attr">action</span>: <span class="string">`itms-apps://itunes.apple.com/cn/app/id<span class="subst">$&#123;appleId&#125;</span>?mt=8`</span>,</span><br><span class="line">                          &#125;,</span><br><span class="line">                          <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">                              <span class="string">&quot;Open system default browser failed: &quot;</span> + e.<span class="property">message</span></span><br><span class="line">                            );</span><br><span class="line">                          &#125;</span><br><span class="line">                        );</span><br><span class="line">                      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                          <span class="attr">icon</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">                          <span class="attr">mask</span>: <span class="literal">true</span>,</span><br><span class="line">                          <span class="attr">title</span>: <span class="string">&quot;有新的版本发布，程序已启动自动更新。&quot;</span>,</span><br><span class="line">                          <span class="attr">duration</span>: <span class="number">5000</span>,</span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="comment">//设置 最新版本apk的下载链接 这是固定的 每次把包放在这个链接里里面即可 由后端制作</span></span><br><span class="line">                        <span class="keyword">let</span> downloadApkUrl = url;</span><br><span class="line">                        plus.<span class="property">runtime</span>.<span class="title function_">openURL</span>(downloadApkUrl);</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">cancel</span>) &#123;</span><br><span class="line">                      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;下次一定&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">              uni.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">                <span class="attr">key</span>: <span class="string">&quot;tip_version_update_time&quot;</span>,</span><br><span class="line">                <span class="attr">data</span>: currTimeStamp,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setStorage-success&quot;</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(createTime, <span class="string">&quot;createTimecreateTime&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">    <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在APP-vue中注册"><a href="#在APP-vue中注册" class="headerlink" title="在APP.vue中注册"></a>在APP.vue中注册</h3><p>在<code>App.vue</code>中，我们需要在<code>onLaunch</code>生命周期函数中调用<code>AppUpdate</code>方法，来检查是否有新版本的APP。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppUpdate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/common/AppUpdate.js&#x27;</span>;</span><br><span class="line"><span class="title function_">onLaunch</span>(<span class="params"></span>) &#123;    </span><br><span class="line">    <span class="title class_">AppUpdate</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在`App.vue`中，我们需要在`onLaunch`生命周期函数中调用`AppUpdate`方法，来检查是否有新版本的APP。</summary>
    
    
    
    <category term="uni-app" scheme="https://note.batype.com/categories/uni-app/"/>
    
    <category term="vue" scheme="https://note.batype.com/categories/uni-app/vue/"/>
    
    <category term="AppUpdate" scheme="https://note.batype.com/categories/uni-app/vue/AppUpdate/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="uni-app" scheme="https://note.batype.com/tags/uni-app/"/>
    
    <category term="vue" scheme="https://note.batype.com/tags/vue/"/>
    
    <category term="AppUpdate" scheme="https://note.batype.com/tags/AppUpdate/"/>
    
  </entry>
  
  <entry>
    <title>uni-app 分享页制作</title>
    <link href="https://note.batype.com/uni-app/vue/share.html"/>
    <id>https://note.batype.com/uni-app/vue/share.html</id>
    <published>2023-12-21T08:17:38.000Z</published>
    <updated>2024-03-26T13:23:13.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="uni-app-分享页制作"><a href="#uni-app-分享页制作" class="headerlink" title="uni-app 分享页制作"></a>uni-app 分享页制作</h2><p>通过canvas 先制作图。可以做一个canvas 背景在生成一个二维码canvas 图，在将两个canvas 合成一个图片，然后将图片分享出来。</p><h3 id="html-模板"><a href="#html-模板" class="headerlink" title="html 模板"></a>html 模板</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view class=&quot;content&quot;&gt;</span><br><span class="line">        &lt;u-icon name=&#x27;arrow-left&#x27; @click=&quot;goBack&quot; style=&quot;position: absolute; z-index: 999; top: 80rpx; left: 40rpx; font-size: 40rpx; color: #454545;&quot;&gt;&lt;/u-icon&gt;</span><br><span class="line">        &lt;view style=&quot;width: 100%; height: calc(100vh - 44px);&quot;&gt;</span><br><span class="line">            &lt;view class=&quot;btn-opate&quot; style=&quot;&quot;&gt;</span><br><span class="line">                &lt;button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;saveImg&quot;&gt;保存分享&lt;/button&gt;</span><br><span class="line">                &lt;button type=&quot;default&quot; size=&quot;mini&quot; @click=&quot;copyCode&quot;&gt;复制邀请码&lt;/button&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;image class=&quot;image&quot; style=&quot;width: 100%; height: calc(100vh - 44px);&quot; :src=&quot;ImagePath&quot; mode=&quot;widthFix&quot;&gt;&lt;/image&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">        &lt;view v-if=&quot;show&quot;&gt;</span><br><span class="line">            &lt;canvas canvas-id=&quot;myCanvas&quot; style=&quot;width: 100vw; height: 100vh;&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">            &lt;canvas canvas-id=&quot;qrcode&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="二维码制作"><a href="#二维码制作" class="headerlink" title="二维码制作"></a>二维码制作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">UQRCode</span> <span class="keyword">from</span> <span class="string">&#x27;uqrcodejs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">qrCode</span>(<span class="params"></span>)&#123;</span><br><span class="line">    uni.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;分享页制作中...&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> qr = <span class="keyword">new</span> <span class="title class_">UQRCode</span>();</span><br><span class="line">    <span class="comment">// 设置二维码内容</span></span><br><span class="line">    qr.<span class="property">data</span> = <span class="string">`https://app.xianyuangu.com/#/pages/login/h5login?registerCode=<span class="subst">$&#123;<span class="variable language_">this</span>.invitationCode&#125;</span>`</span>;</span><br><span class="line">    <span class="comment">// 设置二维码大小，必须与canvas设置的宽高一致</span></span><br><span class="line">    qr.<span class="property">size</span> = <span class="number">120</span>;</span><br><span class="line">    <span class="comment">// 调用制作二维码方法</span></span><br><span class="line">    qr.<span class="title function_">make</span>();</span><br><span class="line">    <span class="keyword">const</span> context = uni.<span class="title function_">createCanvasContext</span>(<span class="string">&#x27;qrcode&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">    qr.<span class="property">canvasContext</span> = context;</span><br><span class="line">    <span class="comment">// 调用绘制方法将二维码图案绘制到canvas上</span></span><br><span class="line">    qr.<span class="title function_">drawCanvas</span>();</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 将canvas内容保存为图片</span></span><br><span class="line">        uni.<span class="title function_">canvasToTempFilePath</span>(&#123;</span><br><span class="line">            <span class="attr">canvasId</span>: <span class="string">&#x27;qrcode&#x27;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">qrcode</span> = res.<span class="property">tempFilePath</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">drawImageToCanvas</span>();</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">drawImageToCanvas</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取 canvas 上下文</span></span><br><span class="line">    <span class="keyword">const</span> systemInfo = uni.<span class="title function_">getSystemInfoSync</span>();</span><br><span class="line">    <span class="keyword">const</span> canvasWidth = systemInfo.<span class="property">windowWidth</span>;</span><br><span class="line">    <span class="keyword">const</span> canvasHeight = systemInfo.<span class="property">windowHeight</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> context = uni.<span class="title function_">createCanvasContext</span>(<span class="string">&#x27;myCanvas&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 6: 使用 drawImage 方法绘制图片</span></span><br><span class="line">    context.<span class="title function_">drawImage</span>(<span class="string">&#x27;/static/image/share.png&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, canvasWidth, canvasHeight);</span><br><span class="line">    </span><br><span class="line">    context.<span class="title function_">setFillStyle</span>(<span class="string">&#x27;#D43030&#x27;</span>); <span class="comment">// 黑色文本</span></span><br><span class="line">    context.<span class="title function_">setFontSize</span>(<span class="number">32</span>); <span class="comment">// 文字大小</span></span><br><span class="line">    context.<span class="title function_">fillText</span>(<span class="variable language_">this</span>.<span class="property">invitationCode</span>, canvasWidth / <span class="number">2</span> - <span class="number">50</span>, canvasHeight / <span class="number">2</span> * <span class="number">0.84</span>);</span><br><span class="line">    </span><br><span class="line">    context.<span class="title function_">drawImage</span>(</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">qrcode</span>,</span><br><span class="line">    canvasWidth / <span class="number">3</span> - <span class="number">20</span>,</span><br><span class="line">    canvasHeight / <span class="number">2</span>,</span><br><span class="line">    canvasWidth / <span class="number">1</span> ,</span><br><span class="line">    canvasWidth / <span class="number">2</span></span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    context.<span class="title function_">save</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Step 7: 调用 draw 方法渲染 canvas</span></span><br><span class="line">    context.<span class="title function_">draw</span>(<span class="literal">true</span>, <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 将canvas内容保存为图片</span></span><br><span class="line">        uni.<span class="title function_">canvasToTempFilePath</span>(&#123;</span><br><span class="line">            <span class="attr">canvasId</span>: <span class="string">&#x27;myCanvas&#x27;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">show</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ImagePath</span> = res.<span class="property">tempFilePath</span>;</span><br><span class="line">            uni.<span class="title function_">hideLoading</span>();</span><br><span class="line">            <span class="comment">// 在这里可以将得到的图片路径进行保存或分享等操作</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                uni.<span class="title function_">hideLoading</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="variable language_">this</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;, <span class="number">1000</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env</span>: uni.<span class="title function_">getSystemInfoSync</span>().<span class="property">uniPlatform</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">saveImg</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// app 保存</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">env</span> == <span class="string">&#x27;app&#x27;</span>) &#123;</span><br><span class="line">        uni.<span class="title function_">saveImageToPhotosAlbum</span>(&#123;</span><br><span class="line">            <span class="attr">filePath</span>: <span class="variable language_">this</span>.<span class="property">ImagePath</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;保存成功&#x27;</span>,</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/** 生成一个a元素,并创建一个单击事件 */</span></span><br><span class="line">        <span class="keyword">let</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        a.<span class="property">download</span> = name || <span class="string">&quot;photo&quot;</span>; <span class="comment">// 设置图片名称</span></span><br><span class="line">        a.<span class="property">href</span> = <span class="variable language_">this</span>.<span class="property">ImagePath</span>; <span class="comment">// 将生成的URL设置为a.href属性</span></span><br><span class="line">        a.<span class="title function_">setAttribute</span>(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;myLink&quot;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;链接&quot;</span>, a);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">exportCodeConfirm</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">exportCodeConfirm</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> event = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">    <span class="comment">/** 触发a的单击事件 */</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myLink&quot;</span>).<span class="title function_">dispatchEvent</span>(event);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">通过canvas 先制作图。可以做一个canvas 背景在生成一个二维码canvas 图，在将两个canvas 合成一个图片，然后将图片分享出来。</summary>
    
    
    
    <category term="uni-app" scheme="https://note.batype.com/categories/uni-app/"/>
    
    <category term="vue" scheme="https://note.batype.com/categories/uni-app/vue/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="uni-app" scheme="https://note.batype.com/tags/uni-app/"/>
    
    <category term="vue" scheme="https://note.batype.com/tags/vue/"/>
    
    <category term="canvas" scheme="https://note.batype.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云服务器开发端口</title>
    <link href="https://note.batype.com/linux/port/open.html"/>
    <id>https://note.batype.com/linux/port/open.html</id>
    <published>2023-12-19T15:20:21.000Z</published>
    <updated>2023-12-19T16:07:16.299Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>了解端口<br>在开始之前，我们需要了解一下端口。端口是计算机网络中的一个概念，它是用于标识应用程序的逻辑地址。在互联网中，每个应用程序都需要使用一个端口来进行通信。常见的端口有 HTTP 端口（80）、FTP 端口（21）、SSH 端口（22）等等。</p></li><li><p>登录腾讯云服务器<br>首先，我们需要登录到腾讯云服务器。可以使用 SSH 工具，如 PuTTY 或 Xshell，连接到服务器。在连接成功后，输入用户名和密码即可登录到服务器。</p></li><li><p>开放端口<br>要开放端口，我们需要使用防火墙规则。腾讯云服务器默认使用的是 iptables 防火墙。我们可以使用以下命令来开放端口：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 端口号 -j ACCEPT</span><br></pre></td></tr></table></figure><p>其中，端口号是需要开放的端口号。例如，如果要开放 SSH 端口（22），则可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure><ol start="4"><li>保存规则<br>开放端口后，我们需要保存规则，以便在服务器重启后仍然有效。可以使用以下命令来保存规则：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables save</span><br></pre></td></tr></table></figure><ol start="5"><li>查看规则<br>如果想要查看当前的防火墙规则，可以使用以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -L</span><br></pre></td></tr></table></figure><p>这将列出当前的防火墙规则，包括已开放的端口。</p><p>总结<br>开放端口是使用腾讯云服务器的一个基本操作。通过了解端口、登录服务器、开放端口、保存规则和查看规则，我们可以轻松地开放需要的端口，以便应用程序可以正常运行。</p>]]></content>
    
    
    <summary type="html">在开始之前，我们需要了解一下端口。端口是计算机网络中的一个概念，它是用于标识应用程序的逻辑地址。在互联网中，每个应用程序都需要使用一个端口来进行通信。常见的端口有 HTTP 端口（80）、FTP 端口（21）、SSH 端口（22）等等。</summary>
    
    
    
    <category term="linux" scheme="https://note.batype.com/categories/linux/"/>
    
    
    <category term="linux" scheme="https://note.batype.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS上安装Nginx</title>
    <link href="https://note.batype.com/linux/install/nginx.html"/>
    <id>https://note.batype.com/linux/install/nginx.html</id>
    <published>2023-12-19T15:18:25.000Z</published>
    <updated>2023-12-19T16:07:04.763Z</updated>
    
    <content type="html"><![CDATA[<p>要在CentOS上安装Nginx，您可以按照以下步骤进行操作：</p><p>打开终端或SSH连接到CentOS服务器。</p><p>确保您的系统已经更新到最新版本。运行以下命令更新软件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><p>安装Nginx。运行以下命令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure><p>启动Nginx服务：</p><p>使用以下命令启动Nginx服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure><p>检查Nginx状态：</p><p>使用以下命令检查Nginx服务的状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure><p>如果Nginx正在运行，您将看到”active (running)”状态。</p><p>添加到开机启动项：</p><p>要使Nginx在系统启动时自动启动，可以使用以下命令将其添加到开机启动项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure><p>现在，Nginx将在系统启动时自动启动。您可以通过重新启动服务器并检查Nginx状态来验证设置是否成功。请注意，上述命令假定您具有适当的权限（如sudo）来执行这些操作。</p>]]></content>
    
    
    <summary type="html">要在CentOS上安装Nginx，您可以按照以下步骤进行操作</summary>
    
    
    
    <category term="linux" scheme="https://note.batype.com/categories/linux/"/>
    
    <category term="nginx" scheme="https://note.batype.com/categories/linux/nginx/"/>
    
    
    <category term="linux" scheme="https://note.batype.com/tags/linux/"/>
    
    <category term="nginx" scheme="https://note.batype.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>MySQL linux install</title>
    <link href="https://note.batype.com/linux/install/MySQL.html"/>
    <id>https://note.batype.com/linux/install/MySQL.html</id>
    <published>2023-12-19T15:14:19.000Z</published>
    <updated>2023-12-19T16:06:55.429Z</updated>
    
    <content type="html"><![CDATA[<p>在线下载mysql安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装MySQL服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p>报错 失败的软件包是： mysql-community-libs-compat-5.7.37-1.el7.x86_64<br>GPG 密钥配置为： file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-mysql<br>解决办法：原因是Mysql的GPG升级了，需要重新获取<br>使用以下命令即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br></pre></td></tr></table></figure><p>重新执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p>安装完毕<br>启动Mysql服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start  mysqld.service</span><br></pre></td></tr></table></figure><p>修改mysql的密码<br>查看MySQL临时密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>使用临时密码先登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>注意:密码设置必须要大小写字母数字和特殊符号（,&#x2F;‘;:等）,不然不能配置成功<br>查看mysql默认密码复杂度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;validate_password%&#x27;;</span><br></pre></td></tr></table></figure><p>把MySQL的密码校验强度改为低风险</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy=LOW;</span><br></pre></td></tr></table></figure><p>修改MySQL的密码长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_length=4;</span><br></pre></td></tr></table></figure><p>修改密码为root</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;root&#x27;;</span><br></pre></td></tr></table></figure><p>开启mysql远程访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27; with grant option;</span><br></pre></td></tr></table></figure><p>1、使用 grant 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on 数据库名.表名 to 创建的用户名(root)@&quot;%&quot; identified by &quot;密码&quot;;</span><br></pre></td></tr></table></figure><p>2、格式说明：<br>数据库名.表名 如果写成*.*代表授权所有的数据库<br>@ 后面是访问mysql的客户端IP地址（或是 主机名） % 代表任意的客户端，如果填写 localhost 为本地访问（那此用户就不能远程访问该mysql数据库了）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges; //刷新权限</span><br></pre></td></tr></table></figure><p>退出mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit;</span><br></pre></td></tr></table></figure><p>为firewalld添加开放端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent  //开放端口</span><br><span class="line">firewall-cmd --reload  //重新加载防火墙</span><br></pre></td></tr></table></figure><p>其他配置<br>关闭MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mysqld</span><br></pre></td></tr></table></figure><p>重启MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>查看MySQL运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><p>设置开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure><p>关闭开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable mysqld</span><br></pre></td></tr></table></figure><p>配置默认编码为utf8</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br><span class="line">在[mysqld]中加入 character_set_server=utf8 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>区分大小写</p><p>&#x2F;etc&#x2F;my.cof</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lower_case_table_names=1</span><br></pre></td></tr></table></figure><p>其他默认配置文件路径：<br>配置文件： &#x2F;etc&#x2F;my.cnf<br>日志文件： &#x2F;var&#x2F;log&#x2F;mysqld.log<br>服务启动脚本： &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service</p>]]></content>
    
    
    <summary type="html">在线下载mysql安装包</summary>
    
    
    
    <category term="linux" scheme="https://note.batype.com/categories/linux/"/>
    
    <category term="mysql" scheme="https://note.batype.com/categories/linux/mysql/"/>
    
    
    <category term="linux" scheme="https://note.batype.com/tags/linux/"/>
    
    <category term="mysql" scheme="https://note.batype.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Optional chaining 语法编程</title>
    <link href="https://note.batype.com/javascript/optional/chaining.html"/>
    <id>https://note.batype.com/javascript/optional/chaining.html</id>
    <published>2023-12-16T11:25:03.537Z</published>
    <updated>2023-12-16T11:25:03.537Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-Optional-Chaining？"><a href="#什么是-Optional-Chaining？" class="headerlink" title="什么是 Optional Chaining？"></a>什么是 Optional Chaining？</h3><p>Optional chaining 是一个现代JavaScript语法特性，允许开发者在读取对象内部嵌套属性时安全地处理 <code>undefined</code> 或 <code>null</code> 值。这种语法通过 <code>?.</code> 操作符实现，可以避免在查询属性或调用方法时因为中间某个环节不存在而引发错误。</p><h3 id="Optional-chaining-的基本使用示例如下"><a href="#Optional-chaining-的基本使用示例如下" class="headerlink" title="Optional chaining 的基本使用示例如下"></a>Optional chaining 的基本使用示例如下</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">        <span class="attr">b</span>: &#123;</span><br><span class="line">            <span class="attr">c</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 传统的深层属性访问可能会抛出错误，如果某个属性不存在</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = obj &amp;&amp; obj.<span class="property">a</span> &amp;&amp; obj.<span class="property">a</span>.<span class="property">b</span> &amp;&amp; obj.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span>;</span><br><span class="line"><span class="comment">// 使用 optional chaining 语法，安全地读取嵌套属性</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> valueWithOptionalChaining = obj?.<span class="property">a</span>?.<span class="property">b</span>?.<span class="property">c</span>; <span class="comment">// 输出 1</span></span><br><span class="line"><span class="comment">// 如果中间某个属性不存在，表达式会返回 undefined，而不是抛出错误</span></span><br><span class="line"><span class="keyword">const</span> undefinedValue = obj?.<span class="property">a</span>?.<span class="property">nonExistingProp</span>?.<span class="property">c</span>; <span class="comment">// 输出 undefined</span></span><br></pre></td></tr></table></figure><h3 id="Optional-chaining-可以用于四种不同的操作"><a href="#Optional-chaining-可以用于四种不同的操作" class="headerlink" title="Optional chaining 可以用于四种不同的操作"></a>Optional chaining 可以用于四种不同的操作</h3><ol><li>对象属性访问</li></ol><p>如上例所示，可以安全地访问嵌套对象属性。</p><ol start="2"><li>数组索引访问</li></ol><p>可以安全地访问数组的索引，如果数组是 undefined 或 null，则不会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> valueAtIndex = arr?.[<span class="number">2</span>]; <span class="comment">// 输出 3</span></span><br><span class="line"><span class="keyword">const</span> nonExistingIndex = arr?.[<span class="number">5</span>]; <span class="comment">// 输出 undefined</span></span><br></pre></td></tr></table></figure><ol start="3"><li>函数或方法调用</li></ol><p>如果不确定一个对象上的函数是否存在，可以使用 optional chaining 安全地调用函数或方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Function exists&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">a</span>?.(); <span class="comment">// 输出 &#x27;Function exists&#x27;</span></span><br><span class="line">obj.<span class="property">b</span>?.(); <span class="comment">// 由于 b 不存在，不执行任何操作，返回 undefined</span></span><br></pre></td></tr></table></figure><ol start="4"><li>默认值中使用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> name = user?.<span class="property">name</span> ?? <span class="string">&quot;匿名用户&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br></pre></td></tr></table></figure><p>要注意的是，optional chaining 语法是 ECMAScript 2020（ES11）的一部分，因此在老旧的JavaScript环境中可能不受支持。对于这些环境，可以使用Babel这样的工具来转译代码，使其兼容。</p>]]></content>
    
    
    <summary type="html">Optional chaining 是一个现代JavaScript语法特性，允许开发者在读取对象内部嵌套属性时安全地处理 undefined 或 null 值。这种语法通过 ?. 操作符实现，可以避免在查询属性或调用方法时因为中间某个环节不存在而引发错误。</summary>
    
    
    
    <category term="前端" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="es6" scheme="https://note.batype.com/categories/%E5%89%8D%E7%AB%AF/es6/"/>
    
    
    <category term="前端" scheme="https://note.batype.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://note.batype.com/tags/JavaScript/"/>
    
    <category term="es6" scheme="https://note.batype.com/tags/es6/"/>
    
  </entry>
  
</feed>
