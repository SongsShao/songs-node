[{"title":"deb  使用","url":"//linux/install/deb.html","content":"<div id=\"vip-container\"><p>使用dpkg命令：在终端中运行以下命令来安装.deb文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i &lt;filename&gt;.deb</span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["前端","es6"],"tags":["前端","Git","linux","deb"]},{"title":"Docker 的安装和使用","url":"//linux/install/docker.html","content":"<div id=\"vip-container\"><h4 id=\"Linux上安装Docker分为以下几步：\"><a href=\"#Linux上安装Docker分为以下几步：\" class=\"headerlink\" title=\"Linux上安装Docker分为以下几步：\"></a>Linux上安装Docker分为以下几步：</h4><ol>\n<li>设置存储库。</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装Docker引擎</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动Docker</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>设置docker开机自启动</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>配置镜像加速器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://om7zpa5s.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a>镜像命令</h4><ol>\n<li>查看</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>搜索镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>下载镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull mysql:version</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>删除镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images // 查看image ID</span><br><span class=\"line\"></span><br><span class=\"line\">docker rmi -f feb5d9fea6a5</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">多个删除</span></span><br><span class=\"line\">docker rmi -f feb5d9fea6a5 feb5d9fea6a5 </span><br><span class=\"line\">docker rmi -f $(docker images -aq)    # 删除全部的镜像</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h4><ol>\n<li>新建容器并启动</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it centos /bin/bash</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>列出所有运行的容器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker ps </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">命令参数可选项</span></span><br><span class=\"line\">-a        # 列出当前正在运行的容器+历史运行过的容器</span><br><span class=\"line\">-n=?    # 显示最近创建的容器（可以指定显示几条，比如-n=1）</span><br><span class=\"line\">-q        # 只显示容器的编号</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>退出容器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">exit        # 容器直接停止，并退出</span><br><span class=\"line\">ctrl+P+Q    # 容器不停止，退出</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>删除容器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rm 容器id                    # 删除容器（不能删除正在运行的容器）如果要强制删除：docker rm -f 容器id</span><br><span class=\"line\">docker rm -f $(docker ps -aq)        # 删除全部容器</span><br><span class=\"line\">docker ps -a -q|xargs docker rm        # 删除所有容器</span><br><span class=\"line\">docker rm 656c03b3be05</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>启动和停止容器的操作</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker start 容器id # 启动容器</span><br><span class=\"line\">docker restart 容器id # 重启</span><br><span class=\"line\">docker stop 容器id # 停止</span><br><span class=\"line\">docker kill 容器id # 强制停止</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用其他命令\"><a href=\"#常用其他命令\" class=\"headerlink\" title=\"常用其他命令\"></a>常用其他命令</h4><ol>\n<li>后台启动容器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d centos</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>查看日志</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker logs -tf 5694d2fc0a88</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d centos /bin/sh -c &quot;while true;do echo batype;sleep 1000;done&quot;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>查看容器中的进程</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND                   CREATED         STATUS         PORTS     NAMES</span><br><span class=\"line\">4f9b77aafa46   centos    &quot;/bin/sh -c &#x27;while t…&quot;   6 seconds ago   Up 5 seconds             tender_hofstadter</span><br><span class=\"line\"></span><br><span class=\"line\">docker top 4f9b77aafa46</span><br><span class=\"line\">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class=\"line\">root                14087               14066               0                   17:42               ?                   00:00:00            /bin/sh -c while true;do echo batype;sleep 1000;done</span><br><span class=\"line\">root                14107               14087               0                   17:42               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1000</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>查看镜像的元数据</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker inspect 4f9b77aafa46</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;Id&quot;: &quot;4f9b77aafa469b2e50ca296515d66b841f60f12343b1a45ddbdd09766e103d0f&quot;,</span><br><span class=\"line\">        &quot;Created&quot;: &quot;2023-11-03T09:42:35.034147379Z&quot;,</span><br><span class=\"line\">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class=\"line\">        &quot;Args&quot;: [</span><br><span class=\"line\">            &quot;-c&quot;,</span><br><span class=\"line\">            &quot;while true;do echo batype;sleep 1000;done&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;State&quot;: &#123;</span><br><span class=\"line\">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class=\"line\">            &quot;Running&quot;: true,</span><br><span class=\"line\">            &quot;Paused&quot;: false,</span><br><span class=\"line\">            &quot;Restarting&quot;: false,</span><br><span class=\"line\">            &quot;OOMKilled&quot;: false,</span><br><span class=\"line\">            &quot;Dead&quot;: false,</span><br><span class=\"line\">            &quot;Pid&quot;: 14087,</span><br><span class=\"line\">            &quot;ExitCode&quot;: 0,</span><br><span class=\"line\">            &quot;Error&quot;: &quot;&quot;,</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>进入当前正在运行的容器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker exec -it 4f9b77aafa46 /bin/bash</span><br><span class=\"line\">[root@4f9b77aafa46 /]# ps =ef</span><br><span class=\"line\">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class=\"line\">root         1     0  0 09:42 ?        00:00:00 /bin/sh -c while true;do echo batype;sleep 1000;done</span><br><span class=\"line\">root        20     1  0 13:19 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1000</span><br><span class=\"line\">root        21     0  0 13:30 pts/0    00:00:00 /bin/bash</span><br><span class=\"line\">root        35    21  0 13:31 pts/0    00:00:00 ps -ef</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>从容器拷贝文件到主机</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker cp 容器id:容器内路径 目的主机的路径</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# cd /home/</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# ls</span><br><span class=\"line\">html</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS     NAMES</span><br><span class=\"line\">4f9b77aafa46   centos    &quot;/bin/sh -c &#x27;while t…&quot;   4 hours ago   Up 4 hours             tender_hofstadter</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker exec -it 4f9b77aafa46 /bin/bash</span><br><span class=\"line\">[root@4f9b77aafa46 /]# ls</span><br><span class=\"line\">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class=\"line\">[root@4f9b77aafa46 /]# cd /home/</span><br><span class=\"line\">[root@4f9b77aafa46 home]# ls</span><br><span class=\"line\">[root@4f9b77aafa46 home]# touch test.java</span><br><span class=\"line\">[root@4f9b77aafa46 home]# ls</span><br><span class=\"line\">test.java</span><br><span class=\"line\">[root@4f9b77aafa46 home]# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS     NAMES</span><br><span class=\"line\">4f9b77aafa46   centos    &quot;/bin/sh -c &#x27;while t…&quot;   4 hours ago   Up 4 hours             tender_hofstadter</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker cp 4f9b77aafa46:/home/test.java /home</span><br><span class=\"line\">Successfully copied 1.54kB to /home</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# ls</span><br><span class=\"line\">html  test.java</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现，自动同步（容器内的/home路径和主机上的/home路径打通）</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"练习安装Nginx\"><a href=\"#练习安装Nginx\" class=\"headerlink\" title=\"练习安装Nginx\"></a>练习安装Nginx</h4><ol>\n<li><p>搜索镜像：docker search nginx (建议去dockerHub上去搜索)</p>\n</li>\n<li><p>下载镜像：docker pull nginx</p>\n</li>\n<li><p>启动镜像</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker pull nginx</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">latest: Pulling from library/nginx</span><br><span class=\"line\">Digest:</span><br><span class=\"line\">sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31</span><br><span class=\"line\">Status: Downloaded newer image for nginx:latest</span><br><span class=\"line\">docker.io/library/nginx:latest</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-d 后台运行</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--name=<span class=\"string\">&quot;nginx01&quot;</span>    给容器命名</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-p 宿主机端口:容器内部端口</span></span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker run -d --name nginx01 -p 515:80 nginx</span><br><span class=\"line\">614bbf44138a3e834008f5a33a71194c8e78d7f0e53bccbdfc4c9c9f0c0501cb</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                 NAMES</span><br><span class=\"line\">614bbf44138a   nginx     &quot;/docker-entrypoint.…&quot;   8 seconds ago   Up 7 seconds   0.0.0.0:515-&gt;80/tcp, :::515-&gt;80/tcp   nginx01</span><br><span class=\"line\">4f9b77aafa46   centos    &quot;/bin/sh -c &#x27;while t…&quot;   4 hours ago     Up 4 hours                                           tender_hofstadter</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>测试访问</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">访问指向端口515</span></span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ home]# curl 0.0.0.0:515</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">html &#123; color-scheme: light dark; &#125;</span><br><span class=\"line\">body &#123; width: 35em; margin: 0 auto;</span><br><span class=\"line\">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"可视化工具\"><a href=\"#可视化工具\" class=\"headerlink\" title=\"可视化工具\"></a>可视化工具</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br><span class=\"line\">Unable to find image &#x27;portainer/portainer:latest&#x27; locally</span><br><span class=\"line\">latest: Pulling from portainer/portainer</span><br><span class=\"line\"></span><br><span class=\"line\">Digest:</span><br><span class=\"line\">  sha256:fb45b43738646048a0a0cc74fcee2865b69efde857e710126084ee5de9be0f3f</span><br><span class=\"line\">Status: Downloaded newer image for portainer/portainer:latest</span><br><span class=\"line\">a1b1156666edf6cad33eb299e35f543b823673a97a9756726d1fbc2cc571bc47</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS                                       NAMES</span><br><span class=\"line\">a1b1156666ed   portainer/portainer   &quot;/portainer&quot;             8 seconds ago   Up 7 seconds   0.0.0.0:8088-&gt;9000/tcp, :::8088-&gt;9000/tcp   dreamy_goodall</span><br><span class=\"line\">614bbf44138a   nginx                 &quot;/docker-entrypoint.…&quot;   8 minutes ago   Up 8 minutes   0.0.0.0:515-&gt;80/tcp, :::515-&gt;80/tcp         nginx01</span><br><span class=\"line\">4f9b77aafa46   centos                &quot;/bin/sh -c &#x27;while t…&quot;   4 hours ago     Up 4 hours                                                 tender_hofstadter</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>测试访问</li>\n</ol>\n<p><a href=\"http://www.batype.com:8088/\">http://www.batype.com:8088/</a></p>\n<ol>\n<li><p>连接本地Local<br><img src=\"https://pic.imgdb.cn/item/6545012dc458853aefeef057.jpg\" alt=\"Connect Portainer\"></p>\n</li>\n<li><p>进入之的连接页面<br><img src=\"https://pic.imgdb.cn/item/654505fec458853aef03e9b1.jpg\" alt=\"进入之的连接页面\"></p>\n</li>\n</ol>\n<h4 id=\"commit镜像\"><a href=\"#commit镜像\" class=\"headerlink\" title=\"commit镜像\"></a>commit镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">提交容器成为一个新的副本</span></span><br><span class=\"line\">docker commit</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">命令和git原理类似</span></span><br><span class=\"line\">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker commit -a=&quot;batype&quot; -m=&quot;test&quot; 614bbf44138a nginx001:18.16.0</span><br><span class=\"line\">sha256:7fcdd59c72c118bccfc2a6d94953e7d18d4a1afadeea0eee304117e917f0aabe</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker images</span><br><span class=\"line\">REPOSITORY            TAG       IMAGE ID       CREATED          SIZE</span><br><span class=\"line\">nginx001              18.16.0   7fcdd59c72c1   12 seconds ago   141MB</span><br><span class=\"line\">nginx                 latest    605c77e624dd   22 months ago    141MB</span><br><span class=\"line\">mysql                 latest    3218b38490ce   22 months ago    516MB</span><br><span class=\"line\">centos                latest    5d0da3dc9764   2 years ago      231MB</span><br><span class=\"line\">portainer/portainer   latest    580c0e4e98b0   2 years ago      79.1MB</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE                 COMMAND                  CREATED             STATUS             PORTS                                       NAMES</span><br><span class=\"line\">a1b1156666ed   portainer/portainer   &quot;/portainer&quot;             About an hour ago   Up About an hour   0.0.0.0:8088-&gt;9000/tcp, :::8088-&gt;9000/tcp   dreamy_goodall</span><br><span class=\"line\">614bbf44138a   nginx                 &quot;/docker-entrypoint.…&quot;   About an hour ago   Up About an hour   0.0.0.0:515-&gt;80/tcp, :::515-&gt;80/tcp         nginx01</span><br><span class=\"line\">4f9b77aafa46   centos                &quot;/bin/sh -c &#x27;while t…&quot;   5 hours ago         Up 5 hours                                                     tender_hofstadter</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"容器数据卷\"><a href=\"#容器数据卷\" class=\"headerlink\" title=\"容器数据卷\"></a>容器数据卷</h3><h4 id=\"什么是容器数据卷？\"><a href=\"#什么是容器数据卷？\" class=\"headerlink\" title=\"什么是容器数据卷？\"></a>什么是容器数据卷？</h4><p>Docker容器数据卷，即Docker Volume（卷）。</p>\n<p>当Docker容器运行的时候，会产生一系列的数据文件，这些数据文件会在关闭Docker容器时，直接消失的。但是其中产生部分的数据内容，我们是希望能够把它给保存起来，另作它用的。</p>\n<p>关闭Docker容器&#x3D;删除内部除了image底层数据的其他全部内容，即删库跑路</p>\n<p>所以我们期望：</p>\n<p>将应用与运行的环境打包形成容器运行，伴随着容器运行产生的数据，我们希望这些数据能够持久化。<br>希望容器之间也能够实现数据的共享、</p>\n<p>Docker容器产生的数据同步到本地,这样关闭容器的时候，数据是在本地的，不会影响数据的安全性。<br>docker的容器卷技术也就是将容器内部目录和本地目录进行一个同步，即挂载。</p>\n<h4 id=\"使用数据卷\"><a href=\"#使用数据卷\" class=\"headerlink\" title=\"使用数据卷\"></a>使用数据卷</h4><p>主机目录和容器内的目录是映射关系</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -v 主机目录:容器内目录 镜像名 /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试，查看容器信息</span></span><br><span class=\"line\">docker inspect 容器id</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.imgdb.cn/item/654510aac458853aef35e748.jpg\"></p>\n<p>停止容器后，在主机的&#x2F;home&#x2F;ceshi文件夹下，修改文件或新增文件，启动容器，查看容器的&#x2F;home文件夹，发现容器内的数据依旧是同步的</p>\n<ul>\n<li>停止容器。</li>\n<li>宿主机上修改文件。</li>\n<li>启动容器。</li>\n<li>容器内的数据依旧是同步的。</li>\n</ul>\n<h4 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h4><p><img src=\"https://pic.imgdb.cn/item/65451200c458853aef3c1f3c.jpg\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取镜像</span></span><br><span class=\"line\">docker pull mysql:5.7</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行容器，需要做数据目录挂载。（安装启动mysql，注意：需要配置密码）</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">官方启动mysql</span></span><br><span class=\"line\">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my123456 -d mysql:5.7</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置启动并同步数据</span></span><br><span class=\"line\">docker run -d -p 8081:3306 -v /home/mysql/conf.d:/etc/mysql/conf.d -v /home/mysql/mysql.conf.d:/etc/mysql/mysql.conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=weiliao&amp;666 --name mysql01 mysql:5.7</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"匿名挂载和具名挂载\"><a href=\"#匿名挂载和具名挂载\" class=\"headerlink\" title=\"匿名挂载和具名挂载\"></a>匿名挂载和具名挂载</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如何确定是具名挂载，还是匿名挂载，还是指定路径挂载</span></span><br><span class=\"line\">-v 容器内的路径                # 匿名挂载</span><br><span class=\"line\">-v 卷名:容器内的路径        # 具名挂载</span><br><span class=\"line\">-v /宿主机路径:容器内路径    # 指定路径挂载</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">具名挂载</span></span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ mysql]# docker run -d -p 3344:80 --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class=\"line\">7cd90c3b2f02f9b84e0dd659f0c8179d777b3c9b6c95e11da4db8a7831d0923e</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ mysql]# docker volume ls</span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\">local     cffb5d0a4839c2deff3d4c3fde9b86795632dd3ee42e256daf68fa3a33d888fd</span><br><span class=\"line\">local     f9515933a80fac5357c7b26742d5870471ae5b21dcef34a79b60e2cc70a4c288</span><br><span class=\"line\">local     juming-nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">匿名挂载</span></span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ mysql]# docker run -d --name nginx03 -v /etc/nginx nginx</span><br><span class=\"line\">c27103b64da61544a65037ae16441f2b1ffe6f02ce0729768724752d8c4751f1</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ mysql]# docker volume ls</span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\">local     3303ec682317c64c023983cc615fa0db5cd6a88b77c4f7361d2594bc68618961</span><br><span class=\"line\">local     cffb5d0a4839c2deff3d4c3fde9b86795632dd3ee42e256daf68fa3a33d888fd</span><br><span class=\"line\">local     f9515933a80fac5357c7b26742d5870471ae5b21dcef34a79b60e2cc70a4c288</span><br><span class=\"line\">local     juming-nginx</span><br></pre></td></tr></table></figure>\n<p><strong>拓展</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过 -v 容器内的路径:ro    rw    改变读写权限</span></span><br><span class=\"line\">ro    read only    # 只读</span><br><span class=\"line\">rw    read write    # 可读可写</span><br><span class=\"line\">docker run -d -p 3345:80 --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class=\"line\">docker run -d -p 3345:80 --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h4><p>dockerfile 就是用来构建 docker 镜像的构建文件。    命令脚本！</p>\n<p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本一个一个的命令，每个命令都是一层！</p>\n<ol>\n<li>创建一个名为dockerfile 的文件</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">VOLUME [&quot;volume01&quot;, &quot;volume02&quot;]</span><br><span class=\"line\">CMD echo &quot;-----end-----&quot;</span><br><span class=\"line\">CMD /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>编译</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -f ./dockerfile_songs_note -t songs_note.centos:1.0 .</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.imgdb.cn/item/6545ab56c458853aef9204f3.jpg\"></p>\n<ol start=\"3\">\n<li>启动容器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it 5f6352c38230 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">图形选中的就是匿名挂载</span></span><br><span class=\"line\">VOLUME [&quot;volume01&quot;, &quot;volume02&quot;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.imgdb.cn/item/6545ac56c458853aef949ef9.jpg\"></p>\n<ol start=\"4\">\n<li>查看一下卷挂载的路径：docker inspect 容器id</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker inspect 95ab48f7bf47</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.imgdb.cn/item/6545ad0ac458853aef967f53.jpg\"></p>\n<h4 id=\"数据卷容器\"><a href=\"#数据卷容器\" class=\"headerlink\" title=\"数据卷容器\"></a>数据卷容器</h4><p>多个容器同步数据（临时认父）</p>\n<p>将两个容器或者更多容器之间的数据进行数据共享</p>\n<ol>\n<li>启动3个容器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -d --name docker01 songs_note.centos:1.0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器创建test.js 文件</span></span><br><span class=\"line\">docker run -it -d --name docker02 --volumes-from docker01 songs_note.centos:1.0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器创建test1.js 文件</span></span><br><span class=\"line\">docker run -it -d --name docker03 --volumes-from docker01 songs_note.centos:1.0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器创建test2.js 文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入 容器docker01查看</span></span><br><span class=\"line\">[root@ab2fb91dd8c5 volume01]# ls</span><br><span class=\"line\">test.js  test1.js  test2.js</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除某一个容器</span></span><br><span class=\"line\"> [root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker rm -f f0305bd4a916</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看其他容器文件是否还在</span></span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker exec -it 1c7a3dbaf54e /bin/bash</span><br><span class=\"line\">[root@1c7a3dbaf54e /]# cd volume01</span><br><span class=\"line\">[root@1c7a3dbaf54e volume01]# ls</span><br><span class=\"line\">test.js  test1.js  test2.js</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>多个mysql实现数据共享</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker run -d -p 7777:3306 -v /home/mysql/conf:/etc mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ ~]# docker run -d -p 7777:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>结论</strong>：<br>容器之间配置信息的传递，数据卷容器的生命同期一直持续到没有容器使用为止。<br>但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的！</p>\n<h3 id=\"DockerFile\"><a href=\"#DockerFile\" class=\"headerlink\" title=\"DockerFile\"></a>DockerFile</h3><h4 id=\"什么是DockerFile-？\"><a href=\"#什么是DockerFile-？\" class=\"headerlink\" title=\"什么是DockerFile ？\"></a>什么是DockerFile ？</h4><p>dockerfile是用来构建docker镜像的文件！命令参数脚本！</p>\n<p><strong>构建步骤</strong>：</p>\n<ol>\n<li>编写一个dockerfile文件</li>\n<li>docker build 构建成为一个镜像</li>\n<li>docker run运行镜像</li>\n<li>docker push发布镜像（DockerHub、阿里云镜像仓库！）</li>\n</ol>\n<h4 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h4><ol>\n<li>每个保留关键字（指令）都是必须是大写字母</li>\n<li>执行从上到下顺序执行</li>\n<li>‘#’ 表示注释</li>\n<li>每一个指令都会创建提交一个新的镜像层，并提交！</li>\n</ol>\n<p>dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p>\n<p>DockerFile：构建文件，定义了一切的步骤，源代码。<br>Dockerlmages：通过DockerFile构建生成的镜像，最终发布和运行的产品。<br>Docker容器：容器就是镜像运行起来提供服务的。</p>\n<h4 id=\"DockerFile的命令\"><a href=\"#DockerFile的命令\" class=\"headerlink\" title=\"DockerFile的命令\"></a>DockerFile的命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM         # 基础镜像，一起从这里开始构建</span><br><span class=\"line\">MAINTAINER   # 镜像作者：姓名-邮箱</span><br><span class=\"line\">RUN          # 镜像构建的时候需要运行的命令</span><br><span class=\"line\">ADD          # 步骤：tomcat镜像，这个tomcat压缩包！添加内容</span><br><span class=\"line\">WORKDIR      # 镜像的工作目录</span><br><span class=\"line\">VOLUME       # 挂载的目录</span><br><span class=\"line\">EXPOSE       # 暴露端口配置</span><br><span class=\"line\">CMD          # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class=\"line\">ENTRYPOINT   # 指定这个容器启动的时候要运行的命令，可以追加命令</span><br><span class=\"line\">ONBUILD      # 当构建一个被继承DockerFile 这个时候就会运行ONBUILD 的指令，触发指令。</span><br><span class=\"line\">CPOY         # 类似ADD，将我们的文件拷贝到镜像中</span><br><span class=\"line\">ENV          # 构建的时候设置环境变量！</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><ol>\n<li>编写dockerfile的文件</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> centos:latest</span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> batye&lt;<span class=\"number\">1175715363</span>@qq.com&gt;</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> MYPATH /usr/local</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> <span class=\"variable\">$MYPATH</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install vim</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install net-tools</span></span><br><span class=\"line\">EXPOST <span class=\"number\">8001</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$MYPATH</span></span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;----end----&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> /bin/bash</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>构建文件镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -f dockerFile_test -t vim.centos:0.0.1 .</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>原生contos7</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker run -it centos</span><br><span class=\"line\">[root@566d6bd3f48d /]# pwd</span><br><span class=\"line\">/</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">工作目录为根目录</span></span><br><span class=\"line\">[root@566d6bd3f48d /]# vim</span><br><span class=\"line\">bash: vim: command not found</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">没有vim 工具</span></span><br><span class=\"line\">[root@566d6bd3f48d /]# exit</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>vim.centos增加配置以后的镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker run -it vim.centos:0.0.1</span><br><span class=\"line\">[root@53bfee4c6557 local]# pwd</span><br><span class=\"line\">/usr/local</span><br><span class=\"line\">[root@53bfee4c6557 local]# vim</span><br><span class=\"line\"></span><br><span class=\"line\">[root@53bfee4c6557 local]# ifconfig</span><br><span class=\"line\">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.17.0.5  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class=\"line\">        ether 02:42:ac:11:00:05  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 8  bytes 656 (656.0 B)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class=\"line\">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class=\"line\">        RX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@53bfee4c6557 local]# exit</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>列出本地进行的变更历史</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker history 692aba72d901</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic.imgdb.cn/item/6545f262c458853aef77e132.jpg\" alt=\"docker history 692aba72d901\"></p>\n<ol start=\"6\">\n<li>CMD和ENTRYPOINT区别</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">CMD            # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class=\"line\">ENTRYPOINT     # 指定这个容器启动的时候要运行的命令，可以追加命令</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>测试CMD</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 编写dockerfile文件</span></span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# vim dockerfile-cmd-test</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# cat dockerfile-cmd-test</span><br><span class=\"line\">FROM centos:7</span><br><span class=\"line\">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 构建镜像</span></span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker build -f dockerfile-cmd-test -t cmdtest .</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3. run运行，发现我们的<span class=\"string\">&quot;ls -a&quot;</span>命令生效、执行</span></span><br><span class=\"line\">docker run 06f2cc65ea4a</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run 06f2cc65ea4a </span><br></pre></td></tr></table></figure>\n<p>  <img src=\"https://pic.imgdb.cn/item/6545f420c458853aef7e35a4.jpg\" alt=\"docker run 06f2cc65ea4a \"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4. 我们先追加一个命令<span class=\"string\">&quot;l&quot;</span>,构成<span class=\"string\">&quot;ls -al&quot;</span>命令，发现报错</span></span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker run ec0d2dd226b3 -l</span><br><span class=\"line\">docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: &quot;-l&quot;: executable file not found in $PATH: unknown.</span><br><span class=\"line\">ERRO[0000] error waiting for container:</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">原因：CMD命令的情况下，<span class=\"string\">&quot;-l&quot;</span>替换了CMD[<span class=\"string\">&quot;1s&quot;</span>，<span class=\"string\">&quot;-a&quot;</span>]命令，因为<span class=\"string\">&quot;-l&quot;</span>不是命令，所以报错！</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试ENTRYPOINT</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 编写dockerfile文件</span></span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# vim dockerfile-entrypoint-test</span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# cat dockerfile-entrypoint-test</span><br><span class=\"line\">FROM centos:7</span><br><span class=\"line\">ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 构建镜像</span></span><br><span class=\"line\">[root@iZ2vc7kou0oyoo6bt2y0lcZ dockerfile]# docker build -f dockerfile-entrypoint-test -t entrypointtest .</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3. run运行，发现我们的<span class=\"string\">&quot;ls -a&quot;</span>命令生效、执行</span></span><br><span class=\"line\">docker run 5184c7d459a0</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pic.imgdb.cn/item/6545fc1bc458853aef99f91e.jpg\" alt=\"docker run 5184c7d459a0\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run 5184c7d459a0 -l</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pic.imgdb.cn/item/6545fb94c458853aef982c74.jpg\" alt=\"docker run 5184c7d459a0 -l\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">原因：ENTRYPOINT命令的情况下，<span class=\"string\">&quot;-l&quot;</span>追加在ENTRYPOINT [<span class=\"string\">&quot;1s&quot;</span>，<span class=\"string\">&quot;-a&quot;</span>]命令后面，得到<span class=\"string\">&quot;ls -al&quot;</span>的命令，所以命令正常执行！</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">（我们的追加命令，是直接拼接在我们的ENTRYPOINT命令的后面）</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["linux","docker"],"tags":["前端","linux","docker"]},{"title":"linux 配置缩写快捷操作","url":"//linux/config/git-config.html","content":"<div id=\"vip-container\"><p>编辑~&#x2F;.zshrc 增加自定义配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">alias gps=&quot;git push origin&quot;</span><br><span class=\"line\">alias gcm=&quot;git add . &amp;&amp; git commit -m &quot;</span><br><span class=\"line\">alias gpl=&quot;git pull origin&quot;</span><br><span class=\"line\">alias gco=&quot;git checkout&quot;</span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["linux","git"],"tags":["前端","Git","linux"]},{"title":"Git 使用","url":"//linux/config/git.html","content":"<div id=\"vip-container\"><p>Git 是一个分布式版本控制系统，用于跟踪文件的变化并协作开发。以下是使用 Git 的基本步骤：</p>\n<ol>\n<li><p>安装 Git：首先，你需要在本地计算机上安装 Git。你可以从 Git 官方网站（<a href=\"https://git-scm.com/%EF%BC%89%E4%B8%8B%E8%BD%BD%E5%B9%B6%E6%8C%89%E7%85%A7%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E3%80%82\">https://git-scm.com/）下载并按照安装指南进行安装。</a></p>\n</li>\n<li><p>创建一个 Git 仓库：进入你的项目文件夹，并使用以下命令初始化一个新的 Git 仓库：</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>添加文件到暂存区：将需要进行版本控制的文件添加到 Git 的暂存区，使用以下命令：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>提交文件：将暂存区的文件提交到 Git 仓库，使用以下命令：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;提交说明&quot;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>分支管理：</li>\n</ol>\n<p>Git 使用分支来管理不同的版本和功能。可以使用以下命令创建、切换、合并、暂存、还原暂存分支：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch          &lt;分支名&gt;        # 创建新分支</span><br><span class=\"line\">git checkout        &lt;分支名&gt;        # 切换到分支</span><br><span class=\"line\">git checkout -b     &lt;分支名&gt;        # 基于当前分支创建分支</span><br><span class=\"line\">git merge           &lt;分支名&gt;        # 合并分支</span><br><span class=\"line\">git branch                         # 查看分支列表</span><br><span class=\"line\">git stash    save   &#x27;&#x27;             # 暂存分支</span><br><span class=\"line\">git stash    pop                   # 恢复暂存：</span><br><span class=\"line\">                                   # 恢复暂存的修改 这个指令将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>远程仓库：Git 还提供了远程仓库的功能，可以将本地仓库与远程仓库进行同步和协作。常用的远程仓库服务有 GitHub、GitLab 和 Bitbucket。可以使用以下命令与远程仓库进行交互：</li>\n</ol>\n<ul>\n<li>添加远程仓库：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote add origin &lt;远程仓库地址&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将本地分支推送到远程仓库：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push -u origin &lt;分支名&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将本地代码强制推送到远程仓库：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push -f || -force origin &lt;分支名&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从远程仓库拉取最新代码：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull origin &lt;分支名&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这些是 Git 的基本用法，还有更多高级的用法和命令可以根据实际需要进行学习和掌握。你可以参考 Git 的官方文档或查找其他教程来深入了解 Git 的更多功能和用法。</p>\n<ol start=\"7\">\n<li>回退版本</li>\n</ol>\n<p>git reset 命令用于回退版本，可以指定退回某一次提交的版本。git reset 命令语法格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset [--soft | --mixed | --hard] [HEAD]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–mixed</li>\n</ul>\n<p>为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset HEAD^                  # 回退所有内容到上一个版本</span><br><span class=\"line\">git reset HEAD^ git_use.md       # 回退文件的版本到上一个版本</span><br><span class=\"line\">git reset 0123adsfe3             # 回退到指定版本</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>–hard</li>\n</ul>\n<p>参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD             # 回退所有内容到上一个版本</span><br><span class=\"line\">git reset --hard HEAD~3           # 回退上上上一个版本</span><br><span class=\"line\">git reset –hard bae128            # 回退到某个版本回退点之前的所有信息</span><br><span class=\"line\">git reset --hard origin/master    # 将本地的状态回退到和远程的一样</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>删除本地和远程分支</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch  -d         &lt;分支名&gt;    # 删除本地</span><br><span class=\"line\">git push    origin -d  &lt;分支名&gt;    # 删除远程分支</span><br></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li>配置全局用户信息</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name   &quot;batype&quot;</span><br><span class=\"line\">git config --global user.email  1175715363@qq.com</span><br></pre></td></tr></table></figure>\n\n<ol start=\"10\">\n<li>避免每次推送都输入密码</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global credential.helper store</span><br></pre></td></tr></table></figure>\n\n<ol start=\"11\">\n<li>当前 Git 仓库关联的远程仓库的 URL配置</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote add     origin &lt;url&gt; # 添加 origin 地址</span><br><span class=\"line\">git remote set-url origin &lt;url&gt; # 更新 origin 地址</span><br><span class=\"line\">git remote get-url origin       # 获取 origin 地址</span><br><span class=\"line\">git remote remove  origin       # 移除 origin 地址</span><br></pre></td></tr></table></figure>\n\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["linux","git"],"tags":["前端","Git","linux"]},{"title":"ubantu 安装Maven 和jdk 步骤","url":"//linux/install/maven/jdk.html","content":"<div id=\"vip-container\"><p>To install Maven and JDK (Java Development Kit) on Ubuntu, you can follow these steps:</p>\n<p>Open a terminal on your Ubuntu system.</p>\n<p>Update the package lists by running the following command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<p>Install Maven by running the following command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install maven</span><br></pre></td></tr></table></figure>\n\n<p>This will install Maven and its dependencies.</p>\n<p>Verify the installation by running the following command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn --version</span><br></pre></td></tr></table></figure>\n\n<p>This should display the version of Maven installed on your system.</p>\n<p>Install JDK (Java Development Kit) using the following steps:</p>\n<p>a. Check if Java is already installed on your system by running the following command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum list installed | grep java</span><br><span class=\"line\">或者</span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<p>If Java is not installed, you will see an error message.</p>\n<p>b. select yum list package version</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum search java | grep -i --color jdk</span><br></pre></td></tr></table></figure>\n\n<p>c. Install the default JDK package by running the following command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install java-1.8.0-openjdk.x86_64</span><br><span class=\"line\">or</span><br><span class=\"line\">sudo apt install default-jdk</span><br></pre></td></tr></table></figure>\n\n<p>This will install the default JDK package available in the Ubuntu package repository.</p>\n<p>d. Verify the installation by running the following command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">javac -version</span><br></pre></td></tr></table></figure>\n\n<p>This should display the version of the JDK installed on your system.</p>\n<p>Additionally, you can also run the following command to check the Java Runtime Environment (JRE) version:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<p>This will display the JRE version.</p>\n<p>e. jdk checkout version link</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/java 1</span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/javac 1</span><br></pre></td></tr></table></figure>\n\n<p>f. use shell checkout version</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --config java</span><br><span class=\"line\">有 3 个候选项可用于替换 java (提供 /usr/bin/java)。</span><br><span class=\"line\"></span><br><span class=\"line\">选择       路径                                          优先级  状态</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">* 0            /usr/lib/jvm/java-17-openjdk-amd64/bin/java      1711      自动模式</span><br><span class=\"line\">1            /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/java   1         手动模式</span><br><span class=\"line\">2            /usr/lib/jvm/java-17-openjdk-amd64/bin/java      1711      手动模式</span><br><span class=\"line\">3            /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java   1081      手动模式</span><br><span class=\"line\"></span><br><span class=\"line\">要维持当前值[*]请按&lt;回车键&gt;，或者键入选择的编号：1</span><br></pre></td></tr></table></figure>\n\n\n<p>That’s it! You have now installed Maven and JDK on your Ubuntu system. You can use Maven for building projects and the JDK for developing and running Java applications.</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["linux","maven"],"tags":["前端","linux","maven","jdk"]},{"title":"MySQL linux install","url":"//linux/install/MySQL.html","content":"<div id=\"vip-container\"><p>在线下载mysql安装包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>安装MySQL</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>安装MySQL服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>\n\n<p>报错 失败的软件包是： mysql-community-libs-compat-5.7.37-1.el7.x86_64<br>GPG 密钥配置为： file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-mysql<br>解决办法：原因是Mysql的GPG升级了，需要重新获取<br>使用以下命令即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br></pre></td></tr></table></figure>\n\n<p>重新执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>\n\n<p>安装完毕<br>启动Mysql服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start  mysqld.service</span><br></pre></td></tr></table></figure>\n\n<p>修改mysql的密码<br>查看MySQL临时密码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">grep &quot;password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>\n\n\n<p>使用临时密码先登录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<p>注意:密码设置必须要大小写字母数字和特殊符号（,&#x2F;‘;:等）,不然不能配置成功<br>查看mysql默认密码复杂度</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES LIKE &#x27;validate_password%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>把MySQL的密码校验强度改为低风险</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">set global validate_password_policy=LOW;</span><br></pre></td></tr></table></figure>\n\n<p>修改MySQL的密码长度</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">set global validate_password_length=4;</span><br></pre></td></tr></table></figure>\n\n<p>修改密码为root</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;root&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>开启mysql远程访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27; with grant option;</span><br></pre></td></tr></table></figure>\n\n<p>1、使用 grant 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant all privileges on 数据库名.表名 to 创建的用户名(root)@&quot;%&quot; identified by &quot;密码&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>2、格式说明：<br>数据库名.表名 如果写成*.*代表授权所有的数据库<br>@ 后面是访问mysql的客户端IP地址（或是 主机名） % 代表任意的客户端，如果填写 localhost 为本地访问（那此用户就不能远程访问该mysql数据库了）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">flush privileges; //刷新权限</span><br></pre></td></tr></table></figure>\n\n<p>退出mysql</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">exit;</span><br></pre></td></tr></table></figure>\n\n<p>为firewalld添加开放端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=3306/tcp --permanent  //开放端口</span><br><span class=\"line\">firewall-cmd --reload  //重新加载防火墙</span><br></pre></td></tr></table></figure>\n\n<p>其他配置<br>关闭MySQL</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl stop mysqld</span><br></pre></td></tr></table></figure>\n\n<p>重启MySQL</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br></pre></td></tr></table></figure>\n\n<p>查看MySQL运行状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl status mysqld</span><br></pre></td></tr></table></figure>\n\n<p>设置开机启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl enable mysqld</span><br></pre></td></tr></table></figure>\n\n<p>关闭开机启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl disable mysqld</span><br></pre></td></tr></table></figure>\n\n<p>配置默认编码为utf8</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/my.cnf</span><br><span class=\"line\">在[mysqld]中加入 character_set_server=utf8 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>区分大小写</p>\n<p>&#x2F;etc&#x2F;my.cof</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">lower_case_table_names=1</span><br></pre></td></tr></table></figure>\n\n<p>其他默认配置文件路径：<br>配置文件： &#x2F;etc&#x2F;my.cnf<br>日志文件： &#x2F;var&#x2F;log&#x2F;mysqld.log<br>服务启动脚本： &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["linux","mysql"],"tags":["linux","mysql"]},{"title":"CentOS上安装Nginx","url":"//linux/install/nginx.html","content":"<div id=\"vip-container\"><p>要在CentOS上安装Nginx，您可以按照以下步骤进行操作：</p>\n<p>打开终端或SSH连接到CentOS服务器。</p>\n<p>确保您的系统已经更新到最新版本。运行以下命令更新软件包：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum update</span><br></pre></td></tr></table></figure>\n\n<p>安装Nginx。运行以下命令进行安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx</span><br></pre></td></tr></table></figure>\n\n<p>启动Nginx服务：</p>\n<p>使用以下命令启动Nginx服务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx</span><br></pre></td></tr></table></figure>\n\n<p>检查Nginx状态：</p>\n<p>使用以下命令检查Nginx服务的状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl status nginx</span><br></pre></td></tr></table></figure>\n\n<p>如果Nginx正在运行，您将看到”active (running)”状态。</p>\n<p>添加到开机启动项：</p>\n<p>要使Nginx在系统启动时自动启动，可以使用以下命令将其添加到开机启动项：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure>\n\n<p>现在，Nginx将在系统启动时自动启动。您可以通过重新启动服务器并检查Nginx状态来验证设置是否成功。请注意，上述命令假定您具有适当的权限（如sudo）来执行这些操作。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["linux","nginx"],"tags":["linux","nginx"]},{"title":"Ubuntu解压Zip文件命令详解","url":"//linux/use/zip.html","content":"<div id=\"vip-container\"><h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>Ubuntu解压Zip文件的命令是“unzip”，它可以解压几乎所有的Zip文件。其基本的语法为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">unzip [option] filename.zip</span><br></pre></td></tr></table></figure>\n\n<p>其中，filename.zip表示要解压的Zip文件名，option参数是可选的，用来控制解压的行为，常用的option参数如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">-d：指定解压到的目录，例如：unzip -d /home/user/untitled filename.zip，即将filename.zip解压到/home/user/untitled目录；</span><br><span class=\"line\">-q：不显示详细信息，即不显示每个文件的解压进度信息；</span><br><span class=\"line\">-o：覆盖目标文件，即如果目标文件存在就覆盖它；</span><br><span class=\"line\">-P：指定Zip文件的密码。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解压Zip文件到当前路径\"><a href=\"#解压Zip文件到当前路径\" class=\"headerlink\" title=\"解压Zip文件到当前路径\"></a>解压Zip文件到当前路径</h3><p>解压一个Zip文件到当前路径很简单，只要在终端中输入“unzip filename.zip”即可。比如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">unzip archive.zip</span><br></pre></td></tr></table></figure>\n\n<p>上述命令将会将“archive.zip”文件解压到当前路径中。如果你希望将Zip文件解压到另外一个路径，可以使用“-d”参数，如下所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">unzip archive.zip -d /home/user/some_folder</span><br></pre></td></tr></table></figure>\n\n<p>上述命令将会将“archive.zip”文件解压到“&#x2F;home&#x2F;user&#x2F;some_folder”路径中。</p>\n<h3 id=\"解压指定的文件\"><a href=\"#解压指定的文件\" class=\"headerlink\" title=\"解压指定的文件\"></a>解压指定的文件</h3><p>有时候我们只需要解压Zip文件中的某些文件，而不是全部文件，这时候可以使用“unzip -j”命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">unzip -j archive.zip file.txt</span><br></pre></td></tr></table></figure>\n\n<p>上述命令将会将“archive.zip”文件中的“file.txt”文件解压到当前路径中。</p>\n<h3 id=\"解压时覆盖已存在的文件\"><a href=\"#解压时覆盖已存在的文件\" class=\"headerlink\" title=\"解压时覆盖已存在的文件\"></a>解压时覆盖已存在的文件</h3><p>默认情况下，如果解压的目标文件已经存在，unzip命令会提示是否覆盖。如果你希望不进行提示，强制覆盖已经存在的文件，可以使用“-o”参数。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">unzip -o archive.zip</span><br></pre></td></tr></table></figure>\n\n<p>上述命令将会解压“archive.zip”文件到当前路径中，如果有重名的文件会强制覆盖。</p>\n<h3 id=\"解压时保留目录结构\"><a href=\"#解压时保留目录结构\" class=\"headerlink\" title=\"解压时保留目录结构\"></a>解压时保留目录结构</h3><p>默认情况下，unzip命令会将Zip文件中的所有文件解压到当前路径中，不管其原来所在的目录结构。如果你希望保留原来的目录结构，可以使用“unzip -j”命令，如下所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">unzip archive.zip -d /home/user/some_folder</span><br></pre></td></tr></table></figure>\n\n<p>上述命令将会将“archive.zip”文件解压到“&#x2F;home&#x2F;user&#x2F;some_folder”路径中，并保留原来的目录结构。</p>\n<h3 id=\"解压时指定密码\"><a href=\"#解压时指定密码\" class=\"headerlink\" title=\"解压时指定密码\"></a>解压时指定密码</h3><p>如果Zip文件设置了密码，那么我们需要在解压时指定密码。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">unzip -P secretPassword archive.zip</span><br></pre></td></tr></table></figure>\n<p>上述命令将会解压“archive.zip”文件，并使用“secretPassword”作为密码。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["linux","zip"],"tags":["linux","zip"]},{"title":"腾讯云服务器开发端口","url":"//linux/port/open.html","content":"<div id=\"vip-container\"><ol>\n<li><p>了解端口<br>在开始之前，我们需要了解一下端口。端口是计算机网络中的一个概念，它是用于标识应用程序的逻辑地址。在互联网中，每个应用程序都需要使用一个端口来进行通信。常见的端口有 HTTP 端口（80）、FTP 端口（21）、SSH 端口（22）等等。</p>\n</li>\n<li><p>登录腾讯云服务器<br>首先，我们需要登录到腾讯云服务器。可以使用 SSH 工具，如 PuTTY 或 Xshell，连接到服务器。在连接成功后，输入用户名和密码即可登录到服务器。</p>\n</li>\n<li><p>开放端口<br>要开放端口，我们需要使用防火墙规则。腾讯云服务器默认使用的是 iptables 防火墙。我们可以使用以下命令来开放端口：</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -p tcp --dport 端口号 -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n<p>其中，端口号是需要开放的端口号。例如，如果要开放 SSH 端口（22），则可以使用以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -p tcp --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>保存规则<br>开放端口后，我们需要保存规则，以便在服务器重启后仍然有效。可以使用以下命令来保存规则：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">service iptables save</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>查看规则<br>如果想要查看当前的防火墙规则，可以使用以下命令：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">iptables -L</span><br></pre></td></tr></table></figure>\n\n<p>这将列出当前的防火墙规则，包括已开放的端口。</p>\n<p>总结<br>开放端口是使用腾讯云服务器的一个基本操作。通过了解端口、登录服务器、开放端口、保存规则和查看规则，我们可以轻松地开放需要的端口，以便应用程序可以正常运行。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["linux"],"tags":["linux"]},{"title":"vscode . open project","url":"//linux/use/vscode/open/project.html","content":"<div id=\"vip-container\"><p>You are trying to start Visual Studio Code as a super user which isn’t recommended. If this was i…</p>\n<p>在centos7 中通过wget 安装vscode(tar.gz格式)后，执行&#x2F;bin&#x2F;code出现提示：</p>\n<p>You are trying to start Visual Studio Code as a super user which isn’t recommended. If this was intended, please add the argument –no-sandbox and specify an alternate user data directory using the –user-data-dir argument.<br>您正试图以超级用户身份启动Visual Studio代码，这是不推荐的。如果是这样，请添加参数“–no sandbox”，并使用“–user data dir”参数指定备用用户数据目录。</p>\n<p>解决方法：<br>方法一：修改 ~&#x2F;.bashrc</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>添加一行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">whereis code </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">code: /usr/bin/code /usr/share/code</span></span><br><span class=\"line\">alias code=&#x27;/usr/share/code/code . --no-sandbox --unity-launch&#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["linux","vscode"],"tags":["linux","vscode"]},{"title":"zsh install","url":"//linux/install/zsh.html","content":"<div id=\"vip-container\"><p>Manual Installation</p>\n<h3 id=\"Clone-The-Repository\"><a href=\"#Clone-The-Repository\" class=\"headerlink\" title=\"Clone The Repository\"></a>Clone The Repository</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://githubfast.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Optionally-Backup-Your-Existing-zshrc-File\"><a href=\"#Optionally-Backup-Your-Existing-zshrc-File\" class=\"headerlink\" title=\"Optionally, Backup Your Existing ~&#x2F;.zshrc File\"></a>Optionally, Backup Your Existing ~&#x2F;.zshrc File</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp ~/.zshrc ~/.zshrc.orig</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Create-A-New-Zsh-Configuration-File\"><a href=\"#Create-A-New-Zsh-Configuration-File\" class=\"headerlink\" title=\"Create A New Zsh Configuration File\"></a>Create A New Zsh Configuration File</h3><p>You can create a new zsh config file by copying the template that we have included for you.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Change-Your-Default-Shell\"><a href=\"#Change-Your-Default-Shell\" class=\"headerlink\" title=\"Change Your Default Shell\"></a>Change Your Default Shell</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">which zsh</span><br><span class=\"line\">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure>\n\n<p>You must log out from your user session and log back in to see this change.</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["linux","zsh"],"tags":["linux","zsh"]},{"title":"Scp 复制文件到服务器","url":"//linux/use/scp.html","content":"<div id=\"vip-container\"><h4 id=\"复制文件夹到服务器\"><a href=\"#复制文件夹到服务器\" class=\"headerlink\" title=\"复制文件夹到服务器\"></a>复制文件夹到服务器</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp -r key root@4*.1*8.1*0.70:/etc/nginx/conf.d/cert</span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["linux","scp"],"tags":["linux","scp"]},{"title":"Fiber 架构的起源","url":"//react/fiber.html","content":"<div id=\"vip-container\"><h1 id=\"Fiber-架构的起源\"><a href=\"#Fiber-架构的起源\" class=\"headerlink\" title=\"Fiber 架构的起源\"></a>Fiber 架构的起源</h1><p>Fiber 架构的起源可以追溯到 React 团队在 2017 年提出的一项重大改进计划。在过去的 React 版本中，渲染过程是基于递归的，即组件树的遍历是通过递归函数来完成的。这种方式在大规模复杂应用中可能会引发一些性能问题，例如长时间的主线程阻塞，导致用户体验下降。</p>\n<span id=\"more\"></span>\n<p>为了解决这些性能问题，React 团队开始着手设计一种新的渲染架构，即 Fiber 架构。Fiber 架构的目标是使 React 的渲染过程可中断和恢复，从而实现更好的任务调度、优先级管理和增量更新。</p>\n<p>Fiber 这个名字来源于计算机科学中的 “Fiber”（纤程）概念，指的是一种轻量级的执行单元，可以在多个任务之间切换，并且可以中断和恢复执行。React 中的 Fiber 也是类似的概念，表示渲染过程中的任务单元，可以根据任务的优先级和时间片进行灵活的调度和中断。</p>\n<p>通过 Fiber 架构，React 实现了一个基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。同时，React 还引入了优先级调度算法，通过动态调整任务的优先级，可以根据不同任务的重要性和紧急程度来合理地分配渲染资源。</p>\n<p>Fiber 架构的引入使得 React 在渲染过程中可以更加灵活地响应用户交互，提供更好的用户体验。它为 React 提供了更强大的渲染能力，能够支持更复杂、更大规模的应用程序。</p>\n<p>值得一提的是，Fiber 架构的设计和实现是一个非常复杂的过程，并且在不同版本的 React 中可能会有一些细节上的差异。React 团队在不断地改进和优化 Fiber 架构，以进一步提升 React 应用的性能和可靠性。</p>\n<h1 id=\"Fiber的含义\"><a href=\"#Fiber的含义\" class=\"headerlink\" title=\"Fiber的含义\"></a>Fiber的含义</h1><blockquote>\n<p>总的来说，Fiber 是 React 中的一种渲染架构和调度算法，通过将渲染过程划分为可中断和恢复的任务单元，实现了增量更新和优先级调度。Fiber 架构的引入使得 React 能够更加高效地处理渲染任务，提供更好的用户体验和更高的性能。</p>\n</blockquote>\n<p>Fiber 是 React 中的一个概念，它有多个含义和作用：</p>\n<ul>\n<li><p>渲染任务单元：在 React 中，Fiber 表示渲染过程中的任务单元。传统的递归渲染方式可能会导致长时间的主线程阻塞，影响用户体验。而 Fiber 架构将渲染过程划分为一系列小的任务单元（Fiber 节点），可以根据任务的优先级和时间片进行灵活的调度和中断，实现增量更新和任务的并发处理。</p>\n</li>\n<li><p>调度和优先级管理：Fiber 架构引入了一套调度算法，用于根据任务的优先级和时间片来动态调整任务的执行顺序。通过优先级调度，React 可以根据任务的重要性和紧急程度合理地分配渲染资源，从而提供更好的用户体验。优先级调度还使得 React 可以在不同任务之间进行中断和恢复，避免了长时间的阻塞。</p>\n</li>\n<li><p>组件结构表示：Fiber 架构引入了基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。每个 Fiber 节点表示一个组件或 DOM 元素，并通过 child、sibling 和 return 等属性建立起节点之间的关联。通过 Fiber 树的结构，React 可以更加高效地遍历和更新组件树，实现增量渲染。</p>\n</li>\n<li><p>增量更新：Fiber 架构支持增量更新，即仅更新发生变化的部分，而不需要重新渲染整个组件树。通过对比 Fiber 树的两个状态，React 可以确定哪些组件需要更新，并且可以跳过不需要更新的部分，从而提高渲染性能。</p>\n</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg\" alt=\"react 中一帧的过程\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["React","Fiber"],"tags":["前端","react","JavaScript","Fiber"]},{"title":"Fiber 架构实现流程","url":"//react/fiber/implement.html","content":"<div id=\"vip-container\"><p>Fiber 架构是 React 中用于实现虚拟 DOM 的一种算法架构。它的目标是提高渲染性能和用户体验，通过将渲染工作分割成多个小任务，在不阻塞主线程的情况下逐步完成整个渲染过程。</p>\n<p>下面是 Fiber 架构的简要实现过程：</p>\n<ul>\n<li><p>构建 Fiber 树：在进行首次渲染时，React 会构建一棵 Fiber 树，用于表示组件的层级结构和渲染顺序。每个 Fiber 节点对应一个组件实例，其中包含组件的状态、属性和其他相关信息。</p>\n</li>\n<li><p>初始渲染阶段：React 通过递归遍历 Fiber 树，在每个 Fiber 节点上执行渲染操作，生成对应的虚拟 DOM 元素。</p>\n</li>\n<li><p>任务拆分：在渲染过程中，React 根据时间片（Time Slicing）的概念将渲染任务拆分为多个小任务（Fiber），每个小任务执行时间有限，并且可以中断和恢复。</p>\n</li>\n<li><p>优先级调度：React 使用优先级调度算法确定哪些任务具有更高的优先级，并按照顺序执行这些高优先级的任务，以保证用户界面的流畅度。</p>\n</li>\n<li><p>增量更新：在执行每个小任务时，React 会比较前后两次渲染结果，找出需要更新的部分，并对其进行增量更新。这样可以避免全量重新渲染，提高性能。</p>\n</li>\n<li><p>渲染结果提交：当所有小任务完成后，React 将最终渲染结果提交给浏览器进行绘制，完成整个渲染过程。</p>\n</li>\n</ul>\n<p>Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。这样可以更好地响应用户的交互，提供更流畅的用户体验。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["React","Fiber"],"tags":["前端","react","JavaScript","Fiber"]},{"title":"FiberNode结构解析","url":"//react/fiber/node.html","content":"<div id=\"vip-container\"><h1 id=\"FiberNode结构解析\"><a href=\"#FiberNode结构解析\" class=\"headerlink\" title=\"FiberNode结构解析\"></a>FiberNode结构解析</h1><p>FiberNode（也称为 Fiber 节点）是 React Fiber 架构中的核心概念之一，用于表示组件的层级结构和渲染过程中的任务。</p>\n<span id=\"more\"></span>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberNode</span>(<span class=\"params\">tag, pendingProps, key, mode</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Instance</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">elementType</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">stateNode</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// Fiber</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">return</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">child</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sibling</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">index</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">ref</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">pendingProps</span> = pendingProps;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">memoizedProps</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">updateQueue</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">memoizedState</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">dependencies</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">mode</span> = mode; <span class=\"comment\">// Effects</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">flags</span> = <span class=\"title class_\">NoFlags</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">subtreeFlags</span> = <span class=\"title class_\">NoFlags</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">deletions</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">lanes</span> = <span class=\"title class_\">NoLanes</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">childLanes</span> = <span class=\"title class_\">NoLanes</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Note: The following is done to avoid a v8 performance cliff.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Initializing the fields below to smis and later updating them with</span></span><br><span class=\"line\">    <span class=\"comment\">// double values will cause Fibers to end up having separate shapes.</span></span><br><span class=\"line\">    <span class=\"comment\">// This behavior/bug has something to do with Object.preventExtension().</span></span><br><span class=\"line\">    <span class=\"comment\">// Fortunately this only impacts DEV builds.</span></span><br><span class=\"line\">    <span class=\"comment\">// Unfortunately it makes React unusably slow for some applications.</span></span><br><span class=\"line\">    <span class=\"comment\">// To work around this, initialize the fields below with doubles.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Learn more about this here:</span></span><br><span class=\"line\">    <span class=\"comment\">// https://github.com/facebook/react/issues/14365</span></span><br><span class=\"line\">    <span class=\"comment\">// https://bugs.chromium.org/p/v8/issues/detail?id=8538</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualStartTime</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selfBaseDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">treeBaseDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>; <span class=\"comment\">// It&#x27;s okay to replace the initial doubles with smis after initialization.</span></span><br><span class=\"line\">    <span class=\"comment\">// This won&#x27;t trigger the performance cliff mentioned above,</span></span><br><span class=\"line\">    <span class=\"comment\">// and it simplifies other profiler code (including DevTools).</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualStartTime</span> = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selfBaseDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">treeBaseDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This isn&#x27;t directly used but is handy for debugging internals:</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugSource</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugOwner</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugNeedsRemount</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugHookTypes</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasBadMapPolyfill &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Object</span>.<span class=\"property\">preventExtensions</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Object</span>.<span class=\"title function_\">preventExtensions</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><h5 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h5><p>表示 FiberNode 的类型，可以是 HostComponent、ClassComponent、FunctionComponent 等。</p>\n<h5 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h5><p>表示组件的唯一标识符，用于在列表渲染中进行元素的重用。</p>\n<h5 id=\"elementType\"><a href=\"#elementType\" class=\"headerlink\" title=\"elementType\"></a>elementType</h5><p>表示组件元素的类型。大部分情况同type，某些情况不同，比如FunctionComponent使用React.memo包裹。</p>\n<h5 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h5><p>type 属性表示 FiberNode 对应的组件类型，可以是字符串（原生组件）或函数&#x2F;类（自定义组件）。对于 FunctionComponent，指函数本身，对于ClassComponent，指class，对于HostComponent，指DOM节点tagName。</p>\n<h5 id=\"stateNode\"><a href=\"#stateNode\" class=\"headerlink\" title=\"stateNode\"></a>stateNode</h5><p>每个 FiberNode 包含一个 stateNode 属性，它指向组件实例。stateNode 可以是一个 DOM 元素（对于原生组件），也可以是一个类实例（对于自定义组件）。</p>\n<blockquote>\n<p>​\tFiberNode 使用链表结构来表示组件的层级关系</p>\n</blockquote>\n<h5 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h5><p>return 指向父节点。</p>\n<h5 id=\"child\"><a href=\"#child\" class=\"headerlink\" title=\"child\"></a>child</h5><p>  child 属性指向第一个子节点。</p>\n<h5 id=\"sibling\"><a href=\"#sibling\" class=\"headerlink\" title=\"sibling\"></a>sibling</h5><p>  sibling 属性指向下一个兄弟节点。</p>\n<h6 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function App() &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      i am</span><br><span class=\"line\">      &lt;span&gt;SongShao&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对应的<code>Fiber树</code>结构</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">   App</span><br><span class=\"line\">   ||</span><br><span class=\"line\">child || <span class=\"built_in\">return</span></span><br><span class=\"line\">||</span><br><span class=\"line\"> --------div ----------------</span><br><span class=\"line\">      ||  \t\t\t ||</span><br><span class=\"line\">child || <span class=\"built_in\">return</span>  child || <span class=\"built_in\">return</span> </span><br><span class=\"line\">         ||\t\t\t\t ||</span><br><span class=\"line\">        i am ----------- span</span><br><span class=\"line\">               sibling    ||</span><br><span class=\"line\">           \t\t   child || <span class=\"built_in\">return</span></span><br><span class=\"line\">           \t\t \t     ||</span><br><span class=\"line\">           \t\t      SongShao</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里需要提一下，为什么父级指针叫做<code>return</code>而不是<code>parent</code>或者<code>father</code>呢？因为作为一个工作单元，<code>return</code>指节点执完<code>completeWork</code>（本章后面会介绍）后会返回的下一个节点。子<code>Fiber节点</code>及其兄弟节点完成工作后会返回其父级节点，所以用<code>return</code>指代父级节点。</p>\n</blockquote>\n<h5 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h5><p>在父节点中的索引位置。</p>\n<h5 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h5><p>用于引用组件。</p>\n<h5 id=\"pendingProps\"><a href=\"#pendingProps\" class=\"headerlink\" title=\"pendingProps\"></a>pendingProps</h5><p>组件的待处理属性。</p>\n<h5 id=\"memoizedProps-和-memoizedState\"><a href=\"#memoizedProps-和-memoizedState\" class=\"headerlink\" title=\"memoizedProps 和 memoizedState\"></a>memoizedProps 和 memoizedState</h5><p>这些属性保存了组件的当前状态（props 和 state）。在渲染过程中，React 使用 memoizedProps 和 memoizedState 保存组件的最新状态，并通过比较前后两次状态的差异，确定是否需要更新组件。</p>\n<h5 id=\"updateQueue\"><a href=\"#updateQueue\" class=\"headerlink\" title=\"updateQueue\"></a>updateQueue</h5><p>用于存储组件的更新队列。</p>\n<h5 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h5><p>表示组件的依赖项。</p>\n<h5 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h5><p>表示渲染模式。</p>\n<h5 id=\"flags-和-subtreeFlags\"><a href=\"#flags-和-subtreeFlags\" class=\"headerlink\" title=\"flags 和 subtreeFlags\"></a>flags 和 subtreeFlags</h5><p>表示 FiberNode 的状态标志。</p>\n<h5 id=\"deletions\"><a href=\"#deletions\" class=\"headerlink\" title=\"deletions\"></a>deletions</h5><p>表示待删除的节点。</p>\n<h5 id=\"lanes-和-childLanes\"><a href=\"#lanes-和-childLanes\" class=\"headerlink\" title=\"lanes 和 childLanes\"></a>lanes 和 childLanes</h5><p>表示调度的优先级。</p>\n<h5 id=\"alternate\"><a href=\"#alternate\" class=\"headerlink\" title=\"alternate\"></a>alternate</h5><p>alternate 属性指向 FiberNode 的替代节点。在渲染过程中，React 会创建两个 FiberNode，一个表示当前渲染状态，另一个表示下一次渲染状态。通过 alternate 属性，React 在两个状态之间进行比较，找出需要更新的节点。</p>\n<h5 id=\"actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\"><a href=\"#actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\" class=\"headerlink\" title=\"actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\"></a>actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration</h5><p>用于记录组件的实际渲染时间和基准时间。</p>\n<h5 id=\"debugSource、-debugOwner、-debugNeedsRemount、-debugHookTypes\"><a href=\"#debugSource、-debugOwner、-debugNeedsRemount、-debugHookTypes\" class=\"headerlink\" title=\"__debugSource、__debugOwner、__debugNeedsRemount、__debugHookTypes\"></a>__debugSource、__debugOwner、__debugNeedsRemount、__debugHookTypes</h5><p>用于调试和内部记录。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["React","Fiber"],"tags":["前端","react","JavaScript","Fiber"]},{"title":"Fiber架构工作原理","url":"//react/fiber/works.html","content":"<div id=\"vip-container\"><h2 id=\"什么是“双缓存”？\"><a href=\"#什么是“双缓存”？\" class=\"headerlink\" title=\"什么是“双缓存”？\"></a>什么是“双缓存”？</h2><p>“双缓存”是一种常见的图形处理技术，用于在图像渲染中实现平滑的、无闪烁的更新效果。它通过使用两个缓冲区（即两块内存区域）来完成。其中一个缓冲区用于显示图像，而另一个缓冲区则用于在后台进行图像的更新和绘制。当更新完成后，通过交换两个缓冲区的引用，以实现无缝的切换和更新。</p>\n<p>在图形处理中使用双缓存的好处包括：</p>\n<ol>\n<li>无闪烁：通过在后台缓冲区进行绘制，然后将绘制结果一次性地切换到显示缓冲区，可以避免在图像更新过程中的闪烁问题。这对于实时图形、动画和视频等应用非常重要。</li>\n<li>平滑更新：使用双缓冲可以实现平滑的更新效果。在后台缓冲区进行绘制和更新，然后在更新完成后将其切换到显示缓冲区，可以避免直接在显示缓冲区上进行绘制和修改，从而减少了可能出现的可见的渲染中间状态。</li>\n<li>减少渲染延迟：使用双缓冲可以减少渲染延迟。由于绘制和更新发生在后台缓冲区，因此可以在绘制完成后立即切换到显示缓冲区，从而减少了等待绘制完成的时间，提高了渲染效率和响应时间。</li>\n</ol>\n<p>双缓存技术在图形处理、动画、视频播放和游戏开发等领域得到广泛应用。在图形库、操作系统和桌面应用程序中，双缓存被用于实现平滑的图像渲染和交互效果。在前端开发中，双缓存也被广泛应用于图形绘制和动画效果的实现，以提供更好的用户体验。</p>\n<p><code>React</code>使用“双缓存”来完成<code>Fiber树</code>的构建与替换——对应着<code>DOM树</code>的创建与更新。</p>\n<h2 id=\"双缓存Fiber树\"><a href=\"#双缓存Fiber树\" class=\"headerlink\" title=\"双缓存Fiber树\"></a>双缓存Fiber树</h2><p>在<code>React</code>中最多会同时存在两棵<code>Fiber树</code>。当前屏幕上显示内容对应的<code>Fiber树</code>称为<code>current Fiber树</code>，正在内存中构建的<code>Fiber树</code>称为<code>workInProgress Fiber树</code>。</p>\n<p><code>current Fiber树</code>中的<code>Fiber节点</code>被称为<code>current fiber</code>，<code>workInProgress Fiber树</code>中的<code>Fiber节点</code>被称为<code>workInProgress fiber</code>，他们通过<code>alternate</code>属性连接。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">currentFiber.<span class=\"property\">alternate</span> === workInProgressFiber;</span><br><span class=\"line\">workInProgressFiber.<span class=\"property\">alternate</span> === currentFiber;</span><br></pre></td></tr></table></figure>\n\n<p><code>React </code>应用的根节点通过使 <code>current </code> 指针在不同 <code>Fiber树</code> 的 <code>rootFiber</code> 间切换来完成 <code>current Fiber</code> 树指向的切换。</p>\n<p>即当 <code>workInProgress Fiber树</code> 构建完成交给 <code>Renderer</code> 渲染在页面上后，应用根节点的 <code>current</code> 指针指向 <code>workInProgress Fiber树</code> ，此时<code>workInProgress Fiber树</code>就变为<code>current Fiber树</code>。</p>\n<p>每次状态更新都会产生新的<code>workInProgress Fiber树</code>，通过<code>current</code>与<code>workInProgress</code>的替换，完成<code>DOM</code>更新。</p>\n<p>接下来我们以具体例子讲解<code>mount时</code>、<code>update时</code>的构建&#x2F;替换流程。</p>\n<h2 id=\"mount时\"><a href=\"#mount时\" class=\"headerlink\" title=\"mount时\"></a>mount时</h2><p>考虑如下例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">red</span>&#x27; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span>/&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>首次执行<code>ReactDOM.render</code>会创建<code>fiberRootNode</code>（源码中叫<code>fiberRoot</code>）和<code>rootFiber</code>。其中<code>fiberRootNode</code>是整个应用的根节点，<code>rootFiber</code>是<code>&lt;App/&gt;</code>所在组件树的根节点。</li>\n</ol>\n<p>之所以要区分<code>fiberRootNode</code>与<code>rootFiber</code>，是因为在应用中我们可以多次调用<code>ReactDOM.render</code>渲染不同的组件树，他们会拥有不同的<code>rootFiber</code>。但是整个应用的根节点只有一个，那就是<code>fiberRootNode</code>。</p>\n<p><code>fiberRootNode</code>的<code>current</code>会指向当前页面上已渲染内容对应<code>Fiber树</code>，即<code>current Fiber树</code>。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"fiberRootNode\"></p>\n<p><code>fiberRootNode.current = rootFiber;</code></p>\n<p>由于是首屏渲染，页面中还没有挂载任何<code>DOM</code>，所以<code>fiberRootNode.current</code>指向的<code>rootFiber</code>没有任何<code>子Fiber节点</code>（即<code>current Fiber树</code>为空）。</p>\n<ol start=\"2\">\n<li>接下来进入<code>render阶段</code>，根据组件返回的<code>JSX</code>在内存中依次创建<code>Fiber节点</code>并连接在一起构建<code>Fiber树</code>，被称为<code>workInProgress Fiber树</code>。（下图中右侧为内存中构建的树，左侧为页面显示的树）</li>\n</ol>\n<p>在构建<code>workInProgress Fiber树</code>时会尝试复用<code>current Fiber树</code>中已有的<code>Fiber节点</code>内的属性，在<code>首屏渲染</code>时只有<code>rootFiber</code>存在对应的<code>current fiber</code>（即<code>rootFiber.alternate</code>）。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg\"></p>\n<ol start=\"3\">\n<li>图中右侧已构建完的<code>workInProgress Fiber树</code>在<code>commit阶段</code>渲染到页面。</li>\n</ol>\n<p>此时<code>DOM</code>更新为右侧树对应的样子。<code>fiberRootNode</code>的<code>current</code>指针指向<code>workInProgress Fiber树</code>使其变为<code>current Fiber 树</code>。</p>\n<p><img src=\"https://react.iamkasong.com/img/wipTreeFinish.png\"></p>\n<h2 id=\"update时\"><a href=\"#update时\" class=\"headerlink\" title=\"update时\"></a>update时</h2><ol>\n<li><p>接下来我们点击<code>p节点</code>触发状态改变，这会开启一次新的<code>render阶段</code>并构建一棵新的<code>workInProgress Fiber 树</code>。</p>\n<p><img src=\"https://react.iamkasong.com/img/wipTreeUpdate.png\"></p>\n</li>\n</ol>\n<p>和<code>mount</code>时一样，<code>workInProgress fiber</code>的创建可以复用<code>current Fiber树</code>对应的节点数据。</p>\n<ol start=\"2\">\n<li><code>workInProgress Fiber 树</code>在<code>render阶段</code>完成构建后进入<code>commit阶段</code>渲染到页面上。渲染完毕后，<code>workInProgress Fiber 树</code>变为<code>current Fiber 树</code>。</li>\n</ol>\n<p><img src=\"https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg\" alt=\"渲染过程\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["React","Fiber"],"tags":["前端","react","JavaScript","Fiber"]},{"title":"React 获取服务器端时间","url":"//react/service/time.html","content":"<div id=\"vip-container\"><h2 id=\"React-获取服务器端时间\"><a href=\"#React-获取服务器端时间\" class=\"headerlink\" title=\"React 获取服务器端时间\"></a>React 获取服务器端时间</h2><p><strong>思路</strong>：React获取服务器端时间，本质上就是给服务器端发送一个请求，然后从返回数据里面的headers里面获取到服务器date，然后更新服务器时间去格式化，获取服务器时间结束。按秒进行数据刷新，其实也很简单，就是使用定时器，进行动态递增即可，直接上代码。</p>\n<span id=\"more\"></span>\n<p>获取服务器时间的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">changeTime = async () =&gt; &#123;</span><br><span class=\"line\">    let leftTime = await axios.get(&#x27;/&#x27;).then(response =&gt; &#123;</span><br><span class=\"line\">        console.log(response.headers)</span><br><span class=\"line\">        return new Date(response.headers.date).getTime()</span><br><span class=\"line\">     &#125;).catch(error =&gt; &#123;</span><br><span class=\"line\">        console.log(error)</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">        time: moment(leftTime).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自动增加的方法（以秒为单位）:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">addTime = date =&gt; &#123;</span><br><span class=\"line\">      let newDate = new Date(date)</span><br><span class=\"line\">      newDate.setSeconds(newDate.getSeconds() + 1)</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        time: moment(newDate).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      window.time = &#123;</span><br><span class=\"line\">        date: this.state.time,</span><br><span class=\"line\">        timestamp: Date.parse(new Date(this.state.time))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后根据react  state状态进行页面渲染。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["React"],"tags":["前端","react","JavaScript"]},{"title":"React 实现原理","url":"//react/implement.html","content":"<div id=\"vip-container\"><h3 id=\"实现jsx\"><a href=\"#实现jsx\" class=\"headerlink\" title=\"实现jsx\"></a>实现jsx</h3><figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> element = (</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &quot;<span class=\"attr\">red</span>&quot; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译后\"><a href=\"#编译后\" class=\"headerlink\" title=\"编译后\"></a>编译后</h3><p><img src=\"https://pic.imgdb.cn/item/653b2718c458853aef75775a.jpg\" alt=\"jsx 编译之后\"></p>\n<h3 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h3><ol>\n<li><p>jsx-dev-runtime.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; jsxDEV &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./jsx/ReactJSXElement&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactJSXElement.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hasOwnProperty <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../shared/hasOwnProperty&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dom 类型</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>  &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../shared/ReactSymbols&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RESERVED_PROPS</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">key</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">ref</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">__self</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">__source</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasValidKey</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config.<span class=\"property\">key</span> !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasValidRef</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config.<span class=\"property\">ref</span> !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ReactElement 创建</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReactElement</span>(<span class=\"params\">type, key, ref, props, owner</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个标签允许我们唯一地将其标识为React元素</span></span><br><span class=\"line\">        <span class=\"attr\">$$typeof</span>: <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>,</span><br><span class=\"line\">        type,</span><br><span class=\"line\">        key,</span><br><span class=\"line\">        ref,</span><br><span class=\"line\">        props,</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">jsxDEV</span>(<span class=\"params\">type, config</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提取保留名称</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> props = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ref = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">hasValidKey</span>(config)) &#123;</span><br><span class=\"line\">        key = config.<span class=\"property\">key</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">hasValidRef</span>(config)) &#123;</span><br><span class=\"line\">        ref = config.<span class=\"property\">ref</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> propName <span class=\"keyword\">in</span> config) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hasOwnProperty.<span class=\"title function_\">call</span>(config, propName) &amp;&amp;</span><br><span class=\"line\">        !<span class=\"variable constant_\">RESERVED_PROPS</span>.<span class=\"title function_\">hasOwnProperty</span>(propName)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            props[propName] = config[propName];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">ReactElement</span>(type, key, ref, props)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>hasOwnProperty.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; hasOwnProperty &#125; = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> hasOwnProperty;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactSymbols.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于标记类似 ReactElement 类型的符号。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span> = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;react.element&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"根节点和根fiber\"><a href=\"#根节点和根fiber\" class=\"headerlink\" title=\"根节点和根fiber\"></a>根节点和根fiber</h3><ul>\n<li>需要给react提供一个根节点，之后每个节点都是渲染在根节点内部的。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根fiber可以通俗理解为一个装着所有虚拟dom的容器，每个虚拟dom又单独对应一个fiber，</li>\n<li>渲染可以以单个fiber为单位暂停 &#x2F; 恢复。</li>\n<li>需要创建两个根 <code>fiber</code> 去相互替换展示。</li>\n</ul>\n<h4 id=\"创建根节点\"><a href=\"#创建根节点\" class=\"headerlink\" title=\"创建根节点\"></a>创建根节点</h4><p>更改main.jsx</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom/client&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> element = (</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">red</span>&#x27; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(root)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>首先要建一个<code>FiberRootNode</code>根节点，也就是所有DOM的根，本质就是 <code>div#root</code>。</p>\n<p>根节点和<code>fiber</code>关系：</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"根节点和`fiber`关系\"></p>\n<p><code>FiberRootNode</code> 和 <code>HostRootFiber</code> 中间使用 <code>current</code> 相连；</p>\n<p><code>HostRootFiber</code> 和 <code>FiberRootNode</code> 中间使用 <code>stateNode</code> 相连。</p>\n<h4 id=\"实现createRoot\"><a href=\"#实现createRoot\" class=\"headerlink\" title=\"实现createRoot\"></a>实现createRoot</h4><p>分这么多文件的主要是因为很多其他逻辑要处理，暂时都给省略了。虽然比较绕，但其实本质就是把<code>div#root</code>做了几层包装。</p>\n<ol>\n<li><p>client.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./src/client/ReactDOMRoot&quot;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactDOMRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-reconciler/src/ReactFiberReconciler&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReactDOMRoot</span>(<span class=\"params\">internalRoot</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">_internalRoot</span> = internalRoot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 创建一个根 实际就是一个被包装过的真实DOM节点</span></span><br><span class=\"line\"><span class=\"comment\">// container: div#root</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createRoot</span>(<span class=\"params\">container</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. 创建容器   6. 接收到有#root的容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createContainer</span>(container);</span><br><span class=\"line\"><span class=\"comment\">// 7. 容器传给 ReactDOMRoot</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReactDOMRoot</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberReconciler.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createFiberRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberRoot&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 创建容器 containerInfo: 容器信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createContainer</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">createFiberRoot</span>(containerInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberRootNode</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 4. 把DOM节点放到容器</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">containerInfo</span> = containerInfo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberRoot</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 3. 创建根容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">FiberRootNode</span>(containerInfo);</span><br><span class=\"line\"><span class=\"comment\">// 这个位置在下一步要创建 FiberRoot</span></span><br><span class=\"line\"><span class=\"comment\">// 5. 把容器返回出去</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>现在根节点<code>FiberRootNode</code>创建好了，最后<code>root</code>的打印结果：</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2e66c458853aef8a195c.jpg\" alt=\"FiberRootNode\"></p>\n<h4 id=\"fiber\"><a href=\"#fiber\" class=\"headerlink\" title=\"fiber\"></a>fiber</h4><p>在创建根fiber之前先了解一下fiber</p>\n<h4 id=\"为什么需要有fiber？\"><a href=\"#为什么需要有fiber？\" class=\"headerlink\" title=\"为什么需要有fiber？\"></a>为什么需要有fiber？</h4><ul>\n<li>react以前没有fiber整个计算过程不能暂停，会导致时间过长</li>\n<li>浏览器刷新频率为 60Hz,大概 16.6 毫秒渲染一次，而 JS 线程和渲染线程是互斥的，所以如果 JS 线程执行任务时间超过 16.6ms 的话，就会导致掉帧、卡顿，解决方案就是 React 利用空闲的时间进行更新，不影响渲染进行的渲染</li>\n<li>把一个耗时任务切分成一个个小任务，分布在每一帧里。这个的方式就叫时间切片</li>\n</ul>\n<p>我们需要把渲染变成一个可中断，可暂停，可恢复的过程。<br>注：可以去搜一下 requestIdleCallback API ，react封装了一个类似的方法让每帧时间固定 5ms。</p>\n<h4 id=\"什么是fiber？\"><a href=\"#什么是fiber？\" class=\"headerlink\" title=\"什么是fiber？\"></a>什么是fiber？</h4><ul>\n<li><p>Fiber 是一个执行单元</p>\n<p>  Fiber 是一个执行单元,每次执行完一个执行单元，React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去。</p>\n<p>  react 中一帧的过程：</p>\n<p>  <img src=\"https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg\" alt=\"react 中一帧的过程\"></p>\n</li>\n<li><p>Fiber 是一种数据结构<br>  React 目前的做法是使用链表, 每个虚拟节点内部表示为一个Fiber<br>  从顶点开始遍历<br>  如果有第一个儿子，先遍历第一个儿子<br>  如果没有第一个儿子，标志着此节点遍历完成<br>  如果有弟弟遍历弟弟<br>  如果有没有下一个弟弟，返回父节点标识完成父节点遍历，如果有叔叔遍历叔叔<br>  没有父节点遍历结束</p>\n<p>  遍历结构：<br>  <img src=\"https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg\" alt=\"遍历结构\"></p>\n<p>  遍历过程：<br>  <img src=\"https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg\" alt=\"遍历过程\"></p>\n</li>\n</ul>\n<h4 id=\"创建根fiber\"><a href=\"#创建根fiber\" class=\"headerlink\" title=\"创建根fiber\"></a>创建根fiber</h4><p>真实DOM需要一个根容器，<code>fiber</code>同样需要一个根<code>fiber</code>。</p>\n<p>相当于每个虚拟DOM都会创建一个对应的<code>Fiber</code>，再创建真实DOM</p>\n<p>虚拟DOM &#x3D;&gt; Fiber &#x3D;&gt; 真实DOM</p>\n<p>在刚刚创建FiberRootNode的函数里去创建<code>HostRootFiber</code>并互相指向对方。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"根节点和`fiber`关系\"></p>\n<ol>\n<li><p>ReactFiberRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createHostRootFiber &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiber&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberRootNode</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">containerInfo</span> = containerInfo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberRoot</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 之前创建的根节点容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">FiberRootNode</span>(containerInfo);</span><br><span class=\"line\"><span class=\"comment\">// 1. 创建根fiber. hostRoot就是根节点dev#root</span></span><br><span class=\"line\"><span class=\"comment\">// 未初始化的fiber</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uninitializedFiber = <span class=\"title function_\">createHostRootFiber</span>();</span><br><span class=\"line\"><span class=\"comment\">// 当前渲染页面的fiber.</span></span><br><span class=\"line\"><span class=\"comment\">// 6. 根容器的current指向当前的根fiber</span></span><br><span class=\"line\">root.<span class=\"property\">current</span> = uninitializedFiber;</span><br><span class=\"line\">uninitializedFiber.<span class=\"property\">stateNode</span> = root;</span><br><span class=\"line\"><span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiber.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. 工作标签</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HostRoot</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactWorkTags&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 5. 副作用标识</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NoFlags</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberFlags&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">FiberNode</span>(<span class=\"params\">tag, pendingProps, key</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// fiber类型, 来自于虚拟DOM节点的type   (span h1 p)</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">stateNode</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 此fiber对应的真实DOM节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">return</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向父节点</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">child</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向第一个子节点</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">sibling</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向弟弟</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">pendingProps</span> = pendingProps; <span class=\"comment\">// 等待生效的属性</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">memoizedProps</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 已经生效的属性</span></span><br><span class=\"line\"><span class=\"comment\">// 虚拟DOM会提供pendingProps给创建fiber的属性，等处理完复制给memoizedProps</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个fiber还会有自己的状态，每一种fiber状态存的类型都不一样</span></span><br><span class=\"line\"><span class=\"comment\">// 比如：类组件对应的fiber存的就是实例的状态，HostRoot存的就是要渲染的元素</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">memoizedState</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个fiber可能还有自己的更新队列</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">updateQueue</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5. &quot;./ReactFiberFlags&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">flags</span> = <span class=\"title class_\">NoFlags</span>; <span class=\"comment\">// 副作用标识，表示对此fiber节点进行何种操作</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">subtreeFlags</span> = <span class=\"title class_\">NoFlags</span>; <span class=\"comment\">// 子节点对应的副作用标识</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 轮替 (缓存了另一个fiber节点实例) diff时用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberNode</span>(<span class=\"params\">tag, pendingProps, key</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FiberNode</span>(tag, pendingProps, key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createHostRootFiber</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">createFiberNode</span>(<span class=\"title class_\">HostRoot</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactWorkTags.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每种虚拟DOM都会对应自己的fiber的类型</span></span><br><span class=\"line\"><span class=\"comment\">// 根Fiber的Tag</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostRoot</span> = <span class=\"number\">3</span>; <span class=\"comment\">// 根节点</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostComponent</span> = <span class=\"number\">5</span>; <span class=\"comment\">// 原生节点 span div p</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostText</span> = <span class=\"number\">6</span>; <span class=\"comment\">// 纯文本节点</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberFlags.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没有任何操作</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">NoFlags</span> = <span class=\"number\">0b000000000000000000000000000000</span>;</span><br><span class=\"line\"><span class=\"comment\">// 插入</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Placement</span> = <span class=\"number\">0b000000000000000000000000000010</span>;</span><br><span class=\"line\"><span class=\"comment\">// 更新</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Update</span> = <span class=\"number\">0b000000000000000000000000000100</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>看最后root的打印结果：根fiber和节点容器互相指向</p>\n</li>\n</ol>\n<p><img src=\"https://pic.imgdb.cn/item/653b5beac458853aef1a1a12.jpg\" alt=\"根fiber和节点容器互相指向\"></p>\n<pre><code>current指的是当前根容器正在显示或者已经渲染好的fiber树\n</code></pre>\n<p>react采用了双缓存区的技术，可以把将要显示的图片绘制在缓存区中，需要展示的时候直接拿来替换掉。 alternate 轮替。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653bc1f2c458853aefb79377.jpg\"></p>\n<h4 id=\"创建队列\"><a href=\"#创建队列\" class=\"headerlink\" title=\"创建队列\"></a>创建队列</h4><p>打开ReactFiberRoot.js文件，在return root之前加一行代码，给根fiber加上一个更新队列，之后更新渲染任务都是放到这个队列里面。</p>\n<ol>\n<li><p>ReactFiberRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">+ <span class=\"keyword\">import</span> &#123; initialUpdateQueue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberClassUpdateQueue&quot;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">+ <span class=\"title function_\">initialUpdateQueue</span>(uninitializedFiber);</span><br><span class=\"line\"><span class=\"keyword\">return</span> root;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberClassUpdateQueue.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initialUpdateQueue</span>(<span class=\"params\">fiber</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个更新队列</span></span><br><span class=\"line\">    <span class=\"comment\">// pending 是循环链表</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = &#123;</span><br><span class=\"line\">        <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">pending</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fiber.<span class=\"property\">updateQueue</span> = queue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>如下图所示在fiber树中增加了updateQueue 队列</p>\n<p><img src=\"https://pic.imgdb.cn/item/653bc2bdc458853aefbd2de4.jpg\" alt=\"updateQueue 队列\"></p>\n<h3 id=\"构建轮替的根fiber\"><a href=\"#构建轮替的根fiber\" class=\"headerlink\" title=\"构建轮替的根fiber\"></a>构建轮替的根fiber</h3><h4 id=\"fiber是怎么运作的\"><a href=\"#fiber是怎么运作的\" class=\"headerlink\" title=\"fiber是怎么运作的\"></a>fiber是怎么运作的</h4><pre><code>为什么要轮替在上一篇已经说过了，这一篇写一下fiber的单项循环链表。\n</code></pre>\n<p>假如我们有一个jsx 的dom结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> element = (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;A1&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;B1&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;C1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;C2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;B2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在以前没有用fiber渲染是这样的，这个渲染方式是递归渲染如果数据很多就可能会卡顿。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vDom = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;A1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;props&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;A1&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;children&quot;</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;B1&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;props&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;B1&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;children&quot;</span>: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;C1&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;props&quot;</span>: &#123; <span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;C1&quot;</span>&#125;,</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;C2&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;props&quot;</span>: &#123;<span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;C2&quot;</span>&#125;,</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;B2&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;props&quot;</span>: &#123;<span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;B2&quot;</span>&#125;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 把vDom一气呵成渲染到页面</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">element, container</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把虚拟DOM创建成真实DOM</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> dom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(element.<span class=\"property\">type</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 遍历属性</span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(element.<span class=\"property\">props</span>).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> key !== <span class=\"string\">&#x27;children&#x27;</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        dom[key] = element.<span class=\"property\">props</span>[key];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 把子节点渲染到父节点上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(element.<span class=\"property\">props</span>.<span class=\"property\">children</span>))&#123;</span><br><span class=\"line\">        element.<span class=\"property\">props</span>.<span class=\"property\">children</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">child</span>=&gt;</span><span class=\"title function_\">render</span>(child,dom));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 把真实节点挂载到容器</span></span><br><span class=\"line\">    container.<span class=\"title function_\">appendChild</span>(dom);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">render</span>(element, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>下面是fiber的渲染方式，可以中断、暂停、恢复渲染。深度优先</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 把虚拟DOM构建成Fiber树</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">A1</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;A1&#x27;</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">B1</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;B1&#x27;</span> &#125;, <span class=\"attr\">return</span>: <span class=\"variable constant_\">A1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">B2</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;B2&#x27;</span> &#125;, <span class=\"attr\">return</span>: <span class=\"variable constant_\">A1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">C1</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;C1&#x27;</span> &#125;, <span class=\"attr\">return</span>: <span class=\"variable constant_\">B1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">C2</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;C2&#x27;</span> &#125;, <span class=\"attr\">return</span>: <span class=\"variable constant_\">B1</span> &#125;;</span><br><span class=\"line\"><span class=\"variable constant_\">A1</span>.<span class=\"property\">child</span> = <span class=\"variable constant_\">B1</span>;</span><br><span class=\"line\"><span class=\"variable constant_\">B1</span>.<span class=\"property\">sibling</span> = <span class=\"variable constant_\">B2</span>;</span><br><span class=\"line\"><span class=\"variable constant_\">B1</span>.<span class=\"property\">child</span> = <span class=\"variable constant_\">C1</span>;</span><br><span class=\"line\"><span class=\"variable constant_\">C1</span>.<span class=\"property\">sibling</span> = <span class=\"variable constant_\">C2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下一个工作单元</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nextUnitOfWork = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasRemainingTime</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模拟有时间</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render 工作循序</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">workLoop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有下一个节点并且有时间时</span></span><br><span class=\"line\">    <span class=\"comment\">// 每一个任务执行完都可以放弃，让浏览器执行更高优先级的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nextUnitOfWork &amp;&amp; <span class=\"title function_\">hasRemainingTime</span>()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行下一个任务并返回下一个任务</span></span><br><span class=\"line\">        nextUnitOfWork = <span class=\"title function_\">performUnitOfWork</span>(fiber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;render 阶段结束&quot;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">// 执行完后返回下一个节点</span></span><br><span class=\"line\"><span class=\"string\">function performUnitOfWork(fiber) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    // 执行渲染</span></span><br><span class=\"line\"><span class=\"string\">    let child = beginWork(fiber);</span></span><br><span class=\"line\"><span class=\"string\">    if(child) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        return child;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    // 如果没有子节点说明当前节点已经完成了渲染工作</span></span><br><span class=\"line\"><span class=\"string\">    while(fiber) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        // 可以结束此fiber的渲染了 </span></span><br><span class=\"line\"><span class=\"string\">        completeUnitOfWork(fiber);</span></span><br><span class=\"line\"><span class=\"string\">        // 如果有弟弟就返回弟弟</span></span><br><span class=\"line\"><span class=\"string\">        if(fiber.sibling) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            return fiber.sibling;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        // 否则就返回上一层</span></span><br><span class=\"line\"><span class=\"string\">        fiber = fiber.return;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function beginWork(fiber) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    console.log(&#x27;</span>beginWork<span class=\"string\">&#x27;, fiber.props.className);</span></span><br><span class=\"line\"><span class=\"string\">    // 执行完成后返回第一个子节点</span></span><br><span class=\"line\"><span class=\"string\">    return fiber.child;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function completeUnitOfWork(fiber) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    // 标记当前这个fiber街道已经完成</span></span><br><span class=\"line\"><span class=\"string\">    console.log(&#x27;</span>completeUnitOfWork<span class=\"string\">&#x27;, fiber.props.className);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<p>上面的这些代码是预先熟悉一下，fiber 是怎么运行，下面正式进入构建的代码逻辑。</p>\n<h4 id=\"队列的单向链表\"><a href=\"#队列的单向链表\" class=\"headerlink\" title=\"队列的单向链表\"></a>队列的单向链表</h4><ol>\n<li><p>在main.js 中增加下面代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">root.<span class=\"title function_\">render</span>(element)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactDOMRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; updateContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../react-reconciler/src/ReactFiberReconciler&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"title class_\">ReactDomRoot</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">render</span> = <span class=\"keyword\">function</span> (<span class=\"params\">children</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. 获取容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"variable language_\">this</span>.<span class=\"property\">_internalRoot</span>;</span><br><span class=\"line\"><span class=\"title function_\">updateContainer</span>(children, root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberReconciler.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createUpdate, enqueueUpdate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberClassUpdateQueue&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新容器, 把虚拟DOM变成真实DOM 插入到container容器中</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; element 虚拟DOM</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; container 容器   FiberRootNode</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">updateContainer</span>(<span class=\"params\">element, container</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 获取根fiber</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> current = container.<span class=\"property\">current</span>;</span><br><span class=\"line\"><span class=\"comment\">// 创建更新队列</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"title function_\">createUpdate</span>();</span><br><span class=\"line\">update.<span class=\"property\">payload</span> = &#123;element&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 3. 把此更新任务对象添加到current这个根Fiber的更新队列里</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> root = <span class=\"title function_\">enqueueUpdate</span>(current, update);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberClassUpdateQueue.js</p>\n</li>\n</ol>\n<p><img src=\"https://pic.imgdb.cn/item/653e40f6c458853aefe48306.jpg\" alt=\"ReactFiberClassUpdateQueue.js\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; markUpdateLaneFromFiberToRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberConcurrentUpdate&#x27;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 更新状态</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UpdateState</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> update = &#123;<span class=\"attr\">tag</span>: <span class=\"title class_\">UpdateState</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> update;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">enqueueUpdate</span>(<span class=\"params\">fiber, update</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取根fiber的更新队列 (上一篇最后加的)</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> updateQueue = fiber.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取等待执行的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> pending = updateQueue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 说明初始化的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pending === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = pending.<span class=\"property\">next</span>;</span><br><span class=\"line\">        pending.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 让等待更新指向当前update 开始更新</span></span><br><span class=\"line\">    updateQueue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span> = update;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从当前的fiber 到返回找到并返回根节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">markUpdateLaneFromFiberToRoot</span>(fiber);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"冒泡获取根节点容器\"><a href=\"#冒泡获取根节点容器\" class=\"headerlink\" title=\"冒泡获取根节点容器\"></a>冒泡获取根节点容器</h4><p>ReactFiberConcurrentUpdate.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HostRoot</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactWorkTags&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 本来此文件要处理更新优先级问题，把不同的fiber优先级冒泡一路标记到根节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * 目前现在值实现向上冒泡找到根节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">sourceFiber</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">markUpdateLaneFromFiberToRoot</span>(<span class=\"params\">sourceFiber</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前父fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> parent = sourceFiber.<span class=\"property\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 当前fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = sourceFiber;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一直找到 父fiber 为null</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(parent !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = parent;</span><br><span class=\"line\">        parent = parent.<span class=\"property\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回当前root节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.<span class=\"property\">tag</span> === <span class=\"title class_\">HostRoot</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> root = node.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"调度更新\"><a href=\"#调度更新\" class=\"headerlink\" title=\"调度更新\"></a>调度更新</h4><p>到目前为止更新对象已经添加到了根fiber的更新队列上，现在需要开始进行调度更新。</p>\n<ol>\n<li><p>ReactFiberReconciler.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; scheduleUpdateOnFiber &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberWorkLoop&#x27;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">updateContainer</span>(<span class=\"params\">element, container</span>) &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">+ <span class=\"title function_\">scheduleUpdateOnFiber</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberWorkLoop.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; scheduleCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./scheduler&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">scheduleUpdateOnFiber</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">ensureRootIsScheduled</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">ensureRootIsScheduled</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 告诉浏览器要执行performConcurrentWorkOnRoot 参数定死为root</span></span><br><span class=\"line\">    <span class=\"title function_\">scheduleCallback</span>(performConcurrentWorkOnRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">performConcurrentWorkOnRoot</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(root, <span class=\"string\">&#x27;performConcurrentWorkOnRoot&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>src&#x2F;scheduler&#x2F;index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./src/forks/Scheduler&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>src&#x2F;forks&#x2F;Scheduler.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此处后面会实现优先级队列</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">scheduleCallback</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\"><span class=\"title function_\">requestIdleCallback</span>(callback);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打印FiberRootNode</p>\n</li>\n</ol>\n<p><img src=\"https://pic.imgdb.cn/item/653e496bc458853aef00deb1.jpg\" alt=\"输出的FiberRootNode\"></p>\n<h3 id=\"工作循环\"><a href=\"#工作循环\" class=\"headerlink\" title=\"工作循环\"></a>工作循环</h3><p><img src=\"https://pic.imgdb.cn/item/653e4d86c458853aef11c6ea.jpg\" alt=\"工作循环\"></p>\n<p>我们已经创建好一个根节点容器和一个空的根fiber（黑色部分），在图中看到还有一个正在构建中的根fiber。<br>根节点的current指的是当前的根fiber，是会和构建中的根fiber轮替工作（双缓冲），现在需要构建一个新的根fiber并且把fiber树写在里面。<br>一个是表示当前页面已经渲染完成的fiber树，一个是正在构建中还没有生效、更没有更新到页面的fiber树</p>\n<h4 id=\"建立新的hostRootFiber\"><a href=\"#建立新的hostRootFiber\" class=\"headerlink\" title=\"建立新的hostRootFiber\"></a>建立新的hostRootFiber</h4><ol>\n<li><p>ReactFiberWorkLoop.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; creatWorkInProgress &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiber&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正在进行中的工作</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> workInProgress = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * (被告知浏览器确保执行的函数)</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据当前的fiber节点构建fiber树, 创建真实的dom节点, 插入到容器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">performConcurrentWorkOnRoot</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. 初次渲染的时候以同步方式渲染根节点, 因为要尽快展示 (初始化)</span></span><br><span class=\"line\"><span class=\"title function_\">renderRootSync</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">prepareFreshStack</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 5. 根据老fiber构建新fiber (初始化)</span></span><br><span class=\"line\">workInProgress = <span class=\"title function_\">creatWorkInProgress</span>(root.<span class=\"property\">current</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderRootSync</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 2. 先构建了一个空的栈</span></span><br><span class=\"line\"><span class=\"title function_\">prepareFreshStack</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiber.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据老fiber和新的属性构建新fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; current 老fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; pendingProps 新的属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">creatWorkInProgress</span>(<span class=\"params\">current, pendingProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 拿到老fiber的轮替 第一次没有 (初始化)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> workInProgress = current.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(workInProgress === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        workInProgress = <span class=\"title function_\">createFiberNode</span>(current.<span class=\"property\">tag</span>, pendingProps, current.<span class=\"property\">key</span>);</span><br><span class=\"line\">        workInProgress.<span class=\"property\">type</span> = current.<span class=\"property\">type</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">stateNode</span> = current.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        workInProgress.<span class=\"property\">stateNode</span> = current;</span><br><span class=\"line\">        current.<span class=\"property\">alternate</span> =  workInProgress;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有，说明是更新，只能改属性就可以复用</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">pendingProps</span> = current.<span class=\"property\">pendingProps</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">type</span> = current.<span class=\"property\">type</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">flags</span> = current.<span class=\"property\">flags</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">subtreeFlags</span> = <span class=\"title class_\">NoFlags</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 复制属性</span></span><br><span class=\"line\">    workInProgress.<span class=\"property\">child</span> = current.<span class=\"property\">child</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">memoizedProps</span> = current.<span class=\"property\">memoizedProps</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">memoizedState</span> = current.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">updateQueue</span> = current.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">sibling</span> = current.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">index</span> = current.<span class=\"property\">index</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workInProgress;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"执行工作单元\"><a href=\"#执行工作单元\" class=\"headerlink\" title=\"执行工作单元\"></a>执行工作单元</h4><p>然后在新的根fiber里构建更新fiber树</p>\n<ol>\n<li><p>ReactFiberWorkLoop.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; beginWork &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberBeginWork&quot;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderRootSync</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 2. 先构建一个空的栈</span></span><br><span class=\"line\">    <span class=\"title function_\">prepareFreshStack</span>(root);</span><br><span class=\"line\">    <span class=\"comment\">// 1. 现在的 workInProgress 是新的根fiber</span></span><br><span class=\"line\">    <span class=\"title function_\">workLoopSync</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 工作同步循环</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">workLoopSync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(workInProgress !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 执行工作单元</span></span><br><span class=\"line\">        <span class=\"title function_\">performUnitOfWork</span>(workInProgress);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">performUnitOfWork</span>(<span class=\"params\">unitOfWork</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> current = unitOfWork.<span class=\"property\">alternate</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> next = <span class=\"title function_\">beginWork</span>(current, unitOfWork);</span><br><span class=\"line\"></span><br><span class=\"line\">    unitOfWork.<span class=\"property\">memoizedProps</span> = unitOfWork.<span class=\"property\">pendingProps</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 说明已经完成</span></span><br><span class=\"line\">        <span class=\"comment\">// 完成工作单元</span></span><br><span class=\"line\">        <span class=\"comment\">// completeUnitOfWork(); // 这个方法之后写 先模拟一下完成工作</span></span><br><span class=\"line\">        workInProgress = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有子节点就成为下一个工作单元</span></span><br><span class=\"line\">        workInProgress = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberBeginWork.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HostComponent</span>, <span class=\"title class_\">HostRoot</span>, <span class=\"title class_\">HostText</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactWorkTags&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; processUpdateQueue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberClassUpdateQueue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 5. 根据 `新的` 虚拟dom去构建  `新的` fiber链表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; current 老fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; workInProgress 新fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 下一个工作单元</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">beginWork</span>(<span class=\"params\">current, workInProgress</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;beginWork&quot;</span>, workInProgress);</span><br><span class=\"line\">    <span class=\"comment\">// 判断类型不同处理方式返回子节点或者弟弟</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(workInProgress.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostRoot</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">updateHostRoot</span>(current, workInProgress);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostComponent</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">updateHostComponent</span>(current, workInProgress);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostText</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateHostRoot</span>(<span class=\"params\">current, workInProgress</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要知道它的子虚拟dom, 知道它的儿子的虚拟dom信息</span></span><br><span class=\"line\">    <span class=\"comment\">// 之前在根fiber的更新队列加的虚拟dom, 可以在这获取</span></span><br><span class=\"line\">    <span class=\"title function_\">processUpdateQueue</span>(workInProgress);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextState = workInProgress.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取虚拟节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextChildren = nextState.<span class=\"property\">element</span>;</span><br><span class=\"line\">    <span class=\"title function_\">reconcileChildren</span>(current, workInProgress, nextChildren);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> workInProgress.<span class=\"property\">child</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateHostComponents</span>(<span class=\"params\">current, workInProgress</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"获取更新队列的虚拟dom\"><a href=\"#获取更新队列的虚拟dom\" class=\"headerlink\" title=\"获取更新队列的虚拟dom\"></a>获取更新队列的虚拟dom</h4><p>写上一步引入的<code>processUpdateQueue</code>方法</p>\n<ol>\n<li>ReactFiberClassUpdateQueue.js<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; markUpdateLaneFromFiberToRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberConcurrentUpdate&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initialUpdateQueue</span>(<span class=\"params\">fiber</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个更新队列</span></span><br><span class=\"line\">    <span class=\"comment\">// pending 是循环链表</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = &#123;</span><br><span class=\"line\">        <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">pending</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fiber.<span class=\"property\">updateQueue</span> = queue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新状态</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UpdateState</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> update = &#123;<span class=\"attr\">tag</span>: <span class=\"title class_\">UpdateState</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> update;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">enqueueUpdate</span>(<span class=\"params\">fiber, update</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取根fiber的更新队列 (上一篇最后加的)</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> updateQueue = fiber.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取等待执行的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> pending = updateQueue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 说明初始化的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pending === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = pending.<span class=\"property\">next</span>;</span><br><span class=\"line\">        pending.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 让等待更新指向当前update 开始更新</span></span><br><span class=\"line\">    updateQueue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span> = update;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从当前的fiber 到返回找到并返回根节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">markUpdateLaneFromFiberToRoot</span>(fiber);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据老状态和更新队列的更新计算最新的状态</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; workInProgress 要计算的fiber</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">processUpdateQueue</span>(<span class=\"params\">workInProgress</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拿到更新队列</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = workInProgress.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 等待生效的队列</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> pendingQueue = queue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有更新, 或者更新队列里有内容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pendingQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 清除等待生效的更新 因为在这就要使用了可以清除了</span></span><br><span class=\"line\">        queue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 获取最后一个等待生效的更新 </span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> lastPendingUpdate = pendingQueue;</span><br><span class=\"line\">        <span class=\"comment\">// 第一个等待生效的更新</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> firstPendingUpdate = pendingQueue.<span class=\"property\">next</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 把更新链表剪开, 变成单向链表</span></span><br><span class=\"line\">        lastPendingUpdate.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 获取老状态 (会不停更新和计算赋值新状态, 所以起名newState)</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newState = workInProgress.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> update = firstPendingUpdate;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(update) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据老状态和更新计算新状态</span></span><br><span class=\"line\">            newState = <span class=\"title function_\">getStateFromUpdate</span>(update, newState);</span><br><span class=\"line\">            update = update.<span class=\"property\">next</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 把最终计算到的状态赋值给 memoizedState</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">memoizedState</span> = newState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据老状态和更新, 计算新状态</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; update 更新</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; prevState 上一个状态</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 新状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getStateFromUpdate</span>(<span class=\"params\">update, prevState</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(update.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">UpdateState</span>:</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; payload &#125; = update;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">assign</span>(&#123;&#125;, prevState, payload);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"根据子虚拟dom创建子fiber节点\"><a href=\"#根据子虚拟dom创建子fiber节点\" class=\"headerlink\" title=\"根据子虚拟dom创建子fiber节点\"></a>根据子虚拟dom创建子fiber节点</h4><p>上上步还有一个<code>reconcileChildren</code>没有定义</p>\n<ol>\n<li><p>ReactFiberBeginWork.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mountChildFibers, reconcileChildFibers &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactChildFiber&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据新的虚拟dom生成新的fiber链表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; current 老的父fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; workInProgress 新的父fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; nextChildren 新的子虚拟dom</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildren</span>(<span class=\"params\">current, workInProgress, nextChildren</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果此新fiber没有老fiber, 说明是新创建的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 挂在子fiber</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">child</span> = <span class=\"title function_\">mountChildFibers</span>(workInProgress, <span class=\"literal\">null</span>, next);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 更新:  协调子fiber列表 需要做DOM-DIFF   (初始化时的根fiber是有老fiber的(一开始创建的))</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">child</span> = <span class=\"title function_\">reconcileChildFibers</span>(</span><br><span class=\"line\">        workInProgress,</span><br><span class=\"line\">        current.<span class=\"property\">child</span>,</span><br><span class=\"line\">        nextChildren</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactChildFiber.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createFiberFromElement &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiber&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../shared/ReactSymbols&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; shouldTrackSideEffect 是否跟踪副作用</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createChildReconciler</span>(<span class=\"params\">shouldTrackSideEffect</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileSingElement</span>(<span class=\"params\">returnFiber, currentFirstFiber, element</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为我们实现的是初次挂载, 老节点currentFirstFiber是没有的, </span></span><br><span class=\"line\">        <span class=\"comment\">// 所以可以直接根据虚拟dom创建fiber节点</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> created = <span class=\"title function_\">createFiberFromElement</span>(element);</span><br><span class=\"line\">        created.<span class=\"property\">return</span> = returnFiber;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> created;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 比较子fiber  (DOM-DIFF) 就是用老的fiber链表和新的虚拟dom进行比较</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; returnFiber 新父fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; currentFirstFiber 当前的第一个子fiber(老fiber的第一个儿子)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; newChild 新的子虚拟dom</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildFibers</span>(<span class=\"params\">returnFiber, currentFirstFiber, newChild</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 现在暂时只考虑新的节点只有一个的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; newChild !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (newChild.<span class=\"property\">$$typeof</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"attr\">REACT_ELEMENT_TYPE</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"title function_\">reconcileSingElement</span>(</span><br><span class=\"line\">                        returnFiber,</span><br><span class=\"line\">                        currentFirstFiber,</span><br><span class=\"line\">                        newChild</span><br><span class=\"line\">                    );</span><br><span class=\"line\">                <span class=\"attr\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reconcileChildFibers;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有老父fiber 更新</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> reconcileChildFibers = <span class=\"title function_\">createChildReconciler</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 没有老的父fiber 更新</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mountChildFibers = <span class=\"title function_\">createChildReconciler</span>(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiber.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberFromElement</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = element.<span class=\"property\">type</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = element.<span class=\"property\">key</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pendingProps = element.<span class=\"property\">props</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fiber = <span class=\"title function_\">createFiberFromTypeAndProps</span>(</span><br><span class=\"line\">        type,</span><br><span class=\"line\">        key,</span><br><span class=\"line\">        pendingProps</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fiber;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberFromTypeAndProps</span>(<span class=\"params\">type, key, pendingProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fiberTag = <span class=\"title class_\">IndeterminateComponent</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fiber = <span class=\"title function_\">createFiberNode</span>(fiberTag, pendingProps, key);</span><br><span class=\"line\">    fiber.<span class=\"property\">type</span> = type;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fiber;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"完成工作单元\"><a href=\"#完成工作单元\" class=\"headerlink\" title=\"完成工作单元\"></a>完成工作单元</h3><ol>\n<li>ReactFiberWorkLoop.js<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">completeUnitOfWork</span>(<span class=\"params\">unitOfWork</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 说明已经完成</span></span><br><span class=\"line\">    <span class=\"comment\">// 完成工作单元</span></span><br><span class=\"line\">    + <span class=\"title function_\">completeUnitOfWork</span>(unitOfWork); <span class=\"comment\">// 这个方法之后写 先模拟一下完成工作</span></span><br><span class=\"line\">        <span class=\"comment\">// workInProgress = null;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有子节点就成为下一个工作单元</span></span><br><span class=\"line\">        workInProgress = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">completeUnitOfWork</span>(<span class=\"params\">unitOfWork</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> completeWork = unitOfWork;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 拿到他的父节点和当前节点RootFiber</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> current = completeWork.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> returnFiber = completeWork.<span class=\"property\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> next = <span class=\"title function_\">completeWork</span>(current, completeWork);</span><br><span class=\"line\">        <span class=\"comment\">// 如果下一个节点不为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(next !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        workInProgress = next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">const</span> siblingFiber = completeWork.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果兄弟节点不为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(siblingFiber !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        workInProgress = siblingFiber;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回父节点</span></span><br><span class=\"line\">        completeWork = returnFiber;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(completeWork !== <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["React"],"tags":["前端","react","JavaScript","JSX"]},{"title":"React 使用合成事件（SyntheticEvent）","url":"//react/synthetic/event.html","content":"<div id=\"vip-container\"><h1 id=\"React-使用合成事件\"><a href=\"#React-使用合成事件\" class=\"headerlink\" title=\"React 使用合成事件\"></a>React 使用合成事件</h1><p>React 使用合成事件（SyntheticEvent）来处理浏览器原生事件的跨浏览器兼容性问题。合成事件是一个封装了原生事件的对象，提供了一致的跨浏览器接口，使您能够在不同浏览器中以一致的方式处理事件。</p>\n<span id=\"more\"></span>\n<p>在 React 中，您可以通过在组件中定义事件处理函数并将其传递给相应的元素来处理合成事件。例如，您可以在一个按钮上定义一个点击事件处理函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  handleClick = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Button clicked!&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，我们定义了一个名为handleClick的点击事件处理函数，并将其传递给按钮的onClick属性。当按钮被点击时，React 将自动创建一个合成事件对象，并将其作为参数传递给handleClick函数。您可以在事件处理函数中访问合成事件对象，并使用其属性和方法进行操作。</p>\n<p>合成事件对象具有与原生事件对象相似的属性和方法，但也有一些额外的属性和方法，用于处理 React 特定的功能。例如，您可以使用event.target来访问触发事件的元素，event.preventDefault()来阻止默认行为，以及event.stopPropagation()来阻止事件冒泡。</p>\n<p>请注意，由于合成事件是 React 提供的跨浏览器抽象，它并不是浏览器原生事件对象。因此，某些浏览器特定的功能可能不可用或表现不一致。如果需要访问原生事件对象，您可以使用合成事件对象的nativeEvent属性。</p>\n<h1 id=\"React合成事件如何阻止事件传播\"><a href=\"#React合成事件如何阻止事件传播\" class=\"headerlink\" title=\"React合成事件如何阻止事件传播\"></a>React合成事件如何阻止事件传播</h1><p>React合成事件可以通过调用<code>e.stopPropagation()</code>来阻止事件传播。<br>当根容器接收到捕获事件时，先触发一次React事件的捕获阶段，然后再执行原生事件的捕获传播。所以，调用<code>e.stopPropagation()</code>可以阻止原生事件的传播。<br>合成事件是根据事件类型对原生事件的属性进行处理，并包装了关键方法，从而实现了事件的触发和处理。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["React"],"tags":["前端","react","JavaScript"]},{"title":"Hexo 内容分页配置","url":"//hexo/config/pagination.html","content":"<div id=\"vip-container\"><h4 id=\"per-page-config-yml\"><a href=\"#per-page-config-yml\" class=\"headerlink\" title=\"per_page _config.yml\"></a>per_page _config.yml</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Pagination</span></span><br><span class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></span><br><span class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">20</span> <span class=\"comment\"># 分页条数</span></span><br><span class=\"line\"><span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span> <span class=\"comment\"># 自定义分页路径</span></span><br></pre></td></tr></table></figure>\n\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["前端","框架","Hexo"],"tags":["前端","Hexo","Pagination"]},{"title":"Hexo 开启公众号引流工具","url":"//hexo/config/readmore.html","content":"<div id=\"vip-container\"><h3 id=\"配置博客信息\"><a href=\"#配置博客信息\" class=\"headerlink\" title=\"配置博客信息\"></a>配置博客信息</h3><p><img src=\"https://pic.imgdb.cn/item/6535dc4dc458853aef3ec866.jpg\"></p>\n<h3 id=\"hexo-config-yml-配置\"><a href=\"#hexo-config-yml-配置\" class=\"headerlink\" title=\"hexo _config.yml 配置\"></a>hexo _config.yml 配置</h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\">  <span class=\"attr\">readmore:</span></span><br><span class=\"line\">    <span class=\"attr\">blogId:</span> <span class=\"number\">31652</span><span class=\"number\">-1697970027416</span><span class=\"number\">-119</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">BaType</span></span><br><span class=\"line\">    <span class=\"attr\">qrcode:</span> <span class=\"string\">https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg</span></span><br><span class=\"line\">    <span class=\"attr\">keyword:</span> <span class=\"number\">666</span></span><br></pre></td></tr></table></figure>\n\n<p>其中,配置参数含义如下:</p>\n<ul>\n<li>blogId : [必选]OpenWrite 后台申请的博客唯一标识,例如:31652-1697970027416-119</li>\n<li>name : [必选]OpenWrite 后台申请的博客名称,例如:BaType</li>\n<li>qrcode : [必选]OpenWrite 后台申请的微信公众号二维码,例如:<a href=\"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\">https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg</a></li>\n<li>keyword : [必选]OpenWrite 后台申请的微信公众号后台回复关键字,例如:666</li>\n</ul>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p><code>npm install hexo-plugin-readmore --save</code></p>\n<h3 id=\"展示\"><a href=\"#展示\" class=\"headerlink\" title=\"展示\"></a>展示</h3><p><img src=\"https://pic.imgdb.cn/item/6535dddec458853aef428ef6.jpg\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["前端","框架","Hexo"],"tags":["前端","Hexo","ReadMore"]},{"title":"Hexo 开启 RSS","url":"//hexo/config/rss.html","content":"<div id=\"vip-container\"><h5 id=\"安装hexo-generator-feed-插件\"><a href=\"#安装hexo-generator-feed-插件\" class=\"headerlink\" title=\"安装hexo-generator-feed 插件\"></a>安装hexo-generator-feed 插件</h5><h6 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h6><p><code>npm install hexo-generator-feed -d</code></p>\n<h6 id=\"yarn\"><a href=\"#yarn\" class=\"headerlink\" title=\"yarn\"></a>yarn</h6><p><code>yarn add hexo-generator-feed</code></p>\n<h5 id=\"配置-config-themes-yml\"><a href=\"#配置-config-themes-yml\" class=\"headerlink\" title=\"配置_config.[themes].yml\"></a>配置_config.[themes].yml</h5><h6 id=\"增加导航栏菜单\"><a href=\"#增加导航栏菜单\" class=\"headerlink\" title=\"增加导航栏菜单\"></a>增加导航栏菜单</h6><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">RSS:</span> <span class=\"string\">/atom.xml</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-rss</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"参数配置\"><a href=\"#参数配置\" class=\"headerlink\" title=\"参数配置\"></a>参数配置</h6><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">atom</span>  <span class=\"comment\"># 类型为atom</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">atom.xml</span> <span class=\"comment\"># 访问路径</span></span><br><span class=\"line\">    <span class=\"attr\">limit:</span> <span class=\"number\">20</span> <span class=\"comment\"># 分页</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"清除重启\"><a href=\"#清除重启\" class=\"headerlink\" title=\"清除重启\"></a>清除重启</h5><p><code>hexo clean &amp;&amp; hexo generate</code></p>\n<h5 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h5><p><img src=\"https://pic.imgdb.cn/item/6533d473c458853aefb79c42.png\" alt=\"atom.xml\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["前端","框架","Hexo"],"tags":["前端","Hexo","RSS"]},{"title":"async/await 的理解","url":"//javascript/async/await.html","content":"<div id=\"vip-container\"><h2 id=\"async-await-的理解\"><a href=\"#async-await-的理解\" class=\"headerlink\" title=\"async&#x2F;await 的理解\"></a>async&#x2F;await 的理解</h2><p>async&#x2F;await 其实是 Generator 的语法糖，它能实现的效果都能用then 链来实现，它是为优化 then 链而开发出来的。从字面上来看，async 是“异步”的简写，await 则为等待，所以很好理解async用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定 await 只能出现在asnyc 函数中，先来看看 async 函数返回了什么：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">testAsy</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\"><span class=\"title class_\">Promise</span> &#123;&lt;fulfilled&gt;: <span class=\"string\">&#x27;hello world;&#x27;</span>&#125;</span><br><span class=\"line\">[[<span class=\"title class_\">Prototype</span>]]: <span class=\"title class_\">Promise</span></span><br><span class=\"line\">[[<span class=\"title class_\">PromiseState</span>]]: <span class=\"string\">&quot;fulfilled&quot;</span></span><br><span class=\"line\">[[<span class=\"title class_\">PromiseResult</span>]]: <span class=\"string\">&quot;hello world;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个Promise对象，如果在函数中 return 一个直接量，async 会把这个直接量通过Promise.resolve() 封装成 Promise 对象。async 函数返回的是一个 Promise 对象，所以在最外层不能用await 获取其返回值的情况下，当然应该用原来的方式：then()链来处理这个 Promise 对象，就像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">testAsy</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">result.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res); <span class=\"comment\">// hello world;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>那如果 async 函数没有返回值，又该如何？很容易想到，他会返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"literal\">undefined</span>);</span><br></pre></td></tr></table></figure>\n<p>联想一下 Promise 的特点——无等待，所以在没有await 的情况下执行 async 函数，它会立即执行，返回一个Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回Promise 对象的函数并无二致。</p>\n<pre><code> 注意：Promise.resolve(x) 可以看作是new Promise(resolve=&gt;resolve(x)) 的简写\n 可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n</code></pre>\n<h2 id=\"async-await-的优势\"><a href=\"#async-await-的优势\" class=\"headerlink\" title=\"async&#x2F;await 的优势\"></a>async&#x2F;await 的优势</h2><p>单一的 Promise 链并不能发现 async&#x2F;await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async&#x2F;await 来进一步优化它）。<br>假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">takeLongTime</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(n + <span class=\"number\">200</span>), n)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step1 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step2</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step2 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step3</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step3 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在用 Promise 方式来实现这三个步骤的处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doIt</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">step1</span>(time1)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">time2</span> =&gt;</span> <span class=\"title function_\">step2</span>(time2))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">time3</span> =&gt;</span> <span class=\"title function_\">step3</span>(time3))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t\t&#125;);\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">doIt</span>();</span><br><span class=\"line\">step1 <span class=\"keyword\">with</span> <span class=\"number\">300</span></span><br><span class=\"line\">step2 <span class=\"keyword\">with</span> <span class=\"number\">500</span></span><br><span class=\"line\">step3 <span class=\"keyword\">with</span> <span class=\"number\">700</span></span><br><span class=\"line\">result is <span class=\"number\">900</span></span><br><span class=\"line\"><span class=\"attr\">doIt</span>: <span class=\"number\">1.</span>652s</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出结果 result 是 step3() 的参数 700 + 200 &#x3D; 900。doIt()顺序执行了三个步骤，一共用了 300 + 500 + 700 &#x3D; 1500 毫秒，和console.time()&#x2F;console.timeEnd() 计算的结果一致。如果用 async&#x2F;await 来实现呢，会是这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">doIt</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time2 = <span class=\"keyword\">await</span> <span class=\"title function_\">step1</span>(time1);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time3 = <span class=\"keyword\">await</span> <span class=\"title function_\">step2</span>(time2);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">step3</span>(time3);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">doIt</span>();</span><br><span class=\"line\">step1 <span class=\"keyword\">with</span> <span class=\"number\">300</span></span><br><span class=\"line\">step2 <span class=\"keyword\">with</span> <span class=\"number\">500</span></span><br><span class=\"line\">step3 <span class=\"keyword\">with</span> <span class=\"number\">700</span></span><br><span class=\"line\">result is <span class=\"number\">900</span></span><br><span class=\"line\"><span class=\"attr\">doIt</span>: <span class=\"number\">1.</span>515s</span><br></pre></td></tr></table></figure>\n\n<p>结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样</p>\n<h2 id=\"async-await-对比-Promise-的优势\"><a href=\"#async-await-对比-Promise-的优势\" class=\"headerlink\" title=\"async&#x2F;await 对比 Promise 的优势\"></a>async&#x2F;await 对比 Promise 的优势</h2><p>代码读起来更加同步，Promise 虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担</p>\n<p>Promise 传递中间值⾮常麻烦，⽽async&#x2F;await⼏乎是同步的写法，⾮常优雅</p>\n<p>错误处理友好，async&#x2F;await 可以⽤成熟的try&#x2F;catch，Promise的错误捕获⾮常冗余</p>\n<p>调试友好，Promise 的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then 代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["前端","es6"],"tags":["前端","JavaScript","es6"]},{"title":"Optional chaining 语法编程","url":"//javascript/optional/chaining.html","content":"<div id=\"vip-container\"><h3 id=\"什么是-Optional-Chaining？\"><a href=\"#什么是-Optional-Chaining？\" class=\"headerlink\" title=\"什么是 Optional Chaining？\"></a>什么是 Optional Chaining？</h3><p>Optional chaining 是一个现代JavaScript语法特性，允许开发者在读取对象内部嵌套属性时安全地处理 <code>undefined</code> 或 <code>null</code> 值。这种语法通过 <code>?.</code> 操作符实现，可以避免在查询属性或调用方法时因为中间某个环节不存在而引发错误。</p>\n<h3 id=\"Optional-chaining-的基本使用示例如下\"><a href=\"#Optional-chaining-的基本使用示例如下\" class=\"headerlink\" title=\"Optional chaining 的基本使用示例如下\"></a>Optional chaining 的基本使用示例如下</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">b</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">c</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 传统的深层属性访问可能会抛出错误，如果某个属性不存在</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> value = obj &amp;&amp; obj.<span class=\"property\">a</span> &amp;&amp; obj.<span class=\"property\">a</span>.<span class=\"property\">b</span> &amp;&amp; obj.<span class=\"property\">a</span>.<span class=\"property\">b</span>.<span class=\"property\">c</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用 optional chaining 语法，安全地读取嵌套属性</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> valueWithOptionalChaining = obj?.<span class=\"property\">a</span>?.<span class=\"property\">b</span>?.<span class=\"property\">c</span>; <span class=\"comment\">// 输出 1</span></span><br><span class=\"line\"><span class=\"comment\">// 如果中间某个属性不存在，表达式会返回 undefined，而不是抛出错误</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> undefinedValue = obj?.<span class=\"property\">a</span>?.<span class=\"property\">nonExistingProp</span>?.<span class=\"property\">c</span>; <span class=\"comment\">// 输出 undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Optional-chaining-可以用于四种不同的操作\"><a href=\"#Optional-chaining-可以用于四种不同的操作\" class=\"headerlink\" title=\"Optional chaining 可以用于四种不同的操作\"></a>Optional chaining 可以用于四种不同的操作</h3><ol>\n<li>对象属性访问</li>\n</ol>\n<p>如上例所示，可以安全地访问嵌套对象属性。</p>\n<ol start=\"2\">\n<li>数组索引访问</li>\n</ol>\n<p>可以安全地访问数组的索引，如果数组是 undefined 或 null，则不会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> valueAtIndex = arr?.[<span class=\"number\">2</span>]; <span class=\"comment\">// 输出 3</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nonExistingIndex = arr?.[<span class=\"number\">5</span>]; <span class=\"comment\">// 输出 undefined</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>函数或方法调用</li>\n</ol>\n<p>如果不确定一个对象上的函数是否存在，可以使用 optional chaining 安全地调用函数或方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\"><span class=\"attr\">a</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Function exists&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">a</span>?.(); <span class=\"comment\">// 输出 &#x27;Function exists&#x27;</span></span><br><span class=\"line\">obj.<span class=\"property\">b</span>?.(); <span class=\"comment\">// 由于 b 不存在，不执行任何操作，返回 undefined</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>默认值中使用</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = user?.<span class=\"property\">name</span> ?? <span class=\"string\">&quot;匿名用户&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br></pre></td></tr></table></figure>\n\n<p>要注意的是，optional chaining 语法是 ECMAScript 2020（ES11）的一部分，因此在老旧的JavaScript环境中可能不受支持。对于这些环境，可以使用Babel这样的工具来转译代码，使其兼容。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["前端","es6"],"tags":["前端","JavaScript","es6"]},{"title":"编写 Promise 方法","url":"//javascript/promise.html","content":"<div id=\"vip-container\"><h5 id=\"Promise-是什么？\"><a href=\"#Promise-是什么？\" class=\"headerlink\" title=\"Promise 是什么？\"></a>Promise 是什么？</h5><p>Promise 是异步编程的一种解决方案，它是一个对象，可以获取异步 操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调， 它比传统的解决方案回调函数和事件更合理和更强大。</p>\n<span id=\"more\"></span>\n<p>所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束 的事件(通常是一个异步操作)的结果。从语法上说，Promise 是一 个对象，从它可以获取异步操作的消息。Promise 提供统一的 API， 各种异步操作都可以用同样的方法进行处理。</p>\n<ol>\n<li>Promise 的实例有三个状态:</li>\n</ol>\n<ul>\n<li><p>Pending(进行中)</p>\n</li>\n<li><p>Resolved(已完成)</p>\n</li>\n<li><p>Rejected(已拒绝)</p>\n</li>\n</ul>\n<p>当把一件事情交给 promise 时，它的状态就是 Pending，任务完成了 状态就变成了 Resolved、没有完成失败了就变成了 Rejected。</p>\n<ol start=\"2\">\n<li><p>Promise 的实例有两个过程:<br> pending -&gt; fulfilled: Resolved(已完成)<br> pending -&gt; rejected: Rejected(已拒绝)</p>\n<p> 注意:一旦从进行状态变成为其他状态就永远不能更改状态了。</p>\n</li>\n</ol>\n<h5 id=\"Promise-的特点\"><a href=\"#Promise-的特点\" class=\"headerlink\" title=\"Promise 的特点\"></a>Promise 的特点</h5><p>对象的状态不受外界影响。promise 对象代表一个异步操作，有三种 状态，pending(进行中)、fulfilled(已成功)、rejected(已失 败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他 操作都无法改变这个状态，这也是 promise 这个名字的由来——“承 诺”;</p>\n<p>一旦状态改变就不会再变，任何时候都可以得到这个结果。promise 对象的状态改变，只有两种可能:从 pending 变为 fulfilled，从 pending 变为 rejected。这时就称为 resolved(已定型)。如果改 变已经发生了，你再对 promise 对象添加回调函数，也会立即得到这 个结果。这与事件(event)完全不同，事件的特点是:如果你错过 了它，再去监听是得不到结果的。</p>\n<h5 id=\"Promise-实现\"><a href=\"#Promise-实现\" class=\"headerlink\" title=\"Promise 实现\"></a>Promise 实现</h5><p>Promise 实现是通过js class编写，主要包括status、value、error、resolve、reject、then、catch、all、race、allSettled、any等组成。</p>\n<ol>\n<li>状态</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span> = <span class=\"string\">&quot;pending&quot;</span>; <span class=\"comment\">// 进行中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> = <span class=\"string\">&quot;fulfilled&quot;</span>; <span class=\"comment\">// 已完成</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> = <span class=\"string\">&quot;rejected&quot;</span>; <span class=\"comment\">// 已拒绝</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>resolve 创建一个已解决的Promise对象，将给定的值作为其参数。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>reject 创建一个已拒绝的Promise对象，将给定的原因作为其参数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>then 添加对Promise对象解决或拒绝时的处理程序</li>\n</ol>\n<ul>\n<li>单个方法调用</li>\n</ul>\n   <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">executer</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resFn</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFn</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> resolve = (<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PROMISE_STATUS_FULFILLED</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">//queueMicrotask:  主线程执行完毕之后立马执行</span></span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">resfn</span>(value)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">const</span> reject = (<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PROMISE_STATUS_REJECTED</span></span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">errfn</span>(error)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">   <span class=\"title function_\">executer</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resFn</span> = resFn;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFn</span> = errFn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行结果  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"number\">333333</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;        <span class=\"comment\">//最终打印 1111</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>优化then 方法</li>\n</ul>\n<p>官方给与的then 方法是可以进行数组传值和链式调用的，而目前我们写的是不支持。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span> = [] <span class=\"comment\">//1.多次调用then 时用数组 保存</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span> = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将then 方法修改为 </span></span><br><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resfns</span>.<span class=\"title function_\">push</span>(resFn);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(errFn);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// resolve修改为</span></span><br><span class=\"line\">resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// reject 修改为</span></span><br><span class=\"line\">reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  优化后then的运行结果<br>  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res1:&quot;</span>, res) </span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err1:&quot;</span>, err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 调用then方法多次调用</span></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res2:&quot;</span>, res)</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err2:&quot;</span>, err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>运行结果：res2: 111  因为后面的.then 把前面的覆盖掉了 并不会执行res1 所在的代码块<br>*由此可见 then 方法调用时应该是个数组然后依次调用<br>下面改造我们的代码then,还需要优化执行resolve 时调用reject<br>   <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnRejected</span> = (<span class=\"params\">err</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    errFn = errFn || defaultOnRejected;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnFulFilled</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    resFn = resFn || defaultOnFulFilled;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> &amp;&amp; !!resFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> &amp;&amp; !!errFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!resFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!errFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">errFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><br>然后执行：<br>  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"number\">333333</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res1:&quot;</span>, res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err1:&quot;</span>, err);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 调用then方法多次调用</span></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res2:&quot;</span>, res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err2:&quot;</span>, err);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">执行结果：</span><br><span class=\"line\"><span class=\"attr\">res1</span>: <span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"attr\">res2</span>: <span class=\"number\">111</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li><p>catch 添加对Promise对象拒绝时的处理程序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加对Promise对象拒绝时的处理程序。</span></span><br><span class=\"line\"><span class=\"keyword\">catch</span>(errFn) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">undefined</span>, errFn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>finally 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">finally</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>all 接收一个可迭代对象（如数组），并返回一个新的Promise对象。当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过类型判断当前数组中的方法或者对象是否为Promise 对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isPromise = <span class=\"keyword\">function</span>(<span class=\"params\">promise</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    !!promise &amp;&amp;</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> promise.<span class=\"property\">then</span> === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any[]</span>&#125; <span class=\"variable\">iterable</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 实际上多个对象同步执行时，就相当于把所有的方法重新进行Promise一次。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当遍历到最后一个时，resolve 所有结果。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = iterable.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> results = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> promise = iterable[i];</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(promise)) &#123;</span><br><span class=\"line\">        promise</span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            results[i] = res;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        results[i] = <span class=\"title function_\">promise</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        results[i] = promise;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>all 运行示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">88888</span>,</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  res.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">运行结果: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">123</span>,  <span class=\"number\">88888</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>race Promise.race(iterable) 传入多个对象,当任何一个执行完成后 resolve 结果</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    iterable.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(p)) &#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> p === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"title function_\">p</span>());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>race 运行示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">race</span>([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  res.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">运行结果： <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>完整代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// status</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span> = <span class=\"string\">&quot;pending&quot;</span>; <span class=\"comment\">// 进行中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> = <span class=\"string\">&quot;fulfilled&quot;</span>; <span class=\"comment\">// 已完成</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> = <span class=\"string\">&quot;rejected&quot;</span>; <span class=\"comment\">// 已拒绝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executer</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executer</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//    创建一个已解决的Promise对象，将给定的值作为其参数。</span></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个已拒绝的Promise对象，将给定的原因作为其参数。</span></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//   添加对Promise对象解决或拒绝时的处理程序。</span></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnRejected</span> = (<span class=\"params\">err</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    errFn = errFn || defaultOnRejected;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnFulFilled</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    resFn = resFn || defaultOnFulFilled;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> &amp;&amp; !!resFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> &amp;&amp; !!errFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!resFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!errFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">errFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加对Promise对象拒绝时的处理程序。</span></span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(errFn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">undefined</span>, errFn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。</span></span><br><span class=\"line\">  <span class=\"title function_\">finally</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isPromise = <span class=\"keyword\">function</span>(<span class=\"params\">promise</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    !!promise &amp;&amp;</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> promise.<span class=\"property\">then</span> === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any[]</span>&#125; <span class=\"variable\">iterable</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = iterable.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> results = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> promise = iterable[i];</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(promise)) &#123;</span><br><span class=\"line\">        promise</span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            results[i] = res;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        results[i] = <span class=\"title function_\">promise</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        results[i] = promise;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    iterable.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(p)) &#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> p === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"title function_\">p</span>());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// const p1 = new MyPromise((resolve, reject) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(&quot;状态pending&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   resolve(&quot;22222&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   reject(&quot;3333333&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p1.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(&quot;res1:&quot;, res);</span></span><br><span class=\"line\"><span class=\"comment\">//   return &quot;第二次的成功回调&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   .catch((error) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;err1:&quot;, error);</span></span><br><span class=\"line\"><span class=\"comment\">//     throw new Error(&quot;第二次的失败回调&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   .finally(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;finally&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// (async function() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   const res = MyPromise.all([</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(1);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(2);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       return 123;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     88888,</span></span><br><span class=\"line\"><span class=\"comment\">//   ]);</span></span><br><span class=\"line\"><span class=\"comment\">//   res.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (async function() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   const res = MyPromise.race([</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(1);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(2);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//   ]);</span></span><br><span class=\"line\"><span class=\"comment\">//   res.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)();</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Promise-的缺点\"><a href=\"#Promise-的缺点\" class=\"headerlink\" title=\"Promise 的缺点\"></a>Promise 的缺点</h5><p>无法取消 Promise，一旦新建它就会立即执行，无法中途取消。</p>\n<p>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。</p>\n<p>当处于 pending 状态时，无法得知目前进展到哪一个阶段(刚刚开始 还是即将完成)。</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h5><p>Promise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。 一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变， 就凝固了，无法再被改变了。</p>\n<p>状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在 异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原 型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的 改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的 末尾执行。</p>\n<p>注意:在构造 Promise 的时候，构造函数内部的代码是立即执行的。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["前端","es6"],"tags":["前端","JavaScript","es6"]},{"title":"对原型、原型链的理解","url":"//javascript/prototype.html","content":"<div id=\"vip-container\"><p>在 JavaScript 中是使用构造两数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造西数的所有实例共享的属性和方法。<br>当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造两数的prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在 浏览器中都实现了_proto_ 属性来访问这个属性，但是最好不要 使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法米获取对象的原型。 </p>\n<p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象义会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 0bject.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。 </p>\n<p>特点：JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。<br><img src=\"https://pic.imgdb.cn/item/65366accc458853aefbfcd92.jpg\" alt=\"原型链图解\"><br>那么原型链的终点是什么？如何打印出原型链的终点？</p>\n<p>由于 Object 是构造函数，原型链终点 Ob ject.prototype._proto_，而 Object.prototype.<em>proto</em> &#x3D;&#x3D;&#x3D; null &#x2F;&#x2F; true，所以，原型链的终点是 null。原型链上的所有原型都是对象，所有的对象最终都是由 0bject 构造的，而 Object.prototype 的下一级是Object. prototype._proto_。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653668e4c458853aefb94875.jpg\" alt=\"在这里插入图片描述\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["前端","es6"],"tags":["前端","JavaScript","es6"]},{"title":"var、let、const的区别","url":"//javascript/var/let/const.html","content":"<div id=\"vip-container\"><h5 id=\"var-关键词\"><a href=\"#var-关键词\" class=\"headerlink\" title=\"var 关键词\"></a>var 关键词</h5><ol>\n<li>var声明作用域<br>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = <span class=\"string\">&quot;hello world&quot;</span>;   <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message);  <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p>函数test()调用时会创建变量message并给它赋值，调用之后变量随即被销毁。因此，在函数test()之外调用变量message会报错</p>\n<p>在函数内定义变量时省略var操作符，可以创建一个全局变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    message = <span class=\"string\">&quot;hello world&quot;</span>;   <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message);  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n<p>省略掉var操作符之后，message就变成了全局变量。只要调用一次函数test()，就会定义这个变量，并且可以在函数外部访问到。在局部作用域中定义的全局变量很难维护，不推荐这么做。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出ReferenceError。</p>\n<ol start=\"2\">\n<li>var声明提升<br>var在js中是支持预解析的，如下代码不会报错。这是因为使用var声明的变量会自动提升到函数作用域顶部：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>javaScript引擎，在代码预编译时，javaScript引擎会自动将所有代码里面的var关键字声明的语句都会提升到当前作用域的顶端,如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">    age = <span class=\"number\">26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"let声明\"><a href=\"#let声明\" class=\"headerlink\" title=\"let声明\"></a>let声明</h5><ol>\n<li>let声明作用域<br>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问，而var可以跨块访问</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var定义的变量</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let定义的变量</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// 26</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// ReferenceError: age没有定义</span></span><br></pre></td></tr></table></figure>\n\n<p>let也不允许同一个块作用域中出现冗余声明（重复声明）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age; <span class=\"comment\">// SyntaxError；标识符age已经声明过了</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>暂时性死区<br>let、const与var的另一个重要的区别，let、const声明的变量不会在作用域中被提升。ES6新增的let、const关键字声明的变量会产生块级作用域，如果变量在当前作用域中被创建出来，由于此时还未完成语法绑定，所以是不能被访问的，如果访问就会抛出错误ReferenceError。因此，在这运行流程进入作用域创建变量，到变量可以被访问之间的这一段时间，就称之为暂时死区。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// name会被提升</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// age不会被提升</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// ReferenceError：age没有定义</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>全局声明<br>与var关键字不同，var定义的全局变量会挂载到window对象上，使用window可以访问，而let在全局作用域中声明的变量不会成为window对象的属性</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">name</span>); <span class=\"comment\">// &#x27;Matt&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">age</span>); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>for循环中的var、let声明<br>for循环中var定义的迭代变量会渗透到循环体外部：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>改成使用let之后，这个问题就消失了，因为迭代变量的作用域仅限于for循环块内部：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// ReferenceError: i没有定义</span></span><br></pre></td></tr></table></figure>\n\n<p>使用var和let定义for循环中的变量，循环里使用定时器setTimeout后循环结果如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出5、5、5、5、5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出0、1、2、3、4</span></span><br></pre></td></tr></table></figure>\n\n<p>let 是在代码块内有效，var 是在全局范围内有效。let 只能声明一次 ，var 可以声明多次。</p>\n<p>当同步代码执行完毕后，开始执行异步的setTimeout代码，执行setTimeout时需要从当前作用域内寻找一个变量 i，for循环执行完毕，当前 i&#x3D;5，执行setTimeout时输出为5，任务队列中的剩余4个setTimeout也依次执行，输出为5。</p>\n<p>变量 j 是用 let 声明的，当前的 i 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出0-4。</p>\n<h5 id=\"const声明\"><a href=\"#const声明\" class=\"headerlink\" title=\"const声明\"></a>const声明</h5><p>const的行为与let基本相同，唯一一个重要的区别是：</p>\n<p>const是用来定义常量的，而且定义的时候必须赋值，不赋值会报错，定义之后是不允许被修改的，修改const声明的变量会导致运行时错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">age = <span class=\"number\">36</span>; <span class=\"comment\">// TypeError: 给常量赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const也不允许重复声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Nicholas&#x27;</span>; <span class=\"comment\">// SyntaxError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const声明的作用域也是块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Nicholas&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br></pre></td></tr></table></figure>\n\n<p>而const声明的变量是一个对象时，修改这个对象内部的属性并不会报错。</p>\n<p>这是因为const声明的是栈区里的内容不能修改，基本数据类型的值直接在栈内存中存储，而引用数据类型在栈区保存的是对象在堆区的地址，修改对象的属性，不会修改对象在栈区的地址，如果重新给对象person赋值，则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Lili&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Matt&#x27;</span>; <span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript引擎会为for循环中的let声明分别创建独立的变量实例，虽然const变量跟let变量很相似，但是不能用const来声明迭代变量（因为迭代变量会自增）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;&#125; <span class=\"comment\">// TypeError：给常量赋值</span></span><br></pre></td></tr></table></figure>\n\n<p>不过，如果你只想用const声明一个不会被修改的for循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对for-of和for-in循环特别有意义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> j = <span class=\"number\">7</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 7, 7, 7, 7, 7</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a, b</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["前端","es6"],"tags":["前端","JavaScript","es6"]},{"title":"浏览器缓存的全过程","url":"//browser/mechanism/cache.html","content":"<div id=\"vip-container\"><h3 id=\"浏览器缓存的全过程\"><a href=\"#浏览器缓存的全过程\" class=\"headerlink\" title=\"浏览器缓存的全过程\"></a>浏览器缓存的全过程</h3><p><img src=\"https://pic.imgdb.cn/item/65323b8ec458853aef72a6ad.png\" alt=\"浏览器缓存的全过程\"></p>\n<p>浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；</p>\n<p>下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上次返回 200 的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取数据资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；</p>\n<p>如果资源已过期，则标明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；</p>\n<p>服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；</p>\n<p>如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间作对比，一致则命中协商缓存，返回 304；</p>\n<p>不一致则返回新的 last-modified 和文件并返回200；</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["浏览器","缓存"],"tags":["前端","浏览器"]},{"title":"网络劫持有哪几种，如何防范？","url":"//browser/network/hijack.html","content":"<div id=\"vip-container\"><h5 id=\"⽹络劫持\"><a href=\"#⽹络劫持\" class=\"headerlink\" title=\"⽹络劫持\"></a>⽹络劫持</h5><ol>\n<li>DNS 劫持: (输⼊京东被强制跳转到淘宝这就属于dns 劫持)</li>\n</ol>\n<ul>\n<li>DNS 强制解析: 通过修改运营商的本地 DNS 记录，来引导⽤户流量到缓存服务器</li>\n<li>302 跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302 跳转的回复，引导⽤户获取内容</li>\n</ul>\n<ol start=\"2\">\n<li>HTTP 劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的 http 响应内容(即加⼴告)</li>\n</ol>\n<h5 id=\"如何防范网络劫持？\"><a href=\"#如何防范网络劫持？\" class=\"headerlink\" title=\"如何防范网络劫持？\"></a>如何防范网络劫持？</h5><p>DNS 劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http 劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP 加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。</p>\n<p>网络劫持指的是网络中的某个节点对数据进行恶意篡改和篡改，以达到非法获取用户信息或者控制用户设备的目的。以下是预防网络劫持的几个方法：</p>\n<ol>\n<li><p>使用HTTPS：HTTPS是一个安全的协议，对通信进行加密和身份验证，防止劫持者对数据进行篡改。使用HTTPS之前，可以使用SSL证书来验证服务器的身份。</p>\n</li>\n<li><p>使用VPN：VPN可以加密数据并建立一个虚拟私人网络，从而保护用户的数据和隐私。使用VPN可以防止网络劫持和嗅探攻击。</p>\n</li>\n<li><p>使用防火墙和反病毒软件：网络劫持者可能会通过恶意软件或病毒对用户设备进行攻击，使用防火墙和反病毒软件可以防止这种攻击。</p>\n</li>\n<li><p>更新操作系统和软件程序：最新版本的操作系统和软件程序通常包含了修复安全漏洞的补丁。不定期更新操作系统和软件程序可以减少遭受网络攻击的风险。</p>\n</li>\n<li><p>警惕钓鱼网站和不安全的链接：劫持者可能会伪造合法的网站或链接，引导用户向其提供个人信息或下载恶意软件。不要轻信不安全的链接，要时刻保持警惕。</p>\n</li>\n</ol>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["浏览器","网路安全"],"tags":["前端","浏览器","网路安全"]},{"title":"浏览器的渲染进程的线程","url":"//browser/render/process.html","content":"<div id=\"vip-container\"><h4 id=\"浏览器的渲染进程的线程\"><a href=\"#浏览器的渲染进程的线程\" class=\"headerlink\" title=\"浏览器的渲染进程的线程\"></a>浏览器的渲染进程的线程</h4><p><img src=\"https://pic.imgdb.cn/item/6532800ac458853aef6782e0.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"GUI-渲染线程\"><a href=\"#GUI-渲染线程\" class=\"headerlink\" title=\"GUI 渲染线程\"></a>GUI 渲染线程</h5><p>GUI 渲染线程是在 GUI 应用程序中负责界面渲染的线程。负责渲染浏览器页面，解析 HTML、CSS，构建DOM 树、构建CSSOM树、构建渲染树和绘制页面；当界面需要重绘或由于某种操作引发回流时，该线程就会执行。</p>\n<p>在许多 GUI 应用程序中，渲染线程通常会在主线程中运行，这可能会导致界面卡顿或响应时间过长。为了避免这种情况，一些框架和库已经实现了将 GUI 渲染线程与主线程分离的机制，例如 Android 中的 UI 线程和渲染线程分离机制。</p>\n<p>当渲染线程与主线程分离时，它可以专注于绘制和更新屏幕上的内容，而主线程则可以处理用户输入和其他逻辑。这样可以提高应用程序的响应速度和用户体验。</p>\n<p><strong>注意</strong>：GUI 渲染线程和 JS 引擎线程是互斥的，当JS 引擎执行时GUI线程会被挂起，GUI 更新会被保存在一个队列中等到JS 引擎空闲时立即被执行。</p>\n<h5 id=\"JS-引擎线程\"><a href=\"#JS-引擎线程\" class=\"headerlink\" title=\"JS 引擎线程\"></a>JS 引擎线程</h5><p>JS 引擎线程也称为 JS 内核，负责处理Javascript 脚本程序，解析Javascript 脚本，运行代码；JS 引擎线程一直等待着任务队列中任务的到来，然后加以处理，一个 Tab 页中无论什么时候都只有一个JS 引擎线程在运行 JS 程序。</p>\n<p>在浏览器环境中，JavaScript 引擎线程负责解释和执行 JavaScript 代码，并将执行结果返回给主线程。JavaScript 引擎线程通常是单线程的，这意味着它只能同时执行一个任务。这就是为什么一些耗时的 JavaScript 代码可以阻止页面的渲染和响应。</p>\n<p>为了解决这个问题，浏览器引入了 Web Workers，使得可以使用多个 JavaScript 引擎线程来执行 JavaScript 代码。这些工作线程可以并行地执行 JavaScript 代码，并在完成任务后将结果返回给主线程，从而防止 JavaScript 代码阻塞页面的渲染和响应。</p>\n<p><strong>注意</strong>：GUI 渲染线程与 JS 引擎线程的互斥关系，所以如果JS 执行的时间过长，会造成页面的渲染不连贯，导致页面渲染加载阻塞。</p>\n<h5 id=\"时间触发线程\"><a href=\"#时间触发线程\" class=\"headerlink\" title=\"时间触发线程\"></a>时间触发线程</h5><p>时间触发线程属于浏览器而不是 JS 引擎，用来控制事件循环；当JS引擎执行代码块如 setTimeOut 时（也可是来自浏览器内核的其他线程,如鼠标点击、AJAX 异步请求等），会将对应任务添加到事件触发线程中；当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理。</p>\n<p>时间触发线程在浏览器中起着非常重要的作用，因为它们可以帮助网站实现许多不同的功能，包括：</p>\n<ul>\n<li><p>启动定时器：当网页需要执行一些定时任务时，可以使用时间触发线程来启动定时器。</p>\n</li>\n<li><p>处理事件：当用户与网页交互时，例如点击按钮或提交表单，时间触发线程将负责处理这些事件并执行相应的回调函数。</p>\n</li>\n<li><p>处理异步请求：当网页需要从服务器获取数据时，可以使用时间触发线程来处理异步请求并执行回调函数。</p>\n</li>\n</ul>\n<p><strong>注意</strong>：由于 JS 的单线程关系，所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）。</p>\n<h5 id=\"定时器触发进程\"><a href=\"#定时器触发进程\" class=\"headerlink\" title=\"定时器触发进程\"></a>定时器触发进程</h5><p>浏览器定时器触发进程是指浏览器中用来触发定时器的进程。在浏览器中，定时器可以使用 JavaScript 的 setTimeout() 和 setInterval() 方法来创建。当设置的时间到达后，浏览器会触发定时器，并执行对应的函数。</p>\n<p>定时器触发进程通常由内核管理，它会在特定时间间隔内不断运行，并检查是否有定时器需要触发。当定时器触发时，该进程会将需要执行的任务推入待执行队列中，然后通知主线程执行。主线程会不断检查待执行队列，如果有任务待执行，则将其取出并执行。</p>\n<p>需要<strong>注意</strong>的是，如果执行的任务需要较长时间才能完成，会导致主线程阻塞，影响页面的响应速度。因此，应该尽可能避免在定时器中执行复杂的任务，或者使用 Web Worker 在后台执行任务，以避免阻塞主线程。</p>\n<p><strong>注意</strong>：W3C 在 HTML 标准中规定，定时器的定时时间不能小于4ms，如果是小于 4ms，则默认为 4ms。</p>\n<h5 id=\"异步-http-请求线程\"><a href=\"#异步-http-请求线程\" class=\"headerlink\" title=\"异步 http 请求线程\"></a>异步 http 请求线程</h5><p>在浏览器中，异步 HTTP 请求线程通常由浏览器内部的 JavaScript 引擎处理。当 JavaScript 代码发起一个异步 HTTP 请求时，浏览器会创建一个新的线程来处理该请求，该线程通常是浏览器的网络线程。在该线程中，浏览器会向服务器发送 HTTP 请求，并等待服务器返回响应。</p>\n<p>在等待服务器响应的同时，JavaScript 引擎会继续执行其他代码，不会被阻塞。当服务器返回响应后，浏览器会将响应数据传递给 JavaScript 引擎，在 JavaScript 线程中执行相应的回调函数，用来处理响应数据。</p>\n<p>需要注意的是，由于浏览器对跨域请求进行了限制，在异步 HTTP 请求线程中发起的跨域请求需要经过浏览器的安全机制进行处理，一般需要设置相关的请求头或者使用 JSONP 等技术来解决。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["浏览器","渲染"],"tags":["前端","浏览器","GUI"]},{"title":"RESTful和RPC的区别","url":"//browser/restful/and/rpc.html","content":"<div id=\"vip-container\"><h4 id=\"RESTful\"><a href=\"#RESTful\" class=\"headerlink\" title=\"RESTful\"></a>RESTful</h4><p>RESTful是一种基于HTTP协议，通过URL、HTTP方法和参数等方式来访问和操作资源的设计风格和架构方法。它是一种轻量级的、高效的、无状态的Web服务架构，可以用于设计和开发各种类型的Web应用程序和分布式系统。</p>\n<p>RESTful的核心思想是资源的定义和管理，将系统中的资源抽象为一组URI（统一资源标识符），通过HTTP方法来对资源进行访问和操作。常用的HTTP方法有GET、POST、PUT、DELETE等，它们分别对应着资源的查询、新增、更新和删除操作。</p>\n<p>RESTful的优势在于它简单、灵活、可伸缩、易于维护和扩展。它采用标准的HTTP协议和常见的数据格式（如JSON、XML等），使得开发人员可以快速地开发出高效、可靠的Web服务，并且可以方便地与其他系统进行集成和交互。</p>\n<h4 id=\"RPC（Remote-Procedure-Call）\"><a href=\"#RPC（Remote-Procedure-Call）\" class=\"headerlink\" title=\"RPC（Remote Procedure Call）\"></a>RPC（Remote Procedure Call）</h4><p>RPC（Remote Procedure Call）即远程过程调用，是一种分布式系统中的通信协议。RPC允许一个程序在另一个计算机上运行的程序请求服务，而不需要了解底层网络细节，就像本地调用一样。</p>\n<p>RPC的原理是客户端发送请求给服务端，服务端执行相应的操作并返回结果给客户端。RPC框架隐藏了底层的网络细节和通信协议，使得开发者可以像使用本地函数一样方便地调用远程函数。</p>\n<p>RPC的优势在于它提供了高效、简单、可靠的远程调用机制，使得分布式系统开发更加便捷。同时，RPC框架支持多种编程语言和跨平台，使得开发者可以使用不同的编程语言和技术栈来实现分布式系统。一些常用的RPC框架有gRPC、Apache Thrift、Dubbo等。</p>\n<h4 id=\"RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\"><a href=\"#RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\" class=\"headerlink\" title=\"RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\"></a>RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：</h4><ol>\n<li><h5 id=\"设计理念：\"><a href=\"#设计理念：\" class=\"headerlink\" title=\"设计理念：\"></a>设计理念：</h5><ul>\n<li><p>RESTful：是基于HTTP协议设计的，着重于资源的定义和管理，通过URL、HTTP方法和参数等方式进行资源的访问和操作。</p>\n</li>\n<li><p>RPC：是基于函数调用的，着重于接口的定义和数据传输格式的规范，通过序列化和反序列化来实现远程调用。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"通信协议：\"><a href=\"#通信协议：\" class=\"headerlink\" title=\"通信协议：\"></a>通信协议：</h5><ul>\n<li><p>RESTful：使用HTTP协议进行通信，支持GET、POST、PUT、DELETE等HTTP方法。</p>\n</li>\n<li><p>RPC：使用自定义的协议进行通信，可以使用TCP、UDP等网络协议，也可以使用HTTP作为传输协议。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"数据传输格式：\"><a href=\"#数据传输格式：\" class=\"headerlink\" title=\"数据传输格式：\"></a>数据传输格式：</h5><ul>\n<li><p>RESTful：通常使用JSON、XML等文本格式进行数据传输。</p>\n</li>\n<li><p>RPC：通常使用二进制格式进行数据传输，传输效率更高。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"调用方式：\"><a href=\"#调用方式：\" class=\"headerlink\" title=\"调用方式：\"></a>调用方式：</h5><ul>\n<li><p>RESTful：通过HTTP方法进行资源的访问和操作，支持无状态的请求，可以使用缓存等机制提高性能和可伸缩性。</p>\n</li>\n<li><p>RPC：通过函数调用进行接口的访问和操作，需要保持请求和响应之间的状态，不支持缓存等机制。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>综上所述，RESTful更加适用于Web应用程序和分布式系统的开发，而RPC更加适用于高性能和低延迟的系统调用。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["浏览器","协议"],"tags":["前端","浏览器","RESTful","RPC","HTTP"]},{"title":"session-cookies 三个缓存 localStorage、sessionStorage、Cookies。","url":"//browser/session/cookies.html","content":"<div id=\"vip-container\"><h1 id=\"session-cookies\"><a href=\"#session-cookies\" class=\"headerlink\" title=\"session-cookies\"></a>session-cookies</h1><pre><code>session-cookies is localStorage、sessionStorage、Cookies。\n</code></pre>\n<p> <a href=\"https://badge.fury.io/js/session-cookies\"><img src=\"https://badge.fury.io/js/session-cookies.svg\" /></a></p>\n<p>session-cookies This plugin is used to summarize the browser’s three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.</p>\n<p>session-cookies 这个插件是用来汇总浏览器的三个缓存 localStorage、sessionStorage、Cookies。该插件注重使用方便快捷下面是一些API汇总说明。</p>\n<h4 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h4><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">获取所有</th>\n<th align=\"center\">获取单个</th>\n<th align=\"center\">设置单个</th>\n<th align=\"center\">移除单个</th>\n<th align=\"center\">清除所有</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">cookies</td>\n<td align=\"center\">getCookieList</td>\n<td align=\"center\">getCookie</td>\n<td align=\"center\">setCookie</td>\n<td align=\"center\">removeCookie</td>\n<td align=\"center\">clearCookie</td>\n</tr>\n<tr>\n<td align=\"center\">session</td>\n<td align=\"center\">getAllSessionStorage</td>\n<td align=\"center\">getSessionStorage</td>\n<td align=\"center\">setSessionStorage</td>\n<td align=\"center\">removeSessionStorage</td>\n<td align=\"center\">clearSessionStorage</td>\n</tr>\n<tr>\n<td align=\"center\">local</td>\n<td align=\"center\">getAllLocalStorage</td>\n<td align=\"center\">getLocalStorage</td>\n<td align=\"center\">setLocalStorage</td>\n<td align=\"center\">removeLocalStorage</td>\n<td align=\"center\">clearLocalStorage</td>\n</tr>\n</tbody></table>\n<h4 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i session-cookies</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"获取所有Cookies\"><a href=\"#获取所有Cookies\" class=\"headerlink\" title=\"获取所有Cookies\"></a>获取所有Cookies</h5><figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; cookies &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;session-cookies&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cookies.<span class=\"title function_\">getCookieList</span>(); <span class=\"comment\">// 返回JSON结果数据</span></span><br><span class=\"line\">cookies.<span class=\"title function_\">getCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>); <span class=\"comment\">// 返回属性值</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设置单个\"><a href=\"#设置单个\" class=\"headerlink\" title=\"设置单个\"></a>设置单个</h5><figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">setCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;1234567&#x27;</span>); <span class=\"comment\">// 设置属性为字符串需要JSON.stringify</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"移除单个\"><a href=\"#移除单个\" class=\"headerlink\" title=\"移除单个\"></a>移除单个</h5><figure class=\"highlight tsx\"><table><tr><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">removeCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"清除所有\"><a href=\"#清除所有\" class=\"headerlink\" title=\"清除所有\"></a>清除所有</h5><figure class=\"highlight tsx\"><table><tr><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">clearCookie</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"附加API\"><a href=\"#附加API\" class=\"headerlink\" title=\"附加API\"></a>附加API</h4><table>\n<thead>\n<tr>\n<th>根据index下标获取key值</th>\n<th>参数</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getLocalStorageKeyFindIndex</td>\n<td>index下标</td>\n<td>返回key</td>\n</tr>\n<tr>\n<td>getSessionStorageKeyFindIndex</td>\n<td>index下标</td>\n<td>返回key</td>\n</tr>\n</tbody></table>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; local &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;session-cookies&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">local.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>);</span><br><span class=\"line\">local.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;usename&#x27;</span>, <span class=\"string\">&#x27;songshao&#x27;</span>);</span><br><span class=\"line\">local.<span class=\"title function_\">getLocalStorageKeyFindIndex</span>(<span class=\"number\">0</span>); <span class=\"comment\">// test</span></span><br><span class=\"line\">local.<span class=\"title function_\">getLocalStorageKeyFindIndex</span>(<span class=\"number\">1</span>); <span class=\"comment\">// username</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Browsers\"><a href=\"#Browsers\" class=\"headerlink\" title=\"Browsers\"></a>Browsers</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只能使用0.1.5 以后版本 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;https://unpkg.com/session-cookies/lib/sessionCookies.js&#x27;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 其他接口同上面使用只需要增加 sessionCookies 全局配置。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    sessionCookies.<span class=\"property\">local</span>.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["浏览器","Cache"],"tags":["前端","浏览器","cookies","localStorage","sessionStorage","TypeScript"]},{"title":"如何实现浏览器内多个标签页之间的通信?","url":"//browser/tab/to/tab.html","content":"<div id=\"vip-container\"><p>实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。通信方法如下：</p>\n<ul>\n<li>使用 websocket 协议，因为 websocket 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。</li>\n<li>使用 ShareWorker 的方式，shareWorker 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。</li>\n<li>使用localStorage 的方式，我们可以在一个标签页对localStorage的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候localStorage对象就是充当的中介者的角色。</li>\n<li>使用 postMessage 方法，如果我们能够获得对应标签页的引用，就可以使用 postMessage 方法，进行通信。</li>\n</ul>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["浏览器","通讯"],"tags":["前端","浏览器","性能优化"]},{"title":"uni-app APP 更新版本提示","url":"//uni-app/vue/update.html","content":"<div id=\"vip-container\"><h3 id=\"AppUpdate-方法\"><a href=\"#AppUpdate-方法\" class=\"headerlink\" title=\"AppUpdate 方法\"></a>AppUpdate 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> baseUrl <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/basecall/utils.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">AppUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> appleId = <span class=\"number\">2021004105638058</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> platform = uni.<span class=\"title function_\">getSystemInfoSync</span>().<span class=\"property\">platform</span>;</span><br><span class=\"line\">  <span class=\"comment\">//1. 获取当前版本号</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> curversion = <span class=\"number\">100</span>;</span><br><span class=\"line\">  plus.<span class=\"property\">runtime</span>.<span class=\"title function_\">getProperty</span>(plus.<span class=\"property\">runtime</span>.<span class=\"property\">appid</span>, <span class=\"keyword\">function</span> (<span class=\"params\">widgetInfo</span>) &#123;</span><br><span class=\"line\">    curversion = widgetInfo.<span class=\"property\">version</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;当前版本&quot;</span>, curversion);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">    2， 用当前版本号提交给服务端，判断是否需要更新，接口返回信息如下</span></span><br><span class=\"line\"><span class=\"comment\">        versionId\t\tinteger(int64)\t</span></span><br><span class=\"line\"><span class=\"comment\">        versionId\t版本号\tstring\t</span></span><br><span class=\"line\"><span class=\"comment\">        intro\t版本描述\tstring\t</span></span><br><span class=\"line\"><span class=\"comment\">        forced\t是否强制更新\tboolean\t</span></span><br><span class=\"line\"><span class=\"comment\">        news\t是否是最新版本\tboolean\t</span></span><br><span class=\"line\"><span class=\"comment\">        url\tapk地址\tstring\t</span></span><br><span class=\"line\"><span class=\"comment\">        createTime\t创建时间</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">  uni.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: baseUrl.<span class=\"property\">baseUrl</span> + <span class=\"string\">&quot;/getVersion&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>: <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; versionId, forced, url, createTime &#125; = res.<span class=\"property\">data</span>.<span class=\"property\">data</span>;</span><br><span class=\"line\">\t  uni.<span class=\"title function_\">setStorageSync</span>(<span class=\"string\">&#x27;url&#x27;</span>, url);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> currTimeStamp = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(createTime).<span class=\"title function_\">getTime</span>();</span><br><span class=\"line\">      <span class=\"comment\">/* 判断是否是最新版 */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (versionId !== curversion) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//forced true 强制更新 false 自然更新</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (forced == <span class=\"string\">&#x27;true&#x27;</span>) &#123;</span><br><span class=\"line\">          uni.<span class=\"title function_\">showModal</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">title</span>: <span class=\"string\">&quot;紧急升级通知&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">content</span>:</span><br><span class=\"line\">              <span class=\"string\">&quot;亲爱的用户，为了提供更好的使用体验与功能改进，我们进行了系统升级。请立即完成强制升级，否则将无法正常使用APP。感谢您的配合与支持！&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">confirmText</span>: <span class=\"string\">&quot;立即更新&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">showCancel</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (res.<span class=\"property\">confirm</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (platform == <span class=\"string\">&quot;ios&quot;</span>) &#123;</span><br><span class=\"line\">                  plus.<span class=\"property\">runtime</span>.<span class=\"title function_\">launchApplication</span>(</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                      <span class=\"attr\">action</span>: <span class=\"string\">`itms-apps://itunes.apple.com/cn/app/id<span class=\"subst\">$&#123;appleId&#125;</span>?mt=8`</span>,</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">                      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">                        <span class=\"string\">&quot;Open system default browser failed: &quot;</span> + e.<span class=\"property\">message</span></span><br><span class=\"line\">                      );</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  );</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  uni.<span class=\"title function_\">showToast</span>(&#123;</span><br><span class=\"line\">                    <span class=\"attr\">icon</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">mask</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">title</span>: <span class=\"string\">&quot;有新的版本发布，程序已启动自动更新。&quot;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">duration</span>: <span class=\"number\">5000</span>,</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">                  <span class=\"comment\">//设置 最新版本apk的下载链接 这是固定的</span></span><br><span class=\"line\">                  <span class=\"keyword\">let</span> downloadApkUrl = url;</span><br><span class=\"line\">                  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(downloadApkUrl);</span><br><span class=\"line\">                  plus.<span class=\"property\">runtime</span>.<span class=\"title function_\">openURL</span>(downloadApkUrl);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          uni.<span class=\"title function_\">getStorage</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">key</span>: <span class=\"string\">&quot;tip_version_update_time&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">var</span> lastTimeStamp = res.<span class=\"property\">data</span>; <span class=\"comment\">// 本地时间戳</span></span><br><span class=\"line\">              <span class=\"keyword\">var</span> tipTimeLength = <span class=\"number\">0</span>; <span class=\"comment\">// 时间间隔</span></span><br><span class=\"line\">              <span class=\"keyword\">let</span> cha = lastTimeStamp + tipTimeLength - currTimeStamp;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (lastTimeStamp + tipTimeLength &gt; currTimeStamp) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;当后台时间戳大于本地时间戳才会进入&quot;</span>);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;立即更新&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//重新设置时间戳</span></span><br><span class=\"line\">                uni.<span class=\"title function_\">setStorage</span>(&#123;</span><br><span class=\"line\">                  <span class=\"attr\">key</span>: <span class=\"string\">&quot;tip_version_update_time&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">data</span>: currTimeStamp,</span><br><span class=\"line\">                  <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;setStorage-success&quot;</span>);</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                uni.<span class=\"title function_\">showModal</span>(&#123;</span><br><span class=\"line\">                  <span class=\"attr\">title</span>: <span class=\"string\">&quot;版本更新&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">content</span>:</span><br><span class=\"line\">                    <span class=\"string\">&quot;尊敬的用户，我们为您准备了最新的版本更新，内含诸多新功能与用户体验优化。点击立即升级，享受更多精彩和便利。&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">confirmText</span>: <span class=\"string\">&quot;立即更新&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">cancelText</span>: <span class=\"string\">&quot;取消&quot;</span>,</span><br><span class=\"line\">                  <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (res.<span class=\"property\">confirm</span>) &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">if</span> (platform == <span class=\"string\">&quot;ios&quot;</span>) &#123;</span><br><span class=\"line\">                        plus.<span class=\"property\">runtime</span>.<span class=\"title function_\">launchApplication</span>(</span><br><span class=\"line\">                          &#123;</span><br><span class=\"line\">                            <span class=\"attr\">action</span>: <span class=\"string\">`itms-apps://itunes.apple.com/cn/app/id<span class=\"subst\">$&#123;appleId&#125;</span>?mt=8`</span>,</span><br><span class=\"line\">                          &#125;,</span><br><span class=\"line\">                          <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">                            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">                              <span class=\"string\">&quot;Open system default browser failed: &quot;</span> + e.<span class=\"property\">message</span></span><br><span class=\"line\">                            );</span><br><span class=\"line\">                          &#125;</span><br><span class=\"line\">                        );</span><br><span class=\"line\">                      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        uni.<span class=\"title function_\">showToast</span>(&#123;</span><br><span class=\"line\">                          <span class=\"attr\">icon</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">                          <span class=\"attr\">mask</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                          <span class=\"attr\">title</span>: <span class=\"string\">&quot;有新的版本发布，程序已启动自动更新。&quot;</span>,</span><br><span class=\"line\">                          <span class=\"attr\">duration</span>: <span class=\"number\">5000</span>,</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        <span class=\"comment\">//设置 最新版本apk的下载链接 这是固定的 每次把包放在这个链接里里面即可 由后端制作</span></span><br><span class=\"line\">                        <span class=\"keyword\">let</span> downloadApkUrl = url;</span><br><span class=\"line\">                        plus.<span class=\"property\">runtime</span>.<span class=\"title function_\">openURL</span>(downloadApkUrl);</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (res.<span class=\"property\">cancel</span>) &#123;</span><br><span class=\"line\">                      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;下次一定&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">fail</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">              uni.<span class=\"title function_\">setStorage</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">key</span>: <span class=\"string\">&quot;tip_version_update_time&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">data</span>: currTimeStamp,</span><br><span class=\"line\">                <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;setStorage-success&quot;</span>);</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(createTime, <span class=\"string\">&quot;createTimecreateTime&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">fail</span>: <span class=\"function\">() =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">complete</span>: <span class=\"function\">() =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在APP-vue中注册\"><a href=\"#在APP-vue中注册\" class=\"headerlink\" title=\"在APP.vue中注册\"></a>在APP.vue中注册</h3><p>在<code>App.vue</code>中，我们需要在<code>onLaunch</code>生命周期函数中调用<code>AppUpdate</code>方法，来检查是否有新版本的APP。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppUpdate</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/common/AppUpdate.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">onLaunch</span>(<span class=\"params\"></span>) &#123;    </span><br><span class=\"line\">    <span class=\"title class_\">AppUpdate</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["uni-app","vue","AppUpdate"],"tags":["前端","uni-app","vue","AppUpdate"]},{"title":"uni-app 分享页制作","url":"//uni-app/vue/share.html","content":"<div id=\"vip-container\"><h2 id=\"uni-app-分享页制作\"><a href=\"#uni-app-分享页制作\" class=\"headerlink\" title=\"uni-app 分享页制作\"></a>uni-app 分享页制作</h2><p>通过canvas 先制作图。可以做一个canvas 背景在生成一个二维码canvas 图，在将两个canvas 合成一个图片，然后将图片分享出来。</p>\n<h3 id=\"html-模板\"><a href=\"#html-模板\" class=\"headerlink\" title=\"html 模板\"></a>html 模板</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;view class=&quot;content&quot;&gt;</span><br><span class=\"line\">        &lt;u-icon name=&#x27;arrow-left&#x27; @click=&quot;goBack&quot; style=&quot;position: absolute; z-index: 999; top: 80rpx; left: 40rpx; font-size: 40rpx; color: #454545;&quot;&gt;&lt;/u-icon&gt;</span><br><span class=\"line\">        &lt;view style=&quot;width: 100%; height: calc(100vh - 44px);&quot;&gt;</span><br><span class=\"line\">            &lt;view class=&quot;btn-opate&quot; style=&quot;&quot;&gt;</span><br><span class=\"line\">                &lt;button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;saveImg&quot;&gt;保存分享&lt;/button&gt;</span><br><span class=\"line\">                &lt;button type=&quot;default&quot; size=&quot;mini&quot; @click=&quot;copyCode&quot;&gt;复制邀请码&lt;/button&gt;</span><br><span class=\"line\">            &lt;/view&gt;</span><br><span class=\"line\">            </span><br><span class=\"line\">            &lt;image class=&quot;image&quot; style=&quot;width: 100%; height: calc(100vh - 44px);&quot; :src=&quot;ImagePath&quot; mode=&quot;widthFix&quot;&gt;&lt;/image&gt;</span><br><span class=\"line\">        &lt;/view&gt;</span><br><span class=\"line\">        &lt;view v-if=&quot;show&quot;&gt;</span><br><span class=\"line\">            &lt;canvas canvas-id=&quot;myCanvas&quot; style=&quot;width: 100vw; height: 100vh;&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">            &lt;canvas canvas-id=&quot;qrcode&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">        &lt;/view&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &lt;/view&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二维码制作\"><a href=\"#二维码制作\" class=\"headerlink\" title=\"二维码制作\"></a>二维码制作</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">UQRCode</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;uqrcodejs&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">qrCode</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    uni.<span class=\"title function_\">showLoading</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&#x27;分享页制作中...&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> qr = <span class=\"keyword\">new</span> <span class=\"title class_\">UQRCode</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 设置二维码内容</span></span><br><span class=\"line\">    qr.<span class=\"property\">data</span> = <span class=\"string\">`https://app.xianyuangu.com/#/pages/login/h5login?registerCode=<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.invitationCode&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 设置二维码大小，必须与canvas设置的宽高一致</span></span><br><span class=\"line\">    qr.<span class=\"property\">size</span> = <span class=\"number\">120</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 调用制作二维码方法</span></span><br><span class=\"line\">    qr.<span class=\"title function_\">make</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = uni.<span class=\"title function_\">createCanvasContext</span>(<span class=\"string\">&#x27;qrcode&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    qr.<span class=\"property\">canvasContext</span> = context;</span><br><span class=\"line\">    <span class=\"comment\">// 调用绘制方法将二维码图案绘制到canvas上</span></span><br><span class=\"line\">    qr.<span class=\"title function_\">drawCanvas</span>();</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将canvas内容保存为图片</span></span><br><span class=\"line\">        uni.<span class=\"title function_\">canvasToTempFilePath</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">canvasId</span>: <span class=\"string\">&#x27;qrcode&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">success</span>: <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">qrcode</span> = res.<span class=\"property\">tempFilePath</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">drawImageToCanvas</span>();</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">fail</span>: <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绘制图片\"><a href=\"#绘制图片\" class=\"headerlink\" title=\"绘制图片\"></a>绘制图片</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">drawImageToCanvas</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取 canvas 上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> systemInfo = uni.<span class=\"title function_\">getSystemInfoSync</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvasWidth = systemInfo.<span class=\"property\">windowWidth</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvasHeight = systemInfo.<span class=\"property\">windowHeight</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = uni.<span class=\"title function_\">createCanvasContext</span>(<span class=\"string\">&#x27;myCanvas&#x27;</span>, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 6: 使用 drawImage 方法绘制图片</span></span><br><span class=\"line\">    context.<span class=\"title function_\">drawImage</span>(<span class=\"string\">&#x27;/static/image/share.png&#x27;</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, canvasWidth, canvasHeight);</span><br><span class=\"line\">    </span><br><span class=\"line\">    context.<span class=\"title function_\">setFillStyle</span>(<span class=\"string\">&#x27;#D43030&#x27;</span>); <span class=\"comment\">// 黑色文本</span></span><br><span class=\"line\">    context.<span class=\"title function_\">setFontSize</span>(<span class=\"number\">32</span>); <span class=\"comment\">// 文字大小</span></span><br><span class=\"line\">    context.<span class=\"title function_\">fillText</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">invitationCode</span>, canvasWidth / <span class=\"number\">2</span> - <span class=\"number\">50</span>, canvasHeight / <span class=\"number\">2</span> * <span class=\"number\">0.84</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    context.<span class=\"title function_\">drawImage</span>(</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">qrcode</span>,</span><br><span class=\"line\">    canvasWidth / <span class=\"number\">3</span> - <span class=\"number\">20</span>,</span><br><span class=\"line\">    canvasHeight / <span class=\"number\">2</span>,</span><br><span class=\"line\">    canvasWidth / <span class=\"number\">1</span> ,</span><br><span class=\"line\">    canvasWidth / <span class=\"number\">2</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    </span><br><span class=\"line\">    context.<span class=\"title function_\">save</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Step 7: 调用 draw 方法渲染 canvas</span></span><br><span class=\"line\">    context.<span class=\"title function_\">draw</span>(<span class=\"literal\">true</span>, <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将canvas内容保存为图片</span></span><br><span class=\"line\">        uni.<span class=\"title function_\">canvasToTempFilePath</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">canvasId</span>: <span class=\"string\">&#x27;myCanvas&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">success</span>: <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">show</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">ImagePath</span> = res.<span class=\"property\">tempFilePath</span>;</span><br><span class=\"line\">            uni.<span class=\"title function_\">hideLoading</span>();</span><br><span class=\"line\">            <span class=\"comment\">// 在这里可以将得到的图片路径进行保存或分享等操作</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">fail</span>: <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                uni.<span class=\"title function_\">hideLoading</span>();</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"保存图片\"><a href=\"#保存图片\" class=\"headerlink\" title=\"保存图片\"></a>保存图片</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env</span>: uni.<span class=\"title function_\">getSystemInfoSync</span>().<span class=\"property\">uniPlatform</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">saveImg</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// app 保存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">env</span> == <span class=\"string\">&#x27;app&#x27;</span>) &#123;</span><br><span class=\"line\">        uni.<span class=\"title function_\">saveImageToPhotosAlbum</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">filePath</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">ImagePath</span>,</span><br><span class=\"line\">            <span class=\"attr\">success</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                uni.<span class=\"title function_\">showToast</span>(&#123;</span><br><span class=\"line\">                    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;保存成功&#x27;</span>,</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 生成一个a元素,并创建一个单击事件 */</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        a.<span class=\"property\">download</span> = name || <span class=\"string\">&quot;photo&quot;</span>; <span class=\"comment\">// 设置图片名称</span></span><br><span class=\"line\">        a.<span class=\"property\">href</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">ImagePath</span>; <span class=\"comment\">// 将生成的URL设置为a.href属性</span></span><br><span class=\"line\">        a.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&quot;id&quot;</span>, <span class=\"string\">&quot;myLink&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(a);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;链接&quot;</span>, a);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">exportCodeConfirm</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"title function_\">exportCodeConfirm</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> event = <span class=\"keyword\">new</span> <span class=\"title class_\">MouseEvent</span>(<span class=\"string\">&quot;click&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">/** 触发a的单击事件 */</span></span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;myLink&quot;</span>).<span class=\"title function_\">dispatchEvent</span>(event);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["uni-app","vue"],"tags":["前端","uni-app","vue","canvas"]},{"title":"什么是 CSRF 攻击？","url":"//web/cross/site/request/forgeries.html","content":"<div id=\"vip-container\"><h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5><p>CSRF（Cross-Site Request Forgeries） 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。</p>\n<p>CSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。</p>\n<h5 id=\"攻击类型\"><a href=\"#攻击类型\" class=\"headerlink\" title=\"攻击类型\"></a>攻击类型</h5><p>常见的 CSRF 攻击有三种：</p>\n<ul>\n<li>GET 类型的 CSRF 攻击，比如在网站中的一个img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交；</li>\n<li>POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。</li>\n<li>链接类型的 CSRF 攻击，比如在 a 标签的href 属性里构建一个请求，然后诱导用户去点击。</li>\n</ul>\n<h5 id=\"如何防御-CSRF-攻击？\"><a href=\"#如何防御-CSRF-攻击？\" class=\"headerlink\" title=\"如何防御 CSRF 攻击？\"></a>如何防御 CSRF 攻击？</h5><p>CSRF 攻击可以使用以下方法来防护：</p>\n<p>进行同源检测，服务器根据 http 请求头中origin 或者referer信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer字段会告诉服务器该网页是从哪个页面链接过来的）</p>\n<p>使用 CSRF Token 进行验证，服务器向用户返回一个随机数Token，当网站再次发起请求时，在请求参数中加入服务器端返回的token，然后服务器对这个 token 进行验证。这种方法解决了使用cookie单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个token，操作比较繁琐。</p>\n<p>还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的session中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。</p>\n<p>对 Cookie 进行双重验证，服务器在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到URL参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用cookie，但是不能访问获取 cookie 的特点。并且这种方法比CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。</p>\n<p>在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["浏览器","网络安全"],"tags":["前端","浏览器","网络安全","CSRF"]},{"title":"什么是 XSS 攻击？","url":"//web/cross/site/script.html","content":"<div id=\"vip-container\"><h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5><p>XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。</p>\n<p>XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。</p>\n<p>攻击者可以通过这种攻击方式可以进行以下操作：</p>\n<ol>\n<li>获取页面的数据，如 DOM、cookie、localStorage；</li>\n<li>DOS 攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；</li>\n<li>破坏页面结构；</li>\n<li>流量劫持（将链接指向某网站）</li>\n</ol>\n<h5 id=\"攻击类型\"><a href=\"#攻击类型\" class=\"headerlink\" title=\"攻击类型\"></a>攻击类型</h5><p>XSS 可以分为存储型、反射型和 DOM 型：</p>\n<ul>\n<li>存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。</li>\n<li>反射型指的是攻击者诱导用户访问一个带有恶意代码的URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成XSS 攻击。</li>\n<li>DOM 型指的通过修改页面的 DOM 节点形成的XSS。</li>\n</ul>\n<h6 id=\"存储型-XSS-的攻击步骤：\"><a href=\"#存储型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"存储型 XSS 的攻击步骤：\"></a>存储型 XSS 的攻击步骤：</h6><ol>\n<li>攻击者将恶意代码提交到⽬标⽹站的数据库中。</li>\n<li>⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。</li>\n<li>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</li>\n<li>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。<br>这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。</li>\n</ol>\n<h6 id=\"反射型-XSS-的攻击步骤：\"><a href=\"#反射型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"反射型 XSS 的攻击步骤：\"></a>反射型 XSS 的攻击步骤：</h6><ol>\n<li><p>攻击者构造出特殊的 URL，其中包含恶意代码。</p>\n</li>\n<li><p>⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码从URL中取出，拼接在 HTML 中返回给浏览器。</p>\n</li>\n<li><p>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</p>\n</li>\n<li><p>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</p>\n<p>反射型 XSS 跟存储型 XSS 的区别是：存储型XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在URL ⾥。</p>\n<p>反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。</p>\n</li>\n</ol>\n<h6 id=\"DOM-型-XSS-的攻击步骤：\"><a href=\"#DOM-型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"DOM 型 XSS 的攻击步骤：\"></a>DOM 型 XSS 的攻击步骤：</h6><ol>\n<li><p>攻击者构造出特殊的 URL，其中包含恶意代码。</p>\n</li>\n<li><p>⽤户打开带有恶意代码的 URL。</p>\n</li>\n<li><p>⽤户浏览器接收到响应后解析执⾏，前端JavaScript 取出URL中的恶意代码并执⾏。</p>\n</li>\n<li><p>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</p>\n<p><strong>DOM 型 XSS 跟前两种 XSS 的区别</strong>：DOM 型XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。</p>\n</li>\n</ol>\n<h5 id=\"如何防御-XSS-攻击？\"><a href=\"#如何防御-XSS-攻击？\" class=\"headerlink\" title=\"如何防御 XSS 攻击？\"></a>如何防御 XSS 攻击？</h5><p>可以看到 XSS 危害如此之大，那么在开发网站时就要做好防御措施，具体措施如下：</p>\n<p>可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。</p>\n<p>使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。</p>\n<ol>\n<li><p>CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。</p>\n</li>\n<li><p>通常有两种方式来开启 CSP，一种是设置HTTP 首部中的Content-Security-Policy，一种是设置meta 标签的方式&lt;metahttp-equiv&#x3D;”Content-Security-Policy”&gt;<br>对一些敏感信息进行保护，比如 cookie 使用http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。</p>\n</li>\n</ol>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["浏览器","网络安全"],"tags":["前端","浏览器","网络安全","XSS"]},{"title":"有哪些可能引起前端安全的问题?","url":"//web/security/question.html","content":"<div id=\"vip-container\"><h5 id=\"跨站脚本-Cross-Site-Scripting-XSS\"><a href=\"#跨站脚本-Cross-Site-Scripting-XSS\" class=\"headerlink\" title=\"跨站脚本 (Cross-Site Scripting, XSS)\"></a><a href=\"https://blog.csdn.net/qq_35490191/article/details/132212266\">跨站脚本 (Cross-Site Scripting, XSS)</a></h5><p>⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript &#x2F; CSS &#x2F; Flash 等；</p>\n<h5 id=\"iframe-的滥⽤\"><a href=\"#iframe-的滥⽤\" class=\"headerlink\" title=\"iframe 的滥⽤\"></a>iframe 的滥⽤</h5><p>iframe 中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在 iframe 中运⾏JavaScirpt 脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；</p>\n<h5 id=\"跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）\"><a href=\"#跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）\" class=\"headerlink\" title=\"跨站点请求伪造（Cross-Site Request Forgeries，CSRF）\"></a><a href=\"https://blog.csdn.net/qq_35490191/article/details/132220538\">跨站点请求伪造（Cross-Site Request Forgeries，CSRF）</a></h5><p>指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击恶意</p>\n<h5 id=\"第三⽅库\"><a href=\"#第三⽅库\" class=\"headerlink\" title=\"第三⽅库\"></a>第三⽅库</h5><p>⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["浏览器","网络安全"],"tags":["前端","浏览器","网络安全"]},{"title":"如何对项目中的图片进行优化?","url":"//web/image/perform.html","content":"<div id=\"vip-container\"><h5 id=\"优化步骤方案\"><a href=\"#优化步骤方案\" class=\"headerlink\" title=\"优化步骤方案\"></a>优化步骤方案</h5><ol>\n<li><p>不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片<br>完全可以用 CSS 去代替。</p>\n</li>\n<li><p>对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪<br>费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然<br>后去请求相应裁剪好的图片。</p>\n</li>\n<li><p>小图使用 base64 格式</p>\n</li>\n<li><p>将多个图标文件整合到一张图片中（雪碧图）</p>\n</li>\n<li><p>选择正确的图片格式：</p>\n<ul>\n<li><p>对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好</p>\n</li>\n<li><p>小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替</p>\n</li>\n<li><p>照片使用 JPEG</p>\n</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"常见的图片格式及使用场景\"><a href=\"#常见的图片格式及使用场景\" class=\"headerlink\" title=\"常见的图片格式及使用场景\"></a>常见的图片格式及使用场景</h5><ol>\n<li><p>BMP：是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以 BMP 格式的图片通常是较大的文件。</p>\n</li>\n<li><p>GIF：是无损的、采用索引色的点阵图。采用 LZW 压缩算法进行<br>编码。文件小，是 GIF 格式的优点，同时，GIF 格式还具有支持动画<br>以及透明的优点。但是 GIF 格式仅支持 8bit 的索引色，所以 GIF 格<br>式适用于对色彩要求不高同时需要文件体积较小的场景。</p>\n</li>\n<li><p>JPEG：是有损的、采用直接色的点阵图。JPEG 的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG 非常适合用来存储照片，与 GIF 相比，JPEG 不适合用来存储企业 Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较 GIF更大。</p>\n</li>\n<li><p>PNG-8：是无损的、使用索引色的点阵图。PNG 是一种比较新的图片格式，PNG-8 是非常好的 GIF 格式替代者，在可能的情况下，应该尽可能的使用 PNG-8 而不是 GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8 还支持透明度的调节，而 GIF并不支持。除非需要动画的支持，否则没有理由使用 GIF而不是 PNG-8。</p>\n</li>\n<li><p>PNG-24：是无损的、使用直接色的点阵图。PNG-24 的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24 格式的文件大小要比 BMP 小得多。当然，PNG24 的图片还是要比 JPEG、GIF、PNG-8大得多。</p>\n</li>\n<li><p>SVG 是无损的矢量图。SVG 是矢量图意味着 SVG 图片由直线和曲线以及绘制它们的方法组成。当放大 SVG 图片时，看到的还是线和曲线，而不会出现像素点。这意味着 SVG 图片在放大时，不会失真，所以它非常适合用来绘制 Logo、Icon 等。</p>\n</li>\n<li><p>WebP：是谷歌开发的一种新图片格式，WebP 是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为 Web 而生的，什么叫为 Web 而生呢？就是说相同质量的图片，WebP 具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有 Chrome 浏览器和 Opera浏览器支持 WebP 格式，兼容性不太好。</p>\n</li>\n</ol>\n<p>在无损压缩的情况下，相同质量的 WebP 图片，文件大小要比 PNG 小26%；<br>在有损压缩的情况下，具有相同图片精度的 WebP 图片，文件大小要比 JPEG 小 25%~34%；</p>\n<p>WebP 图片格式支持图片透明度，一个无损压缩的 WebP 图片，如果要支持透明度只需要 22%的格外文件大小。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["浏览器","性能优化"],"tags":["前端","浏览器","性能优化","Webpack","图片"]},{"title":"前端懒加载是什么?","url":"//web/lazy/loading.html","content":"<div id=\"vip-container\"><h5 id=\"懒加载的概念\"><a href=\"#懒加载的概念\" class=\"headerlink\" title=\"懒加载的概念\"></a>懒加载的概念</h5><p>懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。<br>如果使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。</p>\n<h5 id=\"懒加载的特点\"><a href=\"#懒加载的特点\" class=\"headerlink\" title=\"懒加载的特点\"></a>懒加载的特点</h5><ul>\n<li>减少无用资源的加载：使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。</li>\n<li>提升用户体验: 如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。</li>\n<li>防止加载过多图片而影响其他资源文件的加载：会影响网站应用的正常使用。</li>\n</ul>\n<h5 id=\"懒加载的实现原理\"><a href=\"#懒加载的实现原理\" class=\"headerlink\" title=\"懒加载的实现原理\"></a>懒加载的实现原理</h5><p>图片的加载是由 src 引起的，当对 src 赋值时，浏览器就会请求图片资源。根据这个原理，我们使用 HTML5 的data-xxx 属性来储存图片的路径，在需要加载图片的时候，将 data-xxx 中图片的路径赋值给src，这样就实现了图片的按需加载，即懒加载。</p>\n<p><strong>注意</strong>：data-xxx 中的 xxx 可以自定义，这里我们使用data-src来定义。</p>\n<p>懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。</p>\n<p>使用原生 JavaScript 实现懒加载：</p>\n<p><strong>知识点</strong>：</p>\n<p>window.innerHeight 是浏览器可视区的高度</p>\n<p>document.body.scrollTop</p>\n<p>document.documentElement.scrollTop 是浏览器滚动的过的距离</p>\n<p>imgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）</p>\n<p>图片加载条件 ： img.offsetTop &lt; window.innerHeight+document.body.scrollTop;</p>\n<p><img src=\"https://pic.imgdb.cn/item/6533ccf1c458853aef92497a.png\" alt=\"在这里插入图片描述\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;container&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> imgs = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;img&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">lazyLoad</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> scrollTop = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">scrollTop</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">scrollTop</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> winHeight = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; imgs.<span class=\"property\">lenght</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(imgs[i].<span class=\"property\">offsetTop</span> &lt; scrollTop + winHeight) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                imgs[i].<span class=\"property\">src</span> = imgs[i].<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;data-src&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">window</span>.<span class=\"property\">onsrcoll</span> = <span class=\"title function_\">lazyLoad</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["浏览器","性能优化"],"tags":["前端","浏览器","性能优化"]},{"title":"节流和防抖","url":"//web/lodash/dubounce.html","content":"<div id=\"vip-container\"><h4 id=\"对节流与防抖的理解\"><a href=\"#对节流与防抖的理解\" class=\"headerlink\" title=\"对节流与防抖的理解\"></a>对节流与防抖的理解</h4><p>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件<br>又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因<br>为用户的多次点击向后端发送多次请求。<br>函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发<br>事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只<br>有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件<br>节流来降低事件调用的频率。</p>\n<p>防抖函数的应用场景：</p>\n<ul>\n<li>按钮提交场景：防止多次提交按钮，只执行最后一次提交</li>\n<li>服务端验证场景： 表达验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有索联想词功能类似生存环境可以使用lodash.debounce</li>\n</ul>\n<p>节流函数的适用场景：</p>\n<ul>\n<li>拖拽场景：固定实际内只执行一次，防止超高频次触发位置变动</li>\n<li>缩放场景：监控浏览器resize</li>\n<li>动画场景：避免短时间内多次触发动画引起性能问题</li>\n</ul>\n<h4 id=\"实现节流函数和防抖函数\"><a href=\"#实现节流函数和防抖函数\" class=\"headerlink\" title=\"实现节流函数和防抖函数\"></a>实现节流函数和防抖函数</h4><h5 id=\"函数防抖的实现\"><a href=\"#函数防抖的实现\" class=\"headerlink\" title=\"函数防抖的实现\"></a>函数防抖的实现</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>, args = [...<span class=\"variable language_\">arguments</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 如果此时存在定时器则取消之前的定时器重新计时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数节流的实现\"><a href=\"#函数节流的实现\" class=\"headerlink\" title=\"函数节流的实现\"></a>函数节流的实现</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 时间戳版</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> preTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> context = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">        args = [...<span class=\"variable language_\">arguments</span>],</span><br><span class=\"line\">        nowTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果两次时间间隔超过了指定时间，则执行函数。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nowTime - preTime &gt;= delay) &#123;</span><br><span class=\"line\">            preTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定时器版</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fu, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">        args = [...<span class=\"variable language_\">arguments</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                fu.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">                <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["浏览器","性能优化"],"tags":["前端","浏览器","性能优化"]},{"title":"浅谈回流与重绘","url":"//web/reflux/and/redrawing.html","content":"<div id=\"vip-container\"><h5 id=\"回流\"><a href=\"#回流\" class=\"headerlink\" title=\"回流\"></a>回流</h5><p>当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。<br>下面这些操作会导致回流：</p>\n<ul>\n<li>页面的首次渲染</li>\n<li>浏览器的窗口大小发生变化</li>\n<li>元素的内容发生变化</li>\n<li>元素的尺寸或者位置发生变化</li>\n<li>元素的字体大小发生变化</li>\n<li>激活 CSS 伪类</li>\n<li>查询某些属性或者调用某些方法</li>\n<li>添加或者删除可见的 DOM 元素</li>\n</ul>\n<p>在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的 DOM 元素重新排列，它的影响范围有两种：<br>全局范围：从根节点开始，对整个渲染树进行重新布局<br>局部范围：对渲染树的某部分或者一个渲染对象进行重新布局</p>\n<h5 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h5><p>当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是重绘。</p>\n<p>下面这些操作会导致重绘：<br>color、background 相关属性：background-color、background-image等<br>outline 相 关 属 性 ： outline-color 、outline-width、text-decoration<br>border-radius、visibility、box-shadow</p>\n<p>注意： 当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。</p>\n<h5 id=\"如何避免回流与重绘？\"><a href=\"#如何避免回流与重绘？\" class=\"headerlink\" title=\"如何避免回流与重绘？\"></a>如何避免回流与重绘？</h5><p>减少回流与重绘的措施：</p>\n<p>操作 DOM 时，尽量在低层级的 DOM 节点进行操作不要使用 table 布局， 一个小的改动可能会使整个table 进行重新布局</p>\n<p>使用 CSS 的表达式</p>\n<p>不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</p>\n<p>使用 absolute 或者 fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素</p>\n<p>避免频繁操作 DOM，可以创建一个文档片段documentFragment，在它上面应用所有 DOM 操作，最后再把它添加到文档中</p>\n<p>将元素先设置 display: none，操作结束后再把它显示出来。因为在display 属性为 none 的元素上进行的 DOM 操作不会引发回流和重绘。将 DOM 的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。</p>\n<p>浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。</p>\n<p>上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["浏览器","性能优化"],"tags":["前端","浏览器","性能优化"]},{"title":"如何⽤webpack 来优化前端性能?","url":"//web/webpack/perform.html","content":"<div id=\"vip-container\"><h5 id=\"如何⽤webpack-来优化前端性能？\"><a href=\"#如何⽤webpack-来优化前端性能？\" class=\"headerlink\" title=\"如何⽤webpack 来优化前端性能？\"></a>如何⽤webpack 来优化前端性能？</h5><p>⽤webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。</p>\n<ul>\n<li>压缩代码：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩 css；</li>\n<li>利⽤CDN 加速: 在构建过程中，将引⽤的静态资源路径修改为 CDN 上对应的路径。可以利⽤webpack 对于 output 参数和各 loader 的publicPath 参数来修改资源路径；</li>\n<li>Tree Shaking: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动 webpack 时追加参数 –optimize-minimize 来实现；</li>\n<li>Code Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存；</li>\n<li>提取公共第三⽅库: SplitChunksPlugin 插件来进⾏公共模块抽取, 利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码。</li>\n</ul>\n<h5 id=\"如何提⾼webpack-的构建速度？\"><a href=\"#如何提⾼webpack-的构建速度？\" class=\"headerlink\" title=\"如何提⾼webpack 的构建速度？\"></a>如何提⾼webpack 的构建速度？</h5><ol>\n<li>多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码；</li>\n<li>通过 externals 配置来提取常⽤库；</li>\n<li>利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过DllPlugin 来对那些我们引⽤但是绝对不会修改的 npm 包来进⾏预编译，再通过DllReferencePlugin 将预编译的模块加载进来；</li>\n<li>使⽤ Happypack 实现多线程加速编译；</li>\n<li>使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。原理上 webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度；</li>\n<li>使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码。</li>\n</ol>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["浏览器","性能优化"],"tags":["前端","浏览器","性能优化","Webpack","插件"]},{"title":"type 的使用","url":"//typescript/use/type.html","content":"<div id=\"vip-container\"><h4 id=\"type-的使用\"><a href=\"#type-的使用\" class=\"headerlink\" title=\"type 的使用\"></a>type 的使用</h4><p>作用 : 给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 )</p>\n<h5 id=\"1-类型别名\"><a href=\"#1-类型别名\" class=\"headerlink\" title=\"1. 类型别名\"></a>1. 类型别名</h5><p><strong>语法 :</strong> <code>type 别名 = 类型</code></p>\n<p><strong>实例 :</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">St</span> = <span class=\"built_in\">string</span> <span class=\"comment\">// 定义</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str1</span>:<span class=\"title class_\">St</span> = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str2</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-自定义类型\"><a href=\"#2-自定义类型\" class=\"headerlink\" title=\"2.自定义类型\"></a>2.自定义类型</h5><p><strong>语法 :</strong> <code>type 别名 = 类型 | 类型1 | 类型2</code></p>\n<p><strong>实例 :</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> <span class=\"comment\">// 定义类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">NewType</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"title class_\">NewType</span> = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-泛型定义\"><a href=\"#3-泛型定义\" class=\"headerlink\" title=\"3.泛型定义\"></a>3.泛型定义</h5><p><strong>语法</strong>： <code>type 别名&lt;T&gt; = 类型&lt;T&gt; | 类型1&lt;T&gt; | 类型2&lt;T&gt;</code></p>\n<p><strong>实例</strong> :</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>: T</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> a : <span class=\"title class_\">NewType</span>&lt;<span class=\"built_in\">number</span>&gt; = &#123; <span class=\"attr\">name</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> b : <span class=\"title class_\">NewType</span>&lt;<span class=\"built_in\">string</span>&gt; = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;0&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"4-联合类型-相当于继承类型\"><a href=\"#4-联合类型-相当于继承类型\" class=\"headerlink\" title=\"4.联合类型(相当于继承类型)\"></a>4.联合类型(相当于继承类型)</h5><p><strong>语法</strong>：<code>type 别名 = 类型 &amp; 类型1 &amp; 类型2</code></p>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Job</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">jobs</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo</span> = <span class=\"title class_\">User</span> &amp; <span class=\"title class_\">Job</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["前端","TypeScript"],"tags":["前端","TypeScript"]},{"title":"nrm 管理 npm registry","url":"//web/npm/nrm.html","content":"<div id=\"vip-container\"><h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><p><code>npm install -g nrm</code></p>\n<h4 id=\"nrm-ls\"><a href=\"#nrm-ls\" class=\"headerlink\" title=\"nrm ls\"></a>nrm ls</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br><span class=\"line\"></span><br><span class=\"line\">npm ---------- https://registry.npmjs.org/</span><br><span class=\"line\">yarn --------- https://registry.yarnpkg.com/</span><br><span class=\"line\">tencent ------ https://mirrors.cloud.tencent.com/npm/</span><br><span class=\"line\">cnpm --------- https://r.cnpmjs.org/</span><br><span class=\"line\">taobao ------- https://registry.npmmirror.com/</span><br><span class=\"line\">npmMirror ---- https://skimdb.npmjs.com/registry/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"nrm-use\"><a href=\"#nrm-use\" class=\"headerlink\" title=\"nrm use\"></a>nrm use</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm use taobao</span><br><span class=\"line\">Registry has been set to: https://registry.npmmirror.com/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Usage: nrm [options] [command]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -V, --version                           output the version number</span><br><span class=\"line\">  -h, --help                              output usage information</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  ls                                      List all the registries</span><br><span class=\"line\">  current [options]                       Show current registry name or URL</span><br><span class=\"line\">  use &lt;registry&gt;                          Change registry to registry</span><br><span class=\"line\">  add &lt;registry&gt; &lt;url&gt; [home]             Add one custom registry</span><br><span class=\"line\">  login [options] &lt;registryName&gt; [value]  Set authorize information for a custom registry with a base64 encoded string or username and pasword</span><br><span class=\"line\">  set-hosted-repo &lt;registry&gt; &lt;value&gt;      Set hosted npm repository for a custom registry to publish packages</span><br><span class=\"line\">  set-scope &lt;scopeName&gt; &lt;value&gt;           Associating a scope with a registry</span><br><span class=\"line\">  del-scope &lt;scopeName&gt;                   Remove a scope</span><br><span class=\"line\">  set [options] &lt;registryName&gt;            Set custom registry attribute</span><br><span class=\"line\">  rename &lt;registryName&gt; &lt;newName&gt;         Set custom registry name</span><br><span class=\"line\">  del &lt;registry&gt;                          Delete one custom registry</span><br><span class=\"line\">  home &lt;registry&gt; [browser]               Open the homepage of registry with optional browser</span><br><span class=\"line\">  publish [options] [&lt;tarball&gt;|&lt;folder&gt;]  Publish package to current registry if current registry is a custom registry.</span><br><span class=\"line\">   if you&#x27;re not using custom registry, this command will run npm publish directly</span><br><span class=\"line\">  test [registry]                         Show response time for specific or all registries</span><br><span class=\"line\">  help                                    Print this help </span><br><span class=\"line\">   if you want to clear the NRM configuration when uninstall you can execute &quot;npm uninstall nrm -g -C or npm uninstall nrm -g --clean&quot;</span><br></pre></td></tr></table></figure></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["前端","npm"],"tags":["前端","npm","nrm"]},{"title":"nvm 管理node版本","url":"//web/npm/nvm.html","content":"<div id=\"vip-container\"><h4 id=\"Windows-上安装\"><a href=\"#Windows-上安装\" class=\"headerlink\" title=\"Windows 上安装\"></a>Windows 上安装</h4><p><a href=\"https://github.com/nvm-sh/nvm\">nvm_github</a></p>\n<ol>\n<li>点击 “Code” 按钮，然后选择 “Download ZIP” 下载 ZIP 文件。</li>\n<li>解压缩 ZIP 文件：解压缩下载的 ZIP 文件，将解压后的文件夹放在您想要安装 NVM 的位置。</li>\n<li>配置环境变量：打开命令提示符或 PowerShell，并运行以下命令来配置 NVM 的环境变量：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">setx NVM_HOME &quot;解压缩文件夹的完整路径&quot;</span><br><span class=\"line\">setx NVM_SYMLINK &quot;解压缩文件夹的完整路径&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Linux-上安装\"><a href=\"#Linux-上安装\" class=\"headerlink\" title=\"Linux 上安装\"></a>Linux 上安装</h4><ol>\n<li>下载 NVM 安装脚本：打开终端并运行以下命令下载 NVM 安装脚本：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>这将从 NVM GitHub 存储库下载并运行安装脚本。</p>\n<ol start=\"2\">\n<li>配置 NVM 环境变量：安装脚本运行后，会将 NVM 相关的路径和初始化脚本添加到您的个人配置文件（如 <del>&#x2F;.bashrc、</del>&#x2F;.zshrc 等）。要使这些更改生效，可以运行以下命令：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>如果您使用的是其他 Shell，替换 ~&#x2F;.bashrc 为您实际使用的配置文件。</p>\n<h4 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装node-js-版本\"><a href=\"#安装node-js-版本\" class=\"headerlink\" title=\"安装node.js 版本\"></a>安装node.js 版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm install &lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>例如</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm install 16.13.0</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后，NVM 会自动将该版本设置为默认版本。</p>\n<h4 id=\"切换版本\"><a href=\"#切换版本\" class=\"headerlink\" title=\"切换版本\"></a>切换版本</h4><p>切换 Node.js 版本：如果您有多个安装的 Node.js 版本，可以使用以下命令切换不同的版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>例如</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm use 18.16.0</span><br></pre></td></tr></table></figure>\n\n<p>这将将您的当前 Shell 会话设置为使用指定的 Node.js 版本。</p>\n<h4 id=\"查询当前版本\"><a href=\"#查询当前版本\" class=\"headerlink\" title=\"查询当前版本\"></a>查询当前版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm use node</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询当前node路径\"><a href=\"#查询当前node路径\" class=\"headerlink\" title=\"查询当前node路径\"></a>查询当前node路径</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm which 18.16.0</span><br><span class=\"line\">/Users/shaosong/.nvm/versions/node/v18.16.0/bin/node</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"listing-Version\"><a href=\"#listing-Version\" class=\"headerlink\" title=\"listing Version\"></a>listing Version</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置默认version\"><a href=\"#设置默认version\" class=\"headerlink\" title=\"设置默认version\"></a>设置默认version</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm alias default 18.16.0</span><br></pre></td></tr></table></figure>\n\n<p>现在，您已经在 Linux 上成功安装了 NVM。您可以使用 nvm use 命令切换不同的 Node.js 版本，并使用 node 和 npm 命令来管理您的 Node.js 环境。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["前端","npm"],"tags":["前端","npm","nvm"]},{"title":"docker-compose install","url":"//linux/install/docker-compose.html","content":"<div id=\"vip-container\"><h3 id=\"Curl-下载\"><a href=\"#Curl-下载\" class=\"headerlink\" title=\"Curl 下载\"></a>Curl 下载</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改权限\"><a href=\"#修改权限\" class=\"headerlink\" title=\"修改权限\"></a>修改权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查询版本\"><a href=\"#查询版本\" class=\"headerlink\" title=\"查询版本\"></a>查询版本</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>需要将运行yml 命名为 docker-compose.yml</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["linux","docker-compose"],"tags":["前端","linux","docker-compose"]},{"title":"Docker 安装Redis","url":"//linux/docker/redis.html","content":"<div id=\"vip-container\"><h3 id=\"下载redis-镜像\"><a href=\"#下载redis-镜像\" class=\"headerlink\" title=\"下载redis 镜像\"></a>下载redis 镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull redis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动镜像并同步数据\"><a href=\"#启动镜像并同步数据\" class=\"headerlink\" title=\"启动镜像并同步数据\"></a>启动镜像并同步数据</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -itd --name redis -p 6379:6379 \\</span><br><span class=\"line\"> --restart=always \\</span><br><span class=\"line\"> -v /home/xt/redis/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\"> -v /home/xt/redis/data:/data \\</span><br><span class=\"line\"> redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加密码\"><a href=\"#添加密码\" class=\"headerlink\" title=\"添加密码\"></a>添加密码</h3><h4 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker exec -it 04f824eaf3800958615a9874084ea6d57ab346cd61723a1eb54074a9477f1efe /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>在Redis命令行中，我们可以使用config set命令来设置Redis的密码。以下是设置密码的代码和注释。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">config set requirepass your_password</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启Redis容器\"><a href=\"#重启Redis容器\" class=\"headerlink\" title=\"重启Redis容器\"></a>重启Redis容器</h3><p>完成上述步骤后，我们需要重启Redis容器使密码生效。可以使用以下命令重启Redis容器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker restart 04f824eaf3800958615a9874084ea6d57ab346cd61723a1eb54074a9477f1efe</span><br></pre></td></tr></table></figure></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["linux","docker","redis"],"tags":["前端","linux","docker， redis"]},{"title":"ubantu use wechat","url":"//linux/install/wechat.html","content":"<div id=\"vip-container\"><h3 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install docker.io</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull bestwu/wechat</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"允许所有用户访问图形界面\"><a href=\"#允许所有用户访问图形界面\" class=\"headerlink\" title=\"允许所有用户访问图形界面\"></a>允许所有用户访问图形界面</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">xhost +</span><br></pre></td></tr></table></figure>\n\n<p>注意，这条命令可能会提示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">access control disabled, clients can connect from any host</span><br></pre></td></tr></table></figure>\n\n<p>看到这样的提示信息，表示命令执行成功，不是什么报错信息。</p>\n<h3 id=\"创建Docker容器\"><a href=\"#创建Docker容器\" class=\"headerlink\" title=\"创建Docker容器\"></a>创建Docker容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name wechat\\</span><br><span class=\"line\">    --device /dev/snd\\</span><br><span class=\"line\">    --ipc=host\\</span><br><span class=\"line\">    -v /tmp/.X11-unix:/tmp/.X11-unix\\</span><br><span class=\"line\">    -v /home/batype/WeChatFiles:/WeChatFiles\\</span><br><span class=\"line\">    -v /home/batype:/batype\\</span><br><span class=\"line\">    -e DISPLAY=unix$DISPLAY\\</span><br><span class=\"line\">    -e XMODIFIERS=@im=fcitx\\</span><br><span class=\"line\">    -e QT_IM_MODULE=fcitx\\</span><br><span class=\"line\">    -e GTK_IM_MODULE=fcitx\\</span><br><span class=\"line\">    -e GID=`id -g`\\</span><br><span class=\"line\">    -e UID=`id -u`\\</span><br><span class=\"line\">    bestwu/wechat</span><br></pre></td></tr></table></figure>\n\n<p>注意！注意！注意！上述代码不能直接使用，需要一定的修改！！！</p>\n<ul>\n<li><p>将代码中的batype改成自己的用户名！！！</p>\n</li>\n<li><p>如果你是ibus输入法，将代码中的fcitx改成ibus！！！</p>\n</li>\n</ul>\n<h3 id=\"等待微信启动\"><a href=\"#等待微信启动\" class=\"headerlink\" title=\"等待微信启动\"></a>等待微信启动</h3><p>注意！！！当你执行完docker run之后，大约需要等待1-2分钟后，才会弹出微信的登录窗口。一定要有信心，有耐心，不要放弃，要耐心等待1-2分钟！</p>\n<p>等待完成后，即可看到微信的登录界面，扫码登录即可尽情使用！</p>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><h4 id=\"微信的字体特别小\"><a href=\"#微信的字体特别小\" class=\"headerlink\" title=\"微信的字体特别小\"></a>微信的字体特别小</h4><p>安装完 Docker 微信后，字特别小，根本看不清，太费眼睛。</p>\n<p>解决方法：</p>\n<ol>\n<li>进入容器内部</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker exec -it wechat bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>切换到wechat用户（此步骤不可省略，否则下面的步骤无法进行！！！）</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">su wechat</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>打开配置</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">WINEPREFIX=~/.deepinwine/Deepin-WeChat/ deepin-wine winecfg</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在弹出窗口中，打开“显示”选项卡，找到最下面“屏幕分辨率”，改成200dpi即可。</li>\n</ol>\n<h4 id=\"运行微信之后，出现一个wine-system-tray的小窗口\"><a href=\"#运行微信之后，出现一个wine-system-tray的小窗口\" class=\"headerlink\" title=\"运行微信之后，出现一个wine system tray的小窗口\"></a>运行微信之后，出现一个wine system tray的小窗口</h4><p>这是wine的系统栏，是正常现象，其实可以把那个窗口关掉，没什么影响。</p>\n<h4 id=\"我不小心把微信的窗口叉掉了，怎么办\"><a href=\"#我不小心把微信的窗口叉掉了，怎么办\" class=\"headerlink\" title=\"我不小心把微信的窗口叉掉了，怎么办\"></a>我不小心把微信的窗口叉掉了，怎么办</h4><p>执行下面命令即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker restart wechat -t 0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"无法输入中文\"><a href=\"#无法输入中文\" class=\"headerlink\" title=\"无法输入中文\"></a>无法输入中文</h4><p>这是因为你使用的是ibus输入法，而你未将启动命令中的ibus改成fcitx。</p>\n<h4 id=\"播放视频没有声音\"><a href=\"#播放视频没有声音\" class=\"headerlink\" title=\"播放视频没有声音\"></a>播放视频没有声音</h4><p>首先删掉容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rm -f wechat</span><br></pre></td></tr></table></figure>\n\n<p>然后重新运行一个</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name wechat\\</span><br><span class=\"line\">    --device /dev/snd\\</span><br><span class=\"line\">    --ipc=host\\</span><br><span class=\"line\">    -v /tmp/.X11-unix:/tmp/.X11-unix\\</span><br><span class=\"line\">    -v /home/batype/WeChatFiles:/WeChatFiles\\</span><br><span class=\"line\">    -v /home/batype:/batype\\</span><br><span class=\"line\">    -e DISPLAY=unix$DISPLAY\\</span><br><span class=\"line\">    -e XMODIFIERS=@im=fcitx\\</span><br><span class=\"line\">    -e QT_IM_MODULE=fcitx\\</span><br><span class=\"line\">    -e GTK_IM_MODULE=fcitx\\</span><br><span class=\"line\">    -e AUDIO_GID=`getent group audio | cut -d: -f3`\\</span><br><span class=\"line\">    -e GID=`id -g`\\</span><br><span class=\"line\">    -e UID=`id -u`\\</span><br><span class=\"line\">    bestwu/wechat</span><br></pre></td></tr></table></figure>\n<p>注意，加了这一行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">-e AUDIO_GID=`getent group audio | cut -d: -f3`\\</span><br></pre></td></tr></table></figure>\n\n<p>这样的话，播放视频就有声音了。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["linux","wechat"],"tags":["前端","linux","wechat"]},{"title":"webpack 热更新的实现原理","url":"//web/webpack/hot/module/replacement.html","content":"<div id=\"vip-container\"><p>webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。<br>原理：<br><img src=\"https://pic.imgdb.cn/item/65366aa5c458853aefbf449c.png\" alt=\"在这里插入图片描述\"></p>\n<p>⾸先要知道 server 端和 client 端都做了处理⼯作：</p>\n<ol>\n<li>在 webpack 的 watch 模式下，⽂件系统中某⼀个⽂件发⽣修改，webpack 监听到⽂件变化，根据配置⽂件对模块重新编译打包，并将打包后的代码通过简单的JavaScript对象保存在内存中。</li>\n<li>webpack-dev-server 和 webpack 之间的接⼝交互，⽽在这⼀步，主要是 dev-server 的中间件webpack- dev-middleware和 webpack 之间的交互，webpack-dev-middleware 调⽤webpack暴露的 API 对代码变化进⾏监 控，并且告诉webpack，将代码打包到内存中。</li>\n<li>webpack-dev-server 对⽂件变化的⼀个监控，这⼀步不同于第⼀步，并不是监控代码变化重新打包。当我们在配置⽂件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置⽂件夹中静态⽂件的变化，变化后会通知浏览器端对应⽤进⾏ live reload。注意，这⼉是浏览器刷新，和HMR 是两个概念。</li>\n<li>webpack-dev-server 代码的⼯作，该步骤主要是通过sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建⽴⼀个 websocket ⻓连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中Server 监听静态⽂件变化的信息。浏览器端根据这些 socket 消息进⾏不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后⾯的步骤根据这⼀hash 值来进⾏模块热替换。</li>\n<li>webpack-dev-server&#x2F;client 端并不能够请求更新的代码，也不会执⾏ 热 更 模 块 操 作 ， ⽽ 把 这 些 ⼯ 作⼜交回给了webpack，webpack&#x2F;hot&#x2F;dev-server 的 ⼯ 作就是根据webpack-dev-server&#x2F;client 传给它的信息以及dev-server的配置决定是刷新浏览器呢还是进⾏模块热更新。当然如果仅仅是刷新浏览器，也就没有后⾯那些步骤了。</li>\n<li>HotModuleReplacement.runtime 是客户端HMR 的中枢，它接收到上⼀ 步 传 递 给 他 的 新 模 块 的hash 值，它通过JsonpMainTemplate.runtime 向 server 端发送Ajax 请求，服务端返回⼀个 json，该 json 包含了所有要更新的模块的hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。</li>\n<li>⽽第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进⾏对⽐，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引⽤。</li>\n</ol>\n<p>最后⼀步，当 HMR 失败后，回退到 live reload 操作，也就是进⾏浏览器刷新来获取最新打包代码。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["前端","WebPack"],"tags":["前端","浏览器","WebPack"]},{"title":"unstate-next 的实现原理","url":"//react/components/unstate-next-implement.html","content":"<div id=\"vip-container\"><h4 id=\"定义实现Container接口\"><a href=\"#定义实现Container接口\" class=\"headerlink\" title=\"定义实现Container接口\"></a>定义实现Container接口</h4><p>需要实现包装方法和获取数据的hooks</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"title class_\">Provider</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;<span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span>&gt;&gt;;</span><br><span class=\"line\"><span class=\"attr\">useContainer</span>: <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义实现Provider接口\"><a href=\"#定义实现Provider接口\" class=\"headerlink\" title=\"定义实现Provider接口\"></a>定义实现Provider接口</h4><p>定义接口需要初始化参数和需要使用的子节点。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ContainerProviderProps 定义类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">State</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">initialState</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">React.ReactNode</span>&#125; <span class=\"variable\">children</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span> = <span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">initialState?: <span class=\"title class_\">State</span>;</span><br><span class=\"line\"><span class=\"attr\">children</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"createContainer-方法\"><a href=\"#createContainer-方法\" class=\"headerlink\" title=\"createContainer 方法\"></a>createContainer 方法</h4><p>在 <code>createContainer</code> 方法中，使用后会返回两个方法 <code>Provider</code> 和 <code>useContainer</code>。</p>\n<p>步骤：</p>\n<ol>\n<li>使用React.createContext 创建Context；</li>\n<li>自定义hooks 获取属性；</li>\n<li>需要使用Context 子组件使用Provider 包装， 将数据写入Context；</li>\n<li>使用React.useContext 从 Context 中获取属性</li>\n</ol>\n<figure class=\"highlight tsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> createContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">useHook</span>: <span class=\"function\">(<span class=\"params\">initialState?: State</span>) =&gt;</span> <span class=\"title class_\">Value</span></span><br><span class=\"line\">): <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"comment\">// 使用React.createContext 创建Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title class_\">React</span>.<span class=\"property\">createContext</span>&lt;<span class=\"title class_\">Value</span> | <span class=\"keyword\">typeof</span> <span class=\"variable constant_\">EMPTY</span>&gt;(<span class=\"variable constant_\">EMPTY</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Provider</span>(<span class=\"params\">props: ContainerProviderProps&lt;State&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义hooks 获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title function_\">useHook</span>(props.<span class=\"property\">initialState</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要使用Context 子组件使用Provider 包装， 将数据写入Context。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span>&gt;</span>&#123;props?.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useContainer</span>(<span class=\"params\"></span>): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用React.useContext 从 Context 中获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title class_\">React</span>.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"variable constant_\">EMPTY</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Component must be wrapped with &lt;Container.Provider&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Provider</span>,</span><br><span class=\"line\">    useContainer,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useContainer\"><a href=\"#useContainer\" class=\"headerlink\" title=\"useContainer\"></a>useContainer</h4><p>使用useContainer 从 Container 中直接获取属性。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">container</span>: <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> container.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"unstate-next-使用\"><a href=\"#unstate-next-使用\" class=\"headerlink\" title=\"unstate-next 使用\"></a><a href=\"./unstate-next-use.html\">unstate-next 使用</a></h4><h4 id=\"实现code\"><a href=\"#实现code\" class=\"headerlink\" title=\"实现code\"></a>实现code</h4><figure class=\"highlight tsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">EMPTY</span>: unique <span class=\"built_in\">symbol</span> = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ContainerProviderProps 定义类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">State</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">initialState</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">React.ReactNode</span>&#125; <span class=\"variable\">children</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span> = <span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">initialState?: <span class=\"title class_\">State</span>;</span><br><span class=\"line\"><span class=\"attr\">children</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"title class_\">Provider</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;<span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span>&gt;&gt;;</span><br><span class=\"line\"><span class=\"attr\">useContainer</span>: <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Value</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> createContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">useHook</span>: <span class=\"function\">(<span class=\"params\">initialState?: State</span>) =&gt;</span> <span class=\"title class_\">Value</span></span><br><span class=\"line\">): <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"comment\">// 使用React.createContext 创建Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title class_\">React</span>.<span class=\"property\">createContext</span>&lt;<span class=\"title class_\">Value</span> | <span class=\"keyword\">typeof</span> <span class=\"variable constant_\">EMPTY</span>&gt;(<span class=\"variable constant_\">EMPTY</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Provider</span>(<span class=\"params\">props: ContainerProviderProps&lt;State&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义hooks 获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title function_\">useHook</span>(props.<span class=\"property\">initialState</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要使用Context 子组件使用Provider 包装， 将数据写入Context。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span>&gt;</span>&#123;props?.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useContainer</span>(<span class=\"params\"></span>): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用React.useContext 从 Context 中获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title class_\">React</span>.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"variable constant_\">EMPTY</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Component must be wrapped with &lt;Container.Provider&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Provider</span>,</span><br><span class=\"line\">    useContainer,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">container</span>: <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> container.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["React","components","unstate-next"],"tags":["前端","react","TypeScript","unstate-next"]},{"title":"unstate-next 的使用","url":"//react/components/unstate-next-use.html","content":"<div id=\"vip-container\"><h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><p><a href=\"https://gitcode.net/qq_35490191/React-TypeScript\">Code-Test</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save unstated-next</span><br><span class=\"line\"></span><br><span class=\"line\">yarn add unstated-next</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"createContainer\"><a href=\"#createContainer\" class=\"headerlink\" title=\"createContainer\"></a>createContainer</h4><figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;unstated-next&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">useCounter</span> = (<span class=\"params\">props: <span class=\"built_in\">any</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; initNum &#125; = props;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [num, changeNum] = useState&lt;<span class=\"built_in\">number</span>&gt;(initNum);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">decrement</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">changeNum</span>(num - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">increment</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">changeNum</span>(num + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;num, decrement, increment&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Counter</span> = <span class=\"title function_\">createContainer</span>(useCounter);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"use-Provider-initialState\"><a href=\"#use-Provider-initialState\" class=\"headerlink\" title=\"use Provider &amp;&amp; initialState\"></a>use Provider &amp;&amp; initialState</h4><figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./App.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Context&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">TestCounter</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./TestCounter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter.Provider</span> <span class=\"attr\">initialState</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">initNum:</span> <span class=\"attr\">1</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">TestCounter</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Counter.Provider</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useContainer\"><a href=\"#useContainer\" class=\"headerlink\" title=\"useContainer\"></a>useContainer</h4><h5 id=\"TestCounter\"><a href=\"#TestCounter\" class=\"headerlink\" title=\"TestCounter\"></a>TestCounter</h5><figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Context&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">TestChild</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./TestChild&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">TestCounter</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; num, decrement &#125; = <span class=\"title class_\">Counter</span>.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;decrement&#125;</span>&gt;</span>减法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">TestChild</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"TestChild\"><a href=\"#TestChild\" class=\"headerlink\" title=\"TestChild\"></a>TestChild</h5><figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Context&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">TestChild</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; num, increment &#125; = <span class=\"title class_\">Counter</span>.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;num&#125; <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increment&#125;</span>&gt;</span>加法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","categories":["React","components","unstate-next"],"tags":["前端","react","TypeScript","unstate-next"]},{"title":"archives","url":"/archives/index.html","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t"},{"title":"404","url":"//404.html","content":"<div id=\"vip-container\"><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗</span><br><span class=\"line\">██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝</span><br><span class=\"line\">███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║</span><br><span class=\"line\">╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║</span><br><span class=\"line\">     ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║</span><br><span class=\"line\">     ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">    ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗</span><br><span class=\"line\">    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗</span><br><span class=\"line\">    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║</span><br><span class=\"line\">    ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║</span><br><span class=\"line\">    ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝</span><br><span class=\"line\">    ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝</span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t"},{"title":"categories","url":"/categories/index.html","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t"},{"title":"有关于我","url":"//about/me.html","content":"<div id=\"vip-container\"><hr>\n<h4 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h4><ul>\n<li>性 别：男 \t\t\t\t\t\t\t\t\t\t\t  年 龄：27</li>\n<li>手 机：15594555052                           邮 箱：<a href=\"mailto:&#56;&#64;&#98;&#97;&#116;&#x79;&#112;&#x65;&#x2e;&#x63;&#x6f;&#x6d;\">&#56;&#64;&#98;&#97;&#116;&#x79;&#112;&#x65;&#x2e;&#x63;&#x6f;&#x6d;</a></li>\n<li>专 业：计算机科学与技术                    岗 位：研发工程师</li>\n</ul>\n<hr>\n<h4 id=\"工作及教育经历\"><a href=\"#工作及教育经历\" class=\"headerlink\" title=\"工作及教育经历\"></a>工作及教育经历</h4><ul>\n<li>博彦科技：前端开发⼯程师 \t\t\t\t\t           2021.08.16 ~ 至今</li>\n<li>神玥软件：软件开发⼯程师部⻔技术负责⼈\t             2019.07.03 ~  2021.08.13</li>\n<li>安康学院 \t\t\t\t\t \t\t\t\t\t           2015.09.01 ~ 2019.06.24</li>\n</ul>\n<hr>\n<h4 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h4><ul>\n<li>熟练使用：React、JavaScript、HTML、CSS、TypeScript、Java</li>\n<li>前端框架：Taro-UI、JQuery、Echarts、Antd、ThreeJS</li>\n<li>前端服务层：Mobx、Redux</li>\n<li>前端请求服务：Axios、Ajax、fetch</li>\n<li>前端资源加载&#x2F;打包⼯具：Webpack 、UmiJS、Vite</li>\n<li>后端微服务框架：SpringBoot</li>\n<li>后端服务框架：SpringMVC、Struct2</li>\n<li>后端Jdbc层：MyBatis、Hibernate</li>\n<li>框架：Django、Pillow、requests、urllib3、bs4、Selemiun、lxml</li>\n<li>数据库：MySQL、Oracle、Redis、SqLite、memcache</li>\n<li>服务器：Tomcat、Nginx</li>\n<li>算法：快速排序、深度优先策略、贪心算法</li>\n</ul>\n<hr>\n<h4 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h4><ol>\n<li><p>博彦科技 - 某某云开发平台 - 2021年9⽉⾄今</p>\n<ul>\n<li>职 责：主要负责项⽬开发、框架服务维护、⾃动化部署、处理程序紧急问题等职责</li>\n<li>内 容：在项⽬期间负责前端⻚⾯设计、开发、维护等。主要通过该项⽬对⾃⼰的个⼈技能有了⼀个较强的提升，对于⾃⼰的知识⾯有了⼀个更⾼层次的认知，使⽤第三⽅⼯具进⾏快速开发，采⽤React技术栈和其周边⼯具开发，项⽬架构采⽤umiJs + vite 协同开发模式。技术难度是项目系统结构复杂，系统代码老旧，改造升级难度大大增加。</li>\n</ul>\n</li>\n<li><p>神玥软件 - ⼴东动态监管平台 - 2020年6⽉⾄2021年7⽉</p>\n<ul>\n<li><p>职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责</p>\n</li>\n<li><p>内 容：在该项⽬中同样采⽤全后端分离架构，该项⽬中不同之处在于使⽤架构发⽣改变，增加使⽤接⼝获取数据、动态切换数据源等。</p>\n</li>\n<li><p>项⽬架构：</p>\n<p>前端+展示服务后台+数据抓取服务端+定时器数据处理服务端+接⼝获取数据端+第三⽅数据获取服务端组成。</p>\n<p>在前端开发中，项⽬使⽤4层架构进程⻚⾯处理，临时数据存储使⽤session进⾏，使⽤有效⻚⾯数据传输保证⻚⾯独⽴性、依赖性降低、项⽬可扩展性增加、便与开发进⾏。</p>\n<p>在定时器数据处理服务端不同之处，在于其需要兼容多中不同数据源，主要包oracle、db2(及其as400版本)、MySQL等，兼容其不同语法进⾏处理，连接⼯具类处理，初始化连接等问题，后台数据报⽂传输使⽤某某加密⽅式实现。</p>\n<p>第三⽅接⼝程序实现主要是提供于第三⽅进⾏对接数据，汇总返回数据，进⾏数据统计，完成展示。</p>\n</li>\n<li><p>技 术：React、antd、Spring、SpringBoot、mybatis、SpringSecurity、oauth2、Sqlite、MySQL、redis等。</p>\n</li>\n</ul>\n</li>\n<li><p>神玥软件 - 公积⾦监督管理云平台 - 2019年8⽉⾄2020年5⽉</p>\n<ul>\n<li><p>职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责</p>\n</li>\n<li><p>内 容：在公积⾦监督管理云平台开发中，使⽤前后端分离架构。</p>\n</li>\n<li><p>项⽬架构： 前端+展示服务后台+数据抓取服务端+定时器数据处理服务端组成。在前端开发中，使⽤React开发框架辅助antd、amap、echarts、mobx、Axios等，借助webpack打包压缩⽂件等技术实现前端开发任务。</p>\n<p>在后端技术⽀撑⽅⾯使⽤SpringBoot微服务框架，进⾏数据展示层⾯服务服务端程序编写。</p>\n<p>在数据获取⽅⾯，数据均来⾃于各现场数据库，编写定时器服务端程序，使⽤频率为5 分钟到1⼩时不等等⽅法策略实现，适⽤于各种不同的核⼼版本库，通过sqlite轻量级数据库进⾏数据暂存，等待公司客户端服务器抓取数据，该技术由于公司限制使⽤该⽅法策略实现，在程序实现⽅⾯使⽤mybatis解析SQL⽅式编写，xml配置⽂件进⾏SQL配置，通过dao4j进⾏xml解析获取对应sql，使⽤XMLScriptBuilder进⾏获取SQL处理⽣成sqlSource资源，根据sqlSource获取boundSql对象获取编译后带有占位符资源对象，获取占位符信息数据，替换对应参数完成可执⾏sql。</p>\n<p>在数据抓取客户端使⽤5分钟频率去更新数据，实时抓取数据与数据可进⾏⽐较并且进⾏更新。</p>\n<p>对接使⽤微型前端服务框架，加载第三⽅服务程序。</p>\n</li>\n<li><p>技 术：React、antd、Spring、SpringBoot、mybatis、Sqlite、MySQL、redis等。</p>\n</li>\n</ul>\n</li>\n<li><p>个人项目 - 微信⼩程序API+停⻋场客户端编写 - 2018年11⽉⾄-2019年1⽉</p>\n<ul>\n<li>职 责：项⽬设计、需求、开发、部署等</li>\n<li>内 容：该项⽬主要使⽤微信⼩程序、Django框架、H5前端完成。后端基于Django框架，主要是在Django框架中进⾏setting.py 配置，url编写，数据库模型创建、映射⽂件，view视图编写，服务代码编写。Api返回数据序列化处理、json数据处理。进⾏停⻋场实时数据监控数据处理。并且使⽤window 2008 server R2 进⾏环境部署，服务器搭建使⽤ nginx+fastCGI+Django进⾏配置，使⽤https进⾏数据访问。</li>\n<li>职 责：负责编写model、admin、view、API编写、⽀付接⼝编写；</li>\n<li>开发⼯具、语⾔及框架：JetBrains PyCharm、MySQL、Dreamweaver、Photoshop、Python、Django、HTML、CSS、JavaScript、Ajax、jQuery、Bootstrap以及Python开源框架。</li>\n</ul>\n</li>\n<li><p>个人项目 - 爬取wikipedia深度为3的超链接</p>\n<ul>\n<li>内 容：Wikipedia 深度为3的所有URL资源链接的获取（1000万条记录），采取进程的⽅法进⾏访问Wikipedia，根据深度优先策略进⾏URL第⼆层资源遍历获取第三层URL资源。在数据处理过程中，使⽤request2技术获取源码、解析拦截⽆⽤⽂件，使⽤lxml技术进⾏分离出需要数据，并且检测出可⽤链接， 后进⾏URL保存到本地资源。</li>\n<li>难 点：在获取Wikipedia 网站数据的时候需要处理反爬虫、过滤网站数据、获取需要的资源进行解析。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"获奖经历\"><a href=\"#获奖经历\" class=\"headerlink\" title=\"获奖经历\"></a>获奖经历</h4><ul>\n<li>博彦科技 - 技术之星</li>\n<li>信息安全一级证书</li>\n</ul>\n<hr>\n<h4 id=\"⾃我评价\"><a href=\"#⾃我评价\" class=\"headerlink\" title=\"⾃我评价\"></a>⾃我评价</h4><ul>\n<li>爱 好：骑⾏、登⼭、旅游、⽻⽑球、篮球、乒乓球。</li>\n<li>评 价：在我的从事计算机⾏业学习到⼯作也有6年之久，从刚开始对计算机的感兴趣到现在的⼯作，以及它成为了我⽣活不可或缺的⼀部分，都是⼀个变化和不多学习的过程，在这个过程中，经历了太多太多的苦难，从刚开始的⼀窍不通到现在的应⽤⾃如以及更深层次的了解，都是在不断⾃学中成⻓起来。需要这般⾃学就必须要有⾃学的动⼒和持之以恒的坚持都是不可缺少的。学习过程中不断的纠正⾃⼰学的⽅向，处理存在的问题以及快速处理问题的解决⽅法，都是⼀个能⼒的提升。 后还有就是对这个⾏业的热爱。</li>\n</ul>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t"},{"title":"schedule","url":"/schedule/index.html","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t"},{"title":"docs","url":"/docs/index.html","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t"},{"title":"Tags","url":"/tags/index.html","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t"}]