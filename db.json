{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":0},{"_id":"source/images/wechat.png","path":"images/wechat.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/archives/index.md","hash":"e63c23a0226c3002f32f399a5b3cf19b4b641752","modified":1697706133376},{"_id":"source/404/index.md","hash":"e77c83bbdff405cbf6b14a62dc79719f28b612fb","modified":1697716819495},{"_id":"source/about/me.md","hash":"94f0f7483c3a48a1270f785c0ab0c13993111262","modified":1697899764216},{"_id":"source/categories/index.md","hash":"ffc022418310656814b0206206b01814f0e60ca1","modified":1697706133376},{"_id":"source/docs/index.md","hash":"ec5baed81099718554bd8d27d857b6a853a7a10c","modified":1697716819495},{"_id":"source/schedule/index.md","hash":"07fa856837db976496b9ceae93296a9218696856","modified":1697706133383},{"_id":"source/tags/index.md","hash":"40933bc5b996788d4bb00a662a74dce1b4879d8d","modified":1697896050419},{"_id":"source/_posts/browser/RestFulAndRPC.md","hash":"b6b0e774ca069bf713793d2ecc15546f20d8607c","modified":1698026115562},{"_id":"source/_posts/browser/NetworkHijack.md","hash":"d9007fd9affa08f4098ec9c25a59481db9a1ce18","modified":1698026115561},{"_id":"source/_posts/browser/mechanismCache.md","hash":"dc56461cf176bcb665fa0b209f92b982989fcab1","modified":1697896478597},{"_id":"source/_posts/browser/sessionCookies.md","hash":"2596304b8cf24e3deca0786669ee5ab48242a247","modified":1697969303922},{"_id":"source/_posts/browser/tabToTab.md","hash":"a7fc7f146f3fc078a22da17e72b934fcff069ce3","modified":1697896527490},{"_id":"source/_posts/browser/renderProcess.md","hash":"47abe2ff2d4fd94341d90020026d701e3ee0f647","modified":1697896487996},{"_id":"source/_posts/javascript/async-await.md","hash":"96298d75a783359a0c6b4361351a97c17e7d32f6","modified":1698026115568},{"_id":"source/_posts/javascript/prototype.md","hash":"01162a2c31c5073c497f7e0aa111626e3d766315","modified":1698225226018},{"_id":"source/_posts/hexo/pagination.md","hash":"5fc54efb4473ca9a5ec76f199b16f37d3f6d876d","modified":1698067644363},{"_id":"source/_posts/javascript/promise.md","hash":"004605de0876b27a3372bf0f87acadadbfe29906","modified":1698026115571},{"_id":"source/_posts/hexo/rss.md","hash":"2f13176689c353b701dcac1368ec89689cd3b2cc","modified":1697896446202},{"_id":"source/_posts/javascript/varLetConst.md","hash":"df4e144bf89b0682dd13b2822f537e942e67e3ef","modified":1698225226019},{"_id":"source/_posts/hexo/readmore.md","hash":"6e0c01e5463a2c14ea8ac6a9a91a7723965a9768","modified":1698064382357},{"_id":"source/_posts/react/fiberNode.md","hash":"88db9efced946ffb686eeeae584e85551e70c562","modified":1697896609549},{"_id":"source/_posts/react/fiberWorksHow.md","hash":"b3e2e24e00ac4b30923247951cded72207064d38","modified":1698412690726},{"_id":"source/_posts/react/fiber.md","hash":"5f91430c1af26440f1d0c5ac3b3900998704f3cd","modified":1698412690710},{"_id":"source/_posts/react/getServiceTime.md","hash":"4ed7456acc5065ff91d34d9404748c3aea3083f5","modified":1697896642379},{"_id":"source/_posts/typeScript/useType.md","hash":"5ddff659cacec884de571dca183cd76bad3138e6","modified":1698064382357},{"_id":"source/_posts/web/CrossSiteRequestForgeries.md","hash":"b3fbdf34bd0045771f2788610fa7f94653b1d54b","modified":1697897964690},{"_id":"source/_posts/react/react-synthetic-event.md","hash":"3a0feda388c8f59e9ee5ffd4c6bf3cca7ee82923","modified":1697896634266},{"_id":"source/_posts/react/fiberImplement.md","hash":"859622bcc906d618b0ee81f41c17ec9a5f0e86dc","modified":1698412690726},{"_id":"source/_posts/web/CrossSiteScript.md","hash":"d52ab059e3f5ff263cc6c503abd11e5723e26c6b","modified":1697897732698},{"_id":"source/_posts/web/WebSecurityQuestion.md","hash":"29ace8f4bcf6025471553eccff32c56aa6bbdaae","modified":1697897962875},{"_id":"source/_posts/web/lazyLoad.md","hash":"bb9d481d751433949b2a07b44c6942348f77c7c0","modified":1697896665049},{"_id":"source/_posts/web/imagePerform.md","hash":"0a14e056a1f5c256a80bf69dafbe81a78a0f5737","modified":1697896658086},{"_id":"source/_posts/web/lodashDebounce.md","hash":"488ae2656fd7c5977aa79be1b79da91f1804435f","modified":1697896669996},{"_id":"source/_posts/web/webpackPerform.md","hash":"7704f9684e4b30758efd601405212047ebb81ee4","modified":1697896680346},{"_id":"source/css/_custom/index.styl","hash":"dddc646bfdbcedd30e57227bbe2465f9677d2a51","modified":1697869219900},{"_id":"source/layout/_partials/head.njk","hash":"2ce71e4e4c79557a31172d1d071cd348800c61e6","modified":1698026115664},{"_id":"source/layout/_custom/sidebar.njk","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1697869566867},{"_id":"source/_posts/web/refluxAndRedrawing.md","hash":"3c8cd5cacc1fedf406c99c01ac0c81a769ea10e8","modified":1697896675821},{"_id":"source/css/_variables/index.styl","hash":"eeeeca335df536ba5b283887d3dcbb430767d26c","modified":1697805563715},{"_id":"source/layout/_custom/archive.njk","hash":"6a0b1b65995eef94ee8414bd4fab4057760105d2","modified":1698064382357},{"_id":"source/_posts/react/components/unstate-next/unstated-next.tsx","hash":"afea17a1781435bdad21853071547d95e623942a","modified":1698324644436},{"_id":"source/_posts/web/npm/nrm.md","hash":"b110079d8a6d59ec3a2efd6786f3784a913c8bc4","modified":1698324644436},{"_id":"source/_posts/react/components/unstate-next/unstated-next-implement.md","hash":"2abbeb166eb8351949c5bc7a20dd60c68d1fb167","modified":1698324644436},{"_id":"source/_posts/react/components/unstate-next/unstated-next-use.md","hash":"d619b37189b59217f5a88e07228f9dcfcfd41769","modified":1698324644436},{"_id":"source/_posts/web/webpack/hotModuleReplacement.md","hash":"119452a85853d31f8a4933752f1ea78b7081c57a","modified":1698065075814},{"_id":"source/_posts/web/npm/nvm.md","hash":"515ca6328e69ab1c1d912ea22aca8e6cbcd4e769","modified":1698324644451},{"_id":"source/images/wechat.png","hash":"da793db4762f2168f250202fb51f0c4150ccfb71","modified":1697706133382},{"_id":"source/images/alipay.png","hash":"0bb1d75a9b5d54e8b15cf9fe2e350c2b2fdbde8f","modified":1697706133381},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"bf0142e3cdb4c8da06e9aa971bc0bdf230f5db45","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/package.json","hash":"282d6226513c39ad97793596922da638475a5f66","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/README.md","hash":"d6820f46d03a93bd6dc8b10f49f58aec82ad2b06","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"dae3faa04648aeb0fd91961843a15122dcc73299","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"abda600685ee972e1f6b7a2dcc56f13e2daa6263","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"6fca18ed4234cf54146c2b3b97b0a6a3606ab33d","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"29c89a41b371f893e56c87ea61adabc444ec58cc","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"65e9112fb7eb26d2880db624554a99aca028140b","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"447db39d17775b2bd18d8af9c9d65b7b8449f751","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"12a3e96581964a22b474cc739675d52ef93ff932","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"ead37e9167b682f1fa34b5401c3050e18c7ee4a3","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"957241c28796ff352de7f4cffba7bb289b043586","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"6853e5433e3eaa19ea43fa20b08d956ba4cec4ac","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"464db1e7182e5b9cdbd32e8b5368d5e683b1d9c7","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"82cda756f5b7092df2eee6641b9786df71623bdb","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"7369928305330c73ae0b3f063a681a8384d8fde4","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"bbbc40b03cb299d2a6a568f329b2ce98e1cdc430","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1697705880799},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1697705880799},{"_id":"public/atom.xml","hash":"d3952ee138f6c4e9ed55307cf5d75cf29684dff1","modified":1698307602275},{"_id":"public/search.json","hash":"9d208fb6e6e8256eb13a4dc1ffc619347b1ed2d0","modified":1698307602275},{"_id":"public/sitemap.xml","hash":"d80c68da011572c4f7e0eb78f117c0fb0bb52d25","modified":1698307602275},{"_id":"public/sitemap.txt","hash":"8319b47a6311214a6a4f80f716819f07169f2e77","modified":1698307602275},{"_id":"public/404.html","hash":"589933a31cc1a510d7a3403add94a374e9bd6ce6","modified":1698307602275},{"_id":"public/categories/index.html","hash":"c4cd86adef98ed61a607f2c5ae01aaa5a6d78dd4","modified":1698307602275},{"_id":"public/archives/index.html","hash":"fca63a079c30f9c882837470fd6e3336365119a5","modified":1698307602275},{"_id":"public/docs/index.html","hash":"28d50ec7c8f35ce6545d1333df393406cdfc9d7e","modified":1698307602275},{"_id":"public/about/me.html","hash":"b95b474cee4f6aa4fd9bc0fe72a875afaf2e8a53","modified":1698307602275},{"_id":"public/schedule/index.html","hash":"b8e5f6b101e44e963592586ffd2c6077cb380667","modified":1698307602275},{"_id":"public/tags/index.html","hash":"ff0e487e63bd67003bd9385930fb2d6d9d3a1090","modified":1698307602275},{"_id":"public/react/components/unstate-next-implement.html","hash":"242d5a2ab4614de803cb941846cc41aad7233ebe","modified":1698307602275},{"_id":"public/react/fiber/works.html","hash":"191f77a8f4d0f251ad68064ea37d25b801ae5aa3","modified":1698307602275},{"_id":"public/react/components/unstate-next-use.html","hash":"46b6035f8af0260f1e0cc1f6a2b0d249da16edbd","modified":1698307602275},{"_id":"public/web/npm/nvm.html","hash":"22e3a793fddd30b4d66503c9c687cbb6f348e52a","modified":1698307602275},{"_id":"public/web/npm/nrm.html","hash":"041d19e4e265198cfe06a2410e3e70f545231f4e","modified":1698307602275},{"_id":"public/hexo/config/pagination.html","hash":"d04fdfdd577142081348abd680b1222bc53c362c","modified":1698307602275},{"_id":"public/web/webpack/hot/module/replacement.html","hash":"3d9782c24a6588f518168965c02ac3ef34980bc2","modified":1698307602275},{"_id":"public/javascript/prototype.html","hash":"b25d490e422bd6feea5cacfea7dd3b396704e145","modified":1698307602275},{"_id":"public/javascript/var/let/const.html","hash":"c90b2723fc2815713815f60711043e00bdcc3f1c","modified":1698307602275},{"_id":"public/hexo/config/readmore.html","hash":"ee13c70ecc408bdd33d4d4dba079921f8a1ec84a","modified":1698307602275},{"_id":"public/typescript/use/type.html","hash":"3d8caf22270109daec7a839b5b40fa6a74b2d7a5","modified":1698307602275},{"_id":"public/hexo/config/rss.html","hash":"7c13140f791f0647c9a6b899e695a2ad3a9efbb7","modified":1698307602275},{"_id":"public/browser/session/cookies.html","hash":"1166804a4e482aab952126507e8b00264da79236","modified":1698307602275},{"_id":"public/web/cross/site/request/forgeries.html","hash":"a987742b51985854049585a897d831acde301c62","modified":1698307602275},{"_id":"public/web/cross/site/script.html","hash":"bab77a30d8e215e92c128700d1bdd2239d61db50","modified":1698307602275},{"_id":"public/browser/network/hijack.html","hash":"fe355678594364d638d51115f2d1e7970b31fe08","modified":1698307602275},{"_id":"public/web/security/question.html","hash":"5790e5770866ce251ccd5380bf62cdaaa1eee5ea","modified":1698307602275},{"_id":"public/web/lazy/loading.html","hash":"d2b0031a9e99837195d82ca9bfe6dcc23091f4bc","modified":1698307602275},{"_id":"public/web/reflux/and/redrawing.html","hash":"e14322e08967992a2627887466d9f5a70df414c3","modified":1698307602275},{"_id":"public/web/lodash/dubounce.html","hash":"16e778232f479315e6e0fe97b6a30d0a3c5fcf1b","modified":1698307602275},{"_id":"public/web/image/perform.html","hash":"ef8817edf124ee1589f2bf2987a3d59d0f8be85f","modified":1698307602275},{"_id":"public/web/webpack/perform.html","hash":"a1c51731b9e339be0a1d8c803106ec07adcd126c","modified":1698307602275},{"_id":"public/browser/restful/and/rpc.html","hash":"3b187dcf4bc034e26252aafd06062334ac70b5b8","modified":1698307602275},{"_id":"public/browser/render/process.html","hash":"b0dbd8dee96242a77825d0fd769c646bc626bba4","modified":1698307602275},{"_id":"public/javascript/async/await.html","hash":"1825a6e7ce2ca47cd2f68ef5fe73163191ab8dcc","modified":1698307602275},{"_id":"public/browser/tab/to/tab.html","hash":"809c622603546c556a20acd14f4b758ebeec6f3e","modified":1698307602275},{"_id":"public/react/fiber/implement.html","hash":"ee9a0195d2a907053f2a1617c24bf0d1247825a4","modified":1698307602275},{"_id":"public/browser/mechanism/cache.html","hash":"ae258b7d59c42c84b31ff48c6aa2b73d0c86fcc8","modified":1698307602275},{"_id":"public/javascript/promise.html","hash":"d8262bee5e1825d551795360938efea66b537ee3","modified":1698307602275},{"_id":"public/react/fiber/node.html","hash":"e2019ef28db8024caa9500b68b2ec719b9ef7af2","modified":1698307602275},{"_id":"public/react/fiber.html","hash":"eceb4ebf896156e6985fd65a4c5b25a903f91939","modified":1698307602275},{"_id":"public/react/service/time.html","hash":"e33f620873cf6d7b1a97aea4b8e322fafc8d35ae","modified":1698307602275},{"_id":"public/react/synthetic/event.html","hash":"279420c754bd7e7252a9dfc8252db421ced1d25f","modified":1698307602275},{"_id":"public/archives/page/2/index.html","hash":"7cfe3377fc7b8f6fcce0742146ed92ee091a6682","modified":1698307602275},{"_id":"public/archives/2023/index.html","hash":"7c74a71b9b090d331801114a174fdb10e1169ea4","modified":1698307602275},{"_id":"public/archives/2023/page/2/index.html","hash":"6be8cc8490282fc94ca2ae53090871ff86ab94db","modified":1698307602275},{"_id":"public/archives/2023/10/index.html","hash":"3284b0c960770aaf61d8b294c155d8c7a465b37f","modified":1698307602275},{"_id":"public/archives/2023/10/page/2/index.html","hash":"5b5133a7c6ddcebe6464557e6e900c8719e7cf7f","modified":1698307602275},{"_id":"public/index.html","hash":"803b67513be7a948593e61879ca423cee2763764","modified":1698307602275},{"_id":"public/page/2/index.html","hash":"f1e33da4c54016983144c87815742d4aefa622c6","modified":1698307602275},{"_id":"public/page/3/index.html","hash":"f67cad9bada800fa87184f401e7f9b955bb9e1ce","modified":1698307602275},{"_id":"public/page/4/index.html","hash":"b25d7109cb3fa888b592df5a8a21830093fd780c","modified":1698307602275},{"_id":"public/categories/浏览器/index.html","hash":"0ca8304be0d71531de20ad0f68a8bb2dda1851ed","modified":1698307602275},{"_id":"public/categories/浏览器/渲染/index.html","hash":"a88e279f53f90fac049e09f76979134a35b729a2","modified":1698307602275},{"_id":"public/categories/浏览器/网路安全/index.html","hash":"1cf2eb69adfcadad76c4ba944ecc72813c08db47","modified":1698307602275},{"_id":"public/categories/浏览器/Cache/index.html","hash":"bf88846a50bd54253e9374e55dea949597c8521e","modified":1698307602275},{"_id":"public/categories/浏览器/通讯/index.html","hash":"970cf4f8d481e0e53311798e53560f9065a8f423","modified":1698307602275},{"_id":"public/categories/浏览器/协议/index.html","hash":"3af79a2bc495fcc17586dbfe67e7f7a4eefeeafe","modified":1698307602275},{"_id":"public/categories/前端/index.html","hash":"7dd81d7cc3f37b1bddeffea55fb6362bb9fdaddc","modified":1698307602275},{"_id":"public/categories/浏览器/缓存/index.html","hash":"ecd40a251cc906dd8f625c49892a4f010c0bb5b9","modified":1698307602275},{"_id":"public/categories/React/index.html","hash":"c5152981a755e9ea68934c247ff4241c693c0ab9","modified":1698307602275},{"_id":"public/categories/浏览器/网络安全/index.html","hash":"7d5f7b217327923e7aacebdb0f422dc70e53b43f","modified":1698307602275},{"_id":"public/categories/前端/es6/index.html","hash":"8e7269f5e68d6e8459251727d0bf434813bb88f0","modified":1698307602275},{"_id":"public/categories/浏览器/性能优化/index.html","hash":"aff67a3136eeb365f5419f7027bbaf129f9a73e2","modified":1698307602275},{"_id":"public/categories/前端/npm/index.html","hash":"213e7b7bb6ca17fa8b3f01bce8f32e870a9206b2","modified":1698307602275},{"_id":"public/categories/前端/框架/index.html","hash":"627408b2cfce4e7aa498d4cee9016a7adde2384b","modified":1698307602275},{"_id":"public/categories/前端/WebPack/index.html","hash":"a683accd44bc79059e78e5d4c1cb287b613991c2","modified":1698307602275},{"_id":"public/categories/React/Fiber/index.html","hash":"8fe189fdae5798dd22ab15c0ae0901199c72e46a","modified":1698307602275},{"_id":"public/categories/前端/TypeScript/index.html","hash":"5149d80ab63ce15ef675e170657c150edf0fa305","modified":1698307602275},{"_id":"public/categories/React/components/index.html","hash":"00fd923048351d3b57c1622d6e0e0e01488f267f","modified":1698307602275},{"_id":"public/categories/前端/框架/Hexo/index.html","hash":"7422a8b82baa3d4abc272738e3a302672d7506fd","modified":1698307602275},{"_id":"public/categories/React/components/unstate-next/index.html","hash":"e51c5bc7189e20c1820581998dc6f2335cd061bf","modified":1698307602275},{"_id":"public/tags/前端/index.html","hash":"43db4fd46074a322634ae4fd148f3632b3d50580","modified":1698307602275},{"_id":"public/tags/前端/page/2/index.html","hash":"ef99204eeb7828a8dbc6819f8eb18552905bd7df","modified":1698307602275},{"_id":"public/tags/浏览器/index.html","hash":"f382e21070cc0e985cec98f260999166411f2bad","modified":1698307602275},{"_id":"public/tags/网路安全/index.html","hash":"ec7395d417174acd0430671cfb8b1e34e2a4a408","modified":1698307602275},{"_id":"public/tags/RESTful/index.html","hash":"b2395faa37fba139c5a813b4f96984571cb7e33a","modified":1698307602275},{"_id":"public/tags/RPC/index.html","hash":"9ac0d7daf16f07e72cb9d883e89baaace1542604","modified":1698307602275},{"_id":"public/tags/HTTP/index.html","hash":"9bdeb431090b0f828a98be34e3089f2233090883","modified":1698307602275},{"_id":"public/tags/GUI/index.html","hash":"c70cc81dbdfa12efbe77d310b5f70ac6583518a5","modified":1698307602275},{"_id":"public/tags/cookies/index.html","hash":"cb7adf50b10748f41ceca227c57f64b14e4af90a","modified":1698307602275},{"_id":"public/tags/localStorage/index.html","hash":"15c7bd28bad5c634a4d02728065271dfbe922f04","modified":1698307602275},{"_id":"public/tags/sessionStorage/index.html","hash":"8c7d0f874ae35b541d2073f3e01db1ef9a7f9203","modified":1698307602275},{"_id":"public/tags/TypeScript/index.html","hash":"9d70827b76697e8d227d040159082f8684c594c1","modified":1698307602275},{"_id":"public/tags/性能优化/index.html","hash":"e24d8e1639ce1b88d2da34e8d3561a08daf241af","modified":1698307602275},{"_id":"public/tags/JavaScript/index.html","hash":"0ee97f2ee9cbae981ef75eb34f45f68ed74aef6c","modified":1698307602275},{"_id":"public/tags/es6/index.html","hash":"95308b225fd08f3dd985ac8bc7db5fa88d2c0cbf","modified":1698307602275},{"_id":"public/tags/Hexo/index.html","hash":"4a610ba7d9340948ca642f7e9cecfbfabfed597b","modified":1698307602275},{"_id":"public/tags/Pagination/index.html","hash":"4d579c1050a117c2aff9435b31fbc408594ae958","modified":1698307602275},{"_id":"public/tags/ReadMore/index.html","hash":"9d3c174e8c6fdf53046d2d77a673750e33c7db80","modified":1698307602275},{"_id":"public/tags/RSS/index.html","hash":"1b3c24b045f9392ad02c2789503f20c98af03c0d","modified":1698307602275},{"_id":"public/tags/react/index.html","hash":"abc49294a288ee839855b29974bac72ccda8a008","modified":1698307602275},{"_id":"public/tags/Fiber/index.html","hash":"b61babb9cc002ca768b23de06eb702673e7d46c7","modified":1698307602275},{"_id":"public/tags/网络安全/index.html","hash":"7f90adf7d6fdc6061d7583fff7302ee7e55d9a3a","modified":1698307602275},{"_id":"public/tags/CSRF/index.html","hash":"87864a4a23b87da7e116766070d896293a404ff1","modified":1698307602275},{"_id":"public/tags/XSS/index.html","hash":"a15f2aa088f7005b069f1d9e89287b1fbc620456","modified":1698307602275},{"_id":"public/tags/Webpack/index.html","hash":"a22964eb167122fa19123b25bc99226f0ec17993","modified":1698307602275},{"_id":"public/tags/图片/index.html","hash":"853e6815739774b91c9d863ecb4385a31502368f","modified":1698307602275},{"_id":"public/tags/插件/index.html","hash":"a5e0aaf9b9f99cb89a7b59f62f8fa8fe619a1ca0","modified":1698307602275},{"_id":"public/tags/npm/index.html","hash":"02dbd2f656fb817f57775ee75acaf8ff138268fc","modified":1698307602275},{"_id":"public/tags/nrm/index.html","hash":"56ec3c26fc0d01856a037cabc798001dcc13c0a4","modified":1698307602275},{"_id":"public/tags/nvm/index.html","hash":"9750d7c09d6b96ee445d99e37408e09a0e18fa69","modified":1698307602275},{"_id":"public/tags/unstate-next/index.html","hash":"35aeba9a08f34083f1b1ab3b634f9475dc46c30d","modified":1698307602275},{"_id":"public/tags/WebPack/index.html","hash":"c1eed405e997fc570640a30d4f787d0ba2132dae","modified":1698307602275},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1698307602275},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1698307602275},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1698307602275},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1698307602275},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1698307602275},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1698307602275},{"_id":"public/images/wechat.png","hash":"da793db4762f2168f250202fb51f0c4150ccfb71","modified":1698307602275},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1698307602275},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1698307602275},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1698307602275},{"_id":"public/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1698307602275},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1698307602275},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1698307602275},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1698307602275},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1698307602275},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1698307602275},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1698307602275},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1698307602275},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1698307602275},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1698307602275},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1698307602275},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1698307602275},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1698307602275},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1698307602275},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1698307602275},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1698307602275},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1698307602275},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1698307602275},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1698307602275},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1698307602275},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1698307602275},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1698307602275},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1698307602275},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1698307602275},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1698307602275},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1698307602275},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1698307602275},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1698307602275},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1698307602275},{"_id":"public/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1698307602275},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1698307602275},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1698307602275},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1698307602275},{"_id":"public/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1698307602275},{"_id":"public/css/main.css","hash":"e4bbf78ae5804cc5e3dd5d25e5be9cb10d0fd004","modified":1698307602275},{"_id":"public/images/alipay.png","hash":"0bb1d75a9b5d54e8b15cf9fe2e350c2b2fdbde8f","modified":1698307602275},{"_id":"source/_posts/browser/networkHijack.md","hash":"145bb7b16ddd6f97587255f9832deb422bae3648","modified":1697897180298},{"_id":"source/_posts/browser/restFulAndRPC.md","hash":"94440e70ed0e3f2fb7ae4154e43198e9836fa9dc","modified":1697896516858},{"_id":"source/_posts/javaScript/async-await.md","hash":"a3f7c3fe8437a07b8296208ecb80c0033bdaa017","modified":1697896811279},{"_id":"source/_posts/javaScript/varLetConst.md","hash":"4129169264049133b87bcc79211dcdf56779cd59","modified":1698064556937},{"_id":"source/_posts/javaScript/promise.md","hash":"d59e5e8f648f1b17a9af7af71be43b303a247091","modified":1697896563979},{"_id":"source/_posts/javaScript/prototype.md","hash":"b24a38e1f5a71274add9653d982dfe122dca02b3","modified":1698065114869},{"_id":"source/_posts/react/react/package.json","hash":"af00b78d52a846565730d7912d0636fcb3de2f6b","modified":1698374205803},{"_id":"source/_posts/react/react/index.html","hash":"94f6bb5d1e20b3aa0fd65d217d9aba188eec3446","modified":1698374205798},{"_id":"source/_posts/react/react/jsx-dev-runtime.js","hash":"7635f13cce85d0d45bada95543efc36985fccda0","modified":1698374205800},{"_id":"source/_posts/react/react/package-lock.json","hash":"62060773ab5572f2401147544a9180eb74a3078f","modified":1698374205802},{"_id":"source/_posts/react/react/readme.md","hash":"4921b277350a992a1c5cf360c433fb18999c1b65","modified":1698374205804},{"_id":"source/_posts/react/react/vite.config.js","hash":"3fa7d5dbae9451737b372a49432e0539b0960380","modified":1698374205810},{"_id":"source/_posts/react/react/src/main.jsx","hash":"ba196559ce46c27997901d6d858c20eab3bf0160","modified":1698374205807},{"_id":"source/_posts/react/react/src/jsx/ReactJSXElement.js","hash":"d0b656c4b7a86e2374a5d9a083b5aafd03777a71","modified":1698374205806},{"_id":"source/_posts/react/react/src/shared/ReactSymbols.js","hash":"4cb32c21b95ef32e8489339363955f2b631520c1","modified":1698374205809},{"_id":"source/_posts/react/react/src/shared/hasOwnProperty.js","hash":"4676b2a406e8261a24c7ca760cd75d889ecc2968","modified":1698374205809},{"_id":"source/react/readme.md","hash":"4921b277350a992a1c5cf360c433fb18999c1b65","modified":1698374205804},{"_id":"source/react/package.json","hash":"af00b78d52a846565730d7912d0636fcb3de2f6b","modified":1698374205803},{"_id":"source/react/index.html","hash":"94f6bb5d1e20b3aa0fd65d217d9aba188eec3446","modified":1698374205798},{"_id":"source/_posts/react/reactImplement.md","hash":"abebd7edb6b30b87972a8be7c8557bff552173dc","modified":1698412690726},{"_id":"source/react/package-lock.json","hash":"62060773ab5572f2401147544a9180eb74a3078f","modified":1698375079570},{"_id":"source/react/node_modules/.package-lock.json","hash":"9a8297b86c8fc3618450ae13cb55ad22e5f591d2","modified":1698375079583},{"_id":"source/react/src/react/jsx-dev-runtime.js","hash":"f73564b8738852d701c132d5a6da5f0f12a4e4ad","modified":1698375264415},{"_id":"source/react/vite.config.js","hash":"d042e58bdf05cbddd837ce2cc3aab997c68d629b","modified":1698375153052},{"_id":"source/react/src/main.jsx","hash":"49cf1ccf216f8a78c70404eb4b5643879647dc9b","modified":1698376177892},{"_id":"source/react/node_modules/caniuse-lite/README.md","hash":"b69b8112d16becebb035a7fd305c8f6e0f5e450b","modified":1698375075629},{"_id":"source/react/src/react-dom/client.js","hash":"ca30d3afea033a10f7d9677d9c643822dbb97340","modified":1698377290193},{"_id":"source/react/src/react-dom/ReactDOMRoot.js","hash":"aa092f30a7c2835958875fa7b16628df5c5510a2","modified":1698377224247},{"_id":"source/react/node_modules/caniuse-lite/package.json","hash":"1a87fa34cbdfc82258fc5d89689684bbe1fd3330","modified":1698375075629},{"_id":"source/react/node_modules/browserslist/LICENSE","hash":"2ea150769a1a59950dd6d8daf2cb7c972fdb751d","modified":1698375074061},{"_id":"source/react/node_modules/browserslist/README.md","hash":"622c48e334b573a5769890792c4f8a2eaac75bd5","modified":1698375074526},{"_id":"source/react/node_modules/browserslist/cli.js","hash":"eb2ab5ef19aca55e936d7ab996690e3327407f6a","modified":1698375074155},{"_id":"source/react/node_modules/caniuse-lite/LICENSE","hash":"1417c6323ecf458da5a3ef49b0f181ed2148a3dc","modified":1698375074721},{"_id":"source/react/node_modules/browserslist/package.json","hash":"af15ae4bd7705f93e16257db886afdf208e3821c","modified":1698375074510},{"_id":"source/react/node_modules/browserslist/index.d.ts","hash":"a1bcdca68f62a94d833e27d730b9e4f0934ef14f","modified":1698375074575},{"_id":"source/react/node_modules/browserslist/browser.js","hash":"902b5c42512bbaa6ddf1fccd77758db754e95fe8","modified":1698375074124},{"_id":"source/react/node_modules/browserslist/error.d.ts","hash":"7e0eba9394098e3a8c9e5963dd138c1123e92a63","modified":1698375074549},{"_id":"source/react/node_modules/browserslist/index.js","hash":"03e88603e0128fcc69f396658fb6dd6dcf01545c","modified":1698375074445},{"_id":"source/react/node_modules/browserslist/error.js","hash":"7e0831d89be9d045f9fb3cf9141de7967c616061","modified":1698375074300},{"_id":"source/react/node_modules/browserslist/parse.js","hash":"8ffb859ea9ebb9397fd9242aa2a074e0498c0fe5","modified":1698375074482},{"_id":"source/react/node_modules/browserslist/node.js","hash":"b1e4609ecde2d8abb79f84b244197bc371aa7bd6","modified":1698375074467},{"_id":"source/react/node_modules/color-convert/README.md","hash":"60d5a2a4f28b9ee6c04efb9f27c351496bccd58e","modified":1698375074458},{"_id":"source/react/node_modules/color-convert/conversions.js","hash":"5a1e84da09182d3861a6332349370f52dfded83e","modified":1698375074300},{"_id":"source/react/node_modules/color-convert/LICENSE","hash":"2cb896d3773acc17b0f87dbb47759dfde011841b","modified":1698375074446},{"_id":"source/react/node_modules/color-convert/package.json","hash":"799d15c0afcf7b320069d0734a1806b3062da05b","modified":1698375074061},{"_id":"source/react/node_modules/chalk/index.js.flow","hash":"be474353d9d6921b1609a209d39c297a7d7c13d1","modified":1698375074155},{"_id":"source/react/node_modules/chalk/index.js","hash":"612bca2861fd84ccca956db0cf7a528fda99e4d4","modified":1698375074125},{"_id":"source/react/node_modules/chalk/license","hash":"5aaf48196ddd4d007a3067aa7f30303ca8e4b29c","modified":1698375074300},{"_id":"source/react/node_modules/chalk/package.json","hash":"6837c455c887920ad9b0cad624aa4b9b51625fd8","modified":1698375074061},{"_id":"source/react/node_modules/chalk/templates.js","hash":"ae6bfdd37656f7ae4e35e4b4f56e0053af538fd8","modified":1698375074458},{"_id":"source/react/node_modules/chalk/readme.md","hash":"3cca523d2882142c7124422f1eee7496eabfb01c","modified":1698375074435},{"_id":"source/react/node_modules/color-convert/CHANGELOG.md","hash":"888f63060f1f4e78696f49f97d2c7bbe59f6a1bd","modified":1698375074125},{"_id":"source/react/node_modules/color-name/.eslintrc.json","hash":"91698743c35b503b5e275bc25096c260d07b07ec","modified":1698375074444},{"_id":"source/react/node_modules/color-name/.npmignore","hash":"daedfa8ad7252fd4fb533bae1d675701f8db11ac","modified":1698375074122},{"_id":"source/react/node_modules/color-convert/index.js","hash":"2bec1f2a897147555365623fbc1fe5b971585815","modified":1698375074436},{"_id":"source/react/node_modules/color-name/LICENSE","hash":"e8bc789b6dc24e4c3fc4d208364dd6b029a81eb1","modified":1698375074293},{"_id":"source/react/node_modules/color-name/README.md","hash":"0d4f110fcb4efc18928065d9ffa878c851052d5c","modified":1698375074154},{"_id":"source/react/node_modules/color-name/package.json","hash":"5aa7aaf5028aece2d7a920d5644c25c87723d203","modified":1698375074061},{"_id":"source/react/node_modules/color-name/index.js","hash":"db20105dc898fa8aa6706492502431c680c0dc94","modified":1698375074375},{"_id":"source/react/node_modules/color-name/test.js","hash":"660e7f26e42b82f5e89fe98c2781a542ae8a850d","modified":1698375074435},{"_id":"source/react/node_modules/ansi-styles/index.js","hash":"b61182f5204ff5f4f64a7c666569975205a9e3c0","modified":1698375074125},{"_id":"source/react/node_modules/ansi-styles/package.json","hash":"2abbe25af4f77cdc6986e0a6b14e9088aa6d3d93","modified":1698375074061},{"_id":"source/react/node_modules/ansi-styles/license","hash":"5aaf48196ddd4d007a3067aa7f30303ca8e4b29c","modified":1698375074155},{"_id":"source/react/node_modules/ansi-styles/readme.md","hash":"3673eb4048729e8286ddb3566f361d01bad50682","modified":1698375074300},{"_id":"source/react/node_modules/debug/package.json","hash":"ed6fe3dcf77a4c2ddadde904c5b1fc47cf9893c7","modified":1698375074444},{"_id":"source/react/node_modules/debug/README.md","hash":"86a542a5178a95047aab606b0605cd8d56e7053c","modified":1698375074467},{"_id":"source/react/node_modules/convert-source-map/LICENSE","hash":"6e47d19f00f067b650809e0fa486c2c99283411d","modified":1698375074061},{"_id":"source/react/node_modules/color-convert/route.js","hash":"80a3801b287442561a469d3abe069418adb4d716","modified":1698375074468},{"_id":"source/react/node_modules/convert-source-map/README.md","hash":"6d314cf8ad21f5077455751d1c923cd3425e84e2","modified":1698375074378},{"_id":"source/react/node_modules/electron-to-chromium/CHANGELOG.md","hash":"a3fdc848f983870f0d3650928e235bb8a0c2eaf8","modified":1698375074848},{"_id":"source/react/node_modules/convert-source-map/package.json","hash":"bb03314643fce6451c7500bfe6c019721267ad8c","modified":1698375074155},{"_id":"source/react/node_modules/convert-source-map/index.js","hash":"e2f095c33616689b8b4b1c7dce62f18caed67db7","modified":1698375074124},{"_id":"source/react/node_modules/electron-to-chromium/LICENSE","hash":"874c67267565c25a2182ecc5e77e8a59a7c022b4","modified":1698375074659},{"_id":"source/react/node_modules/debug/LICENSE","hash":"59e43165aeefdfe28d5e497a0aaef79d6d622af0","modified":1698375074060},{"_id":"source/react/node_modules/electron-to-chromium/README.md","hash":"aa3530513f819a8773c0684d8b24eb30f7b1c691","modified":1698375074850},{"_id":"source/react/node_modules/electron-to-chromium/full-chromium-versions.js","hash":"179c78eb848dcf39f2cfc03ecd900aebc8430164","modified":1698375074698},{"_id":"source/react/node_modules/electron-to-chromium/chromium-versions.js","hash":"6b6656c642c7fd528588d14e8db4b3345c9a79bf","modified":1698375074670},{"_id":"source/react/node_modules/electron-to-chromium/chromium-versions.json","hash":"72eb0b8f7ba4bbc736d580e48cf3f73ba7355939","modified":1698375074767},{"_id":"source/react/node_modules/electron-to-chromium/full-chromium-versions.json","hash":"9f5292dc5ee7bcb1f220e0ee8b54e9cda42c21f2","modified":1698375074784},{"_id":"source/react/node_modules/electron-to-chromium/versions.js","hash":"1cef7ad571b4a7a0831965d0d84218a58288adbc","modified":1698375074764},{"_id":"source/react/node_modules/electron-to-chromium/index.js","hash":"9ac2b6b1dd81beece24473377cc5c938d1bcc335","modified":1698375074760},{"_id":"source/react/node_modules/fsevents/LICENSE","hash":"ec92320664e24cfb1fd63498769b127ce64726f5","modified":1698375074060},{"_id":"source/react/node_modules/fsevents/README.md","hash":"2ed45bdd2bce0c7a32672a3655636ce82cdccb8a","modified":1698375074293},{"_id":"source/react/node_modules/fsevents/fsevents.js","hash":"3e88cf9aaf616d665648c8f0de0202615227b0c7","modified":1698375074104},{"_id":"source/react/node_modules/fsevents/package.json","hash":"583a70fa68dce7a6848a1c9c13a4898db877a4cf","modified":1698375074154},{"_id":"source/react/node_modules/.bin/browserslist","hash":"eb2ab5ef19aca55e936d7ab996690e3327407f6a","modified":1698375074155},{"_id":"source/react/node_modules/electron-to-chromium/package.json","hash":"6a7471859b2881bad9593e507d51ec2d9395b197","modified":1698375074833},{"_id":"source/react/node_modules/electron-to-chromium/versions.json","hash":"df84c5e48e59c1aa2c65177e86637b52a113f91e","modified":1698375074842},{"_id":"source/react/node_modules/.bin/nanoid","hash":"643ec2be4f4caa5605abf324e37fb99298951465","modified":1698375074509},{"_id":"source/react/node_modules/.bin/json5","hash":"fe57f49ad117fcc610650c2859ead73e8435158b","modified":1698375074075},{"_id":"source/react/node_modules/fsevents/fsevents.d.ts","hash":"4a34485f4674a0532f43fcd742419d73ee5edf9f","modified":1698375074597},{"_id":"source/react/node_modules/.bin/semver","hash":"562a909c318904cf379778a9ba3b1c0e865b0fc7","modified":1698375074165},{"_id":"source/react/node_modules/.bin/parser","hash":"628ab118f7255bf36723e56b85e2c5f4fa795572","modified":1698375074451},{"_id":"source/react/node_modules/.bin/jsesc","hash":"b41a1c7189bd18fae0cca2fbc2de69d42dcbab97","modified":1698375074465},{"_id":"source/react/node_modules/.bin/update-browserslist-db","hash":"a11d722daa3fd07875b0c99409afee293b7c9480","modified":1698375074142},{"_id":"source/react/node_modules/escalade/index.d.ts","hash":"d71f3078eecc8f68860a878c4749be3bd96e2ff1","modified":1698375074475},{"_id":"source/react/node_modules/escalade/license","hash":"1c0bf929a1b2f0def5e44a79510174d9b84f9e36","modified":1698375074060},{"_id":"source/react/node_modules/.bin/vite","hash":"9bee8ddfbc343700f06a828df5ab636a62ae848a","modified":1698375076832},{"_id":"source/react/node_modules/escalade/package.json","hash":"7345ffcc71a7ccf4ba306e906aaa05f2986ec683","modified":1698375074435},{"_id":"source/react/node_modules/escalade/readme.md","hash":"49865475a62f67c568b5e5a4be7af44b74ad3eaf","modified":1698375074444},{"_id":"source/react/node_modules/escape-string-regexp/index.js","hash":"17b40cc4dc8a455277994ab351c0650215394042","modified":1698375074075},{"_id":"source/react/node_modules/escape-string-regexp/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1698375074144},{"_id":"source/react/node_modules/escape-string-regexp/readme.md","hash":"b693d3ddaf0a2edac02f8dc9b60382f7a818083e","modified":1698375074167},{"_id":"source/react/node_modules/escape-string-regexp/package.json","hash":"f794290e774669d83cae4e20a497fbf680d20859","modified":1698375074052},{"_id":"source/react/node_modules/esbuild/LICENSE.md","hash":"d11e36e13b219e0c0cb023a56eb6d411d136316a","modified":1698375074760},{"_id":"source/react/node_modules/esbuild/README.md","hash":"ff5b0172082fbd242a532b5e3673bac6e08b1fdb","modified":1698375074764},{"_id":"source/react/node_modules/esbuild/install.js","hash":"472f486b46abc32ad1aa1aed97456f8dd4e31dda","modified":1698375074669},{"_id":"source/react/node_modules/esbuild/package.json","hash":"52e0fa3a1a0a1570e21318957256fe16884872f8","modified":1698375074746},{"_id":"source/react/node_modules/gensync/LICENSE","hash":"c530ee92dbf86baa6515ac9329cb20e5dff10043","modified":1698375074145},{"_id":"source/react/node_modules/gensync/README.md","hash":"313d3decb6b125f61fc9f88fea8e3425fd78ad26","modified":1698375074480},{"_id":"source/react/node_modules/gensync/package.json","hash":"7cfabf9315783ad7406e0b065e4aa73972800a68","modified":1698375074466},{"_id":"source/react/node_modules/gensync/index.js","hash":"bb9f37611ee648613c4c31dc66d9597a4dc46afe","modified":1698375074307},{"_id":"source/react/node_modules/gensync/index.js.flow","hash":"66f51d47cd1d4ef8a22c27e90368d57c5f7578b1","modified":1698375074168},{"_id":"source/react/node_modules/jsesc/README.md","hash":"c20ae4463482e4f47c33cece1c5f14eb322cd8f0","modified":1698375074306},{"_id":"source/react/node_modules/js-tokens/CHANGELOG.md","hash":"51188b326d7ead0aca4d89c1d64dddde2845163c","modified":1698375074075},{"_id":"source/react/node_modules/jsesc/jsesc.js","hash":"1ddb9ef6ced291147886096f09527cb1980a5572","modified":1698375074075},{"_id":"source/react/node_modules/jsesc/LICENSE-MIT.txt","hash":"d7384cd3ed0c9614f87dde0f86568017f369814c","modified":1698375074143},{"_id":"source/react/node_modules/js-tokens/LICENSE","hash":"f1c13e8c00a23a075cb581b6d6262fd755b08eed","modified":1698375074168},{"_id":"source/react/node_modules/js-tokens/README.md","hash":"899104f996207b6334d61c68196a199f5b0d3f26","modified":1698375074399},{"_id":"source/react/node_modules/js-tokens/index.js","hash":"0e440af0eefc12535ba7b998ca49db43f60bcda4","modified":1698375074145},{"_id":"source/react/node_modules/js-tokens/package.json","hash":"6704feb8cbaf803288d9185a2fc86017e24ba55b","modified":1698375074052},{"_id":"source/react/node_modules/jsesc/package.json","hash":"bc0e69f181a12e0edc0bb5604beeca72708691f5","modified":1698375074052},{"_id":"source/react/node_modules/globals/globals.json","hash":"0f0d955a2c0b43cf3a710b17d188d8b37dc52db7","modified":1698375074168},{"_id":"source/react/node_modules/globals/package.json","hash":"8d0fda764290b17374daf72a3d07ad92897395a6","modified":1698375074052},{"_id":"source/react/node_modules/globals/license","hash":"5aaf48196ddd4d007a3067aa7f30303ca8e4b29c","modified":1698375074400},{"_id":"source/react/node_modules/globals/readme.md","hash":"56a295cbe70581ec1f233506d792933ce307136b","modified":1698375074443},{"_id":"source/react/node_modules/globals/index.js","hash":"82f74afe81385b06a8b5781a2588e66144c7c457","modified":1698375074307},{"_id":"source/react/node_modules/json5/package.json","hash":"7a38f8d159bc79dac6ac618707de02fcd3063f2e","modified":1698375074684},{"_id":"source/react/node_modules/has-flag/license","hash":"5aaf48196ddd4d007a3067aa7f30303ca8e4b29c","modified":1698375074144},{"_id":"source/react/node_modules/has-flag/package.json","hash":"0a61b7395724eb79396b1cef110a74565de5ea88","modified":1698375074052},{"_id":"source/react/node_modules/has-flag/index.js","hash":"73ee55646b931a37ef3b38fd6d22cd56332d6724","modified":1698375074075},{"_id":"source/react/node_modules/lru-cache/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1698375074144},{"_id":"source/react/node_modules/ms/license.md","hash":"884e84ebfddafd93b5bb814df076d2ebd1757ba8","modified":1698375074141},{"_id":"source/react/node_modules/ms/package.json","hash":"fe112804e727b4f3489e9a52900349d0a4ed302c","modified":1698375074050},{"_id":"source/react/node_modules/has-flag/readme.md","hash":"99207d2675befe9c32c412112fc038e9fe14d9cf","modified":1698375074166},{"_id":"source/react/node_modules/ms/readme.md","hash":"bc16733cc72e710dc1d447280e17d9c2c0b3f3ba","modified":1698375074165},{"_id":"source/react/node_modules/lru-cache/package.json","hash":"1f7db63c33a9915df211c89baff338b3133f018b","modified":1698375074052},{"_id":"source/react/node_modules/lru-cache/README.md","hash":"1ebf8ae84e782d31d50da2aafb0bcc983af3855d","modified":1698375074307},{"_id":"source/react/node_modules/lru-cache/index.js","hash":"b8b9a8ec246e3ef6fec472a55ab97cd03e0ce0f2","modified":1698375074075},{"_id":"source/react/node_modules/node-releases/LICENSE","hash":"37b2f00e06c7ce75d9ccc1dbaea2316a6c7bbf80","modified":1698375074051},{"_id":"source/react/node_modules/node-releases/package.json","hash":"1e4c8736cba77142741796505055010f7cb3f8fa","modified":1698375074443},{"_id":"source/react/node_modules/ms/index.js","hash":"55f9b3a7d4cfbf68b19ccd0d698aa86483dd4694","modified":1698375074069},{"_id":"source/react/node_modules/node-releases/README.md","hash":"4278345a601fe87f232936797998dc3326137388","modified":1698375074509},{"_id":"source/react/node_modules/nanoid/index.browser.cjs","hash":"0a63f7d65282c1c1f3366694f304ae31e406ade7","modified":1698375074165},{"_id":"source/react/node_modules/nanoid/index.cjs","hash":"6f47550007bb53d24a9f9054428a7ac455c82330","modified":1698375074398},{"_id":"source/react/node_modules/nanoid/index.browser.js","hash":"7a26b89c9ccb48d9b0fa98d50f671c71dfe75786","modified":1698375074573},{"_id":"source/react/node_modules/nanoid/LICENSE","hash":"6abe5957e19e3ca5857070b38ff21620cdc99d65","modified":1698375074051},{"_id":"source/react/node_modules/json5/README.md","hash":"c9c577ccca8a706d6cc8eecaa17b93fe77cb30b6","modified":1698375074696},{"_id":"source/react/node_modules/nanoid/package.json","hash":"8d707e5495676171f9bc4c76b752fdd302ce85a5","modified":1698375074683},{"_id":"source/react/node_modules/nanoid/README.md","hash":"36d1f60a0cb6897a6861d66af70f4e83345e0ede","modified":1698375074701},{"_id":"source/react/node_modules/json5/LICENSE.md","hash":"f8ea2572b2ce58e7aaf3330227c72c018a0ee6e4","modified":1698375074689},{"_id":"source/react/node_modules/nanoid/index.js","hash":"7f6f1e1bd4b436ff7282b6e9a0615ef29a859f48","modified":1698375074625},{"_id":"source/react/node_modules/picocolors/package.json","hash":"454b9f0ccd76446f9e066ce236d35ebd33e49a5c","modified":1698375074165},{"_id":"source/react/node_modules/nanoid/nanoid.js","hash":"ca3cc284da68767c690c6f20d6f195424f141e2a","modified":1698375074660},{"_id":"source/react/node_modules/picocolors/LICENSE","hash":"89683c469b56836ecf640ff8384c0f2c89bb9c31","modified":1698375074050},{"_id":"source/react/node_modules/picocolors/picocolors.browser.js","hash":"3d7689fb21d6b4941196613e4cbe396280574d8c","modified":1698375074069},{"_id":"source/react/node_modules/nanoid/index.d.ts","hash":"d64b4ff22f83a0c02912b2a1c63992885ee85110","modified":1698375074728},{"_id":"source/react/node_modules/picocolors/picocolors.js","hash":"5a1d25ff93e34b02f3dc8d8f6f8bfad0b4d72ec7","modified":1698375074142},{"_id":"source/react/node_modules/picocolors/picocolors.d.ts","hash":"5a739cca33b75c6e8085792e35d57c7d0b282380","modified":1698375074397},{"_id":"source/react/node_modules/picocolors/types.ts","hash":"b49872d1d34a70cae05ab26a4676e5cebc7b5d8d","modified":1698375074442},{"_id":"source/react/node_modules/react-refresh/LICENSE","hash":"1506731a652bba9abdf804ba3c95651ec5a68bdc","modified":1698375074615},{"_id":"source/react/node_modules/picocolors/README.md","hash":"fea3e30ed5e64959dbbdfc6790d83332815dcc89","modified":1698375074306},{"_id":"source/react/node_modules/rollup/LICENSE.md","hash":"9f02f7e2a6fa1f8b458a3f693d1761629c607936","modified":1698375076554},{"_id":"source/react/node_modules/react-refresh/babel.js","hash":"7f85e714eeecb4adf4a93e297bcd5c8157013955","modified":1698375074630},{"_id":"source/react/node_modules/rollup/README.md","hash":"80f9cc031a52d08d35f78a5043e00767164e0bb1","modified":1698375076555},{"_id":"source/react/node_modules/react-refresh/runtime.js","hash":"303d8bc67435bc313effa0e30b5291e3a0b9b1f2","modified":1698375074770},{"_id":"source/react/node_modules/rollup/package.json","hash":"e427c6c4c39ee2a8c8138b11ea3b942787153353","modified":1698375076553},{"_id":"source/react/node_modules/semver/range.bnf","hash":"5c6f063e0ec60f2d04686f73a12ba5f389988a2b","modified":1698375074069},{"_id":"source/react/node_modules/semver/README.md","hash":"478f6554952838cf9b0c45250babc5400279fd0e","modified":1698375074509},{"_id":"source/react/node_modules/postcss/LICENSE","hash":"0b4be858ebd79c7ec4f7ba4fbda0406e3f3e821f","modified":1698375074052},{"_id":"source/react/node_modules/semver/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1698375074051},{"_id":"source/react/node_modules/semver/package.json","hash":"d91947b266fe307993ed51d6a5abbcf5b275162c","modified":1698375074474},{"_id":"source/react/node_modules/semver/semver.js","hash":"9821c250906ae29fe33e6b7dcd2114d84293d2e9","modified":1698375074457},{"_id":"source/react/node_modules/supports-color/license","hash":"5aaf48196ddd4d007a3067aa7f30303ca8e4b29c","modified":1698375074163},{"_id":"source/react/node_modules/supports-color/browser.js","hash":"9800d972941ea5bf3e0838f8686dbe9ff97ba98b","modified":1698375074068},{"_id":"source/react/node_modules/react-refresh/README.md","hash":"24be3b0fac15cf52afa9a548ac1200e8bcad441c","modified":1698375074778},{"_id":"source/react/node_modules/supports-color/index.js","hash":"ee9a711c9a006df8905afb8f0b7ebf4faa6a2c7e","modified":1698375074128},{"_id":"source/react/node_modules/supports-color/package.json","hash":"12db9c2598721e751dffd0b42a20b7ae419b20e2","modified":1698375074050},{"_id":"source/react/node_modules/supports-color/readme.md","hash":"90d71263768deafa581e770a71913323c0c52ab4","modified":1698375074306},{"_id":"source/react/node_modules/to-fast-properties/license","hash":"5a23776d85821c0098c6de54bf628b0810ebaf32","modified":1698375074136},{"_id":"source/react/node_modules/to-fast-properties/index.js","hash":"6308ff82e9bca6a67e7aa25111f0105f1fee89fc","modified":1698375074069},{"_id":"source/react/node_modules/to-fast-properties/package.json","hash":"3bcfe9f2fc714ed5064e562e7492c1c272adc836","modified":1698375074050},{"_id":"source/react/node_modules/source-map-js/LICENSE","hash":"914d42b13ad394be4aa75b4d93fde94b1e79cbbd","modified":1698375074050},{"_id":"source/react/node_modules/to-fast-properties/readme.md","hash":"7648fa9b2db94c29a1775d32225e3dc123afd858","modified":1698375074163},{"_id":"source/react/node_modules/source-map-js/CHANGELOG.md","hash":"218c6723a4e4ab16aad9512b1ec128235f884fbb","modified":1698375074695},{"_id":"source/react/node_modules/postcss/package.json","hash":"84ce33162276d08068a194af8c74f8b0fe61f31d","modified":1698375074779},{"_id":"source/react/node_modules/postcss/README.md","hash":"92c70d6923d06001f8beccc8b3e30b8e92efe785","modified":1698375074784},{"_id":"source/react/node_modules/react-refresh/package.json","hash":"8261dede0715ee983bcb5e66d4360ed0ddde8880","modified":1698375074778},{"_id":"source/react/node_modules/source-map-js/source-map.d.ts","hash":"4947e835e30f8f6f4c543edd0ec79b521f42a4a1","modified":1698375074727},{"_id":"source/react/node_modules/source-map-js/package.json","hash":"cf2b89aa0897545bf7366fe27e2b8dc83c67fadf","modified":1698375074688},{"_id":"source/react/node_modules/source-map-js/source-map.js","hash":"54dd50c132e3a298bcad252861389300ac0ce265","modified":1698375074637},{"_id":"source/react/node_modules/vite/README.md","hash":"b6ebfefc99cd776a1346f00ae5e9df19b2185f72","modified":1698375076860},{"_id":"source/react/node_modules/source-map-js/README.md","hash":"7829b2c90abeb9dae4a2ecedd416d8f2955af8aa","modified":1698375074723},{"_id":"source/react/node_modules/vite/client.d.ts","hash":"44ac857bbd97511d6d3c815227b70977cffe0fde","modified":1698375076881},{"_id":"source/react/node_modules/yallist/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1698375074050},{"_id":"source/react/node_modules/vite/package.json","hash":"650fb9252aa4807c5db6326a8daad600e715353f","modified":1698375076832},{"_id":"source/react/node_modules/yallist/README.md","hash":"930460a06c3414c2dceeeca378fbe0057779fab5","modified":1698375074396},{"_id":"source/react/node_modules/yallist/package.json","hash":"96cc9bf2282dd9cd2c0bb49c2bca096782b2da5e","modified":1698375074162},{"_id":"source/react/node_modules/yallist/iterator.js","hash":"357867d11a5f3f9a52d44300e107ef4b8ceb9830","modified":1698375074068},{"_id":"source/react/node_modules/vite/index.cjs","hash":"fcdaca05bc3ed12e26d5feef0fbd67e371d2794c","modified":1698375074650},{"_id":"source/react/node_modules/update-browserslist-db/cli.js","hash":"a11d722daa3fd07875b0c99409afee293b7c9480","modified":1698375074142},{"_id":"source/react/node_modules/update-browserslist-db/README.md","hash":"f4bc60275a8f1b43321623d94f0ffb4c08de0ed2","modified":1698375074442},{"_id":"source/react/node_modules/yallist/yallist.js","hash":"496f44df726d52d15b151396e66afa2c2b1acc4d","modified":1698375074128},{"_id":"source/react/node_modules/update-browserslist-db/LICENSE","hash":"e15c625abbd5bd8836f1ac689cf13c8731b9d9f0","modified":1698375074051},{"_id":"source/react/node_modules/update-browserslist-db/package.json","hash":"15ed46ac1beddea1b124deb168f6da25eb5d3e3f","modified":1698375074397},{"_id":"source/react/node_modules/update-browserslist-db/index.d.ts","hash":"ba638b5a115bf962147a571f9c482db5ce879698","modified":1698375074456},{"_id":"source/react/node_modules/update-browserslist-db/check-npm-version.js","hash":"bdaee9263f0543ffef86981c1bd29abb73cfe64e","modified":1698375074069},{"_id":"source/react/node_modules/update-browserslist-db/utils.js","hash":"fa8b5effeab40fcd78862c8147fd9376be256190","modified":1698375074306},{"_id":"source/react/node_modules/update-browserslist-db/index.js","hash":"23c4fbb37fa539e9244a0460721073d107c0e7e3","modified":1698375074165},{"_id":"source/react/src/react/jsx/ReactJSXElement.js","hash":"d0b656c4b7a86e2374a5d9a083b5aafd03777a71","modified":1698374205806},{"_id":"source/react/src/react/shared/ReactSymbols.js","hash":"4cb32c21b95ef32e8489339363955f2b631520c1","modified":1698374205809},{"_id":"source/react/src/react/shared/hasOwnProperty.js","hash":"4676b2a406e8261a24c7ca760cd75d889ecc2968","modified":1698374205809},{"_id":"source/react/src/react-reconciler/src/ReactFiberRoot.js","hash":"827428a22168769b517c07713345312f3b16d694","modified":1698388318014},{"_id":"source/react/src/react-reconciler/src/ReactFiberReconciler.js","hash":"1440495feb0ca75c468bc2a9d7f5205e3774ce92","modified":1698377192889},{"_id":"source/react/node_modules/.vite/deps/_metadata.json","hash":"79b4b50998cd18050ac13bee4b630f095943d47d","modified":1698375393007},{"_id":"source/react/src/react-reconciler/src/ReactFiber.js","hash":"c99b944da7fffb300c51a70cd231077b9594790e","modified":1698388897704},{"_id":"source/react/node_modules/.vite/deps/react_jsx-dev-runtime.js","hash":"59befaaf3d26edea391578dc82bb0a7fa4731dea","modified":1698375392252},{"_id":"source/react/node_modules/.vite/deps/package.json","hash":"50faeb965b15dfc6854cb1235b06dbb5e79148d2","modified":1698375392242},{"_id":"source/react/node_modules/.vite/deps/react_jsx-dev-runtime.js.map","hash":"2941e99b1d57743c41c6b0252ea187c2156b117d","modified":1698375392252},{"_id":"source/react/node_modules/@ampproject/remapping/LICENSE","hash":"2b8b815229aa8a61e483fb4ba0588b8b6c491890","modified":1698375074067},{"_id":"source/react/node_modules/@ampproject/remapping/package.json","hash":"d9f21374f95f9a9ce83559f87f17dfa3a0ccc02f","modified":1698375074442},{"_id":"source/react/src/react-reconciler/src/ReactFiberFlags.js","hash":"0aab8986b5c07be3f1783863f633d88732ca3d21","modified":1698388383210},{"_id":"source/react/node_modules/@ampproject/remapping/README.md","hash":"5095dccf030dd1830a1294760a125697d037b940","modified":1698375074554},{"_id":"source/react/src/react-reconciler/src/ReactWorkTags.js","hash":"ee60e452ee15caf9750e89b861fcd48866e03b21","modified":1698388580832},{"_id":"source/react/node_modules/@esbuild/darwin-x64/README.md","hash":"bdc518184d9425e105a5e6c8c959fba734d404a9","modified":1698375078976},{"_id":"source/react/node_modules/@esbuild/darwin-x64/package.json","hash":"3fb4469a8ca7fa717db279051a7811199986848e","modified":1698375078976},{"_id":"source/react/node_modules/@babel/generator/README.md","hash":"5441d4d658668e0e1e0bb009567d9c954e84bd55","modified":1698375074128},{"_id":"source/react/node_modules/@babel/code-frame/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074067},{"_id":"source/react/node_modules/@babel/generator/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074067},{"_id":"source/react/node_modules/@babel/code-frame/package.json","hash":"ff1b862428796ce07c231320435f4e5df0737861","modified":1698375074465},{"_id":"source/react/node_modules/@babel/compat-data/corejs2-built-ins.js","hash":"ae7c50194c57a5b6aa0145f18ab91c1a1cd88322","modified":1698375074161},{"_id":"source/react/node_modules/@babel/compat-data/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074067},{"_id":"source/react/node_modules/@babel/code-frame/README.md","hash":"d609635ad15bc2c3373c1fbd6ad1abee0b8db4c3","modified":1698375074128},{"_id":"source/react/node_modules/@babel/compat-data/README.md","hash":"82f38bc02725bfe9b618dad913d2305b2a943079","modified":1698375074127},{"_id":"source/react/node_modules/@babel/generator/package.json","hash":"b1b6d4d82cb3dc4cbfa754663e880557cd87ff77","modified":1698375074929},{"_id":"source/react/node_modules/@babel/compat-data/package.json","hash":"af55062ac679bdc1cf3b7f95788297d7f2b14c1a","modified":1698375074628},{"_id":"source/react/node_modules/@babel/compat-data/plugin-bugfixes.js","hash":"8472f988994941a80fdca10ae9cc79c5133394d3","modified":1698375074639},{"_id":"source/react/node_modules/@babel/compat-data/native-modules.js","hash":"73dda2867a5aed061cdae4a587f8de462d6c85b8","modified":1698375074599},{"_id":"source/react/node_modules/@babel/helper-function-name/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074066},{"_id":"source/react/node_modules/@babel/compat-data/overlapping-plugins.js","hash":"d0dd289f0a16f2f71f63fac12e055c48729c009c","modified":1698375074612},{"_id":"source/react/node_modules/@babel/compat-data/plugins.js","hash":"309f361f7609edaf24ac831f0000bfbe39c253f8","modified":1698375074648},{"_id":"source/react/node_modules/@babel/compat-data/corejs3-shipped-proposals.js","hash":"d295168285627b7adc0a0e7967a0d04c4e02b2ae","modified":1698375074305},{"_id":"source/react/node_modules/@babel/core/README.md","hash":"551d6536bded3a39d035fe4d964dec7a7c07f016","modified":1698375074128},{"_id":"source/react/node_modules/@babel/core/cjs-proxy.cjs","hash":"f7ddd6fabdf2dca7412271848a2d9757a3a10a77","modified":1698375074161},{"_id":"source/react/node_modules/@babel/core/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074067},{"_id":"source/react/node_modules/@babel/helper-hoist-variables/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074066},{"_id":"source/react/node_modules/@babel/helper-function-name/package.json","hash":"e8da047aa7180063d586ec7dfac6b6beec7f5524","modified":1698375074464},{"_id":"source/react/node_modules/@babel/helper-hoist-variables/README.md","hash":"de1921c9a695409b6ac7b5e36a782cdef038ee75","modified":1698375074127},{"_id":"source/react/node_modules/@babel/helper-function-name/README.md","hash":"b80a44aa923f1b9b1b72f8e7d1358ea84cf09161","modified":1698375074127},{"_id":"source/react/node_modules/@babel/helper-hoist-variables/package.json","hash":"09bf7b9fb82b356768df75657581929df11c8715","modified":1698375074440},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074067},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/README.md","hash":"d5ede17771082a9ceb06a214183133cdba584bd9","modified":1698375074127},{"_id":"source/react/node_modules/@babel/helper-module-transforms/README.md","hash":"b45732b92080ce61c642f7a0b750f9978c07028a","modified":1698375074127},{"_id":"source/react/node_modules/@babel/helper-plugin-utils/package.json","hash":"ae6208f6a8ab7364b03424494487b91237c16886","modified":1698375074440},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/package.json","hash":"1cd20aba2ea44e6337b8169364d769c604b35b95","modified":1698375074677},{"_id":"source/react/node_modules/@babel/helper-plugin-utils/README.md","hash":"2bfd13380c48d1f2c2d5f96f10125538dfd0e508","modified":1698375074126},{"_id":"source/react/node_modules/@babel/helper-environment-visitor/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074067},{"_id":"source/react/node_modules/@babel/helper-plugin-utils/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074065},{"_id":"source/react/node_modules/@babel/core/package.json","hash":"59442b7267105cd02edddbcf7c64622af8d2735e","modified":1698375075077},{"_id":"source/react/node_modules/@babel/helper-module-transforms/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074066},{"_id":"source/react/node_modules/@babel/helper-environment-visitor/README.md","hash":"caf1b6621ce025307c8c89598dfe9a2ef24fd98a","modified":1698375074127},{"_id":"source/react/node_modules/@babel/helper-module-imports/README.md","hash":"fa0eadec786c94e9c42f2321dde27e162f0c416f","modified":1698375074126},{"_id":"source/react/node_modules/@babel/helper-module-imports/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074065},{"_id":"source/react/node_modules/@babel/helper-module-imports/package.json","hash":"eac63fafba9a18efa3edb440d5bdeaa9e245c247","modified":1698375074598},{"_id":"source/react/node_modules/@babel/helper-environment-visitor/package.json","hash":"4fd7ffba4b899ea38dc14b1ce4b24c04b9597a2f","modified":1698375074442},{"_id":"source/react/node_modules/@babel/helper-split-export-declaration/README.md","hash":"df677a53a98cb7bf61cac2d6d31e836dfc39bf2f","modified":1698375074127},{"_id":"source/react/node_modules/@babel/helper-split-export-declaration/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074064},{"_id":"source/react/node_modules/@babel/helper-simple-access/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074064},{"_id":"source/react/node_modules/@babel/helper-split-export-declaration/package.json","hash":"4a3d002b2686954ffc3208a82bff492dce2a18de","modified":1698375074438},{"_id":"source/react/node_modules/@babel/helper-simple-access/README.md","hash":"4b7f8710fed05aa409f7b497765954ab3d729317","modified":1698375074126},{"_id":"source/react/node_modules/@babel/helper-string-parser/README.md","hash":"701ce2f7af08fbca03c9e54a39447a6129eb3da8","modified":1698375074126},{"_id":"source/react/node_modules/@babel/helper-simple-access/package.json","hash":"14fe84d706fb0e35ac5f1bd1f2d86038fdf6f0fb","modified":1698375074439},{"_id":"source/react/node_modules/@babel/helper-validator-option/README.md","hash":"4b2d99be768db2c1eaca4ef6b881e4b7beb3e465","modified":1698375074126},{"_id":"source/react/node_modules/@babel/helper-string-parser/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074063},{"_id":"source/react/node_modules/@babel/helper-string-parser/package.json","hash":"20b8ef89aed1259753115a2e9a20ae052737aa54","modified":1698375074459},{"_id":"source/react/node_modules/@babel/helper-validator-option/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074064},{"_id":"source/react/node_modules/@babel/helpers/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074064},{"_id":"source/react/node_modules/@babel/helpers/README.md","hash":"432119e22b240d5471585fa8ad9736aae75d3256","modified":1698375074127},{"_id":"source/react/node_modules/@babel/helper-validator-option/package.json","hash":"0319546c8c22563fe4fe477b05ee48b3820e3e65","modified":1698375074516},{"_id":"source/react/node_modules/@babel/highlight/README.md","hash":"14baf45cbcfd7b8be9202b06901cddd46fd50c23","modified":1698375074126},{"_id":"source/react/node_modules/@babel/highlight/package.json","hash":"c06000ed01df6eb1f132e9630d982b7562c9fe3b","modified":1698375074459},{"_id":"source/react/node_modules/@babel/highlight/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074062},{"_id":"source/react/node_modules/@babel/helper-validator-identifier/README.md","hash":"f5374adb0a2f9bec1ac325646f163958a4d71ef1","modified":1698375074126},{"_id":"source/react/node_modules/@babel/helper-module-transforms/package.json","hash":"d1b63fffc0f3a5960fa313a343076e62fc31662f","modified":1698375074736},{"_id":"source/react/node_modules/@babel/helper-validator-identifier/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074063},{"_id":"source/react/node_modules/@babel/parser/README.md","hash":"a1f429107529e3529c4a9e8977abd73438b6687e","modified":1698375074389},{"_id":"source/react/node_modules/@babel/parser/LICENSE","hash":"8c20bc370f498b8aa6b4a3c3f747ed808200497e","modified":1698375074302},{"_id":"source/react/node_modules/@babel/helper-validator-identifier/package.json","hash":"d4afca23760748b2b39c12e9ce0788259560d1f7","modified":1698375074550},{"_id":"source/react/node_modules/@babel/parser/index.cjs","hash":"9029562f88bb1e33b6e28da3b34b5a5dcdeab702","modified":1698375074459},{"_id":"source/react/node_modules/@babel/parser/CHANGELOG.md","hash":"aff6501e059ce8b36e2ee87dd505352e7aef0892","modified":1698375074158},{"_id":"source/react/node_modules/@babel/plugin-transform-react-jsx-source/package.json","hash":"90bb49911657dafd43573cf94c58e1cf8d62ecca","modified":1698375074794},{"_id":"source/react/node_modules/@babel/plugin-transform-react-jsx-source/README.md","hash":"f32b6879fdb5f411a7ca8a9eec240ee86a874d5b","modified":1698375074776},{"_id":"source/react/node_modules/@babel/plugin-transform-react-jsx-source/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074770},{"_id":"source/react/node_modules/@babel/template/README.md","hash":"31e29a43f4c342e23be4178d80acf2632b6f0fa9","modified":1698375074125},{"_id":"source/react/node_modules/@babel/plugin-transform-react-jsx-self/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074698},{"_id":"source/react/node_modules/@babel/helpers/package.json","hash":"4413fa2b3c5ca9a6eab235d4444edb54902babb9","modified":1698375074973},{"_id":"source/react/node_modules/@babel/template/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074062},{"_id":"source/react/node_modules/@babel/plugin-transform-react-jsx-self/package.json","hash":"ce7e4aa95cab07e65c57833c4e3dd30bc45a35f4","modified":1698375074745},{"_id":"source/react/node_modules/@babel/types/README.md","hash":"ecb9a8701ac43691d0bda9071cc936a5464ca91a","modified":1698375074126},{"_id":"source/react/node_modules/@babel/template/package.json","hash":"1adab37f9d49ff0829090291c8185f7d30619cac","modified":1698375074701},{"_id":"source/react/node_modules/@babel/types/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074063},{"_id":"source/react/node_modules/@babel/plugin-transform-react-jsx-self/README.md","hash":"7c7a2ff5a3a3a3ab49624c14e438cf557375e741","modified":1698375074705},{"_id":"source/react/node_modules/@jridgewell/set-array/README.md","hash":"755991724fb01e347e5f1f8a171fad6188e8052b","modified":1698375074446},{"_id":"source/react/node_modules/@jridgewell/set-array/package.json","hash":"a5ccecef53bfa73da008a64453422a4cfd1a5faa","modified":1698375074301},{"_id":"source/react/node_modules/@jridgewell/set-array/LICENSE","hash":"e091d6ff39a03ffe3217b8839a3e0011dfa379ff","modified":1698375074062},{"_id":"source/react/node_modules/@jridgewell/gen-mapping/LICENSE","hash":"e091d6ff39a03ffe3217b8839a3e0011dfa379ff","modified":1698375074061},{"_id":"source/react/node_modules/@jridgewell/sourcemap-codec/LICENSE","hash":"735079ef2f70022be5abf63a65288c2f87dcd34a","modified":1698375074061},{"_id":"source/react/node_modules/@jridgewell/gen-mapping/README.md","hash":"52f83466d73d4f6b48b04b768af6808968bc848b","modified":1698375074551},{"_id":"source/react/node_modules/@jridgewell/gen-mapping/package.json","hash":"e5b9f6dc1be6c7ceddf7a1753bb5e914889a72aa","modified":1698375074385},{"_id":"source/react/node_modules/@jridgewell/sourcemap-codec/README.md","hash":"5ff7e14081048616051978e661a0b2ad16a2800b","modified":1698375074482},{"_id":"source/react/node_modules/@jridgewell/sourcemap-codec/package.json","hash":"e979d316cae783064de27a85b4e25d5d168dbcc2","modified":1698375074300},{"_id":"source/react/node_modules/@babel/traverse/README.md","hash":"8ae6a884e708b72b6a8fdedf72c080a5225f776d","modified":1698375074126},{"_id":"source/react/node_modules/@babel/traverse/LICENSE","hash":"578785efdec6fa01dae357fb1e7675ccac00861e","modified":1698375074064},{"_id":"source/react/node_modules/@types/babel__core/LICENSE","hash":"689ec0681815ecc32bee639c68e7740add7bd301","modified":1698375074630},{"_id":"source/react/node_modules/@babel/parser/package.json","hash":"493a6c497037f7a3fe1a5add91110bad9db48379","modified":1698375074992},{"_id":"source/react/node_modules/@types/babel__core/README.md","hash":"87a8fc5370673f5c6e1a650b5be430c9ec152ff6","modified":1698375074641},{"_id":"source/react/node_modules/@types/babel__core/index.d.ts","hash":"b490acd9a9bfdd82c3a9738ba15ac75483889823","modified":1698375074662},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/LICENSE","hash":"e5556d805ed6e5a9445e590af4ef9f0c64c09195","modified":1698375074613},{"_id":"source/react/node_modules/@babel/types/package.json","hash":"e0cc50e6c7b5de2ad5d1e8241e72caf2337a2d7d","modified":1698375075262},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/README.md","hash":"baea8a9e1c4a064c4b77131eb55c2f875c806441","modified":1698375074777},{"_id":"source/react/node_modules/@types/babel__core/package.json","hash":"827a51e2d56dec6914280a50dc660cae5393e982","modified":1698375074668},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/package.json","hash":"049791c7f616ad91303c0df731ae7210125e3026","modified":1698375074693},{"_id":"source/react/node_modules/@types/babel__template/README.md","hash":"252480d6590b3e792a29148c9e7b844cbd271693","modified":1698375074642},{"_id":"source/react/node_modules/@babel/traverse/package.json","hash":"b0a1f098017412f73664e851a53d37c27ffc6fc7","modified":1698375075000},{"_id":"source/react/node_modules/@types/babel__template/LICENSE","hash":"689ec0681815ecc32bee639c68e7740add7bd301","modified":1698375074631},{"_id":"source/react/node_modules/@types/babel__generator/LICENSE","hash":"689ec0681815ecc32bee639c68e7740add7bd301","modified":1698375074711},{"_id":"source/react/node_modules/@types/babel__template/package.json","hash":"542ecae883377e6b783453d76fbd115b35600af0","modified":1698375074668},{"_id":"source/react/node_modules/@types/babel__template/index.d.ts","hash":"dd91253fd1f3fef2645502c69a1dcdcae7ebf34b","modified":1698375074656},{"_id":"source/react/node_modules/@types/babel__generator/package.json","hash":"3808f5f5223e48bf96b69e4f5a477d78ab99707f","modified":1698375074742},{"_id":"source/react/node_modules/@types/babel__traverse/package.json","hash":"47e660fc053c1f75387cbf3e7eb17ea0c1b0dbc1","modified":1698375074975},{"_id":"source/react/node_modules/@vitejs/plugin-react/LICENSE","hash":"e7defe5577a47cca9cb6547ac25dc4846553cf43","modified":1698375074658},{"_id":"source/react/node_modules/@types/babel__traverse/LICENSE","hash":"689ec0681815ecc32bee639c68e7740add7bd301","modified":1698375074947},{"_id":"source/react/node_modules/@types/babel__generator/index.d.ts","hash":"ea3c7d0006b5b246dc17ee3dbfd56b0dcebce448","modified":1698375074734},{"_id":"source/react/node_modules/@vitejs/plugin-react/README.md","hash":"f7b69aefd511d905c69bc71b6efe452dbe338d44","modified":1698375074724},{"_id":"source/react/node_modules/@vitejs/plugin-react/package.json","hash":"f6f1215457f204854feba5eade799c13476078bd","modified":1698375074717},{"_id":"source/react/node_modules/@jridgewell/resolve-uri/README.md","hash":"be2ed2f2e36b0fbf9ebddf772659aa68b94e386f","modified":1698375074476},{"_id":"source/react/node_modules/@types/babel__generator/README.md","hash":"9eb546088b8736fc680ccfa3bcd7ee2663be2567","modified":1698375074723},{"_id":"source/react/node_modules/@types/babel__traverse/README.md","hash":"85d6042e73dcf286e0cabc9b9e8337b46c51bf1b","modified":1698375074950},{"_id":"source/react/node_modules/@jridgewell/resolve-uri/LICENSE","hash":"737372d0ce81cdc670ebd131771ff8089e86dd99","modified":1698375074061},{"_id":"source/react/node_modules/caniuse-lite/data/browserVersions.js","hash":"73fc04b040638fe1f2896f6d22d31bef4c604558","modified":1698375075007},{"_id":"source/react/node_modules/@jridgewell/resolve-uri/package.json","hash":"b00aa2afe53e2d02dd4889a49445847310f63f76","modified":1698375074300},{"_id":"source/react/node_modules/caniuse-lite/data/agents.js","hash":"09b773788dc5238284c0b28087887c6b7f90a1f7","modified":1698375074836},{"_id":"source/react/node_modules/caniuse-lite/data/browsers.js","hash":"51d3b5f80f14845a5279fe4c01ae8688d3ebb060","modified":1698375075007},{"_id":"source/react/node_modules/debug/src/common.js","hash":"c9707394c09387b56864a8865158d29fd307774a","modified":1698375074293},{"_id":"source/react/node_modules/debug/src/browser.js","hash":"e63a38b9e85d1d86dea2e02c6f885fa001b49d34","modified":1698375074154},{"_id":"source/react/node_modules/chalk/types/index.d.ts","hash":"0030b5543edf909cd27d406622f7b63717904c0f","modified":1698375074475},{"_id":"source/react/node_modules/debug/src/index.js","hash":"0f4ce3b10eff761f099ac75593f7e05b149ae695","modified":1698375074374},{"_id":"source/react/node_modules/caniuse-lite/data/features.js","hash":"4f7572239641bc66a4077519b5980a225ab4dc83","modified":1698375075263},{"_id":"source/react/node_modules/debug/src/node.js","hash":"481608e3c95722f3a474336e5b777a6a521e76f9","modified":1698375074435},{"_id":"source/react/node_modules/escalade/dist/index.js","hash":"ea3ca72e5b87730b45c4b1f1acbd8a1a706cc64f","modified":1698375074154},{"_id":"source/react/node_modules/escalade/sync/index.js","hash":"1c8a10166c8f533042094687dfa818e306c311d1","modified":1698375074375},{"_id":"source/react/node_modules/escalade/dist/index.mjs","hash":"28ac228801210f2eed8252d17b200344dc747f11","modified":1698375074458},{"_id":"source/react/node_modules/escalade/sync/index.d.ts","hash":"9f770d03445c32713c1c0169f26def588646fc52","modified":1698375074481},{"_id":"source/react/node_modules/escalade/sync/index.mjs","hash":"96643d9e0107e7189210a53fa30564122ede8d91","modified":1698375074467},{"_id":"source/react/node_modules/jsesc/bin/jsesc","hash":"b41a1c7189bd18fae0cca2fbc2de69d42dcbab97","modified":1698375074465},{"_id":"source/react/node_modules/gensync/test/.babelrc","hash":"117d4b029c6dae560c10bac02a78eb12e8850adf","modified":1698375074075},{"_id":"source/react/node_modules/esbuild/lib/main.d.ts","hash":"29abe138b8bb5d16e25f2e6e871c9131cb3c348c","modified":1698375074771},{"_id":"source/react/node_modules/jsesc/man/jsesc.1","hash":"969592389e6a0c3de6e86977f7bf3a9231f44ac4","modified":1698375074509},{"_id":"source/react/node_modules/gensync/test/index.test.js","hash":"fcf1798d1cbdb0efccacaad0fa9ec9dd0efbe780","modified":1698375074444},{"_id":"source/react/node_modules/json5/dist/index.js","hash":"671b9f6dcf137814c148fa775e8760ed3ea313a9","modified":1698375074444},{"_id":"source/react/node_modules/json5/lib/cli.js","hash":"fe57f49ad117fcc610650c2859ead73e8435158b","modified":1698375074075},{"_id":"source/react/node_modules/json5/dist/index.min.js","hash":"1ab39d4c4a69bdcd1be54f5ad825831b2da7b873","modified":1698375074480},{"_id":"source/react/node_modules/json5/lib/index.d.ts","hash":"9a525cd5674262a10b6bac6b0f115a6af5c6fc10","modified":1698375074757},{"_id":"source/react/node_modules/json5/lib/parse.d.ts","hash":"b7e29d6b2a348880fbac8345659f852e63c7f903","modified":1698375074763},{"_id":"source/react/node_modules/json5/lib/index.js","hash":"42a90a2f47121a25578cb1cfecfd51899cf2a65b","modified":1698375074467},{"_id":"source/react/node_modules/json5/dist/index.min.mjs","hash":"69551ddabafbb0a51713e48669a92c8e9ceb07b0","modified":1698375074718},{"_id":"source/react/node_modules/json5/dist/index.mjs","hash":"83ba26d1c33b2b656c5aa39de12976714e4dd23b","modified":1698375074743},{"_id":"source/react/node_modules/json5/lib/stringify.d.ts","hash":"321771fb9f93b3c7053ae527e7f0b5ec01aa0890","modified":1698375074771},{"_id":"source/react/node_modules/json5/lib/require.js","hash":"7b64d58f1c20c93d12f7048ae300bb55a8313e4e","modified":1698375074608},{"_id":"source/react/node_modules/json5/lib/register.js","hash":"af0a48094eb80e028677eab6a1d43cf07a4c06a1","modified":1698375074597},{"_id":"source/react/node_modules/json5/lib/parse.js","hash":"dc7db617ff95008f7cef920c25537b5049217b64","modified":1698375074574},{"_id":"source/react/node_modules/json5/lib/unicode.d.ts","hash":"ad5f8af13f1e76223e673bc9b9d1a49695f6a62a","modified":1698375074780},{"_id":"source/react/node_modules/json5/lib/stringify.js","hash":"7e6860a405147e2dc619f6a25462b00dda7d2b59","modified":1698375074625},{"_id":"source/react/node_modules/json5/lib/util.d.ts","hash":"32999dd129caf9a0756f3260e0cac26cad670847","modified":1698375074785},{"_id":"source/react/node_modules/json5/lib/unicode.js","hash":"c4feb185891a963e9051414ca502707a4f85aa43","modified":1698375074647},{"_id":"source/react/node_modules/nanoid/async/index.browser.cjs","hash":"bc99988b604f297152b8e36ece273b5d319fd530","modified":1698375074143},{"_id":"source/react/node_modules/nanoid/async/index.cjs","hash":"8b9c0117d25757edc59b644b4b5bf1cba63b139f","modified":1698375074307},{"_id":"source/react/node_modules/json5/lib/util.js","hash":"2bc7b6ed831e0506ef0aab9d714c00070952cc14","modified":1698375074666},{"_id":"source/react/node_modules/nanoid/async/index.d.ts","hash":"3ed105820381fb0129d268c5c9cb2e1d10fcf58f","modified":1698375074725},{"_id":"source/react/node_modules/nanoid/bin/nanoid.cjs","hash":"643ec2be4f4caa5605abf324e37fb99298951465","modified":1698375074509},{"_id":"source/react/node_modules/nanoid/async/index.js","hash":"b3a4e7a27b8bd6f74b101d03f3e125b368559d00","modified":1698375074608},{"_id":"source/react/node_modules/nanoid/async/index.browser.js","hash":"6bf30c4ef5e1e25b0929d86aa6e73bee56cd2351","modified":1698375074524},{"_id":"source/react/node_modules/nanoid/async/package.json","hash":"d9ba6deb6938a300b4570bb981e9f0bb6a0bf316","modified":1698375074666},{"_id":"source/react/node_modules/nanoid/non-secure/index.cjs","hash":"fc91e837ab739962e048fe0e565c7b3cfde6260c","modified":1698375074457},{"_id":"source/react/node_modules/nanoid/non-secure/index.js","hash":"b415fc71cddc77b488a9c619f8dd1558d892bfdd","modified":1698375074637},{"_id":"source/react/node_modules/nanoid/non-secure/package.json","hash":"36199a2d9ec7dd87955fa090b15a1247debaa321","modified":1698375074675},{"_id":"source/react/node_modules/nanoid/url-alphabet/index.cjs","hash":"8981347f666a54b49e642aacb38c4507d3d64d3a","modified":1698375074474},{"_id":"source/react/node_modules/nanoid/async/index.native.js","hash":"18eb087df7593df3e544c1142ef9b88f1142c7da","modified":1698375074652},{"_id":"source/react/node_modules/nanoid/url-alphabet/index.js","hash":"98df3d48b1f24db57379e94fd839aa1e54f44e33","modified":1698375074646},{"_id":"source/react/node_modules/nanoid/url-alphabet/package.json","hash":"36199a2d9ec7dd87955fa090b15a1247debaa321","modified":1698375074689},{"_id":"source/react/node_modules/rollup/dist/getLogFilter.d.ts","hash":"90898c40243c37ce6856662971569b93d257a6d5","modified":1698375076570},{"_id":"source/react/node_modules/rollup/dist/getLogFilter.js","hash":"4ee021cdf178508fce621fc0fdb676f8c533e7d2","modified":1698375074796},{"_id":"source/react/node_modules/nanoid/non-secure/index.d.ts","hash":"2c10de2eb139bd35621bda6fe6a51cff4aa45d9b","modified":1698375074736},{"_id":"source/react/node_modules/rollup/dist/loadConfigFile.d.ts","hash":"79db3e1ddb0986fcb15f62eb4f3697d4c9641865","modified":1698375076571},{"_id":"source/react/node_modules/react-refresh/cjs/react-refresh-babel.production.min.js","hash":"148335f788a82ca8ed28d2c93d90746f10607d47","modified":1698375074737},{"_id":"source/react/node_modules/rollup/dist/rollup.js","hash":"ea0c5491be4f481a5a4cb7424e9c2e5cfedcd77e","modified":1698375075726},{"_id":"source/react/node_modules/rollup/dist/rollup.d.ts","hash":"99294f99ca00f7af0d853ee30139ac43296e6e45","modified":1698375076572},{"_id":"source/react/node_modules/rollup/dist/loadConfigFile.js","hash":"7ec3692eedc0a692a67444c4468fc212af2442d0","modified":1698375074912},{"_id":"source/react/node_modules/semver/bin/semver.js","hash":"562a909c318904cf379778a9ba3b1c0e865b0fc7","modified":1698375074165},{"_id":"source/react/node_modules/react-refresh/cjs/react-refresh-runtime.production.min.js","hash":"bfa8373a36e79254f6705c54122e72c1b782dd01","modified":1698375074765},{"_id":"source/react/node_modules/postcss/lib/at-rule.js","hash":"d651dcd872c4d138b3a73f549856e7edd5464df6","modified":1698375074144},{"_id":"source/react/node_modules/react-refresh/cjs/react-refresh-runtime.development.js","hash":"18c6068d81c2962e5aba89d8b06705174ff1ae2f","modified":1698375074753},{"_id":"source/react/node_modules/react-refresh/cjs/react-refresh-babel.development.js","hash":"450566e524c45f83478db8a8cee0d003d20bcb76","modified":1698375074711},{"_id":"source/react/node_modules/postcss/lib/at-rule.d.ts","hash":"6cdd2fa63d94437964304eb5089f7ce4261facd4","modified":1698375074803},{"_id":"source/react/node_modules/postcss/lib/comment.js","hash":"9a76797149ab7bcd7730fabf8cb805ba4df496d6","modified":1698375074166},{"_id":"source/react/node_modules/postcss/lib/css-syntax-error.js","hash":"810aa2969f8af49f700f702fe9be2ea062607d96","modified":1698375074443},{"_id":"source/react/node_modules/postcss/lib/declaration.js","hash":"21e41be3eccfde4d5218bde899242fb46f474c58","modified":1698375074466},{"_id":"source/react/node_modules/postcss/lib/container.js","hash":"781a6f5e199ae345e2e512a35d83a63027cb8346","modified":1698375074307},{"_id":"source/react/node_modules/postcss/lib/declaration.d.ts","hash":"94acf0322a962ec2738e2db0af8ebf2cdec69945","modified":1698375074835},{"_id":"source/react/node_modules/postcss/lib/document.js","hash":"26b0e3c91b656e773b59415c93f78a618155a1a1","modified":1698375074474},{"_id":"source/react/node_modules/postcss/lib/document.d.ts","hash":"81dbfcbb8c44e72f07962686dc244b2dae61373c","modified":1698375074844},{"_id":"source/react/node_modules/postcss/lib/fromJSON.d.ts","hash":"1729c4840c358f50ccecc6d6126436e1fe498fa3","modified":1698375074848},{"_id":"source/react/node_modules/postcss/lib/input.d.ts","hash":"4e16f373bd37c9f77bb9895521cdda7a2bdb3c5d","modified":1698375074849},{"_id":"source/react/node_modules/postcss/lib/fromJSON.js","hash":"a9667b9d6b46ba7ffa31cc52e6a85faf49a7fcbd","modified":1698375074480},{"_id":"source/react/node_modules/postcss/lib/lazy-result.d.ts","hash":"b6a0a39a8452656c01bc870ae25cec4592e10f61","modified":1698375074858},{"_id":"source/react/node_modules/postcss/lib/input.js","hash":"884bb979a9ad1bde2dbb85dfd792c3c67cdbeeb9","modified":1698375074508},{"_id":"source/react/node_modules/postcss/lib/container.d.ts","hash":"735b6348a90b6a719905cd71895e636c496d216c","modified":1698375074824},{"_id":"source/react/node_modules/postcss/lib/lazy-result.js","hash":"628810a858d94ae223804bc5c84ac12713cd35a8","modified":1698375074549},{"_id":"source/react/node_modules/postcss/lib/comment.d.ts","hash":"861577a4b388260709e5bc3a11f2c4300e6230c4","modified":1698375074809},{"_id":"source/react/node_modules/postcss/lib/list.js","hash":"392f6b1bb31927179ad8fb1b88abf4586201ae3e","modified":1698375074597},{"_id":"source/react/node_modules/postcss/lib/css-syntax-error.d.ts","hash":"b3a7efbe0e22b2075e9a07411ef021d1de5ba152","modified":1698375074829},{"_id":"source/react/node_modules/postcss/lib/map-generator.js","hash":"92f030796f77707d1d7aaef9da25ba620161061e","modified":1698375074625},{"_id":"source/react/node_modules/postcss/lib/no-work-result.js","hash":"37f057cef3812b16e1ca1095399853df594ec86b","modified":1698375074646},{"_id":"source/react/node_modules/postcss/lib/node.js","hash":"74feebf5ca87de10d083ffa6dc8f97ada534783e","modified":1698375074660},{"_id":"source/react/node_modules/postcss/lib/no-work-result.d.ts","hash":"346ae3efaaef4f96a300b3109e10699e4bb80f09","modified":1698375074864},{"_id":"source/react/node_modules/postcss/lib/node.d.ts","hash":"6b329238e1f44156c7f34212357b93e5abb6cde6","modified":1698375074868},{"_id":"source/react/node_modules/postcss/lib/parse.js","hash":"92df9e6130eeed389b62a1795b8c53aa0b0d8bd0","modified":1698375074675},{"_id":"source/react/node_modules/postcss/lib/postcss.d.mts","hash":"80664ab01a59180ebadfee90e240f2d032de32a3","modified":1698375074796},{"_id":"source/react/node_modules/postcss/lib/list.d.ts","hash":"b8e3158e80a6bf43d5b1e47127ae20ab9aa063a5","modified":1698375074864},{"_id":"source/react/node_modules/postcss/lib/postcss.js","hash":"9981cdbb68de13aa6717c9965585969ef8a1412f","modified":1698375074701},{"_id":"source/react/node_modules/postcss/lib/previous-map.js","hash":"157989fcad5f917721f322e503d35332b5bdad06","modified":1698375074718},{"_id":"source/react/node_modules/postcss/lib/postcss.mjs","hash":"c612b7bdc8f8ccd150469d4bff369d3ce54b8e69","modified":1698375074791},{"_id":"source/react/node_modules/postcss/lib/parser.js","hash":"c2265ea3842bdd065b141afcff0a60ae1b4b8097","modified":1698375074689},{"_id":"source/react/node_modules/postcss/lib/postcss.d.ts","hash":"80ad2daf656a00d744b2ec34f64e6d6888bc11c2","modified":1698375074875},{"_id":"source/react/node_modules/postcss/lib/parse.d.ts","hash":"0c04aeeddd08b6426d41ce41f842f346e5634545","modified":1698375074872},{"_id":"source/react/node_modules/postcss/lib/result.js","hash":"e6a4ff5b693d945e28800c1b86fd1851e566385c","modified":1698375074727},{"_id":"source/react/node_modules/postcss/lib/result.d.ts","hash":"92ebd6e232afae4593dde34d347444b7efcef7b4","modified":1698375074883},{"_id":"source/react/node_modules/postcss/lib/previous-map.d.ts","hash":"181d4f2dc3dfe51e44a7537f14339cc290ad1735","modified":1698375074879},{"_id":"source/react/node_modules/postcss/lib/processor.js","hash":"df37d90eac0506a2ed92880a672d846715a3da17","modified":1698375074725},{"_id":"source/react/node_modules/postcss/lib/rule.d.ts","hash":"20948247b6ee1a945a2f6c6e54505d56f4f46f8c","modified":1698375074895},{"_id":"source/react/node_modules/postcss/lib/rule.js","hash":"ba3c11fe6debb00e040a3a2fd5dd6233bac73e6a","modified":1698375074738},{"_id":"source/react/node_modules/postcss/lib/root.js","hash":"038dbfa9a944e17ed3c867f341c9c4b5b7c7d198","modified":1698375074735},{"_id":"source/react/node_modules/postcss/lib/root.d.ts","hash":"470783dc71d6f991e06ef373ab6bb9014c3b7dc6","modified":1698375074885},{"_id":"source/react/node_modules/postcss/lib/stringify.js","hash":"cb658247a9fa65f9187fbef86117be0134f5448a","modified":1698375074745},{"_id":"source/react/node_modules/postcss/lib/symbols.js","hash":"5760472c69e30c80e80c743103c75fba204a15e0","modified":1698375074754},{"_id":"source/react/node_modules/postcss/lib/processor.d.ts","hash":"ef62eea6dd232473e72516b2e162ffb66ef29450","modified":1698375074881},{"_id":"source/react/node_modules/postcss/lib/terminal-highlight.js","hash":"15c6f92a067f0990d092a0527bf7144e58ecd65f","modified":1698375074763},{"_id":"source/react/node_modules/postcss/lib/stringifier.js","hash":"972aab7483e759631e5156b7bab79e52ac9ab6aa","modified":1698375074742},{"_id":"source/react/node_modules/postcss/lib/tokenize.js","hash":"2a89725f8f15c14d1bd0346ec1fa5e346c8d6543","modified":1698375074766},{"_id":"source/react/node_modules/postcss/lib/warning.js","hash":"0295fd24b8366d7fa69d46e032a9ba83be325a2e","modified":1698375074778},{"_id":"source/react/node_modules/source-map-js/lib/array-set.js","hash":"ad62f4ee15345ba799a00c59dd226690b4d1d1d2","modified":1698375074141},{"_id":"source/react/node_modules/postcss/lib/warn-once.js","hash":"1ddd9c1e0d8ba33108efd9d90182a85fadbaec3e","modified":1698375074770},{"_id":"source/react/node_modules/source-map-js/lib/base64-vlq.js","hash":"493d3d895198dfaefe88d2b066c272552ea35889","modified":1698375074163},{"_id":"source/react/node_modules/source-map-js/lib/base64.js","hash":"269e8e4dcb82db12f6e2a6187e7be46bee604ab0","modified":1698375074306},{"_id":"source/react/node_modules/source-map-js/lib/mapping-list.js","hash":"68a9ed5c0a48a384f64efaec04444a464952509d","modified":1698375074466},{"_id":"source/react/node_modules/source-map-js/lib/binary-search.js","hash":"b4333085d02fb4c091361de85d5cb368a3ce7632","modified":1698375074443},{"_id":"source/react/node_modules/source-map-js/lib/source-map-generator.js","hash":"38ee40e9489511593f0feb9108700a377021a07b","modified":1698375074607},{"_id":"source/react/node_modules/source-map-js/lib/source-node.js","hash":"380a1badcbfc18aa40dc5b9ea4cee52dc33ab29c","modified":1698375074651},{"_id":"source/react/node_modules/vite/bin/vite.js","hash":"9bee8ddfbc343700f06a828df5ab636a62ae848a","modified":1698375076832},{"_id":"source/react/node_modules/source-map-js/lib/quick-sort.js","hash":"1df82889f3320d0699f700e4adfe367d30bb751f","modified":1698375074473},{"_id":"source/react/node_modules/source-map-js/lib/source-map-consumer.js","hash":"0609e055f0d1d62aa70027d45e51bf310dc234a7","modified":1698375074547},{"_id":"source/react/node_modules/postcss/lib/warning.d.ts","hash":"eee742ea0fdbe227f23508dcc36c57e44c652cc8","modified":1698375074903},{"_id":"source/react/node_modules/postcss/lib/stringifier.d.ts","hash":"736251bcdba1cc1f01af585d6300ffa8fbe4db81","modified":1698375074900},{"_id":"source/react/node_modules/vite/bin/openChrome.applescript","hash":"7a7b6fae67fca86089335af33bf76e1e1ae485cc","modified":1698375074643},{"_id":"source/react/node_modules/source-map-js/lib/util.js","hash":"74d5b98805130f41e20c54066d681df2f7263d3f","modified":1698375074671},{"_id":"source/react/node_modules/vite/types/customEvent.d.ts","hash":"6ac717292f4c4635aeffefe636a1938cabcc6123","modified":1698375076881},{"_id":"source/react/node_modules/vite/types/hmrPayload.d.ts","hash":"00d925e543de26642d90120dc651ebf32b00a6b8","modified":1698375076882},{"_id":"source/react/node_modules/vite/types/hot.d.ts","hash":"5e2f9623e881ae0a9620753624d6c39579bdbb6e","modified":1698375076882},{"_id":"source/react/node_modules/vite/types/importGlob.d.ts","hash":"5135e27f70aaf6202737ab541e31b5d6e9d4e591","modified":1698375076882},{"_id":"source/react/node_modules/vite/types/importMeta.d.ts","hash":"76e301b22151f291757821579f978fecd83e6aa7","modified":1698375076882},{"_id":"source/react/node_modules/vite/types/metadata.d.ts","hash":"94a971f3793acc583e175e256dd20c216a9741f8","modified":1698375076919},{"_id":"source/react/node_modules/postcss/lib/stringify.d.ts","hash":"b3523f65291ec7f41bb732f3ee0860076cf000cc","modified":1698375074902},{"_id":"source/react/node_modules/vite/types/package.json","hash":"e01adf5fb8dc015926d73239f60a1add79ea481d","modified":1698375076833},{"_id":"source/react/node_modules/@ampproject/remapping/dist/remapping.umd.js","hash":"c29fe6ab7b23e97f54fab3c02afe42c7a03680cb","modified":1698375074306},{"_id":"source/react/node_modules/@ampproject/remapping/dist/remapping.mjs","hash":"0bd3a4f7832f39c32d32d35594ef11c4141e8518","modified":1698375074599},{"_id":"source/react/node_modules/@ampproject/remapping/dist/remapping.umd.js.map","hash":"13eb08a8143ed8bddc4c6bb2af855c0dbcf40893","modified":1698375074485},{"_id":"source/react/node_modules/@ampproject/remapping/dist/remapping.mjs.map","hash":"635e22fc008c4c01ca025b80af9b0957710a8815","modified":1698375074461},{"_id":"source/react/node_modules/@babel/generator/lib/buffer.js","hash":"5c61173189f789de2e5930b086c07317847b10dd","modified":1698375074306},{"_id":"source/react/node_modules/@babel/generator/lib/buffer.js.map","hash":"59769b9e9416987f53323fd5d9698730cc8b731a","modified":1698375074452},{"_id":"source/react/node_modules/@babel/generator/lib/index.js","hash":"7aa7f4e3a7abe4ba5394410afe9652cafc54982b","modified":1698375074867},{"_id":"source/react/node_modules/@babel/generator/lib/index.js.map","hash":"1eec0f28070155ab71036e21a49e5bd2de0615e1","modified":1698375074869},{"_id":"source/react/node_modules/@babel/generator/lib/source-map.js.map","hash":"b250b7c183c79f23e59a0cccaa4854d5a7657f46","modified":1698375074928},{"_id":"source/react/node_modules/@babel/code-frame/lib/index.js","hash":"bf4b3ba4ebe066a4132c0532b4c559bd3468a8c7","modified":1698375074305},{"_id":"source/react/node_modules/@babel/generator/lib/printer.js","hash":"f48f72f2e1ee09510109cb57880e2224cd84d53a","modified":1698375074916},{"_id":"source/react/node_modules/@babel/helper-function-name/lib/index.js","hash":"006ee019f5b09bae08c4920af5a80c5757847e73","modified":1698375074305},{"_id":"source/react/node_modules/@babel/generator/lib/printer.js.map","hash":"69d1256b0c4ef54a95b8b20849fc303ab8a4a726","modified":1698375074923},{"_id":"source/react/node_modules/@babel/code-frame/lib/index.js.map","hash":"ee5758e2bced59a9367b24b85b09f13f1c582cd6","modified":1698375074442},{"_id":"source/react/node_modules/@babel/compat-data/data/corejs3-shipped-proposals.json","hash":"4b782e94c03ef6d92c8390876eccc28ae43873ea","modified":1698375074469},{"_id":"source/react/node_modules/@babel/helper-function-name/lib/index.js.map","hash":"f876e4bae2949c102c174edc6e11481a93d538fe","modified":1698375074441},{"_id":"source/react/node_modules/@babel/compat-data/data/corejs2-built-ins.json","hash":"0943d3d562eb9421d1f02baa1be473d9a26c9278","modified":1698375074460},{"_id":"source/react/node_modules/@babel/compat-data/data/overlapping-plugins.json","hash":"faf8de9d5fa75d0c4ad0f835790209d7f37d8f0c","modified":1698375074484},{"_id":"source/react/node_modules/@babel/compat-data/data/native-modules.json","hash":"437a0e35eac050f288974db4f5397edc77632afc","modified":1698375074478},{"_id":"source/react/node_modules/@babel/compat-data/data/plugins.json","hash":"d432fac3e290904045801eedda263057afa0560d","modified":1698375074553},{"_id":"source/react/node_modules/@babel/helper-hoist-variables/lib/index.js.map","hash":"8454f4d3b1e6cb7b6614f6b814ecd33e0e7219f6","modified":1698375074390},{"_id":"source/react/node_modules/@babel/compat-data/data/plugin-bugfixes.json","hash":"ca2929a5b4d8683bba3a251889beb6b265897744","modified":1698375074517},{"_id":"source/react/node_modules/@babel/helper-hoist-variables/lib/index.js","hash":"35b0ef9b53678170bcd9c6dd5df627991ad5f994","modified":1698375074305},{"_id":"source/react/node_modules/@babel/generator/lib/source-map.js","hash":"5b5a15c3b2d5fec4b5c62457f3016e8aa33a46f0","modified":1698375074926},{"_id":"source/react/node_modules/@babel/core/lib/index.js","hash":"8a595305949100ac2fbced4496c70e9101043f6e","modified":1698375075008},{"_id":"source/react/node_modules/@babel/core/lib/index.js.map","hash":"735d40f5a72c2c8f94bf1c5efe14578e17f3abd0","modified":1698375075014},{"_id":"source/react/node_modules/@babel/core/lib/parse.js","hash":"5bcf570a93b6ecfc1c3fbc8432f9ec45081cd7bb","modified":1698375075014},{"_id":"source/react/node_modules/@babel/core/lib/parse.js.map","hash":"827466b4943737abf1ce94e5c55623d5dacc8557","modified":1698375075014},{"_id":"source/react/node_modules/@babel/core/lib/transform-file-browser.js","hash":"27433df3953e48ad169aed7b0bbc3274727d3c90","modified":1698375075033},{"_id":"source/react/node_modules/@babel/core/lib/transform-file-browser.js.map","hash":"dd3da9c697428ea60faeb96b579a01f860a8315e","modified":1698375075033},{"_id":"source/react/node_modules/@babel/core/lib/transform-ast.js","hash":"d108d4b73cca1c903b55361ffba8b681940a4f23","modified":1698375075030},{"_id":"source/react/node_modules/@babel/core/lib/transform-ast.js.map","hash":"1d00b19dc32fb0661fcfa8b2ab09580d18c65d6d","modified":1698375075031},{"_id":"source/react/node_modules/@babel/core/lib/transform-file.js","hash":"9503550e79aa86965b99ffd30e03a16593bbe37f","modified":1698375075034},{"_id":"source/react/node_modules/@babel/core/lib/transform.js","hash":"bbb9f81aa19e5df6f586ae90b429418085c0d41f","modified":1698375075035},{"_id":"source/react/node_modules/@babel/core/lib/transform.js.map","hash":"392e389d0f0fbf624f97b6b6608d21b5d9c6e634","modified":1698375075039},{"_id":"source/react/node_modules/@babel/core/lib/transform-file.js.map","hash":"ee83fb0bd5142b8c5d0bc19f9819ac7826691e3b","modified":1698375075034},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/lib/debug.js.map","hash":"fec67992e4bd5b19d366776ff262e0dd9b5ea25a","modified":1698375074393},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/lib/filter-items.js","hash":"e17b06c922e64f96817bccf673df91d6413aaa2c","modified":1698375074440},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/lib/debug.js","hash":"eb440818ea6c8777003e6400b05e81883d6aa414","modified":1698375074305},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/lib/filter-items.js.map","hash":"0f5a475375aca13b8b186b8cca1368f5c0c6e91b","modified":1698375074461},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/lib/options.js","hash":"52fd9f518dba51df010cdc667e69d02a07aa0417","modified":1698375074554},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/lib/index.js.map","hash":"359260fdad5fbaa6b0e9896c7f7e3da18847da12","modified":1698375074517},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/lib/index.js","hash":"7d810d7f58d24574b08a28bb85f5831e3e6d75c6","modified":1698375074478},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/lib/pretty.js","hash":"95682af6cce81990189562c1dbf27e6934b4af64","modified":1698375074599},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/lib/pretty.js.map","hash":"084aaa3066ec6c73f402163e5293da0885e44732","modified":1698375074627},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/lib/options.js.map","hash":"17f90e0c5e465660143018ae20f59c4f6fb94d94","modified":1698375074577},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/lib/targets.js","hash":"c6bdcd584ddc6e7b6628ddde52b24edf4bac8baa","modified":1698375074648},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/lib/targets.js.map","hash":"9bb7fb077ef0e0ff354698382b00e6ee468cdfc3","modified":1698375074655},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/lib/utils.js","hash":"37653c6bc69f7060362a57987643fa856f244364","modified":1698375074660},{"_id":"source/react/node_modules/@babel/helper-module-transforms/lib/get-module-name.js","hash":"5acd0dd379426d43de038e48d6255f3c48616f5e","modified":1698375074440},{"_id":"source/react/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js","hash":"8f71799f7d717c50457383e0443918252cc2141d","modified":1698375074305},{"_id":"source/react/node_modules/@babel/helper-module-transforms/lib/get-module-name.js.map","hash":"8d8e4892fcfd0abc71d5902f7e9af42a54d452e1","modified":1698375074461},{"_id":"source/react/node_modules/@babel/helper-compilation-targets/lib/utils.js.map","hash":"ddfe15304c9cdd7f579310868746d648f18de6d0","modified":1698375074668},{"_id":"source/react/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js.map","hash":"a0dc5c22e6250cd579163e3b78452b366ee55275","modified":1698375074393},{"_id":"source/react/node_modules/@babel/helper-module-transforms/lib/index.js","hash":"aa4514884557111a5c4812da24dce3474882f1c1","modified":1698375074478},{"_id":"source/react/node_modules/@babel/helper-module-transforms/lib/lazy-modules.js","hash":"3690457cede73068d57377fe3bf17f27cdd0ad3d","modified":1698375074554},{"_id":"source/react/node_modules/@babel/helper-module-transforms/lib/lazy-modules.js.map","hash":"bf19fb7865452e507f4e6293e54f7eb2a4738c63","modified":1698375074599},{"_id":"source/react/node_modules/@babel/helper-module-transforms/lib/index.js.map","hash":"6d0c51bfb1986c64f85a2138f1d38c093fc9c3d8","modified":1698375074527},{"_id":"source/react/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js","hash":"ef9218a57cc57ffaf1c8c2053edf3664233d29ac","modified":1698375074628},{"_id":"source/react/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js","hash":"5970147b0dceb161e5d43349a82e5d4d37c866e4","modified":1698375074678},{"_id":"source/react/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js.map","hash":"bbc8f6c5150aaf872091cf2f45640c0ec2cfc02a","modified":1698375074661},{"_id":"source/react/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js.map","hash":"1ca9bfbb3675ae740480e8af7b200d9e5c1e47f1","modified":1698375074702},{"_id":"source/react/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js","hash":"1e3b3685853bcf4daca51904b032d1d632abee53","modified":1698375074725},{"_id":"source/react/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js.map","hash":"9c147f273a2cfadc419178666532ede4bcf8db0d","modified":1698375074728},{"_id":"source/react/node_modules/@babel/helper-environment-visitor/lib/index.js.map","hash":"bbdab261c0499d3b07b2624fc1e5214c2b33075a","modified":1698375074394},{"_id":"source/react/node_modules/@babel/helper-plugin-utils/lib/index.js","hash":"b08367cecc0504ead46c2529ebe7196ce6f91771","modified":1698375074305},{"_id":"source/react/node_modules/@babel/helper-environment-visitor/lib/index.js","hash":"41dace9cdad08f62c6534c7a746a753b7fd75820","modified":1698375074305},{"_id":"source/react/node_modules/@babel/helper-plugin-utils/lib/index.js.map","hash":"a39660780e00f0ebdae6dc8191f5bcae5e48a076","modified":1698375074390},{"_id":"source/react/node_modules/@babel/helper-module-imports/lib/import-builder.js.map","hash":"8e38c0a971fa47c8cb1aeef031087ab620172685","modified":1698375074440},{"_id":"source/react/node_modules/@babel/helper-module-imports/lib/import-builder.js","hash":"9225a3e3d418d958c05cf396cc755cfea3108502","modified":1698375074303},{"_id":"source/react/node_modules/@babel/helper-module-imports/lib/index.js.map","hash":"e9b7560cd352d7cb63e74308c66ad9bab67a32cb","modified":1698375074527},{"_id":"source/react/node_modules/@babel/helper-module-imports/lib/import-injector.js","hash":"7e9a3182df514fa806e6cdede3c9f8d6683256aa","modified":1698375074461},{"_id":"source/react/node_modules/@babel/helper-module-imports/lib/index.js","hash":"5cbdb15b02570198ca37871ed2cc4ceb8fe639f9","modified":1698375074517},{"_id":"source/react/node_modules/@babel/helper-module-imports/lib/is-module.js","hash":"f4702ddb90316a2dbc4d210587d43d010537b405","modified":1698375074554},{"_id":"source/react/node_modules/@babel/helper-module-imports/lib/import-injector.js.map","hash":"58b21a3e2fe93f6dcf913f7a2a10dd647763fa01","modified":1698375074484},{"_id":"source/react/node_modules/@babel/helper-split-export-declaration/lib/index.js","hash":"17aa3e9987b52fe41685ded0ac359fff7a2a874c","modified":1698375074302},{"_id":"source/react/node_modules/@babel/helper-module-imports/lib/is-module.js.map","hash":"12757a3df9d328269eb9807e47f865e650a3ebbe","modified":1698375074575},{"_id":"source/react/node_modules/@babel/helper-split-export-declaration/lib/index.js.map","hash":"e0833f18c1e33a45caf076cd36be739cccd67a86","modified":1698375074389},{"_id":"source/react/node_modules/@babel/helper-simple-access/lib/index.js","hash":"abf6d2272acb089a1368c50e93c424b8d3b77b2f","modified":1698375074302},{"_id":"source/react/node_modules/@babel/helper-validator-option/lib/find-suggestion.js.map","hash":"aa23c6a84046ec091b4b7a82122772e248bc5f46","modified":1698375074388},{"_id":"source/react/node_modules/@babel/helper-validator-option/lib/index.js","hash":"de8a628feda572c38a9e091ae1acdab14b04eec4","modified":1698375074438},{"_id":"source/react/node_modules/@babel/helper-simple-access/lib/index.js.map","hash":"433801cb779b68c7babcb46e667a4fb65d16f337","modified":1698375074390},{"_id":"source/react/node_modules/@babel/helper-validator-option/lib/find-suggestion.js","hash":"d0958375da561faf79cb6309afd80b32258bee26","modified":1698375074302},{"_id":"source/react/node_modules/@babel/helper-validator-option/lib/validator.js","hash":"0bb483884ae2fcd421989f6fd3576157402ae2fc","modified":1698375074459},{"_id":"source/react/node_modules/@babel/helper-validator-option/lib/index.js.map","hash":"f87bdcc2d7260c6d5c4d1a465a098205753501bf","modified":1698375074448},{"_id":"source/react/node_modules/@babel/helper-string-parser/lib/index.js","hash":"85c38b4512fb5d0406cb3fb347ff8da08e9f45f5","modified":1698375074301},{"_id":"source/react/node_modules/@babel/helper-validator-option/lib/validator.js.map","hash":"11600d1da5a1de49a448a4487ce86d26bce5d533","modified":1698375074477},{"_id":"source/react/node_modules/@babel/helper-string-parser/lib/index.js.map","hash":"61ed2c55f3efd9eedf3daea1338a27a71c9cda4f","modified":1698375074448},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers-generated.js","hash":"e5170363a025ac45b33ab21e2c798c50bd100dca","modified":1698375074439},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers.js","hash":"a7095b57b02d2e77654631796242fa9966f4eae6","modified":1698375074575},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers-generated.js.map","hash":"979961905da38cee9d8476dd0a9be44281c220ea","modified":1698375074477},{"_id":"source/react/node_modules/@babel/helpers/lib/index.js","hash":"61098c7d483017798f909e159251e5055bf671ac","modified":1698375074952},{"_id":"source/react/node_modules/@babel/highlight/lib/index.js","hash":"b773e5a35dbb36054268a581856e24bf73532c30","modified":1698375074301},{"_id":"source/react/node_modules/@babel/helpers/lib/index.js.map","hash":"c0fc427b45b7681ae97174d08f1d08bdab4d2b0e","modified":1698375074969},{"_id":"source/react/node_modules/@babel/highlight/lib/index.js.map","hash":"8fe3744907ce84a09858ea4a55c79112d872508c","modified":1698375074437},{"_id":"source/react/node_modules/@babel/helper-validator-identifier/lib/identifier.js","hash":"cab8bd9b8c93b5cd09b51bdc0044debaaeff08b3","modified":1698375074301},{"_id":"source/react/node_modules/@babel/helper-validator-identifier/lib/identifier.js.map","hash":"52b9d4072ef5a46e373aa92e689a1551af7e4b50","modified":1698375074437},{"_id":"source/react/node_modules/@babel/parser/bin/babel-parser.js","hash":"628ab118f7255bf36723e56b85e2c5f4fa795572","modified":1698375074451},{"_id":"source/react/node_modules/@babel/helper-validator-identifier/lib/index.js","hash":"5813ad3628d945e124c7d95d0c68ba3a7243d270","modified":1698375074459},{"_id":"source/react/node_modules/@babel/helper-validator-identifier/lib/index.js.map","hash":"07bc84657476c7aa3a9e38ce01e6bb5ad737e777","modified":1698375074468},{"_id":"source/react/node_modules/@babel/core/src/transform-file.ts","hash":"4d950cf4cc8b7e0fcaa5d914ce608c7a9482dbf5","modified":1698375075090},{"_id":"source/react/node_modules/@babel/helper-validator-identifier/lib/keyword.js","hash":"aaef241789a33ed11de7ca3608a030b92049763a","modified":1698375074476},{"_id":"source/react/node_modules/@babel/helper-validator-identifier/lib/keyword.js.map","hash":"00a0e464e763d626a0547b6c8e89db87957d374f","modified":1698375074515},{"_id":"source/react/node_modules/@babel/helper-validator-identifier/scripts/generate-identifier-regex.js","hash":"d696f9d86b42fc3f6fc3bd3cbecfc61e01f60858","modified":1698375074599},{"_id":"source/react/node_modules/@babel/helpers/scripts/generate-helpers.js","hash":"3c5fd2f7470857e4e6b34c50f574364105f95321","modified":1698375074977},{"_id":"source/react/node_modules/@babel/helpers/scripts/generate-regenerator-runtime.js","hash":"605add1de18f0bf4692f901795827b565655ca87","modified":1698375074980},{"_id":"source/react/node_modules/@babel/helpers/scripts/package.json","hash":"29d143c64c007820d4ae5ebc368f35258483d620","modified":1698375074981},{"_id":"source/react/node_modules/@babel/core/src/transform-file-browser.ts","hash":"cf7194fb24a022caaf345f18b4079a04819a31db","modified":1698375075090},{"_id":"source/react/node_modules/@babel/plugin-transform-react-jsx-source/lib/index.js.map","hash":"3f5181958fe3bb5440c8d37604c92469c78dd1a4","modified":1698375074785},{"_id":"source/react/node_modules/@babel/template/lib/formatters.js","hash":"79038780a921f9f92f8520235a374f2a21a47b08","modified":1698375074446},{"_id":"source/react/node_modules/@babel/plugin-transform-react-jsx-source/lib/index.js","hash":"b12664487a646b953179df65ef1956850c1a56e6","modified":1698375074782},{"_id":"source/react/node_modules/@babel/template/lib/builder.js","hash":"f23864c5185e593ed3929af741bf8a1ee43b4603","modified":1698375074301},{"_id":"source/react/node_modules/@babel/template/lib/formatters.js.map","hash":"562941b932fbff5b55eb2a38438768f03a992822","modified":1698375074468},{"_id":"source/react/node_modules/@babel/template/lib/index.js.map","hash":"14f94b4bd3aac6f11343e11928b602af1ac3f9f5","modified":1698375074482},{"_id":"source/react/node_modules/@babel/template/lib/index.js","hash":"111b093e748c5119a5fd4a6cdc2422eb594407e9","modified":1698375074476},{"_id":"source/react/node_modules/@babel/template/lib/builder.js.map","hash":"564bcd15d885890648dacfc403e93385bdcbe964","modified":1698375074386},{"_id":"source/react/node_modules/@babel/template/lib/options.js","hash":"a2154aa8b4523eac2c1c71ebfcba32308afcd31f","modified":1698375074598},{"_id":"source/react/node_modules/@babel/template/lib/literal.js.map","hash":"4ec00d5a841646cd07bd71393e67c73e1d16bdf1","modified":1698375074550},{"_id":"source/react/node_modules/@babel/template/lib/options.js.map","hash":"49c0986376352d7be383a39eb9a60c5c46a36e93","modified":1698375074610},{"_id":"source/react/node_modules/@babel/template/lib/parse.js","hash":"1a725f4ba5a1fe7a4fcd95195b3d01be192b747d","modified":1698375074638},{"_id":"source/react/node_modules/@babel/template/lib/populate.js","hash":"0e1e7c61d943171b2c1d6df68aa701082c4a3d45","modified":1698375074666},{"_id":"source/react/node_modules/@babel/template/lib/literal.js","hash":"744f9b9b291d0987babf28d2f4d73652e75be78a","modified":1698375074511},{"_id":"source/react/node_modules/@babel/template/lib/string.js","hash":"d4bd2d379e5c5247bb0e825aa911836b07a7ad72","modified":1698375074691},{"_id":"source/react/node_modules/@babel/template/lib/string.js.map","hash":"d33751f5021f0d5ac3055e53e8a7d9afef4aca2f","modified":1698375074696},{"_id":"source/react/node_modules/@babel/plugin-transform-react-jsx-self/lib/index.js","hash":"197bcad0bd8b54fd7787fdee3eadd8092847650f","modified":1698375074727},{"_id":"source/react/node_modules/@babel/plugin-transform-react-jsx-self/lib/index.js.map","hash":"d5062a3d3475a83d9d4bb572794c9dbdcd0185be","modified":1698375074737},{"_id":"source/react/node_modules/@babel/template/lib/parse.js.map","hash":"6d69d92e9c7b72b09b4f28aba5940203480d7eca","modified":1698375074652},{"_id":"source/react/node_modules/@babel/template/lib/populate.js.map","hash":"9a72c794d8353db47a0ade1e7a06efb8be7bb73d","modified":1698375074684},{"_id":"source/react/node_modules/@babel/types/lib/index.js","hash":"36a373e308855e9836de15e0ed2b1e1d02668665","modified":1698375075126},{"_id":"source/react/node_modules/@jridgewell/set-array/dist/set-array.mjs.map","hash":"17ded36600063725cc8ac43c0d300e384825ba53","modified":1698375074386},{"_id":"source/react/node_modules/@jridgewell/set-array/dist/set-array.umd.js","hash":"bc0ae48111f78d5f8d3cc333c7746c097873dc03","modified":1698375074156},{"_id":"source/react/node_modules/@babel/types/lib/index.js.map","hash":"02ea0ce0c1c8a5bbf8e77f7e55a66b873f57cff1","modified":1698375075143},{"_id":"source/react/node_modules/@jridgewell/set-array/dist/set-array.umd.js.map","hash":"7a4a82800010a9a3beb86c328914083fcd65c218","modified":1698375074437},{"_id":"source/react/node_modules/@jridgewell/set-array/dist/set-array.mjs","hash":"4208d8e7a5f252ee13d1a0ebbbe3334a3b2c96d4","modified":1698375074458},{"_id":"source/react/node_modules/@jridgewell/set-array/src/set-array.ts","hash":"2ecf05d768ad628e4441ec92cfdd1926015881d7","modified":1698375074511},{"_id":"source/react/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js","hash":"d6fcb167cd7f479e865d87844f57f72a7707beb5","modified":1698375074156},{"_id":"source/react/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.mjs.map","hash":"ca627d92f7cff99a441a2167b809c86724e61377","modified":1698375074458},{"_id":"source/react/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.mjs","hash":"41ea51b3df8eadcbe54b889a191ca92e53c34a3c","modified":1698375074598},{"_id":"source/react/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js","hash":"812ef8ff02833637f792a8745361ac9539381ba8","modified":1698375074155},{"_id":"source/react/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.mjs.map","hash":"8804887945535555866980a17664b3a00afe8f43","modified":1698375074437},{"_id":"source/react/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js.map","hash":"bc05621225b498cc7602bb424d2cc26dc287e308","modified":1698375074483},{"_id":"source/react/node_modules/@babel/traverse/lib/cache.js.map","hash":"315cdb75442d993b6f9dff339587c1f29b969a87","modified":1698375074388},{"_id":"source/react/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js.map","hash":"4a6b00071239fdb8168f12c139b29a4878120ac6","modified":1698375074468},{"_id":"source/react/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.mjs","hash":"da40995e70e92dc1e2f6fffbb5bab822b5c3202b","modified":1698375074525},{"_id":"source/react/node_modules/@babel/traverse/lib/hub.js","hash":"12a001ac67e0f82f38290e5cdb96ed5986aae02f","modified":1698375074477},{"_id":"source/react/node_modules/@babel/parser/typings/babel-parser.d.ts","hash":"a98bbb34c09b58d94492ec0850382ad184eafae4","modified":1698375074995},{"_id":"source/react/node_modules/@babel/traverse/lib/context.js","hash":"6bfa1ea3fc20ecd7ab5599c1ebcacc4580f5c7aa","modified":1698375074438},{"_id":"source/react/node_modules/@babel/traverse/lib/cache.js","hash":"b89fa1794048101125cce7395c237d61d33cce48","modified":1698375074301},{"_id":"source/react/node_modules/@babel/traverse/lib/hub.js.map","hash":"dcd0448c167cff61e72ddc5e1bbe460054c44e42","modified":1698375074483},{"_id":"source/react/node_modules/@babel/traverse/lib/traverse-node.js","hash":"80af8ee533d71fc3cb37b63167ac807edd78459f","modified":1698375074992},{"_id":"source/react/node_modules/@babel/traverse/lib/index.js.map","hash":"e737945d079f8aab20bdbc48b437416d64d4b4a4","modified":1698375074551},{"_id":"source/react/node_modules/@babel/traverse/lib/index.js","hash":"1391832399786e6d2297850419d2dbcc728e4440","modified":1698375074516},{"_id":"source/react/node_modules/@babel/traverse/lib/context.js.map","hash":"e04930c6d0a1e7afd6dc2f45ec1d55c453a7bc01","modified":1698375074459},{"_id":"source/react/node_modules/@babel/traverse/lib/types.js","hash":"c27abf2352b4e108b82fecc095522f8cfedf18ea","modified":1698375074994},{"_id":"source/react/node_modules/@babel/traverse/lib/traverse-node.js.map","hash":"260c504f27d8d5e2a8b274585d59acea96763a7e","modified":1698375074993},{"_id":"source/react/node_modules/@babel/traverse/lib/types.js.map","hash":"52e1e8e83ec387f82a8eb0eb99389b94d19cdad6","modified":1698375074995},{"_id":"source/react/node_modules/@babel/traverse/lib/visitors.js.map","hash":"bfdf73854a5701897ce87e54f3f47710ff52169a","modified":1698375074998},{"_id":"source/react/node_modules/@babel/traverse/lib/visitors.js","hash":"b40b323eef030b6eae6c6de19bb775748e341244","modified":1698375074996},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.mjs","hash":"18f230a98b6aec791fdf62aa714ac71b1a7bd1be","modified":1698375074785},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js","hash":"f4dfa82e18f8779008e0ab4d5780fe9fe4234a98","modified":1698375074670},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.mjs.map","hash":"59c8e67d0a30e412f79de8b6975533e581a00026","modified":1698375074725},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js.map","hash":"1e266309071a3bb4e7c6335e8c9332fa2ad49e76","modified":1698375074764},{"_id":"source/react/node_modules/@vitejs/plugin-react/dist/index.cjs","hash":"2573451a54706fbf037dbb0cefde94713eed8f15","modified":1698375074671},{"_id":"source/react/node_modules/@vitejs/plugin-react/dist/index.d.ts","hash":"36202947d87f2d7e55fef62faec7ced2abc813a0","modified":1698375074746},{"_id":"source/react/node_modules/@vitejs/plugin-react/dist/index.d.mts","hash":"36202947d87f2d7e55fef62faec7ced2abc813a0","modified":1698375074742},{"_id":"source/react/node_modules/@vitejs/plugin-react/dist/index.d.cts","hash":"36202947d87f2d7e55fef62faec7ced2abc813a0","modified":1698375074683},{"_id":"source/react/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.mjs","hash":"a97dfa50abea961a94358375d4a4d343970e9336","modified":1698375074511},{"_id":"source/react/node_modules/@vitejs/plugin-react/dist/refreshUtils.js","hash":"d4db287d8e7166b2411ec065f0da25a11e93620a","modified":1698375074694},{"_id":"source/react/node_modules/@vitejs/plugin-react/dist/index.mjs","hash":"197900bb8425815d6e267ee8ef1c228a877fe678","modified":1698375074735},{"_id":"source/react/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js.map","hash":"3d414f3796ab72c619f01a431d733e04c07f0305","modified":1698375074445},{"_id":"source/react/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.mjs.map","hash":"21103bd736dc6558e33f76d39370d477c96d44e8","modified":1698375074385},{"_id":"source/react/node_modules/caniuse-lite/dist/unpacker/browserVersions.js","hash":"cbf9e1ac65976335ace0c1099c08f6b0efbcbdcf","modified":1698375075012},{"_id":"source/react/node_modules/caniuse-lite/dist/unpacker/browsers.js","hash":"9885b1b50795ce1dfcd42d31ed62f0b80e469796","modified":1698375075008},{"_id":"source/react/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js","hash":"1dae1054ecd94830fec8f96f945d82a20a7ef441","modified":1698375074156},{"_id":"source/react/node_modules/caniuse-lite/dist/unpacker/agents.js","hash":"63b3d6bbfaa5e7efb451b248d3175f3257d7913d","modified":1698375074850},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AE.js","hash":"57f5b0e8f62253ec128b22f2893c0841db026b7b","modified":1698375074803},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AD.js","hash":"eb0769c632fd24959e97b930076c05ae3b0cab15","modified":1698375074791},{"_id":"source/react/node_modules/caniuse-lite/dist/unpacker/features.js","hash":"28f59b27c7afd0af5870a8f0021e0b76ef9e7f40","modified":1698375075263},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AF.js","hash":"1a1629bd446baecdf636963ed3e6234637b93d9b","modified":1698375074810},{"_id":"source/react/node_modules/caniuse-lite/dist/unpacker/feature.js","hash":"e321019c0364e542b18a6e2f45838acd3c4abd5e","modified":1698375075262},{"_id":"source/react/node_modules/caniuse-lite/dist/unpacker/index.js","hash":"ce5a9f058f6583f4e7e3129e61ff09e79c06400c","modified":1698375075312},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AG.js","hash":"cb3951bb6843de472f9097ecea07292f91b55d05","modified":1698375074817},{"_id":"source/react/node_modules/caniuse-lite/dist/unpacker/region.js","hash":"00db73424ff4bbb26a3ca257b884afe01a43c1ba","modified":1698375075519},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AI.js","hash":"1a190b31c07be8afd254fa7e78fe6735bea1e8db","modified":1698375074855},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AM.js","hash":"0c284e93a0683e35fa97bd1f4dd2644933f52d03","modified":1698375074896},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AO.js","hash":"cf200d3cbfb0dbfec94aa7558bb566af10516618","modified":1698375074905},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AL.js","hash":"d6e9fde8fbe87c038f8434803d971459453891ba","modified":1698375074863},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AR.js","hash":"07e6ed096cac99f934f760a282c434248bfe0edc","modified":1698375074912},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AU.js","hash":"2598580a7dddc973f607acdca107c7ec8902cc8b","modified":1698375074930},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AX.js","hash":"2eb16c9e5f58deb521d9e0ba6b698f6e214d7d74","modified":1698375074948},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AW.js","hash":"7280e4bb12b002b3d1812d3a3ba0a66344c49cea","modified":1698375074945},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AT.js","hash":"9446537d2aefafba623d247b0df1ae8836f04e37","modified":1698375074928},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BA.js","hash":"de536b0970f4b1c1ed8846c9174c515f56a883bc","modified":1698375074962},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AZ.js","hash":"f1d393d6ec2a353bb209647cf418a481a749f6af","modified":1698375074949},{"_id":"source/react/node_modules/caniuse-lite/data/regions/AS.js","hash":"bf17092e063c9fbee8cfce7baee741d1142c93e2","modified":1698375074925},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BB.js","hash":"b460ae78d6897d045ca4464a45c4b593fee734bc","modified":1698375074978},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BD.js","hash":"2595b663f7f30134ead3b37fd466c229e0cf664a","modified":1698375074980},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BE.js","hash":"91409aea59846340bb562ed6edb9051c30ca7a66","modified":1698375074981},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BH.js","hash":"2520c9a27a232c3dc70681f3d216edd850acb372","modified":1698375074993},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BJ.js","hash":"8a27b6c3fe332a4d0b604941ca0cfcae2c34023a","modified":1698375074995},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BM.js","hash":"31fcc173f66ac7e203224bf57c3d2e654864f769","modified":1698375074997},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BI.js","hash":"8dedcbf2ff4643d60a19b958b333e5aea5f08a52","modified":1698375074993},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BN.js","hash":"b8fc1c2b0764ed41e18558c41ec117aa7e50c7a1","modified":1698375074998},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BF.js","hash":"90498449b929723a4ecfe026c5bc861638c8f078","modified":1698375074989},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BO.js","hash":"047156c5c28e0b42d3d32bf291c7add0ab80a53a","modified":1698375074999},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BR.js","hash":"07745ea91ee6ec3fce8fee52dd072e6e952168a6","modified":1698375075002},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BS.js","hash":"3578fff2da59a9d54720eca1f652587dbfebc2f0","modified":1698375075013},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BG.js","hash":"b13d59d33e8435edf47761f83e3d2df47aa5e2da","modified":1698375074990},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BW.js","hash":"15fc232d27b5d711e990060d578e7f3b6ccaa63b","modified":1698375075015},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BY.js","hash":"638a41aaa0776761ae720203b1e88739dcf756ea","modified":1698375075015},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BT.js","hash":"b33fbe67c79aa464cde81022470a3f880496889c","modified":1698375075014},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CF.js","hash":"e0b79c39f7413b0f0107af0fab2d2aa45572cbee","modified":1698375075029},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CG.js","hash":"f0b6b1b148a7644fe74d2bc1ebfd983b4c43650d","modified":1698375075030},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CI.js","hash":"a8d79cfebf3224613a718150cc29e021bd6a2796","modified":1698375075033},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CH.js","hash":"fc245d0040b2a9a3ff20ef3844f058d282ea3767","modified":1698375075031},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CK.js","hash":"a290460d14b4722c68da77628c2894b1d5e19d11","modified":1698375075034},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CD.js","hash":"c1f7c2380bc04d5bcc70f49eab4d100af9a6567b","modified":1698375075028},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CM.js","hash":"50e4fa877ee9218708a484afbe90fc32a72c90cb","modified":1698375075041},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CN.js","hash":"9c5ec3cc4b6fa103c2b4e008210b7cc1d3197818","modified":1698375075042},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CL.js","hash":"d58e53289c5fc1aacb0c626db28e1b2061f2d15c","modified":1698375075035},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CO.js","hash":"62fed96555d23d38306797bade65c02456a4d097","modified":1698375075043},{"_id":"source/react/node_modules/caniuse-lite/data/regions/BZ.js","hash":"3092b0af200e7cead186e14c565b56300819adb0","modified":1698375075017},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CR.js","hash":"05c75289b2674a255944ec286feeeefbd7f049e5","modified":1698375075067},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CA.js","hash":"9540d8885d1999eb13612c8d2643d4436a83d32f","modified":1698375075019},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CU.js","hash":"e9918187a1615a094b69ac496da7476d8df77ee4","modified":1698375075216},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CZ.js","hash":"b93089b4b88bbd8dd67bed1838d9826c3b434882","modified":1698375075221},{"_id":"source/react/node_modules/caniuse-lite/data/regions/DE.js","hash":"f647033964607d55f9e5bd8aa2ed06f64971d9f6","modified":1698375075225},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CY.js","hash":"4c4becb1f3cdf42c64225ef3c3930f677495158e","modified":1698375075220},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CV.js","hash":"c3cf45a398db2f41f5b9d99ca7438dde634d9164","modified":1698375075218},{"_id":"source/react/node_modules/caniuse-lite/data/regions/CX.js","hash":"4a3c5157cfe0f822b22406fe85d7b506a3b9a1d5","modified":1698375075219},{"_id":"source/react/node_modules/caniuse-lite/data/regions/DJ.js","hash":"14563c12a585d41f71f114762f219bcfdc96b0a6","modified":1698375075229},{"_id":"source/react/node_modules/caniuse-lite/data/regions/DK.js","hash":"bb19d55da0c344744a2768d097725cd83c1c471f","modified":1698375075230},{"_id":"source/react/node_modules/caniuse-lite/data/regions/DO.js","hash":"516773fac762467de634a4c8a0f2a360758e433f","modified":1698375075231},{"_id":"source/react/node_modules/caniuse-lite/data/regions/DM.js","hash":"c04650160875ca417bfe489d887359da9f936669","modified":1698375075230},{"_id":"source/react/node_modules/caniuse-lite/data/regions/EG.js","hash":"3ef51fb1022db3c08376a7f6d8966a1e15b8d65d","modified":1698375075249},{"_id":"source/react/node_modules/caniuse-lite/data/regions/ER.js","hash":"109e8548cc8ba6983d02611b5e96840a160d5de3","modified":1698375075252},{"_id":"source/react/node_modules/caniuse-lite/data/regions/EE.js","hash":"4c0c510b41ab83c5b4f89c5dff9ef9d5728c8420","modified":1698375075248},{"_id":"source/react/node_modules/caniuse-lite/data/regions/ES.js","hash":"f57b6af59ef3761deef39ccbd96ec56b86108869","modified":1698375075252},{"_id":"source/react/node_modules/caniuse-lite/data/regions/FI.js","hash":"083035e6a7f2b0a396d34ecf8a83f46388e5b486","modified":1698375075264},{"_id":"source/react/node_modules/caniuse-lite/data/regions/ET.js","hash":"7cd9dc393093889ddb8b50f117d957a247e39f2b","modified":1698375075260},{"_id":"source/react/node_modules/caniuse-lite/data/regions/DZ.js","hash":"02fe284ca0009a3aee12d6160a9cd4b5c81d094f","modified":1698375075243},{"_id":"source/react/node_modules/caniuse-lite/data/regions/FO.js","hash":"1ce7ecb839c0cf7115b9c6501e96dd77d84051de","modified":1698375075274},{"_id":"source/react/node_modules/caniuse-lite/data/regions/EC.js","hash":"a6069744bd5d928db02034ca4c479ee702c7bb45","modified":1698375075246},{"_id":"source/react/node_modules/caniuse-lite/data/regions/FM.js","hash":"41e57f480f63b969f19b7c8acb94cc799a80c2a0","modified":1698375075273},{"_id":"source/react/node_modules/caniuse-lite/data/regions/FK.js","hash":"db2f5f5541286fd03a7aee513696baa0a038b904","modified":1698375075269},{"_id":"source/react/node_modules/caniuse-lite/data/regions/FR.js","hash":"d3d600c8f5a1a8e133ebaed3820a6834f5952b96","modified":1698375075279},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GB.js","hash":"ec3b4d472ae48c1bee217d4ad9d63769fb336860","modified":1698375075280},{"_id":"source/react/node_modules/caniuse-lite/data/regions/FJ.js","hash":"b27e7dc325a50967070b37d10ffa23b98bc5a926","modified":1698375075268},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GD.js","hash":"f9a73a256bb0bdce87c00a190e997c537aba71c5","modified":1698375075280},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GA.js","hash":"12c072efaf152af750588c783661416c41770781","modified":1698375075279},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GE.js","hash":"11354b6a00ad37120cc4f72318f01f31382fb1ab","modified":1698375075280},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GL.js","hash":"df72f10351dad35ee2ed203c479f5f7d1e863562","modified":1698375075284},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GH.js","hash":"bfad71528aa319cd6e848c704d7878d0cccde406","modified":1698375075284},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GG.js","hash":"47611848a29d515db7a8352420775b79eb3515e5","modified":1698375075283},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GM.js","hash":"394ce9e9f049bce3a16b894243d82b857ba14dea","modified":1698375075285},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GN.js","hash":"9938281a6241f3a65c12bd6dd5ade731c4ad24a9","modified":1698375075288},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GI.js","hash":"a2d78fa398cbc1d818ddd6b1ef4a1391b8e8de5b","modified":1698375075284},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GP.js","hash":"bf10f7707927e9572323c14233313c877638f853","modified":1698375075288},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GF.js","hash":"a2c7d4405c46364f9006e0ad403a98a15831afc5","modified":1698375075283},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GQ.js","hash":"f605439c5b6cf1fd1e19378bc9885a4e948d7e37","modified":1698375075289},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GR.js","hash":"9dd645e113ff53aa37f6090ee1901bce4f4e5819","modified":1698375075289},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GU.js","hash":"76a4f7e96670f94ae6df50d2c0db01bc6ca7916b","modified":1698375075290},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GY.js","hash":"538d19cd9df692395a69a5634f200084050145b0","modified":1698375075291},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GW.js","hash":"64505ce8fabcf2b8d88887bbb77974b9ed9e117f","modified":1698375075290},{"_id":"source/react/node_modules/caniuse-lite/data/regions/HK.js","hash":"01d5f7eeddcb5bdb1c2cc20e3e59332a4a448f43","modified":1698375075293},{"_id":"source/react/node_modules/caniuse-lite/data/regions/HR.js","hash":"655754ef6d1a664a9ec5c171c47dda8ca77ce613","modified":1698375075294},{"_id":"source/react/node_modules/caniuse-lite/data/regions/HN.js","hash":"1d09501387c26234e1c1dbb59cc1068d9d8292a0","modified":1698375075294},{"_id":"source/react/node_modules/caniuse-lite/data/regions/GT.js","hash":"02ed105050118f12b24e4cfca9936f8343981ea2","modified":1698375075289},{"_id":"source/react/node_modules/caniuse-lite/data/regions/HU.js","hash":"e605e217db9247a6c283b9eba1db97777c665abb","modified":1698375075295},{"_id":"source/react/node_modules/caniuse-lite/data/regions/HT.js","hash":"cede7831d7b1cc9450ca4ab3361729984c3ccb01","modified":1698375075294},{"_id":"source/react/node_modules/caniuse-lite/data/regions/ID.js","hash":"8f8a7af9bc5a48dd75c6c8d9634c0f92636f8b75","modified":1698375075296},{"_id":"source/react/node_modules/caniuse-lite/data/regions/IE.js","hash":"788c5fcb1e350113f82c7c026f3ff7465b09e693","modified":1698375075296},{"_id":"source/react/node_modules/caniuse-lite/data/regions/IL.js","hash":"b655d311175b884587200cdf9be19c63788c9690","modified":1698375075298},{"_id":"source/react/node_modules/caniuse-lite/data/regions/IS.js","hash":"e9456e3980cec9dc320d1b0017dd6ed17b182cb5","modified":1698375075360},{"_id":"source/react/node_modules/caniuse-lite/data/regions/IN.js","hash":"919328d835a950f3a21459aaae19c63e842d3e2f","modified":1698375075300},{"_id":"source/react/node_modules/caniuse-lite/data/regions/IM.js","hash":"d9d8e08a3782c26dd842664cf2f785d1b5a6159e","modified":1698375075298},{"_id":"source/react/node_modules/caniuse-lite/data/regions/JE.js","hash":"671312e10a9a91f59014416743a6e79283d8566b","modified":1698375075361},{"_id":"source/react/node_modules/caniuse-lite/data/regions/IT.js","hash":"ca06f5cf5339f94afbc013987b023cf9ed83d342","modified":1698375075360},{"_id":"source/react/node_modules/caniuse-lite/data/regions/IQ.js","hash":"43135331567ed7d99ba88d4595158568e011d7bf","modified":1698375075359},{"_id":"source/react/node_modules/caniuse-lite/data/regions/IR.js","hash":"e274731ed5c12ea81a4b2ca3c928719cf54e8db2","modified":1698375075360},{"_id":"source/react/node_modules/caniuse-lite/data/regions/JM.js","hash":"b06d1ffd4d4d07d082b548bc3f5f371fc7dc4f25","modified":1698375075361},{"_id":"source/react/node_modules/caniuse-lite/data/regions/JO.js","hash":"d6a483a0093bf402718a12ef08da8b149d177443","modified":1698375075362},{"_id":"source/react/node_modules/caniuse-lite/data/regions/JP.js","hash":"a8a5bdc648fb20cf447b8194e58a38af8e35c8c5","modified":1698375075363},{"_id":"source/react/node_modules/caniuse-lite/data/regions/KE.js","hash":"d9be8612c368bd38ed75e82080be794bee8f5ac5","modified":1698375075368},{"_id":"source/react/node_modules/caniuse-lite/data/regions/KG.js","hash":"022db565cda19205e1ea4bba2a1cf9d6b906e172","modified":1698375075385},{"_id":"source/react/node_modules/caniuse-lite/data/regions/KH.js","hash":"8435b0b4123d962ef85a313e7d71bcca9f7f6dd2","modified":1698375075395},{"_id":"source/react/node_modules/caniuse-lite/data/regions/KP.js","hash":"2ed6dfc6d815cbff4ad570921b01aba26549ef61","modified":1698375075399},{"_id":"source/react/node_modules/caniuse-lite/data/regions/KM.js","hash":"24be000accd384c1a730cedcd282bb0f21026eb9","modified":1698375075396},{"_id":"source/react/node_modules/caniuse-lite/data/regions/KN.js","hash":"3ba8b18187d80fc0c2e13b5f82f485a2bba6b9fa","modified":1698375075399},{"_id":"source/react/node_modules/caniuse-lite/data/regions/KR.js","hash":"e6c22e61ae2a68048e385121b692a876a4e2d1c1","modified":1698375075401},{"_id":"source/react/node_modules/caniuse-lite/data/regions/KY.js","hash":"9845c136df88cb5d1e0d010e71a76154a6b72a7c","modified":1698375075410},{"_id":"source/react/node_modules/caniuse-lite/data/regions/KW.js","hash":"b9b4bd4ee891ca1e2afe5465bcd697b26ab0e6fe","modified":1698375075409},{"_id":"source/react/node_modules/caniuse-lite/data/regions/KI.js","hash":"1dd30c53bde030fd9b942e7dfdc459f4f05908b9","modified":1698375075396},{"_id":"source/react/node_modules/caniuse-lite/data/regions/KZ.js","hash":"d0c53ad9e6ec098e656d058420c917527b709596","modified":1698375075411},{"_id":"source/react/node_modules/caniuse-lite/data/regions/LB.js","hash":"29f8168d827e6c7d95aacf1c4e7698e3843cdee7","modified":1698375075412},{"_id":"source/react/node_modules/caniuse-lite/data/regions/LC.js","hash":"88abc4a538c3cb2a6c555614104707d9a2b957e4","modified":1698375075413},{"_id":"source/react/node_modules/caniuse-lite/data/regions/LA.js","hash":"068fcb7c4d8842ec73ddcd04e25931eb428f413c","modified":1698375075411},{"_id":"source/react/node_modules/caniuse-lite/data/regions/LK.js","hash":"e2d1cfe09fec05f2775b7661313c45c9dffa981b","modified":1698375075420},{"_id":"source/react/node_modules/caniuse-lite/data/regions/LS.js","hash":"a5082cf262bab6a5c38fe1db91e4e13f52b40a86","modified":1698375075423},{"_id":"source/react/node_modules/caniuse-lite/data/regions/LI.js","hash":"4a536b295e1e94774f3acb947f276b106d54eb95","modified":1698375075413},{"_id":"source/react/node_modules/caniuse-lite/data/regions/LV.js","hash":"a03b461495abbc4b489c45eb9f26fa9af5ddf815","modified":1698375075425},{"_id":"source/react/node_modules/caniuse-lite/data/regions/LR.js","hash":"5e3e08151bbf820bdba4fe1c510c471d7319c162","modified":1698375075422},{"_id":"source/react/node_modules/caniuse-lite/data/regions/LT.js","hash":"24f088e931d4a4a34c88febdc70552235fb8cae2","modified":1698375075423},{"_id":"source/react/node_modules/caniuse-lite/data/regions/LY.js","hash":"6605884908c874bfe26c0ca4c71f70a3cdaacfcf","modified":1698375075425},{"_id":"source/react/node_modules/caniuse-lite/data/regions/LU.js","hash":"722ba6969d75413829691f093141643dc9e5108c","modified":1698375075424},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MA.js","hash":"5621243dd373ab3c8a9f78f4ae29ffb812ee47bb","modified":1698375075427},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MC.js","hash":"ceaa07f2e716b49fe2aa62b16a7202ced9f49467","modified":1698375075432},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MD.js","hash":"4fa8026958eabdcf6cf9c404f29e828b6068dd23","modified":1698375075432},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MG.js","hash":"b6b0c96998aa24fb7827eebc0212ac37736dd217","modified":1698375075444},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MK.js","hash":"dd7615cfc688b5b57694421d7567a7aaca426320","modified":1698375075448},{"_id":"source/react/node_modules/caniuse-lite/data/regions/ME.js","hash":"9d24c5abf86ad0293cf372d86c9759a96d4d54fc","modified":1698375075436},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MM.js","hash":"a9bda780beb19a4bcfb8bae197afbe3b77ad472a","modified":1698375075449},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MH.js","hash":"d57790c24fee5221b7d4f99b7d32a5ebcfac94da","modified":1698375075445},{"_id":"source/react/node_modules/caniuse-lite/data/regions/ML.js","hash":"c026349920c90ab6ab2120a1d4365d078b234758","modified":1698375075448},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MN.js","hash":"284a66ecb55c6dee7d25efd3d3f4f3ff5b1ae7ed","modified":1698375075449},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MQ.js","hash":"f9c9c4e7233d7bc0568fa9c7cb16e4c4d14b92de","modified":1698375075451},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MO.js","hash":"7febd78795affe849f2b43ec2ca53bc019e625ab","modified":1698375075449},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MP.js","hash":"3169f51b3a588323f243ca5508247cdde7e5f6f9","modified":1698375075450},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MR.js","hash":"cfe42d6bc6540f4730add7311868022d637c900a","modified":1698375075461},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MS.js","hash":"89a6a3ec84f2bc4b48c73321f3aec87186841c69","modified":1698375075462},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MT.js","hash":"3ab7be976398a6aa8a59644ff8af9cd35faed03b","modified":1698375075463},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MU.js","hash":"0cf065fd7cb43e494a74cd3e4476c3d5d0fd6d6c","modified":1698375075466},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MV.js","hash":"21f3a4abcae734925857cfc67c0dbb0eb2bcece0","modified":1698375075470},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MX.js","hash":"5b963b46f7483acb819a3371b03feefe03ef976a","modified":1698375075472},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MW.js","hash":"527ef8a03fd1900c2e3191528f9b8b9914fb9b39","modified":1698375075471},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MZ.js","hash":"900558a21f9d7f808114763bf45376766bb45d5a","modified":1698375075474},{"_id":"source/react/node_modules/caniuse-lite/data/regions/MY.js","hash":"b47d17deb707016a74dc6277d436835450e58390","modified":1698375075474},{"_id":"source/react/node_modules/caniuse-lite/data/regions/NG.js","hash":"bd8f5d4684d5f7a47af44136b26531b4622c22c6","modified":1698375075480},{"_id":"source/react/node_modules/caniuse-lite/data/regions/NA.js","hash":"ea473860d3c5a30ad5e660674ca9c024732782fb","modified":1698375075475},{"_id":"source/react/node_modules/caniuse-lite/data/regions/NE.js","hash":"09eb9a481645ef4fff01f7d958eb6454be45577e","modified":1698375075477},{"_id":"source/react/node_modules/caniuse-lite/data/regions/NF.js","hash":"88b3914ff13288ee13d70b90c20062921958a99a","modified":1698375075479},{"_id":"source/react/node_modules/caniuse-lite/data/regions/NC.js","hash":"acdade9bb99419a9423b19e1f6b2842a6c386245","modified":1698375075477},{"_id":"source/react/node_modules/caniuse-lite/data/regions/NI.js","hash":"0287f3a65cbea8efcdb839d1083295a7845390dc","modified":1698375075480},{"_id":"source/react/node_modules/caniuse-lite/data/regions/NL.js","hash":"fbd475c31c7f1ae58370912216167581b85b4384","modified":1698375075480},{"_id":"source/react/node_modules/caniuse-lite/data/regions/NO.js","hash":"e8b2d3fcc9e1fd46de116a5c2dc2f997a3e2759a","modified":1698375075481},{"_id":"source/react/node_modules/caniuse-lite/data/regions/NR.js","hash":"8f8cc0ce8b3ff057a7e24183ca793ceed4f666d8","modified":1698375075482},{"_id":"source/react/node_modules/caniuse-lite/data/regions/NP.js","hash":"c4b4e3eea858a7d2cc2f84b4169c2cd4176a8081","modified":1698375075481},{"_id":"source/react/node_modules/caniuse-lite/data/regions/NU.js","hash":"1d6fac79d7a94b359ae13594382db0f10154f0c3","modified":1698375075482},{"_id":"source/react/node_modules/caniuse-lite/data/regions/NZ.js","hash":"9e34ca9f57757c43e2d28a87889ea2279d610887","modified":1698375075482},{"_id":"source/react/node_modules/caniuse-lite/data/regions/OM.js","hash":"62e06277eee6489ba50662f2c7f370a396e88282","modified":1698375075489},{"_id":"source/react/node_modules/caniuse-lite/data/regions/PH.js","hash":"8a93181d45e4440efce538bb58bcf85b118ad03c","modified":1698375075502},{"_id":"source/react/node_modules/caniuse-lite/data/regions/PA.js","hash":"00c2ae3cb433dda03b357610037da677f78d5e9d","modified":1698375075494},{"_id":"source/react/node_modules/caniuse-lite/data/regions/PG.js","hash":"8dbc1c4204ca1b6eaa064a86347e1dabc5ad9b1b","modified":1698375075502},{"_id":"source/react/node_modules/caniuse-lite/data/regions/PE.js","hash":"288172263afca6c0d97281101891aa81ac8f1388","modified":1698375075498},{"_id":"source/react/node_modules/caniuse-lite/data/regions/PL.js","hash":"82f5bc3fd306d6efdebc0077715db69ec46e42a2","modified":1698375075508},{"_id":"source/react/node_modules/caniuse-lite/data/regions/PM.js","hash":"fb3206bf74fb48162c3d9ff9db3e8cae966a1292","modified":1698375075508},{"_id":"source/react/node_modules/caniuse-lite/data/regions/PS.js","hash":"697763815256390f82d76d2ef56e3bcb73ad3d7f","modified":1698375075514},{"_id":"source/react/node_modules/caniuse-lite/data/regions/PK.js","hash":"8e948d044d59cd1a441688d5f9b37f18e4236629","modified":1698375075504},{"_id":"source/react/node_modules/caniuse-lite/data/regions/PT.js","hash":"fd535abaa56b662a690ff9e2845d6af63078c791","modified":1698375075515},{"_id":"source/react/node_modules/caniuse-lite/data/regions/PY.js","hash":"6f87d517148ef3451ba39e4794ce8024818a5085","modified":1698375075517},{"_id":"source/react/node_modules/caniuse-lite/data/regions/PW.js","hash":"ff3bfa1a30d6d7f3700c721f7550e90dc048fa7c","modified":1698375075516},{"_id":"source/react/node_modules/caniuse-lite/data/regions/PF.js","hash":"57252105aa8cb98b0b26675e929370832b930bba","modified":1698375075502},{"_id":"source/react/node_modules/caniuse-lite/data/regions/QA.js","hash":"ff03d015c0b97063d23265bebbf3f431f4e19ce3","modified":1698375075517},{"_id":"source/react/node_modules/caniuse-lite/data/regions/PN.js","hash":"8c5dfced013182139cb894fdfc24cd3e3fb806f7","modified":1698375075509},{"_id":"source/react/node_modules/caniuse-lite/data/regions/RE.js","hash":"cf6c46c6648f440073ede6d850e2f07904b5ddab","modified":1698375075518},{"_id":"source/react/node_modules/caniuse-lite/data/regions/PR.js","hash":"e6bc6d5bc6aa315f34c60f9c542985d3f9f94e9b","modified":1698375075512},{"_id":"source/react/node_modules/caniuse-lite/data/regions/RO.js","hash":"ea957d13e1fd3d4777cdd942578a5fbe547dde4d","modified":1698375075526},{"_id":"source/react/node_modules/caniuse-lite/data/regions/RS.js","hash":"1b8a932378bf4ffdaa359052e2fc829fc1bc9b7b","modified":1698375075528},{"_id":"source/react/node_modules/caniuse-lite/data/regions/RW.js","hash":"76c72cb8b36646f14dc7b92ab94c8e30a66ac513","modified":1698375075531},{"_id":"source/react/node_modules/caniuse-lite/data/regions/RU.js","hash":"a7f0f1ea18ad59dbf94acf536c59c3afb698f1b8","modified":1698375075530},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SA.js","hash":"d39dbcff4682ba47e51ed88ff405ba08dc9b639e","modified":1698375075531},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SD.js","hash":"29740c79b396f77d2c075740ff12bcfb37a7fb4f","modified":1698375075533},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SE.js","hash":"1064c36c5803e8263e1aaea2883ffa7922abe483","modified":1698375075534},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SG.js","hash":"2adf91caf5aed384863ad0eab8c9221dbedf74d2","modified":1698375075536},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SB.js","hash":"1fcf9ebe681ffa73ba15e4c63022f6d7de90ccc4","modified":1698375075531},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SI.js","hash":"f482c2dc3e0a87d755ddcd7f2d51e7320e04463e","modified":1698375075540},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SC.js","hash":"3b2ca11b9bcc7657cb49988a4b3755f2aef404c9","modified":1698375075532},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SH.js","hash":"d1b8744e7d92def461ee276ac42b57a70f114d12","modified":1698375075537},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SM.js","hash":"debf86f550c407bb3f6dc13b25dd41cd1f033cff","modified":1698375075541},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SL.js","hash":"8f350c817cc0a920cc1fda04ebffaa60bcd9a8d8","modified":1698375075540},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SN.js","hash":"f72c67281794fff43333bda9bdc3d40c29ba2ebd","modified":1698375075543},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SO.js","hash":"9c8e8e21bbbf537c50956aea964877d4e56d8e17","modified":1698375075545},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SK.js","hash":"8d63ad564cbce4d4d3e865acb8fdc7f4b1dcfd18","modified":1698375075540},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SR.js","hash":"037c9bd9452baa369be2ade53143f813af8131f0","modified":1698375075547},{"_id":"source/react/node_modules/caniuse-lite/data/regions/ST.js","hash":"f20992afd85c70df66da39f745c275c8c6d37bd1","modified":1698375075548},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TC.js","hash":"caa63d48cd7ecfd0014167e16b1a02c68be44d8e","modified":1698375075563},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SY.js","hash":"9e7292bfce0c73e885f36561ed53bb44e1464c2a","modified":1698375075561},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SV.js","hash":"d0c2ad41aad8aa803b505601c7b9f2228f12d7c5","modified":1698375075553},{"_id":"source/react/node_modules/caniuse-lite/data/regions/SZ.js","hash":"fbc8ba77c5a87900d239047e5798cb519ac5d392","modified":1698375075562},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TD.js","hash":"d8edd5eda22bfd8dfa0317472c2e176a45d492c4","modified":1698375075564},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TL.js","hash":"1dea2bc311b84e17d556184c185166f3994ad4ae","modified":1698375075573},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TM.js","hash":"79e8704b53d23dba5878339c947d587067845e31","modified":1698375075576},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TJ.js","hash":"a53ec0bff6905d30ffefb2c42c7eef8195692aa6","modified":1698375075569},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TK.js","hash":"d7ee4a8054bd52066c7791159e9bab3aff5928b6","modified":1698375075571},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TG.js","hash":"3ea1fb5b956be766e8041e1adde927dc8cc810be","modified":1698375075568},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TH.js","hash":"897e4767445b903a7358ad6f8bc9f65a4a751593","modified":1698375075568},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TT.js","hash":"b1de8e4f4996c2cd4424eb14faca8c740cd62207","modified":1698375075581},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TO.js","hash":"ae83aa3fc15768bd4174442f637c76d509c2c6ea","modified":1698375075579},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TR.js","hash":"11912acaa4b3025c70fc5f7a340cc51d230a5311","modified":1698375075580},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TW.js","hash":"88d29e5e46ff3d256bab8466d26fb3aaf93c915e","modified":1698375075582},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TV.js","hash":"30c2ee57c05f27e9e3ba329c503194985834fd87","modified":1698375075582},{"_id":"source/react/node_modules/caniuse-lite/data/regions/UA.js","hash":"f1ca5ff7a2914faf5fe4c39d616804b05d98474f","modified":1698375075583},{"_id":"source/react/node_modules/caniuse-lite/data/regions/UG.js","hash":"8bb63ed4e0995c93aaf44d3128ef58fa45789117","modified":1698375075583},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TZ.js","hash":"57127729bb68c06c52ec175040cfbf5c6de8e7ab","modified":1698375075582},{"_id":"source/react/node_modules/caniuse-lite/data/regions/TN.js","hash":"a96e4068a025d9756c43ddef133112e13984c74d","modified":1698375075578},{"_id":"source/react/node_modules/caniuse-lite/data/regions/UY.js","hash":"44e29c8a2d487d0d522de3e323a63694e23576b2","modified":1698375075589},{"_id":"source/react/node_modules/caniuse-lite/data/regions/UZ.js","hash":"02efc84c671a8de3b57ba5ba8997d33966fe50ad","modified":1698375075589},{"_id":"source/react/node_modules/caniuse-lite/data/regions/VA.js","hash":"78d1bbf7f325164e50688aa7ae170c88de46e702","modified":1698375075589},{"_id":"source/react/node_modules/caniuse-lite/data/regions/VE.js","hash":"b5eacc3c46ba535f1bcdd4a131ed685a81417c2f","modified":1698375075590},{"_id":"source/react/node_modules/caniuse-lite/data/regions/VC.js","hash":"c6afab19fe69bb558afc2ec95294e962dcdadd67","modified":1698375075590},{"_id":"source/react/node_modules/caniuse-lite/data/regions/VG.js","hash":"b5dc3b841228cfdf4240f79ae99bb65cfab4e2c4","modified":1698375075591},{"_id":"source/react/node_modules/caniuse-lite/data/regions/VN.js","hash":"43f7b102d8bdc25678f4e3b615791791e4ef9b8b","modified":1698375075597},{"_id":"source/react/node_modules/caniuse-lite/data/regions/VI.js","hash":"7b93d64c779c83037152e20fad01c6b04158d48e","modified":1698375075591},{"_id":"source/react/node_modules/caniuse-lite/data/regions/US.js","hash":"8581359e0e828993b53d7d814fac7b12368ba384","modified":1698375075586},{"_id":"source/react/node_modules/caniuse-lite/data/regions/VU.js","hash":"79fa6668b78674196280331959246a146a5ef92f","modified":1698375075597},{"_id":"source/react/node_modules/caniuse-lite/data/regions/YE.js","hash":"b5f34f9aea783dec4d98a622d4ca924d1c858155","modified":1698375075625},{"_id":"source/react/node_modules/caniuse-lite/data/regions/YT.js","hash":"4e2dc9a96f2334b318809193c324a6328f279bb8","modified":1698375075625},{"_id":"source/react/node_modules/caniuse-lite/data/regions/ZA.js","hash":"898a4e1bc93ff0d34f46cafe6df30cea5b2376b0","modified":1698375075626},{"_id":"source/react/node_modules/caniuse-lite/data/regions/ZM.js","hash":"f4ae7c5387827df2ca607cfc6c770270be1961b3","modified":1698375075627},{"_id":"source/react/node_modules/caniuse-lite/data/regions/ZW.js","hash":"4033d1ad72cf9f28517a94d974a01d31d0c48df1","modified":1698375075628},{"_id":"source/react/node_modules/caniuse-lite/data/regions/alt-as.js","hash":"aada3c752f5cd51b2ee6ca879e1eecb20f820eaf","modified":1698375074869},{"_id":"source/react/node_modules/caniuse-lite/data/regions/alt-af.js","hash":"9820adea2927e00afef484b1e8186e48385c096b","modified":1698375074867},{"_id":"source/react/node_modules/caniuse-lite/data/regions/alt-an.js","hash":"5a49980f549232882e6132b47bc242dbe74c1243","modified":1698375074868},{"_id":"source/react/node_modules/caniuse-lite/data/regions/alt-eu.js","hash":"ff1301a1500f81ec8262e33777b5b2e0cdf18b02","modified":1698375074871},{"_id":"source/react/node_modules/caniuse-lite/data/regions/alt-na.js","hash":"885afc9a087ecc2190dee83fae68950ff3dfd117","modified":1698375074874},{"_id":"source/react/node_modules/caniuse-lite/data/regions/alt-sa.js","hash":"4888c6bec31fb79525f754100513e64c6169602c","modified":1698375074881},{"_id":"source/react/node_modules/caniuse-lite/data/features/aac.js","hash":"71d050c05c3e8cd1cc4b67aa6c5531f8f3db40db","modified":1698375074744},{"_id":"source/react/node_modules/caniuse-lite/data/regions/alt-oc.js","hash":"fb7a876d6bba028d17cab1968fa91d3a17f5c728","modified":1698375074876},{"_id":"source/react/node_modules/caniuse-lite/data/features/abortcontroller.js","hash":"476772fba81697c45fd82a393fd4a964387069ad","modified":1698375074763},{"_id":"source/react/node_modules/caniuse-lite/data/regions/alt-ww.js","hash":"669bf5cae7b00a3b80cdc89b85c619eb06ef1cd9","modified":1698375074891},{"_id":"source/react/node_modules/caniuse-lite/data/features/accelerometer.js","hash":"8212fbe063240f17ed8045d21ef948dd87f47047","modified":1698375074770},{"_id":"source/react/node_modules/caniuse-lite/data/features/ac3-ec3.js","hash":"d269690b0ba753ca4f5f363fc080a09d485faab8","modified":1698375074765},{"_id":"source/react/node_modules/caniuse-lite/data/features/alternate-stylesheet.js","hash":"0b848502bb458917fef698cccb0a0b17522c82ff","modified":1698375074894},{"_id":"source/react/node_modules/caniuse-lite/data/features/apng.js","hash":"f5994f6a2c3fe65982297923a4113915bf77ef20","modified":1698375074907},{"_id":"source/react/node_modules/caniuse-lite/data/features/ambient-light.js","hash":"c67afd20f5da83453848a854d0a3ae5b0b5c33ad","modified":1698375074901},{"_id":"source/react/node_modules/caniuse-lite/data/features/addeventlistener.js","hash":"ab5b763a5267265a12052da799d269af6762cb4d","modified":1698375074795},{"_id":"source/react/node_modules/caniuse-lite/data/features/array-find-index.js","hash":"7321bf25dc19d594a18b8ac14022c5107cc6f15a","modified":1698375074914},{"_id":"source/react/node_modules/caniuse-lite/data/features/array-flat.js","hash":"6d8894823dbfe1e40ea3720aa950cf23246d6390","modified":1698375074920},{"_id":"source/react/node_modules/caniuse-lite/data/features/arrow-functions.js","hash":"e401555e497d0ff91f29cd5927a10229b596ba27","modified":1698375074923},{"_id":"source/react/node_modules/caniuse-lite/data/regions/WS.js","hash":"c24cdc71bd2b03c3f9a286b30a5416ca14e9475b","modified":1698375075616},{"_id":"source/react/node_modules/caniuse-lite/data/features/array-find.js","hash":"f5f9f74409b2c5fd4f5f04ff7d51ce5d3c0a6028","modified":1698375074918},{"_id":"source/react/node_modules/caniuse-lite/data/regions/WF.js","hash":"b99a92e7d4910214aa91c982092f3a81706e8f70","modified":1698375075613},{"_id":"source/react/node_modules/caniuse-lite/data/features/atob-btoa.js","hash":"201ef576b98ce24bb7620556b1e12e58c776f4d8","modified":1698375074929},{"_id":"source/react/node_modules/caniuse-lite/data/features/asmjs.js","hash":"fe3b1284dbb4b776c0ba26d7699534534a9b89b0","modified":1698375074926},{"_id":"source/react/node_modules/caniuse-lite/data/features/async-functions.js","hash":"81c2f55e1fb5bb14194b8e600ec770d11a935faa","modified":1698375074928},{"_id":"source/react/node_modules/caniuse-lite/data/features/async-clipboard.js","hash":"a40d9bc889093cbad83270f4e3617b77bc9d9a09","modified":1698375074927},{"_id":"source/react/node_modules/caniuse-lite/data/features/audio-api.js","hash":"a7e740ae838c06d6f4724a6533fade4d82f202db","modified":1698375074931},{"_id":"source/react/node_modules/caniuse-lite/data/features/audio.js","hash":"fef0ba5d85da120448cdbe0e8708723727f675a1","modified":1698375074932},{"_id":"source/react/node_modules/caniuse-lite/data/features/audiotracks.js","hash":"ab14d14c60d8ed2493a2a01dab7561e96c4f70e9","modified":1698375074933},{"_id":"source/react/node_modules/caniuse-lite/data/features/auxclick.js","hash":"3415084684c7624f068b798b053658a609cbf0ec","modified":1698375074936},{"_id":"source/react/node_modules/caniuse-lite/data/features/av1.js","hash":"f04ec07b2b08da5eb98eefba0d54608326f2599d","modified":1698375074938},{"_id":"source/react/node_modules/caniuse-lite/data/features/autofocus.js","hash":"c14b27463c97232d3514a74314dccf41effbe000","modified":1698375074934},{"_id":"source/react/node_modules/caniuse-lite/data/features/avif.js","hash":"a26a6f6dd78095822f1b4902b107ddb56b4e1552","modified":1698375074940},{"_id":"source/react/node_modules/caniuse-lite/data/features/background-clip-text.js","hash":"096d24cebc32f82956e88404d240f90fd857af75","modified":1698375074971},{"_id":"source/react/node_modules/caniuse-lite/data/features/background-attachment.js","hash":"28ece4453256873032e26f97c06428f3006c117a","modified":1698375074970},{"_id":"source/react/node_modules/caniuse-lite/data/features/background-img-opts.js","hash":"6e74ffa97cc15d5ef382c856a1a6d0530839a342","modified":1698375074973},{"_id":"source/react/node_modules/caniuse-lite/data/features/background-position-x-y.js","hash":"baf0aca033c787b9133bc7f7001b367760290201","modified":1698375074973},{"_id":"source/react/node_modules/caniuse-lite/data/features/background-sync.js","hash":"89763c507f506786b50e8bf2ee0a2bc26ef3c906","modified":1698375074976},{"_id":"source/react/node_modules/caniuse-lite/data/features/background-repeat-round-space.js","hash":"79fae74886ffe4981f18b7a36155f3eded71c5fc","modified":1698375074975},{"_id":"source/react/node_modules/caniuse-lite/data/features/battery-status.js","hash":"52c8b50f3c7e85622ff73e5c8f3d1877883cadae","modified":1698375074977},{"_id":"source/react/node_modules/caniuse-lite/data/features/bigint.js","hash":"602f1312912ad0ab480d5271239fe5d48e328451","modified":1698375074995},{"_id":"source/react/node_modules/caniuse-lite/data/features/blobbuilder.js","hash":"db3fe5fbe30b2d781f9912441a9bf58be7644700","modified":1698375074996},{"_id":"source/react/node_modules/caniuse-lite/data/features/beacon.js","hash":"f094624da61d401e881b8a0cbeb596589e863bdf","modified":1698375074985},{"_id":"source/react/node_modules/caniuse-lite/data/features/bloburls.js","hash":"7c49c7a4b5a7675deb70d8dd8637a8b0c7874e1a","modified":1698375074997},{"_id":"source/react/node_modules/caniuse-lite/data/features/border-radius.js","hash":"ca156ad98521dc6f97b2778c27a418fcf08421be","modified":1698375075000},{"_id":"source/react/node_modules/caniuse-lite/data/features/border-image.js","hash":"8e2e6c6edf6b5997b1e113668f46e9a14de2aaa0","modified":1698375075000},{"_id":"source/react/node_modules/caniuse-lite/data/features/broadcastchannel.js","hash":"556881e5a0e03d4c4f6faac75a9aa63696a687f0","modified":1698375075003},{"_id":"source/react/node_modules/caniuse-lite/data/features/beforeafterprint.js","hash":"d4eab437c8a91cc4ae1b27eee224977cecff37fe","modified":1698375074987},{"_id":"source/react/node_modules/caniuse-lite/data/features/brotli.js","hash":"6f61accc29e0b8e7e6bdba58b05264fa932c332c","modified":1698375075004},{"_id":"source/react/node_modules/caniuse-lite/data/features/canvas-blending.js","hash":"7a5ccbea368779100d6b5953cfaade2f90fa7be2","modified":1698375075022},{"_id":"source/react/node_modules/caniuse-lite/data/features/calc.js","hash":"fed85445a54bc319cfcceee0c5ef38aadb40d093","modified":1698375075021},{"_id":"source/react/node_modules/caniuse-lite/data/features/canvas-text.js","hash":"d50db7f8e9104253b7dcc0ae7f98013ff5197fac","modified":1698375075026},{"_id":"source/react/node_modules/caniuse-lite/data/features/canvas.js","hash":"de0e64bd2c6b8d1553bf1d6d8f3128f3c2bbe60d","modified":1698375075027},{"_id":"source/react/node_modules/caniuse-lite/data/features/ch-unit.js","hash":"8fa4e3c53fd9a8d594aa780a445cfd59715c9af0","modified":1698375075030},{"_id":"source/react/node_modules/caniuse-lite/data/features/chacha20-poly1305.js","hash":"551764433f40a08cd0cef711bac023da11783550","modified":1698375075031},{"_id":"source/react/node_modules/caniuse-lite/data/features/channel-messaging.js","hash":"70be8f31196e51e2da2bcf7178161e30074325a5","modified":1698375075032},{"_id":"source/react/node_modules/caniuse-lite/data/features/childnode-remove.js","hash":"185e3a8e6c9fbe708bac98391bdc518e75f01078","modified":1698375075032},{"_id":"source/react/node_modules/caniuse-lite/data/features/classlist.js","hash":"74a8193991af79da79af9b562df8e9c436077aae","modified":1698375075039},{"_id":"source/react/node_modules/caniuse-lite/data/features/client-hints-dpr-width-viewport.js","hash":"98d5c69b49964f434df37c3b65ff0d9701e97872","modified":1698375075039},{"_id":"source/react/node_modules/caniuse-lite/data/features/clipboard.js","hash":"d1a617bdbaa0c8fe53de368f891d296ef09a8cbf","modified":1698375075039},{"_id":"source/react/node_modules/caniuse-lite/data/features/colr-v1.js","hash":"e1c82493ee8e723942798a6152ce10ec467bbe44","modified":1698375075043},{"_id":"source/react/node_modules/caniuse-lite/data/features/colr.js","hash":"6e0d65d19b185c907fe6dbfec75ac1d11d1b2c5b","modified":1698375075044},{"_id":"source/react/node_modules/caniuse-lite/data/features/const.js","hash":"def72ec87378891d8b1df70e76d481280294a9be","modified":1698375075047},{"_id":"source/react/node_modules/caniuse-lite/data/features/console-basic.js","hash":"19e6975c544b43369cbe76133ed27e81fd6c52ca","modified":1698375075046},{"_id":"source/react/node_modules/caniuse-lite/data/features/array-includes.js","hash":"f4e079cf59cd0fd08577f3db5e64c857195aa792","modified":1698375074922},{"_id":"source/react/node_modules/caniuse-lite/data/features/comparedocumentposition.js","hash":"01fa48256502663e9d4b3b6ef3f0cd8462c868e0","modified":1698375075046},{"_id":"source/react/node_modules/caniuse-lite/data/features/constraint-validation.js","hash":"a2c5c88ef4badcbc703ee45c025199f26657ede9","modified":1698375075048},{"_id":"source/react/node_modules/caniuse-lite/data/features/contentsecuritypolicy.js","hash":"345f764153bb90f75bf8c28f5855cb94ba11dcce","modified":1698375075049},{"_id":"source/react/node_modules/caniuse-lite/data/features/contenteditable.js","hash":"1e7e49885f7623f179726c5066de1303419f61c6","modified":1698375075048},{"_id":"source/react/node_modules/caniuse-lite/data/features/contentsecuritypolicy2.js","hash":"5bef0c7aaa8209b320be37d5d537922434a4dfb3","modified":1698375075049},{"_id":"source/react/node_modules/caniuse-lite/data/features/cookie-store-api.js","hash":"aab61b91b4cbcceed4d833b36307256ad19fa48e","modified":1698375075064},{"_id":"source/react/node_modules/caniuse-lite/data/features/cors.js","hash":"8616f54fd1844f8fc0576deaca3cbc6e4e04d932","modified":1698375075065},{"_id":"source/react/node_modules/caniuse-lite/data/features/createimagebitmap.js","hash":"8d8c5a8dfed2be59a70a0fd5eb7edaab5e346309","modified":1698375075067},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-animation.js","hash":"70b6897a6683a341b9709670cb05e1576a734c7a","modified":1698375075071},{"_id":"source/react/node_modules/caniuse-lite/data/features/cryptography.js","hash":"9be0d0e52d09a6ee7fa2ff65398bc817c06a832e","modified":1698375075069},{"_id":"source/react/node_modules/caniuse-lite/data/features/credential-management.js","hash":"df1d9ac30fd2d3ce87341ca22528888cfa8cb62e","modified":1698375075069},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-all.js","hash":"9416dfa12780f23d0ba093877911fb1b1fe24749","modified":1698375075070},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-anchor-positioning.js","hash":"0f9c1bb8d3fc45db8f09c85eebfd4bbcd064a80c","modified":1698375075070},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-any-link.js","hash":"100025a8da18bcb827627f391da1a08f9e74872b","modified":1698375075072},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-at-counter-style.js","hash":"58bce590eff9c99e5536d30bfe7200b2b7c4a0f1","modified":1698375075074},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-appearance.js","hash":"9c31c0f95a08aa089dcac2315a84e5a6f31e3baf","modified":1698375075073},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-autofill.js","hash":"98293833730a90ad9ec398b1c8754c4b4faf7917","modified":1698375075074},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-backdrop-filter.js","hash":"74178b0833cfbb069d057d7588128c6c21d87300","modified":1698375075075},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-background-offsets.js","hash":"72900f6e09cb843a98a8c284755857c18b87d55d","modified":1698375075076},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-backgroundblendmode.js","hash":"5a4e56d8eb089b468a4c4bfef6dc80530c5e7315","modified":1698375075076},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-boxdecorationbreak.js","hash":"59f1993a5677a80ded389706d141cb7f6fa2b8c4","modified":1698375075076},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-canvas.js","hash":"a6bbf17c5ddaba213d5ee63b77f38ab30888ab5a","modified":1698375075077},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-boxshadow.js","hash":"2a40bae758041bb57cb54c085f1b3b31590a09e2","modified":1698375075077},{"_id":"source/react/node_modules/caniuse-lite/data/features/console-time.js","hash":"2dc3a0104b98094f18340f2698dbe975e98d50ff","modified":1698375075046},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-cascade-layers.js","hash":"3851406b3d55037e52137b39c60891695c5374eb","modified":1698375075078},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-cascade-scope.js","hash":"954f0bc961eeb3733d3e727cb8528af4155f8569","modified":1698375075079},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-case-insensitive.js","hash":"26df97f7b38fb156559307dca2dce9c37b093029","modified":1698375075080},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-caret-color.js","hash":"8daca80c8f77ec68b63c68d469b76e3dc2d7b663","modified":1698375075078},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-color-function.js","hash":"f697f8f32d99ebba24bf9484219954f5d6608f32","modified":1698375075082},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-clip-path.js","hash":"33655af2d193a254dfa6b9826a204416cacb508c","modified":1698375075080},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-color-adjust.js","hash":"dabe5128fcf70baa9e1f85f0f62e3eabcb2659fd","modified":1698375075081},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-conic-gradients.js","hash":"3f5afe4cfd44d05c9982a977f255c0ae20e8065f","modified":1698375075083},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-container-queries-style.js","hash":"d9d8fc010538a5793bcf53491243023d7d32b468","modified":1698375075083},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-container-query-units.js","hash":"e11b1d088f708a3833a8e36aecd673dbe2053351","modified":1698375075084},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-content-visibility.js","hash":"b1332af9ec7f1af1132f40afb38c878ba9505cfe","modified":1698375075086},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-counters.js","hash":"73544f61b9e0f5d0447edf3f69040398de6be916","modified":1698375075089},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-container-queries.js","hash":"96ffa9e15c42b2c509435b4e644ecfc7f05b07f8","modified":1698375075083},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-containment.js","hash":"8d166e66b0143f49c4066f6fdddfb6dedaf409e5","modified":1698375075084},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-crisp-edges.js","hash":"57bebaca97fc467e56538c5a8dd9ca355991fac4","modified":1698375075091},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-cross-fade.js","hash":"fc0d36e111091ae7975a37bd7b1b5dfbd0656394","modified":1698375075091},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-default-pseudo.js","hash":"78410f578880eb3b642a5be3f4111d21123d2b31","modified":1698375075092},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-descendant-gtgt.js","hash":"90ca4574b1fb1b8463b8124b15bae1a558792305","modified":1698375075093},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-deviceadaptation.js","hash":"b120818c46358c8f39e265345081bf844e7aaf4b","modified":1698375075094},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-dir-pseudo.js","hash":"3f95ce36aa1056e27818daff2946937c262008f5","modified":1698375075094},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-element-function.js","hash":"4b4668e7732ecdd1b87ba2ec35bf8215dc13b096","modified":1698375075097},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-display-contents.js","hash":"58775e4ce8bf158feaa28e34cfafb235e4e9f0da","modified":1698375075096},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-exclusions.js","hash":"dccead040a416204781dfe564da7f8c59ae188af","modified":1698375075098},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-env-function.js","hash":"be1ca6bf6ea2eb2479b42ece4e9144ed9d361f67","modified":1698375075097},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-featurequeries.js","hash":"2858127c330c7acb6e3c7fcec5949aabd100b2e1","modified":1698375075098},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-file-selector-button.js","hash":"4c7ebe2c7c2da8fcb4932dd5a5c5c8dd8f31f6e6","modified":1698375075098},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-filter-function.js","hash":"f9c4bc444ea64bd5c133f05a56a276721479805c","modified":1698375075099},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-filters.js","hash":"3659bae384bf8b64654c3e7163b1beb5d401fbae","modified":1698375075100},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-first-letter.js","hash":"77bbccb87d868c508652f834a36977e6f379b1d1","modified":1698375075100},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-first-line.js","hash":"589ea85717532442b352f77144e7cea2eb9e5707","modified":1698375075101},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-fixed.js","hash":"7081d0be4151de7b5f768f2d8d2fb1a019cf886a","modified":1698375075101},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-focus-visible.js","hash":"72584d0a80b5960c077776ddb343971d7b7673b6","modified":1698375075102},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-focus-within.js","hash":"26f0142179ae55c0e9707df86fa7b30e106a692c","modified":1698375075102},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-gencontent.js","hash":"84216f99570b7dd168fdbc14d3f7ec5a4ef511ca","modified":1698375075103},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-font-palette.js","hash":"5facc61b805a5ee884529e623c49be3e0ba4881a","modified":1698375075102},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-font-rendering-controls.js","hash":"48e07c998cd99c380fbdfc317e8c39d1c961b2db","modified":1698375075102},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-font-stretch.js","hash":"c2ca66144a0c7b717dd83291676fd0666c6ea43c","modified":1698375075103},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-gradients.js","hash":"5bf496400ed72caea458dceae480692dbf0f0782","modified":1698375075104},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-grid-animation.js","hash":"fd57d27ec1a1df7c32a9b900b49e21b0dbfac7d0","modified":1698375075104},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-grid.js","hash":"a96d63c7cddd1172bc3ef2bafc128e6a3e064976","modified":1698375075106},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-hanging-punctuation.js","hash":"649dfe0a0c43a3bfa865f9f09fda0b4157f1bd44","modified":1698375075109},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-has.js","hash":"b2b02e3fa82b9e49fc141930bcd94bcbf54c95e3","modified":1698375075109},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-hyphens.js","hash":"4a27fbf6edd522d75e7d6243ef46940dffa829c8","modified":1698375075109},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-image-orientation.js","hash":"1ce8585372ce8543c5a23ad3974a5eef0fa87f45","modified":1698375075110},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-image-set.js","hash":"3c92e903dfd8a0bdc7babc108d108ec7050548b1","modified":1698375075109},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-indeterminate-pseudo.js","hash":"e87ddd0757ee97a9a61ba49ba54a07591332d6ba","modified":1698375075111},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-in-out-of-range.js","hash":"53924b7c2cb58368f7e64c8b802dd4586c51b435","modified":1698375075110},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-initial-letter.js","hash":"461f1e3aaaf1548704a4028cfb2c4eb66cd4a4bc","modified":1698375075111},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-initial-value.js","hash":"2fad8ec8b6d560a94ddf0c645b604adf748667da","modified":1698375075111},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-line-clamp.js","hash":"c886a9352272c02bb400a5fd82271ebcc7f21fb7","modified":1698375075112},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-letter-spacing.js","hash":"d914b63f566c6062d86fa68f465e1a84c5f6f424","modified":1698375075112},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-lch-lab.js","hash":"fd388547aa54d32f6b0360c20b59ee4f26b58f11","modified":1698375075112},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-logical-props.js","hash":"a5cdc35b7ffe16e3662d4d517a0e76426022d4f6","modified":1698375075113},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-marker-pseudo.js","hash":"a056309c63a4b6467444320a51298a1b7e4935f3","modified":1698375075113},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-masks.js","hash":"2156deb9b9e8bea828a10d3a99e8d628a584e9a4","modified":1698375075113},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-matches-pseudo.js","hash":"33430d1b099803d68a09b868c629a7c7d7acb7b1","modified":1698375075114},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-math-functions.js","hash":"d12ae7b57d4e809807a084f4b1841705eebe98f2","modified":1698375075114},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-media-interaction.js","hash":"d149d1ae3b9b89de49834c414764eced831995ba","modified":1698375075114},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-media-range-syntax.js","hash":"c269d755b58645ff253d651ef96004c15b885fb6","modified":1698375075121},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-media-scripting.js","hash":"bec2622afb7cec54429ee79e85bdd25f6c5e0a96","modified":1698375075127},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-mixblendmode.js","hash":"e7983a0461a1ae128af4eb528fd13a96ad096f04","modified":1698375075127},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-media-resolution.js","hash":"11054641f180bdc296cbc6d193081c113f5aa959","modified":1698375075126},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-mediaqueries.js","hash":"9d5cab202b2f725a0dc1131bf49d1e6f7831eaf4","modified":1698375075127},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-namespaces.js","hash":"d2214d8a18ae2406b0099ae6f36e8726b760f51f","modified":1698375075128},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-motion-paths.js","hash":"f45a7c16a27d970ee97b9289c1b8d804df607d2f","modified":1698375075128},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-nesting.js","hash":"6be9854ddb9768693e49e738c2edcbeba0f258bd","modified":1698375075128},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-not-sel-list.js","hash":"4eb162757c7e368323a6cdd28e7082667edeb5c0","modified":1698375075131},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-opacity.js","hash":"fdb3ed1de52798b3e67eeb31cae2bf47e56da433","modified":1698375075131},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-nth-child-of.js","hash":"0b3dfb6d5f8da5de016fd5f644ad6ecabcff09ea","modified":1698375075131},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-optional-pseudo.js","hash":"0e5982dccf925b90c5f41ad446dff9bcf988e9fd","modified":1698375075131},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-overflow-overlay.js","hash":"4b3e07d83b5b7c4db4964290ee5aef35b9f0763c","modified":1698375075132},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-overflow-anchor.js","hash":"aa83ada64abc8d6b76c03c80359c0b37acd4a3e5","modified":1698375075132},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-overflow.js","hash":"190efb40f2165c2d16799d4b7388fe4c8adff3fb","modified":1698375075133},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-overscroll-behavior.js","hash":"4c69d6f61265e15940b087c4a8d9e46dc010ee49","modified":1698375075133},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-page-break.js","hash":"45016076b3a356ed8f552923cc522238b3ab1cd3","modified":1698375075133},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-paged-media.js","hash":"ad2cf06ab06d37f87b7dd795251e4287fcde8b97","modified":1698375075134},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-paint-api.js","hash":"47b5b11a1bb84753a83f5955c2633c405abd8eff","modified":1698375075135},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-placeholder-shown.js","hash":"2d5b72a217d5e0f0cd314ef9032698286f1205b8","modified":1698375075135},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-placeholder.js","hash":"f4e547064319916a7f907948ad4a97ea15cb9918","modified":1698375075142},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-print-color-adjust.js","hash":"2870b593a53751e039e9fa09d396824616f3f2bc","modified":1698375075142},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-read-only-write.js","hash":"87412a3c78765178d35563fdc820aa4cddd66a2c","modified":1698375075142},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-rebeccapurple.js","hash":"3528036e3810973f92e01fd9a5b998afd009b037","modified":1698375075144},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-reflections.js","hash":"a3d04caa19d5cf7f0f9f1e62a53f1f9f52336804","modified":1698375075144},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-regions.js","hash":"e4928c38d6814d49886ec702e2204e8b9774551d","modified":1698375075144},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-relative-colors.js","hash":"b9b42bda24aba2746c80783a19fef9d2cbdcb2e7","modified":1698375075144},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-rrggbbaa.js","hash":"7bc841bc542d37b53b1f88a4339b3b6b9e92a98e","modified":1698375075151},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-repeating-gradients.js","hash":"799ab512977792bc9d23c4d987fe224be8e9416e","modified":1698375075145},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-resize.js","hash":"5db142a7a1db1cb6a39a7caae0247fd619e92701","modified":1698375075146},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-revert-value.js","hash":"5026ed8a5504564abeb1cf252a75297ecbfe65c5","modified":1698375075149},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-scroll-behavior.js","hash":"25b723ba2595de62756d8c1528294cd772c08b9e","modified":1698375075168},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-scrollbar.js","hash":"32491c8ca74627dab5cde488a638f46341205a4b","modified":1698375075179},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-sel2.js","hash":"d0b328f38387181ad06ba74119625ea3e77b7009","modified":1698375075181},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-shapes.js","hash":"ace4a265954f7c39390bd92a349a8c8b1b17bb3d","modified":1698375075183},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-sel3.js","hash":"2eec978e88e24135dcd28f7c4bc1a352e9745b32","modified":1698375075182},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-selection.js","hash":"03cb36467bc2c2ac557a99ee592f2b8c65fb3a34","modified":1698375075182},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-sticky.js","hash":"7dd940aea1f1d94a241f1b4ff2fe206c3388d4f0","modified":1698375075184},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-scroll-timeline.js","hash":"921e7ad2b4d87197b1713d00b50915215ab69993","modified":1698375075172},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-subgrid.js","hash":"a629f0bbfab6a212dfec3b90f3acee893a7391c9","modified":1698375075184},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-snappoints.js","hash":"db886277f60ff823c793061e9b6229dea6c4c2bc","modified":1698375075184},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-supports-api.js","hash":"c5b41d52e408a18eb2268efad5ebfd63a8be7979","modified":1698375075184},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-table.js","hash":"3619dcdeb206e3bd91dd173f117b1e94bed3a9c4","modified":1698375075190},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-text-align-last.js","hash":"b6d2b74d6b0387db2384a4366215e54afccc69fe","modified":1698375075191},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-text-indent.js","hash":"1593ad47f5590e25ec3c79add2d5bc65c633785d","modified":1698375075192},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-text-box-trim.js","hash":"27a34f10648603ab29e2519944e9c5f540777efb","modified":1698375075191},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-text-justify.js","hash":"43de0137f9dba55fa7dcbc0b4bee2eac85ce8040","modified":1698375075195},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-text-orientation.js","hash":"b438f65737c2755d941982cb7ce6f95ce56ebe16","modified":1698375075197},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-text-spacing.js","hash":"09ebce09b0574b12ef922c3c5c311ac999310ee1","modified":1698375075201},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-transitions.js","hash":"18c2e020e85205590caa0a7f38c3956f9f36ec06","modified":1698375075204},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-textshadow.js","hash":"c64d181266fa089f865b35694520c8c7eaad02c0","modified":1698375075201},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-unicode-bidi.js","hash":"06d6340192a3ed0476bc10a11fa49da057b9a44b","modified":1698375075206},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-unset-value.js","hash":"411bffbc4a486617c46d78b7f8b811bb57bcd893","modified":1698375075206},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-widows-orphans.js","hash":"254a1e567642a2740fae41836d8ac3b957316528","modified":1698375075209},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-text-wrap-balance.js","hash":"30926e8533232fcc836dbbec5dce0c58c8d14323","modified":1698375075201},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-when-else.js","hash":"c85114ef745279331e1278e01d349b5f0813523d","modified":1698375075208},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-variables.js","hash":"343c47d25601470ccd7caf61df89d62674900dc8","modified":1698375075208},{"_id":"source/react/node_modules/caniuse-lite/data/features/css3-boxsizing.js","hash":"a379c7b03a51f8ffc3722ffe567a0108499f5a2b","modified":1698375075214},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-width-stretch.js","hash":"7f4b8a67f2d3a7a2d567f0f6a4c11d22b2e55aac","modified":1698375075212},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-writing-mode.js","hash":"ce2d56ca206524d0e7c01510872ced61cfd13ec5","modified":1698375075213},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-zoom.js","hash":"dab2351c21b123a0a2afb768edc1dd284c0b9107","modified":1698375075213},{"_id":"source/react/node_modules/caniuse-lite/data/features/css3-colors.js","hash":"e1a4eadb2e8cc5696e1e0c75dbe1730f76ca4233","modified":1698375075215},{"_id":"source/react/node_modules/caniuse-lite/data/features/css3-tabsize.js","hash":"8a08a68f5c5fad7b9b73b7569285d17354354cc2","modified":1698375075216},{"_id":"source/react/node_modules/caniuse-lite/data/features/css3-attr.js","hash":"51540779a783870c9c4de556f12228784d31c727","modified":1698375075214},{"_id":"source/react/node_modules/caniuse-lite/data/features/css3-cursors-grab.js","hash":"16beb214d916df438201d03f2c29a94f11cecfea","modified":1698375075215},{"_id":"source/react/node_modules/caniuse-lite/data/features/css3-cursors-newer.js","hash":"91c2ac9154224e8b634ba14011e6a5dd93c59a48","modified":1698375075215},{"_id":"source/react/node_modules/caniuse-lite/data/features/custom-elements.js","hash":"fd26625204de67eee28e6a00f5c03f46f25dc671","modified":1698375075217},{"_id":"source/react/node_modules/caniuse-lite/data/features/currentcolor.js","hash":"9b04b2b8f509934e54568da3acba6ad8af325dbc","modified":1698375075217},{"_id":"source/react/node_modules/caniuse-lite/data/features/custom-elementsv1.js","hash":"0987cc61d306a044ea357490c5ac6e42b4f97a96","modified":1698375075217},{"_id":"source/react/node_modules/caniuse-lite/data/features/css3-cursors.js","hash":"2da63214d811a26956d383817d47967b1a09ebc2","modified":1698375075215},{"_id":"source/react/node_modules/caniuse-lite/data/features/datalist.js","hash":"4da497aad7669899c73d71641262b81e6ee04ba6","modified":1698375075223},{"_id":"source/react/node_modules/caniuse-lite/data/features/dataset.js","hash":"0888341d2396142b7e079e72a59097028c106fd5","modified":1698375075224},{"_id":"source/react/node_modules/caniuse-lite/data/features/customevent.js","hash":"108c5d31b14a3434aad2273fced5111c362dc8b6","modified":1698375075218},{"_id":"source/react/node_modules/caniuse-lite/data/features/date-tolocaledatestring.js","hash":"71e813560f8e230bef2824edee40f94d1bbdbaba","modified":1698375075225},{"_id":"source/react/node_modules/caniuse-lite/data/features/datauri.js","hash":"451e456892dd189c405137ec03c3f192af9f049a","modified":1698375075225},{"_id":"source/react/node_modules/caniuse-lite/data/features/decorators.js","hash":"06c46871e7f0ef7659a47016ae10da5acbcc669c","modified":1698375075226},{"_id":"source/react/node_modules/caniuse-lite/data/features/declarative-shadow-dom.js","hash":"37be25d7eb4b5d7531da78dc8c4478de25e9119d","modified":1698375075225},{"_id":"source/react/node_modules/caniuse-lite/data/features/details.js","hash":"63d77779f88c65ee72a18be3e52153d019e0f853","modified":1698375075227},{"_id":"source/react/node_modules/caniuse-lite/data/features/deviceorientation.js","hash":"48e18fdd73b9d82950991af3d0dfccced4361ba5","modified":1698375075227},{"_id":"source/react/node_modules/caniuse-lite/data/features/devicepixelratio.js","hash":"9180184b0681296befa66294fbcbc78244c162f6","modified":1698375075228},{"_id":"source/react/node_modules/caniuse-lite/data/features/dialog.js","hash":"c877275eea63bbd8a4ffd3236f628c954e594a41","modified":1698375075228},{"_id":"source/react/node_modules/caniuse-lite/data/features/dispatchevent.js","hash":"1677cae7aa4cdf31f8b9c4a222b618b73b9fdaf8","modified":1698375075229},{"_id":"source/react/node_modules/caniuse-lite/data/features/dnssec.js","hash":"10876d6af6066bf097e164a16fc99665103d5acc","modified":1698375075230},{"_id":"source/react/node_modules/caniuse-lite/data/features/do-not-track.js","hash":"f94b4d6163df7cb9a953e3928d1470e76d79b818","modified":1698375075231},{"_id":"source/react/node_modules/caniuse-lite/data/features/document-currentscript.js","hash":"67740624408dafd4a891873f28a11aa610c18727","modified":1698375075232},{"_id":"source/react/node_modules/caniuse-lite/data/features/document-evaluate-xpath.js","hash":"8453a750cdbc3534dcd71ebde28257dda1b2f8fe","modified":1698375075233},{"_id":"source/react/node_modules/caniuse-lite/data/features/document-policy.js","hash":"d14c7f1f9d656d5e66164878e25494d6c11f31cf","modified":1698375075234},{"_id":"source/react/node_modules/caniuse-lite/data/features/document-scrollingelement.js","hash":"bf1ee2be61ba31573219a99ed3dbf2bf36c5853b","modified":1698375075234},{"_id":"source/react/node_modules/caniuse-lite/data/features/documenthead.js","hash":"bc04b0773e499e34cc2c16ad9d45d008bf9b16a4","modified":1698375075235},{"_id":"source/react/node_modules/caniuse-lite/data/features/dom-manip-convenience.js","hash":"6d2402d0c8b8b3b534d442625072613e7b6a5cb9","modified":1698375075236},{"_id":"source/react/node_modules/caniuse-lite/data/features/dom-range.js","hash":"7abd1f836251682aabf9b56c6ba82f4ca7a32fa4","modified":1698375075237},{"_id":"source/react/node_modules/caniuse-lite/data/features/document-execcommand.js","hash":"236b35a43c374303ebfddffaae6be6abe034444d","modified":1698375075233},{"_id":"source/react/node_modules/caniuse-lite/data/features/css-touch-action.js","hash":"ecb13f09a0f6dd6f88f9c166ad971c1d8039d9fd","modified":1698375075202},{"_id":"source/react/node_modules/caniuse-lite/data/features/domcontentloaded.js","hash":"1f49ccf1e6b62bd23a8de6c0064de683b44c8ee6","modified":1698375075237},{"_id":"source/react/node_modules/caniuse-lite/data/features/dommatrix.js","hash":"1b65a0692cdb2c750fcb98cb5fa2ba385301ee9d","modified":1698375075240},{"_id":"source/react/node_modules/caniuse-lite/data/features/download.js","hash":"9883304beb1c86d230bb9c14ed548c28c25cbce6","modified":1698375075241},{"_id":"source/react/node_modules/caniuse-lite/data/features/element-closest.js","hash":"18642cacb04bc345c746af37909ad8ebe9f273c2","modified":1698375075249},{"_id":"source/react/node_modules/caniuse-lite/data/features/element-scroll-methods.js","hash":"97d914216d8102ce92a5b35f0a5d6f5f49fd43fb","modified":1698375075251},{"_id":"source/react/node_modules/caniuse-lite/data/features/dragndrop.js","hash":"b656644f688b62010bc82f8f33807663150fe306","modified":1698375075242},{"_id":"source/react/node_modules/caniuse-lite/data/features/eme.js","hash":"a28f82c02ccbf5331dcd8cf4182411f9614b6c45","modified":1698375075251},{"_id":"source/react/node_modules/caniuse-lite/data/features/eot.js","hash":"33bba04f8cf93e9a0ef0c5a894aff4398af6dd7f","modified":1698375075252},{"_id":"source/react/node_modules/caniuse-lite/data/features/element-from-point.js","hash":"2ca8ef5dd8e0010e705b902f2d98af76d17836d5","modified":1698375075250},{"_id":"source/react/node_modules/caniuse-lite/data/features/es6-class.js","hash":"90b7c8a261666c8354268526967cb7f8aaeed567","modified":1698375075254},{"_id":"source/react/node_modules/caniuse-lite/data/features/es6-module-dynamic-import.js","hash":"62b6f1d3912dca4aed7170ed434d70bb9f9fd87a","modified":1698375075257},{"_id":"source/react/node_modules/caniuse-lite/data/features/es6-module.js","hash":"d11cfa8e4d57e446f11e11bf8ed7817e3c57d3bc","modified":1698375075257},{"_id":"source/react/node_modules/caniuse-lite/data/features/es6-generators.js","hash":"53d0d9e83f79dbb31fc84c51d00f4e131b6ea281","modified":1698375075256},{"_id":"source/react/node_modules/caniuse-lite/data/features/es6-number.js","hash":"d7bb93306a9149b1b0a67aa9cee050db5b85abf5","modified":1698375075258},{"_id":"source/react/node_modules/caniuse-lite/data/features/es5.js","hash":"68bb010e3f535fcac8415be29c986cb96a505a9e","modified":1698375075254},{"_id":"source/react/node_modules/caniuse-lite/data/features/eventsource.js","hash":"ff46050def0c3ff7c3454ee2f78d5d2ade49b98e","modified":1698375075261},{"_id":"source/react/node_modules/caniuse-lite/data/features/es6.js","hash":"be748f5925752b0bfe86252ddcc47f8e73ad5a09","modified":1698375075260},{"_id":"source/react/node_modules/caniuse-lite/data/features/es6-string-includes.js","hash":"3771b82214f585cfc2903b7228e5b762456b74b8","modified":1698375075259},{"_id":"source/react/node_modules/caniuse-lite/data/features/extended-system-fonts.js","hash":"4d93c4ad72811a9d9e62da2bea5e5d04d53f3531","modified":1698375075261},{"_id":"source/react/node_modules/caniuse-lite/data/features/feature-policy.js","hash":"30c0f3556de8f11f3376932534b212a2e488eeaa","modified":1698375075262},{"_id":"source/react/node_modules/caniuse-lite/data/features/fieldset-disabled.js","hash":"d153527e53edd7338c15fdaff30abdaeb6663ba5","modified":1698375075264},{"_id":"source/react/node_modules/caniuse-lite/data/features/fetch.js","hash":"75380635ce44ea0e013d6e4d6aae7f7e1de15011","modified":1698375075264},{"_id":"source/react/node_modules/caniuse-lite/data/features/fileapi.js","hash":"8399a168a9140d652c9d7d2cf70d6412df63b961","modified":1698375075265},{"_id":"source/react/node_modules/caniuse-lite/data/features/filesystem.js","hash":"48ff0b6ce9ce680639e31e8ddf56f3e42308b6d2","modified":1698375075267},{"_id":"source/react/node_modules/caniuse-lite/data/features/filereader.js","hash":"b02aacecf0ccc2b0dbf61d82db601b0859115cd0","modified":1698375075265},{"_id":"source/react/node_modules/caniuse-lite/data/features/filereadersync.js","hash":"5beef885b2a7447e6a8ace22e818aac5df4214ed","modified":1698375075265},{"_id":"source/react/node_modules/caniuse-lite/data/features/flac.js","hash":"26380a6527b4fdcdfe5403577b8f45e3e63a4ab7","modified":1698375075271},{"_id":"source/react/node_modules/caniuse-lite/data/features/flexbox.js","hash":"ea16723503c1ee03c744351bc88d2a027245ca1c","modified":1698375075272},{"_id":"source/react/node_modules/caniuse-lite/data/features/flow-root.js","hash":"3f96e703c6fd92f4d296faf5159d91acfc4a8fdf","modified":1698375075271},{"_id":"source/react/node_modules/caniuse-lite/data/features/flexbox-gap.js","hash":"7f2696e108cef17641b2bdaf75c59517973c8892","modified":1698375075272},{"_id":"source/react/node_modules/caniuse-lite/data/features/focusin-focusout-events.js","hash":"2f040ff37c38341feb5d717b064fa00d5e2432b2","modified":1698375075274},{"_id":"source/react/node_modules/caniuse-lite/data/features/font-family-system-ui.js","hash":"ba2f01ce367381c1f36ac1e41d3c16c86282a18a","modified":1698375075274},{"_id":"source/react/node_modules/caniuse-lite/data/features/font-loading.js","hash":"b8334c655b4a9509d2b3336eba147f43998802f1","modified":1698375075276},{"_id":"source/react/node_modules/caniuse-lite/data/features/font-feature.js","hash":"e1df9cda1d7303964f4388e3e60836289aea5bc2","modified":1698375075275},{"_id":"source/react/node_modules/caniuse-lite/data/features/font-kerning.js","hash":"24e58f47920d6026acbaf0aeba165ff510be25bd","modified":1698375075275},{"_id":"source/react/node_modules/caniuse-lite/data/features/font-size-adjust.js","hash":"51c68975781768ca6208e160b80c4bd8b4dbfc6b","modified":1698375075276},{"_id":"source/react/node_modules/caniuse-lite/data/features/font-unicode-range.js","hash":"bfba968f35bf2fc5432d9a8b0a6347fd1318a558","modified":1698375075277},{"_id":"source/react/node_modules/caniuse-lite/data/features/fontface.js","hash":"4feb30defc5ac077796e8670bdfa678c2aec0732","modified":1698375075278},{"_id":"source/react/node_modules/caniuse-lite/data/features/font-smooth.js","hash":"342c0145c61629481c6ef514763f59d2c60c1909","modified":1698375075276},{"_id":"source/react/node_modules/caniuse-lite/data/features/font-variant-alternates.js","hash":"ce82ba801c613463cd9b6ce09d28eaca8ea8b469","modified":1698375075277},{"_id":"source/react/node_modules/caniuse-lite/data/features/font-variant-numeric.js","hash":"0482e389727deea9cc92aea8c852c352b185795e","modified":1698375075277},{"_id":"source/react/node_modules/caniuse-lite/data/features/form-attribute.js","hash":"c64ab1a1d9e64328a769fad7d3b62e8e29908fb0","modified":1698375075278},{"_id":"source/react/node_modules/caniuse-lite/data/features/form-submit-attributes.js","hash":"580e7cdcac4ea062f24104a873faf557168919a3","modified":1698375075278},{"_id":"source/react/node_modules/caniuse-lite/data/features/form-validation.js","hash":"4d5a1a8514a46277c82262ae6f4d0f95431b8da0","modified":1698375075279},{"_id":"source/react/node_modules/caniuse-lite/data/features/forms.js","hash":"d799cb84450bbcdeedeaab1b42d33d17d622c146","modified":1698375075279},{"_id":"source/react/node_modules/caniuse-lite/data/features/gamepad.js","hash":"234db3aa7da308eeecd6be2068f45600307d1848","modified":1698375075280},{"_id":"source/react/node_modules/caniuse-lite/data/features/fullscreen.js","hash":"99dfed4a7a1a0596d148bcc185d785275f877980","modified":1698375075279},{"_id":"source/react/node_modules/caniuse-lite/data/features/geolocation.js","hash":"9fed02131cc07a825539afcc2f86448c1485fdc7","modified":1698375075282},{"_id":"source/react/node_modules/caniuse-lite/data/features/getboundingclientrect.js","hash":"4643d43b7a57c3649a5561c12942dca3c2fea3af","modified":1698375075282},{"_id":"source/react/node_modules/caniuse-lite/data/features/getelementsbyclassname.js","hash":"ad7dc9e1eb2940ec5ae71099d5022258e46b09ed","modified":1698375075283},{"_id":"source/react/node_modules/caniuse-lite/data/features/getcomputedstyle.js","hash":"4ef6569d0732860b076098b623e031786c2f5823","modified":1698375075283},{"_id":"source/react/node_modules/caniuse-lite/data/features/hashchange.js","hash":"2b513578acf9b9172fc2d6fec8a7a29713a94c14","modified":1698375075292},{"_id":"source/react/node_modules/caniuse-lite/data/features/hardwareconcurrency.js","hash":"9c4fbfae043c8a319d4d5be3d8cce5a82c0728e6","modified":1698375075291},{"_id":"source/react/node_modules/caniuse-lite/data/features/getrandomvalues.js","hash":"c9574eb2efbc48482c7585e65a3ecbd7df4f844b","modified":1698375075283},{"_id":"source/react/node_modules/caniuse-lite/data/features/gyroscope.js","hash":"ca7e7a788dc8ec22c3912c2d82598026cc953360","modified":1698375075291},{"_id":"source/react/node_modules/caniuse-lite/data/features/hevc.js","hash":"8099bb0c2e0bcd6fa67aea5ee6a69f5f6c50b987","modified":1698375075292},{"_id":"source/react/node_modules/caniuse-lite/data/features/hidden.js","hash":"603c620a11a5a8a6aeac464b37a7fc451d6c543a","modified":1698375075292},{"_id":"source/react/node_modules/caniuse-lite/data/features/history.js","hash":"2107350f482e6e5f33847f19a31a0a25a6109e0e","modified":1698375075293},{"_id":"source/react/node_modules/caniuse-lite/data/features/heif.js","hash":"0e26a41514d1e8c355e7710299a95cd9c6030ed9","modified":1698375075292},{"_id":"source/react/node_modules/caniuse-lite/data/features/high-resolution-time.js","hash":"b9499f4d06439433e9cf5f625225d40eb92e1e0b","modified":1698375075292},{"_id":"source/react/node_modules/caniuse-lite/data/features/html5semantic.js","hash":"c59e42fa7993a1104b815ccb14661a258d0e0e4f","modified":1698375075295},{"_id":"source/react/node_modules/caniuse-lite/data/features/html-media-capture.js","hash":"ab8c4c72d4c49616b6980054cbd87322a88bdb72","modified":1698375075294},{"_id":"source/react/node_modules/caniuse-lite/data/features/http-live-streaming.js","hash":"983fc187d8820379d0b600b5d1f3878e6cb6b082","modified":1698375075295},{"_id":"source/react/node_modules/caniuse-lite/data/features/iframe-seamless.js","hash":"124308f6c5fe256da8795d671f976b0e1b2fe4b3","modified":1698375075297},{"_id":"source/react/node_modules/caniuse-lite/data/features/http3.js","hash":"400fded8f847a7698be7ef8e552c1d72728ab0f3","modified":1698375075295},{"_id":"source/react/node_modules/caniuse-lite/data/features/http2.js","hash":"ca37d8213203c34a4b3ace341f6ed772c56c4d48","modified":1698375075295},{"_id":"source/react/node_modules/caniuse-lite/data/features/iframe-sandbox.js","hash":"e90f4d07481338bbadf91bc9651022e154a9d8dd","modified":1698375075297},{"_id":"source/react/node_modules/caniuse-lite/data/features/imagecapture.js","hash":"af687d0083dd0144b50a5f521339f2deb2887f1f","modified":1698375075298},{"_id":"source/react/node_modules/caniuse-lite/data/features/ime.js","hash":"4a6274e031382196bde2ac855a68d19bc94c1fdb","modified":1698375075298},{"_id":"source/react/node_modules/caniuse-lite/data/features/iframe-srcdoc.js","hash":"ef6e568967a4b23d3ba783642831ac2370b362c5","modified":1698375075297},{"_id":"source/react/node_modules/caniuse-lite/data/features/img-naturalwidth-naturalheight.js","hash":"579080a64e7afcffb3e766411cb7e7a940a946ba","modified":1698375075298},{"_id":"source/react/node_modules/caniuse-lite/data/features/import-maps.js","hash":"1a0e204021980b4807c620151ae9dcea8006fed2","modified":1698375075299},{"_id":"source/react/node_modules/caniuse-lite/data/features/imports.js","hash":"827425afed33ca749db52e067847583370bdf89b","modified":1698375075299},{"_id":"source/react/node_modules/caniuse-lite/data/features/indeterminate-checkbox.js","hash":"c1382d3c151f94b335da0e000e4f1f659fe66d5b","modified":1698375075312},{"_id":"source/react/node_modules/caniuse-lite/data/features/indexeddb.js","hash":"ded3802b6fcf074cb4c08bf215fcb9ad8a4b5363","modified":1698375075315},{"_id":"source/react/node_modules/caniuse-lite/data/features/inline-block.js","hash":"f125d416bb7bcf04fcd198899137707ea3141e55","modified":1698375075321},{"_id":"source/react/node_modules/caniuse-lite/data/features/innertext.js","hash":"601c3c057676c7317e339efb5a3cf140b1665a07","modified":1698375075324},{"_id":"source/react/node_modules/caniuse-lite/data/features/indexeddb2.js","hash":"5394ca3b4c8c9516af5bc3315db57ed9c1b86a5d","modified":1698375075318},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-autocomplete-onoff.js","hash":"319f7f24d0cbd0c134f281c1b1ed25e8be3b376a","modified":1698375075324},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-color.js","hash":"933c02977d73bd7075fc7bb2381e0099793d26e3","modified":1698375075328},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-email-tel-url.js","hash":"5bf6d0e878e70d09bad19faadecffc9dfb2ad6bb","modified":1698375075330},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-datetime.js","hash":"77a7d0cf4516cce1802f6f3824910dba9c9ca5f3","modified":1698375075330},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-event.js","hash":"5669d24a75688f1b9c6121ed39246f22b0ec3a14","modified":1698375075330},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-file-accept.js","hash":"00d023eb4bf219b64dfea68a9ffac69db011631b","modified":1698375075331},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-file-multiple.js","hash":"eda125e5de8c7442e84117528abf22f197d0d48b","modified":1698375075332},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-file-directory.js","hash":"a3fcfb3c2083d1695d67642ab534794c81294c30","modified":1698375075331},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-inputmode.js","hash":"49925efc3e98ce44abb9d4a0d945b5c810704306","modified":1698375075332},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-minlength.js","hash":"53d62c49d31dd248c6bdebdc2faa368a05191f89","modified":1698375075333},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-number.js","hash":"90ac34ee98a4007716034ed2390e21cdc7dfc0db","modified":1698375075339},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-pattern.js","hash":"fecd1b1de07cc1c647383c20cb5565964b1c60b9","modified":1698375075342},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-placeholder.js","hash":"fdbb8c7b0d5c15a1a2c42bc3a52a8152e8aa1170","modified":1698375075345},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-range.js","hash":"cc03646f532bd63c258d4e30efdeecfc084eb65d","modified":1698375075347},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-selection.js","hash":"dd40557f2d211fe105cb5bd29af5aaaed20a6932","modified":1698375075347},{"_id":"source/react/node_modules/caniuse-lite/data/features/input-search.js","hash":"a6b0214f47b021b4122681b700a8676124f5c1f4","modified":1698375075347},{"_id":"source/react/node_modules/caniuse-lite/data/features/insertadjacenthtml.js","hash":"2431aea8a27426aa2d63490dc36ade3234c5a89e","modified":1698375075349},{"_id":"source/react/node_modules/caniuse-lite/data/features/insert-adjacent.js","hash":"bd018972b0efc0f5d97beb6eca079343c3ad2c0c","modified":1698375075349},{"_id":"source/react/node_modules/caniuse-lite/data/features/internationalization.js","hash":"7f70137b48e19779651c5c9de9f29f324ea6fcbc","modified":1698375075354},{"_id":"source/react/node_modules/caniuse-lite/data/features/intersectionobserver.js","hash":"2e2033aab676d947063585f10224859e956b53ad","modified":1698375075357},{"_id":"source/react/node_modules/caniuse-lite/data/features/intersectionobserver-v2.js","hash":"59566a5ac982e69665ec14ed0f2a4f0c730b681c","modified":1698375075357},{"_id":"source/react/node_modules/caniuse-lite/data/features/intrinsic-width.js","hash":"07e2f0ee93282806783914d814600299ca0c252e","modified":1698375075358},{"_id":"source/react/node_modules/caniuse-lite/data/features/intl-pluralrules.js","hash":"c5c26955bcab55d027e629489ba41d20f3954033","modified":1698375075358},{"_id":"source/react/node_modules/caniuse-lite/data/features/jpegxl.js","hash":"5c16a110d512c1d8ca0591652b721fd6ef59b9ba","modified":1698375075363},{"_id":"source/react/node_modules/caniuse-lite/data/features/jpeg2000.js","hash":"869c44279e892c3ee442237edd931ee98da1118d","modified":1698375075363},{"_id":"source/react/node_modules/caniuse-lite/data/features/jpegxr.js","hash":"e2358d7cc8c619bbdeed2a06399fc5cf70837062","modified":1698375075364},{"_id":"source/react/node_modules/caniuse-lite/data/features/js-regexp-lookbehind.js","hash":"0d4643ea0a300cf8a505817209d8a86543aa0577","modified":1698375075365},{"_id":"source/react/node_modules/caniuse-lite/data/features/json.js","hash":"6bf28b5ef86cab1ce4d113d155e119a52fe417e9","modified":1698375075365},{"_id":"source/react/node_modules/caniuse-lite/data/features/justify-content-space-evenly.js","hash":"5dbe53aa3b3e63d410ff2cd909f6e3908eedb9bd","modified":1698375075367},{"_id":"source/react/node_modules/caniuse-lite/data/features/kerning-pairs-ligatures.js","hash":"0da7aa2d0b6827ffc26c4854db6378c46b1be0ac","modified":1698375075368},{"_id":"source/react/node_modules/caniuse-lite/data/features/keyboardevent-charcode.js","hash":"667dba0b1d503b5f9c15c8d6c577c7103700c0be","modified":1698375075369},{"_id":"source/react/node_modules/caniuse-lite/data/features/keyboardevent-code.js","hash":"ea347839975548c3dfab5657a135656787ddb04c","modified":1698375075370},{"_id":"source/react/node_modules/caniuse-lite/data/features/keyboardevent-getmodifierstate.js","hash":"62a38404faca717ec4e004c2294093b1c30bbd41","modified":1698375075371},{"_id":"source/react/node_modules/caniuse-lite/data/features/keyboardevent-location.js","hash":"eb6cbcae92b265ffdd1fdfed8e44535d1c1d3894","modified":1698375075376},{"_id":"source/react/node_modules/caniuse-lite/data/features/keyboardevent-key.js","hash":"8c3dc51e4aed6b76215ed57885f72a9afbf0c04e","modified":1698375075372},{"_id":"source/react/node_modules/caniuse-lite/data/features/keyboardevent-which.js","hash":"d6477cc0b41991d5e02ad435f4f8c56c78feb4cd","modified":1698375075377},{"_id":"source/react/node_modules/caniuse-lite/data/features/let.js","hash":"c30630ecaced738d2954ef4f009c7be2b320c28e","modified":1698375075413},{"_id":"source/react/node_modules/caniuse-lite/data/features/lazyload.js","hash":"2531063009d8f51ebcc6249d9894a6dacfa1f8a7","modified":1698375075412},{"_id":"source/react/node_modules/caniuse-lite/data/features/link-rel-preconnect.js","hash":"8bae2673ad3750c4f54f008d3b9af0fabc35b138","modified":1698375075417},{"_id":"source/react/node_modules/caniuse-lite/data/features/link-icon-png.js","hash":"98f7a41dd355d626957b4a08bc85830489268aa1","modified":1698375075414},{"_id":"source/react/node_modules/caniuse-lite/data/features/link-icon-svg.js","hash":"a1bbd2ceed4e2f93e4daf5071a08561ea9b26867","modified":1698375075415},{"_id":"source/react/node_modules/caniuse-lite/data/features/link-rel-modulepreload.js","hash":"c8d8a6454f2e308cf137be3be2eeebdc6a08f11b","modified":1698375075416},{"_id":"source/react/node_modules/caniuse-lite/data/features/link-rel-preload.js","hash":"fc98d2ea31eb23af318236debfe958207f0dc001","modified":1698375075418},{"_id":"source/react/node_modules/caniuse-lite/data/features/link-rel-prerender.js","hash":"8b1c48816d1707c609f530e0dcead3a75eafb75b","modified":1698375075418},{"_id":"source/react/node_modules/caniuse-lite/data/features/loading-lazy-attr.js","hash":"fc04c94eb222300d294e7f8f388a43c92784edbf","modified":1698375075421},{"_id":"source/react/node_modules/caniuse-lite/data/features/link-rel-dns-prefetch.js","hash":"4c612484f2b2c2872e165aaff2611b1ec211f9a0","modified":1698375075416},{"_id":"source/react/node_modules/caniuse-lite/data/features/localecompare.js","hash":"03655a2bae3679dce3c819203162975508a987d5","modified":1698375075421},{"_id":"source/react/node_modules/caniuse-lite/data/features/link-rel-prefetch.js","hash":"d0e423dbf251541fb9e7041a4bb03f903f8efce1","modified":1698375075417},{"_id":"source/react/node_modules/caniuse-lite/data/features/magnetometer.js","hash":"8260b8e2fe0959d60a27a5dd8a72fb526f8b9b5f","modified":1698375075427},{"_id":"source/react/node_modules/caniuse-lite/data/features/mathml.js","hash":"3dfccb0e4ad6af3c9b478302428ac4ae9803b647","modified":1698375075431},{"_id":"source/react/node_modules/caniuse-lite/data/features/matchesselector.js","hash":"af018f4bafcc33354f473b736e417c3dc997a342","modified":1698375075430},{"_id":"source/react/node_modules/caniuse-lite/data/features/maxlength.js","hash":"4844f21f6f8ec5fd0f79d71ba10487e578e4856a","modified":1698375075432},{"_id":"source/react/node_modules/caniuse-lite/data/features/matchmedia.js","hash":"8778542aff8e2d52789b52050146dda3c860a64d","modified":1698375075430},{"_id":"source/react/node_modules/caniuse-lite/data/features/mdn-css-unicode-bidi-isolate.js","hash":"2d15c6b2147792ec0a4e94be47831aa712f7e1f7","modified":1698375075434},{"_id":"source/react/node_modules/caniuse-lite/data/features/mdn-css-backdrop-pseudo-element.js","hash":"abf5d9d95aa6f57f025f16f3e76e9fcdf4730736","modified":1698375075433},{"_id":"source/react/node_modules/caniuse-lite/data/features/mdn-css-unicode-bidi-plaintext.js","hash":"9b1e41dbdb8ede23136a8349451939f9938fd8b8","modified":1698375075434},{"_id":"source/react/node_modules/caniuse-lite/data/features/mdn-css-unicode-bidi-isolate-override.js","hash":"a63cca88660a125fb57304e4a4536b4d210890e8","modified":1698375075434},{"_id":"source/react/node_modules/caniuse-lite/data/features/mdn-text-decoration-line.js","hash":"9aca1cff9ba620058f1e046e76cedcf3d7f6eece","modified":1698375075435},{"_id":"source/react/node_modules/caniuse-lite/data/features/mdn-text-decoration-style.js","hash":"62d560ecf07f3319548d4b6fc5ea1b366318cf40","modified":1698375075435},{"_id":"source/react/node_modules/caniuse-lite/data/features/mdn-text-decoration-color.js","hash":"50398aa6ccb0e3d4a27b9e2e0d9424a8ab8d031a","modified":1698375075434},{"_id":"source/react/node_modules/caniuse-lite/data/features/mdn-text-decoration-shorthand.js","hash":"aa821d1006994a5091ad68e4f38a4559a1a43278","modified":1698375075435},{"_id":"source/react/node_modules/caniuse-lite/data/features/mediarecorder.js","hash":"454d1ec767e953e8e36f35688509798db2945f0b","modified":1698375075438},{"_id":"source/react/node_modules/caniuse-lite/data/features/mediacapture-fromelement.js","hash":"544f1a5856c26c7735a470a56bc2b94e295ff61b","modified":1698375075437},{"_id":"source/react/node_modules/caniuse-lite/data/features/media-fragments.js","hash":"088edf672faae1fbcb2f5574e551daf9a975ed57","modified":1698375075437},{"_id":"source/react/node_modules/caniuse-lite/data/features/mediasource.js","hash":"dd9603f8fd511f4b2c37c67a5724759875f426d3","modified":1698375075439},{"_id":"source/react/node_modules/caniuse-lite/data/features/menu.js","hash":"33d1b191c72bc896417a27872370e6a88b3b8e06","modified":1698375075440},{"_id":"source/react/node_modules/caniuse-lite/data/features/meta-theme-color.js","hash":"699b58b3416e5b8694286aa8790f63a1437bd1db","modified":1698375075441},{"_id":"source/react/node_modules/caniuse-lite/data/features/meter.js","hash":"a4541177e333601e37a2372feec157fcd7416688","modified":1698375075444},{"_id":"source/react/node_modules/caniuse-lite/data/features/midi.js","hash":"db4c1edbba39d30d870035dbaefb5e3a49c03152","modified":1698375075446},{"_id":"source/react/node_modules/caniuse-lite/data/features/minmaxwh.js","hash":"dd80f570c318d96d4e8ac0e0a6458b27d98da5a2","modified":1698375075447},{"_id":"source/react/node_modules/caniuse-lite/data/features/mp3.js","hash":"74c8d1466f5d9f49ae2ec2fe5c71f02bf40170dd","modified":1698375075450},{"_id":"source/react/node_modules/caniuse-lite/data/features/mpeg4.js","hash":"47e082a3de667bf658dee8d291354364add911d2","modified":1698375075451},{"_id":"source/react/node_modules/caniuse-lite/data/features/mpeg-dash.js","hash":"edab59738ddcf13bfea294ad98d6732374e1bf14","modified":1698375075451},{"_id":"source/react/node_modules/caniuse-lite/data/features/multicolumn.js","hash":"9691b71ad1d9083182b581d797c7869943708c91","modified":1698375075468},{"_id":"source/react/node_modules/caniuse-lite/data/features/native-filesystem-api.js","hash":"2fd0021aeb7a1ea5e283f47c72ab583443a5be11","modified":1698375075475},{"_id":"source/react/node_modules/caniuse-lite/data/features/multibackgrounds.js","hash":"a837b51351e53b9a7e67d55d32b33c8e9d4f6cfc","modified":1698375075468},{"_id":"source/react/node_modules/caniuse-lite/data/features/mutation-events.js","hash":"e5bf29cde682c93001026930ea024e10cdd7b4ee","modified":1698375075469},{"_id":"source/react/node_modules/caniuse-lite/data/features/mutationobserver.js","hash":"913b36e28f29a43bf46ffe8efe0916d81aa523d6","modified":1698375075469},{"_id":"source/react/node_modules/caniuse-lite/data/features/namevalue-storage.js","hash":"2a80ba1b7880f8fa4defef3c27bc731b7f6d375d","modified":1698375075475},{"_id":"source/react/node_modules/caniuse-lite/data/features/nav-timing.js","hash":"9d0a5234ab46a58012abfa455a32a8add68ba83c","modified":1698375075476},{"_id":"source/react/node_modules/caniuse-lite/data/features/netinfo.js","hash":"bdd1e189c8e3adb725bbd815b8bb83477b6fbc41","modified":1698375075478},{"_id":"source/react/node_modules/caniuse-lite/data/features/notifications.js","hash":"2f6bef26765194d7c23c1e5d20ec455e0615b751","modified":1698375075481},{"_id":"source/react/node_modules/caniuse-lite/data/features/object-entries.js","hash":"4689d8f8adadcfb7cd347878bd7d153793f0d5e4","modified":1698375075483},{"_id":"source/react/node_modules/caniuse-lite/data/features/object-fit.js","hash":"401aa7c1ad1a9c3d0c230d48cfba0a448a74b2ee","modified":1698375075484},{"_id":"source/react/node_modules/caniuse-lite/data/features/object-values.js","hash":"ec0d2e6e31ee7f2f3cae72c9305d2543420598ee","modified":1698375075485},{"_id":"source/react/node_modules/caniuse-lite/data/features/offscreencanvas.js","hash":"f8558ad70f1e6184640b9358e2bea0be1dd3ed15","modified":1698375075487},{"_id":"source/react/node_modules/caniuse-lite/data/features/objectrtc.js","hash":"42f3cf2c1a807e00d123acb911cceba0130bc98e","modified":1698375075485},{"_id":"source/react/node_modules/caniuse-lite/data/features/object-observe.js","hash":"9db4ed371fed3272870f47c85ede7df475ab4a36","modified":1698375075484},{"_id":"source/react/node_modules/caniuse-lite/data/features/ogv.js","hash":"15fd13b485c0dbe7f14dee9681eb2df94b66f209","modified":1698375075488},{"_id":"source/react/node_modules/caniuse-lite/data/features/ol-reversed.js","hash":"03c1664a28f40c0f337aba5eec470412ff1bdbad","modified":1698375075488},{"_id":"source/react/node_modules/caniuse-lite/data/features/offline-apps.js","hash":"4ed8c6a2fc4577ef98787027cd523d13089b8808","modified":1698375075485},{"_id":"source/react/node_modules/caniuse-lite/data/features/ogg-vorbis.js","hash":"c014cd7551b575972f2cce9536df9d8a2f895287","modified":1698375075487},{"_id":"source/react/node_modules/caniuse-lite/data/features/online-status.js","hash":"cb1a4e5aa9b15833036456c97d13cf0a05bcf99f","modified":1698375075489},{"_id":"source/react/node_modules/caniuse-lite/data/features/orientation-sensor.js","hash":"5e49058bb30bc07e9c4649e53050924794a73867","modified":1698375075490},{"_id":"source/react/node_modules/caniuse-lite/data/features/opus.js","hash":"b24563e1c2d0aa90a34df5a140be9b053347e1a9","modified":1698375075489},{"_id":"source/react/node_modules/caniuse-lite/data/features/once-event-listener.js","hash":"7a5888e61116c481cfc4be271710e31066524c77","modified":1698375075489},{"_id":"source/react/node_modules/caniuse-lite/data/features/outline.js","hash":"9bd229be45bbff2011cffcc64b4e7e6ca3fc547d","modified":1698375075493},{"_id":"source/react/node_modules/caniuse-lite/data/features/pagevisibility.js","hash":"8ea59e2a410297b1ddfc0d114591a2ea4f88ae33","modified":1698375075496},{"_id":"source/react/node_modules/caniuse-lite/data/features/page-transition-events.js","hash":"37c0d8f390e23e6d89b3f8d81a6f54cfdf2ff5fc","modified":1698375075495},{"_id":"source/react/node_modules/caniuse-lite/data/features/pad-start-end.js","hash":"1c366f32d165ad97653ad7b74de71e4d29d60ada","modified":1698375075495},{"_id":"source/react/node_modules/caniuse-lite/data/features/passive-event-listener.js","hash":"0e663b150ce7e53ee75a1256444dd5ab9e113066","modified":1698375075496},{"_id":"source/react/node_modules/caniuse-lite/data/features/passkeys.js","hash":"e68ddbd557676f208a0a26d370d493efc5257816","modified":1698375075496},{"_id":"source/react/node_modules/caniuse-lite/data/features/passwordrules.js","hash":"6d80d8a941ae571739cced54f783c1455ccfa6b3","modified":1698375075497},{"_id":"source/react/node_modules/caniuse-lite/data/features/path2d.js","hash":"044d0cffa5ea77220da5a75f2bc24521e4670116","modified":1698375075497},{"_id":"source/react/node_modules/caniuse-lite/data/features/payment-request.js","hash":"18b3b4142f169ba1e569f8c442b59999f6a913d7","modified":1698375075497},{"_id":"source/react/node_modules/caniuse-lite/data/features/permissions-api.js","hash":"2a4986c83c3536feafacd7473662d2512c7c4ca2","modified":1698375075500},{"_id":"source/react/node_modules/caniuse-lite/data/features/permissions-policy.js","hash":"50a68e775d24873099deba8b46ba0572375b017a","modified":1698375075500},{"_id":"source/react/node_modules/caniuse-lite/data/features/pdf-viewer.js","hash":"5a7683001ef932818ea168e571dfb7720f6e8b0d","modified":1698375075498},{"_id":"source/react/node_modules/caniuse-lite/data/features/picture.js","hash":"3df31addaf5496edd7bd265bd3121764186a4215","modified":1698375075504},{"_id":"source/react/node_modules/caniuse-lite/data/features/ping.js","hash":"303f2b0d46964791adebf9777fcf41ad4221ceca","modified":1698375075504},{"_id":"source/react/node_modules/caniuse-lite/data/features/picture-in-picture.js","hash":"d129fafc08e4cc9bab37ad2076ccbf8eb6d60831","modified":1698375075503},{"_id":"source/react/node_modules/caniuse-lite/data/features/png-alpha.js","hash":"f545c3780e99f3b429ae0d98f10438c5ceefcca4","modified":1698375075510},{"_id":"source/react/node_modules/caniuse-lite/data/features/pointer-events.js","hash":"cc9fb48423b2f1ce83a15af2613467041a2eebd1","modified":1698375075510},{"_id":"source/react/node_modules/caniuse-lite/data/features/prefers-color-scheme.js","hash":"d1d7bd698269ee826dc90782399c7007ed6635a6","modified":1698375075513},{"_id":"source/react/node_modules/caniuse-lite/data/features/portals.js","hash":"a579eb00a42bb6fcb16b044f703e54c268873279","modified":1698375075511},{"_id":"source/react/node_modules/caniuse-lite/data/features/pointerlock.js","hash":"90861bc690380ecd30b9b2da044fcc7ca449d8aa","modified":1698375075511},{"_id":"source/react/node_modules/caniuse-lite/data/features/pointer.js","hash":"958979d1cc277d4bd3deb1aa318a96bb5b2dd0b6","modified":1698375075511},{"_id":"source/react/node_modules/caniuse-lite/data/features/promises.js","hash":"63325c5a28a5dd8377900164ad992c9f4fdc3cb4","modified":1698375075513},{"_id":"source/react/node_modules/caniuse-lite/data/features/prefers-reduced-motion.js","hash":"f6638773f0d73992f2ef820cd5a9826e6c9d50ca","modified":1698375075513},{"_id":"source/react/node_modules/caniuse-lite/data/features/progress.js","hash":"177bf5f8516ef72d064c19bcb2ef952a940ff678","modified":1698375075513},{"_id":"source/react/node_modules/caniuse-lite/data/features/promise-finally.js","hash":"c3839e4220b0819c27a7c58163c5b2f0e81447e5","modified":1698375075513},{"_id":"source/react/node_modules/caniuse-lite/data/features/proxy.js","hash":"8733ea5d66f4b4c799b131eb8ee34d5d1c49576b","modified":1698375075514},{"_id":"source/react/node_modules/caniuse-lite/data/features/proximity.js","hash":"ab00f058543dd2d9ee4c75c9347e6a0c4049d7d4","modified":1698375075514},{"_id":"source/react/node_modules/caniuse-lite/data/features/publickeypinning.js","hash":"33245c4b651bd70388224a1eb73242978f5a310b","modified":1698375075515},{"_id":"source/react/node_modules/caniuse-lite/data/features/readonly-attr.js","hash":"dc24ecbccbed521a30c578c13af9d1e8942ac452","modified":1698375075518},{"_id":"source/react/node_modules/caniuse-lite/data/features/queryselector.js","hash":"8e852f52921317f46c3dfaaea50828a18ffdc343","modified":1698375075517},{"_id":"source/react/node_modules/caniuse-lite/data/features/push-api.js","hash":"81f7ea0fc4f7cbbc37b68d05796086780c018cb5","modified":1698375075515},{"_id":"source/react/node_modules/caniuse-lite/data/features/registerprotocolhandler.js","hash":"1480a58c568153a0af8507a21611a9b1f60c1068","modified":1698375075520},{"_id":"source/react/node_modules/caniuse-lite/data/features/rel-noreferrer.js","hash":"92a5e4adcca1dab39fe4bc0710afe20eb3a94b23","modified":1698375075522},{"_id":"source/react/node_modules/caniuse-lite/data/features/referrer-policy.js","hash":"74f09f1aa5164ba59fb393e8ff4775d58f2b9827","modified":1698375075519},{"_id":"source/react/node_modules/caniuse-lite/data/features/rel-noopener.js","hash":"0af9967ff2e15964f0404efe9c5f7ecf3b3a32a6","modified":1698375075521},{"_id":"source/react/node_modules/caniuse-lite/data/features/rellist.js","hash":"339923d6e39a767155774ffd4c391c4f0713600f","modified":1698375075524},{"_id":"source/react/node_modules/caniuse-lite/data/features/resizeobserver.js","hash":"a5726b351da4d52e8e9dfa55ad46471a30f8f605","modified":1698375075526},{"_id":"source/react/node_modules/caniuse-lite/data/features/requestanimationframe.js","hash":"5bc3244848055d053122e24c43dc1746dfb6c136","modified":1698375075525},{"_id":"source/react/node_modules/caniuse-lite/data/features/rem.js","hash":"9d962ca3c3291a7ab41c44caec13c9c2b5cfaffd","modified":1698375075525},{"_id":"source/react/node_modules/caniuse-lite/data/features/rtcpeerconnection.js","hash":"55e693499af764ccd46f9e384337011a4cd5a92a","modified":1698375075530},{"_id":"source/react/node_modules/caniuse-lite/data/features/resource-timing.js","hash":"39fb9cf20364e4f1f1e26309a5c822fea32ada1c","modified":1698375075526},{"_id":"source/react/node_modules/caniuse-lite/data/features/requestidlecallback.js","hash":"76939629a2dd0628bea662e791561f5bd6adc8a8","modified":1698375075525},{"_id":"source/react/node_modules/caniuse-lite/data/features/rest-parameters.js","hash":"9c7381c81433805e3cb04d7529c76a0990292434","modified":1698375075526},{"_id":"source/react/node_modules/caniuse-lite/data/features/ruby.js","hash":"fd56fca27c1607a264070afa52483ed4e7d90049","modified":1698375075530},{"_id":"source/react/node_modules/caniuse-lite/data/features/same-site-cookie-attribute.js","hash":"66907083029afb335358377c1ef0207852377614","modified":1698375075531},{"_id":"source/react/node_modules/caniuse-lite/data/features/run-in.js","hash":"55753a5a2409d4b0cb0075d695926b22cd4b8444","modified":1698375075531},{"_id":"source/react/node_modules/caniuse-lite/data/features/screen-orientation.js","hash":"5b7482d19c07491cf2b0ead34db5a325e38ed04e","modified":1698375075532},{"_id":"source/react/node_modules/caniuse-lite/data/features/script-async.js","hash":"bc3ee7e59778ff62c7faf8782b6cee1d51dec114","modified":1698375075532},{"_id":"source/react/node_modules/caniuse-lite/data/features/script-defer.js","hash":"71ec942fc03b515b307360fa5a32ac860e5041fe","modified":1698375075532},{"_id":"source/react/node_modules/caniuse-lite/data/features/scrollintoview.js","hash":"25eb2afbabc0dbccdf06bfc0a9d9b5bad4f9543c","modified":1698375075533},{"_id":"source/react/node_modules/caniuse-lite/data/features/scrollintoviewifneeded.js","hash":"4cf41ccec578040ed9b6ccf1bf44122745be0472","modified":1698375075533},{"_id":"source/react/node_modules/caniuse-lite/data/features/server-timing.js","hash":"5981fa927123dd78b29456f0e587204dc8fbe023","modified":1698375075535},{"_id":"source/react/node_modules/caniuse-lite/data/features/selection-api.js","hash":"cfa41da56458a6891db22e776a3104f3ef83dac7","modified":1698375075534},{"_id":"source/react/node_modules/caniuse-lite/data/features/sdch.js","hash":"e2e58360939f007000fd89eec058e350e61b6aeb","modified":1698375075534},{"_id":"source/react/node_modules/caniuse-lite/data/features/serviceworkers.js","hash":"452f401818e9ccd99b06374d5088c80cabaea569","modified":1698375075535},{"_id":"source/react/node_modules/caniuse-lite/data/features/setimmediate.js","hash":"bea949fdfdf503f75d88774bb509449b6cdbb634","modified":1698375075535},{"_id":"source/react/node_modules/caniuse-lite/data/features/shadowdom.js","hash":"6eef8483c0ab253dd9ec1eae373b88a2fba40f9f","modified":1698375075538},{"_id":"source/react/node_modules/caniuse-lite/data/features/shadowdomv1.js","hash":"1b0bdb603de0b79407e333b968b49da2c445a936","modified":1698375075538},{"_id":"source/react/node_modules/caniuse-lite/data/features/sharedworkers.js","hash":"e3765b6a34d5642002e39fee3459cc2112bf244d","modified":1698375075539},{"_id":"source/react/node_modules/caniuse-lite/data/features/sharedarraybuffer.js","hash":"1f6b924afed60eb3633180b81685cd6dc0e1cc27","modified":1698375075539},{"_id":"source/react/node_modules/caniuse-lite/data/features/sni.js","hash":"ec5afe5b70f1006022f16ecbb95aacb0b1014071","modified":1698375075544},{"_id":"source/react/node_modules/caniuse-lite/data/features/spdy.js","hash":"f315d60d077859260681b8ce47b8efd9d73f92b7","modified":1698375075545},{"_id":"source/react/node_modules/caniuse-lite/data/features/speech-synthesis.js","hash":"88701bc9a1b32eec9758ce3b581f5ddada4fe006","modified":1698375075546},{"_id":"source/react/node_modules/caniuse-lite/data/features/stream.js","hash":"0db8b98803c6d65fbc1137c31d2c53102dd8a484","modified":1698375075550},{"_id":"source/react/node_modules/caniuse-lite/data/features/speech-recognition.js","hash":"923c867d281c8f80de9711544033d9991c232811","modified":1698375075545},{"_id":"source/react/node_modules/caniuse-lite/data/features/srcset.js","hash":"b4211358eecbbea9d8faf6a56150318260a0f357","modified":1698375075548},{"_id":"source/react/node_modules/caniuse-lite/data/features/sql-storage.js","hash":"04735d49c999a91e923d8dadcef6482043af6e1d","modified":1698375075546},{"_id":"source/react/node_modules/caniuse-lite/data/features/spellcheck-attribute.js","hash":"b0b9223e07cba4a574f2e8b333bd4e5d721653d1","modified":1698375075546},{"_id":"source/react/node_modules/caniuse-lite/data/features/streams.js","hash":"b3639cfc2897984b2bce2e1b4e05bc19126713c3","modified":1698375075550},{"_id":"source/react/node_modules/caniuse-lite/data/features/stricttransportsecurity.js","hash":"800951edf0fc88cef5b14cecd4f17ea8f12be13f","modified":1698375075550},{"_id":"source/react/node_modules/caniuse-lite/data/features/subresource-bundling.js","hash":"5a09f1387d02794c373b4b542555ebc6dfced1eb","modified":1698375075552},{"_id":"source/react/node_modules/caniuse-lite/data/features/style-scoped.js","hash":"d7a6fd14baf2feeba28672bde55b37e4ea5ee4ea","modified":1698375075551},{"_id":"source/react/node_modules/caniuse-lite/data/features/subresource-integrity.js","hash":"79b5c2280eb205bc70a9a1a52fdafbdb5e61c7a2","modified":1698375075552},{"_id":"source/react/node_modules/caniuse-lite/data/features/svg-css.js","hash":"30935e4350ef9af000fcea20d40329e98a275cf5","modified":1698375075554},{"_id":"source/react/node_modules/caniuse-lite/data/features/svg-filters.js","hash":"14e9a552440cdd9cb731967b04bfb195c0ea0213","modified":1698375075554},{"_id":"source/react/node_modules/caniuse-lite/data/features/svg-fonts.js","hash":"d9d8d67b935cdb17ce8f4248efa910149acd6d9b","modified":1698375075554},{"_id":"source/react/node_modules/caniuse-lite/data/features/svg-fragment.js","hash":"12285820be4cfc458f47918e5726a72f289cecd2","modified":1698375075558},{"_id":"source/react/node_modules/caniuse-lite/data/features/svg-smil.js","hash":"03ebd6931e05487a845e7138d34bc9da8c266f8a","modified":1698375075560},{"_id":"source/react/node_modules/caniuse-lite/data/features/svg-html.js","hash":"146efb1cd7038da94cfc8d7a862783db53ea2287","modified":1698375075559},{"_id":"source/react/node_modules/caniuse-lite/data/features/svg-html5.js","hash":"f3fb5292b5638d14a6e2c611e16fbcf3420b752a","modified":1698375075560},{"_id":"source/react/node_modules/caniuse-lite/data/features/svg-img.js","hash":"0cd3a4c49d924e2f6357dd79bd2efbebab84a1ce","modified":1698375075560},{"_id":"source/react/node_modules/caniuse-lite/data/features/sxg.js","hash":"61273c4e656c86f4a2331a5ed03f74e0ca07afcb","modified":1698375075561},{"_id":"source/react/node_modules/caniuse-lite/data/features/svg.js","hash":"58e0d585caf44f659d95cce4030b030081b40579","modified":1698375075560},{"_id":"source/react/node_modules/caniuse-lite/data/features/tabindex-attr.js","hash":"d0cf81c7f0cfb1ae569ee1f395b141e8042d3802","modified":1698375075562},{"_id":"source/react/node_modules/caniuse-lite/data/features/template.js","hash":"4825ff1dee85c21f3d668b60885999ebc64228b0","modified":1698375075564},{"_id":"source/react/node_modules/caniuse-lite/data/features/testfeat.js","hash":"d3b5f4704693f7f01bf30f6f7bfee1e9a96bfccb","modified":1698375075565},{"_id":"source/react/node_modules/caniuse-lite/data/features/text-emphasis.js","hash":"573e577c24ee34731ee884f872758a7e5b843428","modified":1698375075566},{"_id":"source/react/node_modules/caniuse-lite/data/features/temporal.js","hash":"10ad8f546db3fe26c074d507c0a49e3bb59f6dcf","modified":1698375075564},{"_id":"source/react/node_modules/caniuse-lite/data/features/text-decoration.js","hash":"66db9e2f0b30313285159a479a5e3ebbab724ddc","modified":1698375075565},{"_id":"source/react/node_modules/caniuse-lite/data/features/template-literals.js","hash":"f0d52e45d3a65076f553ba68f56dfd0346b6760f","modified":1698375075564},{"_id":"source/react/node_modules/caniuse-lite/data/features/text-overflow.js","hash":"3425563ebdfc5bdb608620315937156e4e947e35","modified":1698375075566},{"_id":"source/react/node_modules/caniuse-lite/data/features/text-size-adjust.js","hash":"407f52823dd108dfeeefca1f50a42a643bd99ac4","modified":1698375075567},{"_id":"source/react/node_modules/caniuse-lite/data/features/textcontent.js","hash":"02156ef9c44b6af99d585027dc0a736bca5db001","modified":1698375075568},{"_id":"source/react/node_modules/caniuse-lite/data/features/text-stroke.js","hash":"c865ead4fbf36093dd4cd97a8077f12ccabbab1e","modified":1698375075567},{"_id":"source/react/node_modules/caniuse-lite/data/features/textencoder.js","hash":"dbc73b5654892fb5d1dae0751047115a38fe233a","modified":1698375075568},{"_id":"source/react/node_modules/caniuse-lite/data/features/tls1-1.js","hash":"5715e4ca2a3b3485f7cea3bae748627b5183043d","modified":1698375075572},{"_id":"source/react/node_modules/caniuse-lite/data/features/tls1-2.js","hash":"77642084abac2fe07c6973447766574dfc004f82","modified":1698375075573},{"_id":"source/react/node_modules/caniuse-lite/data/features/tls1-3.js","hash":"d7145d27ddb4f8f7281b61f525449b5de4d8c999","modified":1698375075575},{"_id":"source/react/node_modules/caniuse-lite/data/features/touch.js","hash":"c503892a9aae384be7cb3f80a3118a700a7623e6","modified":1698375075579},{"_id":"source/react/node_modules/caniuse-lite/data/features/transforms3d.js","hash":"51b40eef3fba259e21dd89c8acaf554da5909e8d","modified":1698375075580},{"_id":"source/react/node_modules/caniuse-lite/data/features/trusted-types.js","hash":"a3b870637ebbfd44881fdb2c6430980a84cdc081","modified":1698375075581},{"_id":"source/react/node_modules/caniuse-lite/data/features/transforms2d.js","hash":"3cb21a935294f19f9389c6f7cd25d9abac863b30","modified":1698375075580},{"_id":"source/react/node_modules/caniuse-lite/data/features/ttf.js","hash":"644e4756929229fcb71eb34f062358f14ebe206b","modified":1698375075581},{"_id":"source/react/node_modules/caniuse-lite/data/features/typedarrays.js","hash":"ba0fbb94b0e046f5d774d42e526229758e9725e0","modified":1698375075582},{"_id":"source/react/node_modules/caniuse-lite/data/features/u2f.js","hash":"9cb186ef7a72ed0cc72aa75c35a678df29d3cd34","modified":1698375075583},{"_id":"source/react/node_modules/caniuse-lite/data/features/unhandledrejection.js","hash":"29d1da085ef28eb27fc451537f8986ab00da0eda","modified":1698375075584},{"_id":"source/react/node_modules/caniuse-lite/data/features/urlsearchparams.js","hash":"f7b4591bc2c667cf7da2145ae89c8c4871bce7e9","modified":1698375075585},{"_id":"source/react/node_modules/caniuse-lite/data/features/url-scroll-to-text-fragment.js","hash":"73f7c27a67e39c9278f25c5e1f84f3fc5bfc31da","modified":1698375075585},{"_id":"source/react/node_modules/caniuse-lite/data/features/upgradeinsecurerequests.js","hash":"51ba1d920d9e85831eb9852a0b4b58b5134635d5","modified":1698375075585},{"_id":"source/react/node_modules/caniuse-lite/data/features/url.js","hash":"62f85068e17639f6a5e8fe18d272827d1f9d3934","modified":1698375075585},{"_id":"source/react/node_modules/caniuse-lite/data/features/user-select-none.js","hash":"f6fdb78de2094f8a0f9bd8bdb2dfb4c30a0f4f5e","modified":1698375075587},{"_id":"source/react/node_modules/caniuse-lite/data/features/variable-fonts.js","hash":"eded9ae42e38c28d06e1ce751b9f6fa3247ed047","modified":1698375075589},{"_id":"source/react/node_modules/caniuse-lite/data/features/use-strict.js","hash":"3da726add72c916c8043cbba8d9ca826e737619a","modified":1698375075587},{"_id":"source/react/node_modules/caniuse-lite/data/features/user-timing.js","hash":"98031bf5e7d957785d265e79971bedc0feb9e930","modified":1698375075588},{"_id":"source/react/node_modules/caniuse-lite/data/features/vector-effect.js","hash":"305c444ae02e897ba9a5167398f28098c032a19d","modified":1698375075590},{"_id":"source/react/node_modules/caniuse-lite/data/features/vibration.js","hash":"db8d3af91a5740ae7ed79be06a19c1d9a347d69d","modified":1698375075592},{"_id":"source/react/node_modules/caniuse-lite/data/features/video.js","hash":"ae329d019beeb12d9417e244c89dc5a9c350928b","modified":1698375075592},{"_id":"source/react/node_modules/caniuse-lite/data/features/view-transitions.js","hash":"a9678ad469e836c230f3baf22fb4255c33c7945e","modified":1698375075593},{"_id":"source/react/node_modules/caniuse-lite/data/features/viewport-unit-variants.js","hash":"a29edcd7530e16d3acbbbfcf6202865c7ddd2b53","modified":1698375075595},{"_id":"source/react/node_modules/caniuse-lite/data/features/wai-aria.js","hash":"60913f1523cfdce5e70700c72a096d3c7dda0605","modified":1698375075598},{"_id":"source/react/node_modules/caniuse-lite/data/features/videotracks.js","hash":"309290c78c612c422f3d1bfb1e803b4e83c902f7","modified":1698375075593},{"_id":"source/react/node_modules/caniuse-lite/data/features/viewport-units.js","hash":"f5e87179e77438f003c3aa1d33e6fec159c0bd11","modified":1698375075596},{"_id":"source/react/node_modules/caniuse-lite/data/features/wake-lock.js","hash":"614b75a7f7b12556a6ef5b2ccd37f92167487f02","modified":1698375075599},{"_id":"source/react/node_modules/caniuse-lite/data/features/wasm.js","hash":"d05fdc5288a98d1238da68f2eae0224e5688f258","modified":1698375075600},{"_id":"source/react/node_modules/caniuse-lite/data/features/wbr-element.js","hash":"2468fcabaec2dd03a43c005f2b93b703f810a3bf","modified":1698375075600},{"_id":"source/react/node_modules/caniuse-lite/data/features/web-app-manifest.js","hash":"46d55a425e45d7e6fc9a9bd57c3875a6f6f82059","modified":1698375075601},{"_id":"source/react/node_modules/caniuse-lite/data/features/web-bluetooth.js","hash":"9a3f1431e3cee000f63a380ac7b5ea33d77c55b8","modified":1698375075601},{"_id":"source/react/node_modules/caniuse-lite/data/features/wav.js","hash":"dda59a06ab4be3989bb2b8070c8874c38aeb782f","modified":1698375075600},{"_id":"source/react/node_modules/caniuse-lite/data/features/web-animation.js","hash":"9bcfbbe01cbd5f5dd655328001feb8f4388967d3","modified":1698375075601},{"_id":"source/react/node_modules/caniuse-lite/data/features/web-share.js","hash":"bdbe6bb033188fd401a8fe3bae4aba77b47fa45b","modified":1698375075602},{"_id":"source/react/node_modules/caniuse-lite/data/features/webauthn.js","hash":"32ddf8588aaf2cb34a507f366b43728e20597c05","modified":1698375075602},{"_id":"source/react/node_modules/caniuse-lite/data/features/webcodecs.js","hash":"6da71b779b654e106110dfeb57e1483192084d67","modified":1698375075603},{"_id":"source/react/node_modules/caniuse-lite/data/features/web-serial.js","hash":"553ec005c0969511e46cb23c0f5bf802dcad0117","modified":1698375075602},{"_id":"source/react/node_modules/caniuse-lite/data/features/webgl2.js","hash":"eeee106c977a569b8b779fa92ba72fe9f91b4f61","modified":1698375075604},{"_id":"source/react/node_modules/caniuse-lite/data/features/webhid.js","hash":"6c610e27f3d605e1797adf3a854139dde40a5fb3","modified":1698375075605},{"_id":"source/react/node_modules/caniuse-lite/data/features/webgpu.js","hash":"1bf3cbb2fb9582d84de5f6e0a34ed6f4f126c2bd","modified":1698375075604},{"_id":"source/react/node_modules/caniuse-lite/data/features/webgl.js","hash":"6aaa39e56e9a94fd001a1b970e7a930fd20c7289","modified":1698375075603},{"_id":"source/react/node_modules/caniuse-lite/data/features/webkit-user-drag.js","hash":"5b92d0325f51135c493dc44fa2ff04b7670c7908","modified":1698375075607},{"_id":"source/react/node_modules/caniuse-lite/data/features/webnfc.js","hash":"1772954e0de65ec01874151105c7841104db4860","modified":1698375075609},{"_id":"source/react/node_modules/caniuse-lite/data/features/websockets.js","hash":"874d6fbd9eaaa78b0771c689c80e79505cb45ce1","modified":1698375075610},{"_id":"source/react/node_modules/caniuse-lite/data/features/webtransport.js","hash":"99eb5bcff11d63dcf6a158ea32f4c6f8cf7508bf","modified":1698375075611},{"_id":"source/react/node_modules/caniuse-lite/data/features/webm.js","hash":"f96309ebf0bdfe2112c16ebc935bfff23ab53a61","modified":1698375075607},{"_id":"source/react/node_modules/caniuse-lite/data/features/webp.js","hash":"da1d9868f511c10c00560aa5b4a25f61e8bbbda1","modified":1698375075609},{"_id":"source/react/node_modules/caniuse-lite/data/features/webvr.js","hash":"13e3e65776c1efb5981c0b35c95147ab9c96e34a","modified":1698375075612},{"_id":"source/react/node_modules/caniuse-lite/data/features/webusb.js","hash":"bda9b6e7eded1076257015754d25d7ec15f8eac3","modified":1698375075612},{"_id":"source/react/node_modules/caniuse-lite/data/features/webworkers.js","hash":"3426d4a71f3e61f0014e48192e6328414113d6c3","modified":1698375075613},{"_id":"source/react/node_modules/caniuse-lite/data/features/webvtt.js","hash":"99ddfcfae7c6ce0549e4a5c2e30bddc9e4056bae","modified":1698375075612},{"_id":"source/react/node_modules/caniuse-lite/data/features/webxr.js","hash":"767bc2fca98f4afcf84184c2db694036e389e339","modified":1698375075613},{"_id":"source/react/node_modules/caniuse-lite/data/features/woff2.js","hash":"af8b812c5f3110a4c5bc5e7dc7f4eb219cc91318","modified":1698375075614},{"_id":"source/react/node_modules/caniuse-lite/data/features/woff.js","hash":"0348bef02c5a7efef79ae2a9f197bb9636277d7b","modified":1698375075614},{"_id":"source/react/node_modules/caniuse-lite/data/features/will-change.js","hash":"f81e2b3b98e64c60557c1ce4acf068acd4f6f4b3","modified":1698375075614},{"_id":"source/react/node_modules/caniuse-lite/data/features/x-doc-messaging.js","hash":"051e58b55bf45f213b7c6b9a2b9d16bcaa510f6d","modified":1698375075616},{"_id":"source/react/node_modules/caniuse-lite/data/features/xhr2.js","hash":"05b811cf7c08fc0eaf957d2250afb03363927a84","modified":1698375075617},{"_id":"source/react/node_modules/caniuse-lite/data/features/word-break.js","hash":"c8734c344ce3001274f962cea3251d036dadec5e","modified":1698375075614},{"_id":"source/react/node_modules/caniuse-lite/data/features/wordwrap.js","hash":"831c4a2b1e5aedfea968ba693d0d33b2d96632d8","modified":1698375075615},{"_id":"source/react/node_modules/caniuse-lite/data/features/xhtml.js","hash":"6556d8d49d782645a011a3a889746c9b281c6cf2","modified":1698375075622},{"_id":"source/react/node_modules/caniuse-lite/data/features/x-frame-options.js","hash":"5510b84e0f3e36c1ba525624f2d69cb42a84f496","modified":1698375075617},{"_id":"source/react/node_modules/caniuse-lite/data/features/xml-serializer.js","hash":"c8b7d32bab46ab8cf407b1d59999f41a284d9839","modified":1698375075625},{"_id":"source/react/node_modules/caniuse-lite/data/features/xhtmlsmil.js","hash":"20886b7351f8ab3e12e9a521b6764ba022960230","modified":1698375075625},{"_id":"source/react/node_modules/caniuse-lite/data/features/zstd.js","hash":"686b9143c744665edb1d7f6e1459e040f1b50461","modified":1698375075627},{"_id":"source/react/node_modules/caniuse-lite/dist/lib/statuses.js","hash":"15fc3cf17b7ed5690a896da5c3e93b3900947fce","modified":1698375075549},{"_id":"source/react/node_modules/caniuse-lite/dist/lib/supported.js","hash":"b31cbe3a935f545c3e954702016e4c4ea699b43a","modified":1698375075553},{"_id":"source/react/node_modules/node-releases/data/release-schedule/release-schedule.json","hash":"127862150c4832c9021077d05b163a724f5eacd5","modified":1698375074481},{"_id":"source/react/node_modules/rollup/dist/es/getLogFilter.js","hash":"90a49971fca7ef9c5bf6571e66e5840874f34521","modified":1698375074780},{"_id":"source/react/node_modules/rollup/dist/shared/fsevents-importer.js","hash":"e40c3eb8778c3d7dcc7dd1e63b3d73f87b10d431","modified":1698375074763},{"_id":"source/react/node_modules/rollup/dist/es/rollup.js","hash":"b3026d442eb7b7db2e8b89acbc3003b2dc1a5b00","modified":1698375075726},{"_id":"source/react/node_modules/node-releases/data/processed/envs.json","hash":"a11da2b688157278517cd5d9ba9cd4de21fc3bd6","modified":1698375074307},{"_id":"source/react/node_modules/rollup/dist/es/package.json","hash":"ee2833a41c28830d75b2f3327075286c915ed0dd","modified":1698375076553},{"_id":"source/react/node_modules/rollup/dist/shared/loadConfigFile.js","hash":"3c60470e4c5c54f1fab09ae513c1c61b4657fbbb","modified":1698375074918},{"_id":"source/react/node_modules/rollup/dist/shared/watch-cli.js","hash":"6ad7ff6bb1d81ea2247bb6f628fdafb92e42974e","modified":1698375076447},{"_id":"source/react/node_modules/vite/dist/node/constants.js","hash":"322197edfb882599474fb10934bf1cc8065b7881","modified":1698375075017},{"_id":"source/react/node_modules/rollup/dist/shared/watch-proxy.js","hash":"c8718e5ad415b30c367df7c8ef4ee83fd6a896a2","modified":1698375076448},{"_id":"source/react/node_modules/rollup/dist/shared/watch.js","hash":"5259ca0d04ed9159074b7cab99cf0a4ee1950e81","modified":1698375076552},{"_id":"source/react/node_modules/vite/dist/node/index.js","hash":"d3ced93ebc3dde8d70e1cd34c65bccda02d58a1d","modified":1698375076831},{"_id":"source/react/node_modules/vite/dist/node/cli.js","hash":"ed6f8fe1a0a267b24f8b924e457e2af587cdc682","modified":1698375075014},{"_id":"source/react/node_modules/vite/dist/client/env.mjs","hash":"0aa47f0dc609efcbb405e28912283c7f3b48801d","modified":1698375076881},{"_id":"source/react/node_modules/vite/dist/client/env.mjs.map","hash":"4155f652959accd0a59aa010b66be1f3cde01518","modified":1698375076858},{"_id":"source/react/node_modules/vite/dist/client/client.mjs","hash":"bc9c088b3730ad47f22b01036b06e3de35e76a7e","modified":1698375076880},{"_id":"source/react/node_modules/vite/dist/client/client.mjs.map","hash":"803683d0568e01f04db6fe3a7dfd65f6aa702779","modified":1698375076857},{"_id":"source/react/node_modules/@ampproject/remapping/dist/types/source-map-tree.d.ts","hash":"3a453129194bc9bedaba7cb6f766e283ef09c6a4","modified":1698375074655},{"_id":"source/react/node_modules/@ampproject/remapping/dist/types/remapping.d.ts","hash":"a84644bb671957e99f5c520711161acee1915e69","modified":1698375074639},{"_id":"source/react/node_modules/@ampproject/remapping/dist/types/build-source-map-tree.d.ts","hash":"9c55434c24f8a0e92306e276020d70831ced8887","modified":1698375074629},{"_id":"source/react/node_modules/@ampproject/remapping/dist/types/source-map.d.ts","hash":"e6091d3682580208d891b716cd4d1a7cad4d1bca","modified":1698375074668},{"_id":"source/react/node_modules/@ampproject/remapping/dist/types/types.d.ts","hash":"3fc61dd2bb875e2d7b272268f75ea9de2076b2b6","modified":1698375074679},{"_id":"source/react/node_modules/@babel/generator/lib/generators/base.js","hash":"14eaf59940972408d2ab9e28a97128b6b59fdc71","modified":1698375074470},{"_id":"source/react/node_modules/@babel/generator/lib/generators/base.js.map","hash":"1f94eb5842b6c10f8a3c8fecdda1db4bdd05f4f2","modified":1698375074478},{"_id":"source/react/node_modules/@babel/generator/lib/generators/expressions.js.map","hash":"74bdbcd22d627affb13bed6ac07ae1a82d91b17a","modified":1698375074611},{"_id":"source/react/node_modules/@babel/generator/lib/generators/classes.js.map","hash":"4733018e1052963b27eef215922bbdce9c9ce0fd","modified":1698375074527},{"_id":"source/react/node_modules/@babel/generator/lib/generators/expressions.js","hash":"9f14b82e5af78983de3de897d56bae4b994c0b70","modified":1698375074580},{"_id":"source/react/node_modules/@babel/generator/lib/generators/classes.js","hash":"b2d542a412a00c7c8c9a2ed3490d716613376900","modified":1698375074485},{"_id":"source/react/node_modules/@babel/generator/lib/generators/index.js","hash":"19e79ce1eedfd872c35b815d444f6288c4050140","modified":1698375074685},{"_id":"source/react/node_modules/@babel/generator/lib/generators/jsx.js","hash":"85bf426cf47cadb0aebb50eb9f23b2c7e1b24d7c","modified":1698375074722},{"_id":"source/react/node_modules/@babel/generator/lib/generators/index.js.map","hash":"3fc5d73ce0865cba3ac2e71961193de850ac6b5e","modified":1698375074697},{"_id":"source/react/node_modules/@babel/generator/lib/generators/methods.js","hash":"059554f5f1cd30433ba5bfae5a615fbc7e74438c","modified":1698375074736},{"_id":"source/react/node_modules/@babel/generator/lib/generators/jsx.js.map","hash":"de6030d1baac9939f4ae9aa95a02e56b8b1a3353","modified":1698375074725},{"_id":"source/react/node_modules/@babel/generator/lib/generators/flow.js","hash":"e4e1286ab1424d86a9c5700f3d838a0d37abe3c1","modified":1698375074654},{"_id":"source/react/node_modules/@babel/generator/lib/generators/flow.js.map","hash":"8af5766b23fae3f7bdb7ea689e30734e6b4451fd","modified":1698375074678},{"_id":"source/react/node_modules/@babel/generator/lib/generators/modules.js","hash":"94d250d0f6c252e237012a3b54c875767f3cae36","modified":1698375074764},{"_id":"source/react/node_modules/@babel/generator/lib/generators/methods.js.map","hash":"51e7024ff2657e0e46bd2060da843600d94077cf","modified":1698375074753},{"_id":"source/react/node_modules/@babel/generator/lib/generators/modules.js.map","hash":"c4e7c7e9a3c90ee9457caa662c87763cf6f413e2","modified":1698375074777},{"_id":"source/react/node_modules/@babel/generator/lib/generators/statements.js","hash":"8dd8c307a8dfbf1df109909309a38be5134b6bee","modified":1698375074791},{"_id":"source/react/node_modules/@babel/generator/lib/generators/template-literals.js","hash":"9efc39c0fe485ac0a93f4f7de0fd28f299557d27","modified":1698375074826},{"_id":"source/react/node_modules/@babel/generator/lib/generators/template-literals.js.map","hash":"d83c1bd7a44579fe0ef787e70cd5e4c3232c3dc0","modified":1698375074826},{"_id":"source/react/node_modules/@babel/generator/lib/generators/types.js","hash":"9612fe70b6aa71bd42dcf0f3e698cc70198afda9","modified":1698375074832},{"_id":"source/react/node_modules/@babel/generator/lib/generators/statements.js.map","hash":"46dc8edc4b8d8d67104dd3fe47236120e1378c38","modified":1698375074809},{"_id":"source/react/node_modules/@babel/generator/lib/node/index.js","hash":"003dec693ae0197f072f9460f1b171ae8d5a9658","modified":1698375074879},{"_id":"source/react/node_modules/@babel/generator/lib/node/index.js.map","hash":"e840683ca0a70a02e49631f495673b82b2d50606","modified":1698375074883},{"_id":"source/react/node_modules/@babel/generator/lib/generators/typescript.js","hash":"f0d73e2b2388bdab959a2ef95373151558afd475","modified":1698375074851},{"_id":"source/react/node_modules/@babel/generator/lib/generators/types.js.map","hash":"a3d9ab4c0592e273accf03a8bbfe64fb0f075b29","modified":1698375074844},{"_id":"source/react/node_modules/@babel/generator/lib/node/whitespace.js","hash":"671c8184c248172d52dca06dd0d4f16f668f2bbc","modified":1698375074902},{"_id":"source/react/node_modules/@babel/generator/lib/generators/typescript.js.map","hash":"bc66581a1d45793eedef90942654796015f1b323","modified":1698375074865},{"_id":"source/react/node_modules/@babel/core/lib/config/cache-contexts.js","hash":"0c06ce20fc5497de5c6ace01d59497d72b09704c","modified":1698375074442},{"_id":"source/react/node_modules/@babel/generator/lib/node/parentheses.js","hash":"bd566251d3e48d239b8380be686efc644367a581","modified":1698375074893},{"_id":"source/react/node_modules/@babel/generator/lib/node/parentheses.js.map","hash":"f0750f8c2e86a88e2120a52b9bb64a33b117e75e","modified":1698375074900},{"_id":"source/react/node_modules/@babel/core/lib/config/cache-contexts.js.map","hash":"713a42ae12d33206e7e68f8627b8fd68018d1157","modified":1698375074455},{"_id":"source/react/node_modules/@babel/core/lib/config/caching.js","hash":"02b960e66372c50a77eb86e9e0188a788528e2c4","modified":1698375074465},{"_id":"source/react/node_modules/@babel/generator/lib/node/whitespace.js.map","hash":"184e0912f8dfb249bc5cc8b0e1cfbb84fda39ec1","modified":1698375074907},{"_id":"source/react/node_modules/@babel/core/lib/config/caching.js.map","hash":"3fbeec18766e9b1d37b44560ae429e02206cfc14","modified":1698375074478},{"_id":"source/react/node_modules/@babel/core/lib/config/config-chain.js","hash":"c2d2078b935c5176919cdf3864ec032fe7d09e23","modified":1698375074527},{"_id":"source/react/node_modules/@babel/core/lib/config/full.js.map","hash":"eda5e04d3a26022434c69ef9a4fd6e2c5acfd4cb","modified":1698375074865},{"_id":"source/react/node_modules/@babel/core/lib/config/config-descriptors.js","hash":"47d87a03f4155497e3d341fbaf2d1f66fac7446f","modified":1698375074648},{"_id":"source/react/node_modules/@babel/core/lib/config/index.js","hash":"9e3a9854e12d57aac46d0a094567ad7f5fc5d74f","modified":1698375074900},{"_id":"source/react/node_modules/@babel/core/lib/config/config-descriptors.js.map","hash":"5d39706094ce2850839c33ab214a9ea6970c713d","modified":1698375074668},{"_id":"source/react/node_modules/@babel/core/lib/config/config-chain.js.map","hash":"b7d404e4799980bea6ed01dc8c46afc52344cace","modified":1698375074628},{"_id":"source/react/node_modules/@babel/core/lib/config/index.js.map","hash":"6f62e69db95ca47b61e223d2cc6f0a7a99b55a1f","modified":1698375074901},{"_id":"source/react/node_modules/@babel/core/lib/config/item.js","hash":"d83edd3bad131402f8d1603dd3c75cef21faf334","modified":1698375074902},{"_id":"source/react/node_modules/@babel/core/lib/config/full.js","hash":"ef5466a2170160b37cab89f57363ad90d1e5e767","modified":1698375074850},{"_id":"source/react/node_modules/@babel/core/lib/config/item.js.map","hash":"0e3fc5581b0540cba400599d604f1c036624b0fc","modified":1698375074905},{"_id":"source/react/node_modules/@babel/core/lib/config/partial.js","hash":"515abbdb56878222c29f6d76f6e59645a461d8c2","modified":1698375074908},{"_id":"source/react/node_modules/@babel/core/lib/config/pattern-to-regex.js","hash":"af9ef046c54122be2ccc9e1e96d556c989dfb543","modified":1698375074917},{"_id":"source/react/node_modules/@babel/core/lib/config/pattern-to-regex.js.map","hash":"4d78a1ea3cec2ffdace19dc1dfe28f27e2bfc5cc","modified":1698375074920},{"_id":"source/react/node_modules/@babel/core/lib/config/partial.js.map","hash":"28fcade3aa0d174a31db95bb165970527a2fdfef","modified":1698375074913},{"_id":"source/react/node_modules/@babel/core/lib/config/plugin.js","hash":"f629a55218fabd8d205fa8b1764f16dbd8197ade","modified":1698375074924},{"_id":"source/react/node_modules/@babel/core/lib/config/plugin.js.map","hash":"abeda18945ec10bb73915f13a8a09975437853a6","modified":1698375074925},{"_id":"source/react/node_modules/@babel/core/lib/config/printer.js","hash":"e9895f20f1b8e8769159aac2cb1c36fe2427941d","modified":1698375074926},{"_id":"source/react/node_modules/@babel/core/lib/config/resolve-targets-browser.js","hash":"5e6075336fabd5c1e5fd5efce1ad17585ad9c0fb","modified":1698375074931},{"_id":"source/react/node_modules/@babel/core/lib/config/printer.js.map","hash":"9a3a6f89b766d63b24846d859f37ddc9ab753f2f","modified":1698375074928},{"_id":"source/react/node_modules/@babel/core/lib/config/resolve-targets-browser.js.map","hash":"c8ac3b389ed7b06af8a91e4e52bb1080a71f90a4","modified":1698375074931},{"_id":"source/react/node_modules/@babel/core/lib/config/resolve-targets.js","hash":"f5238ed085ddd497d639faa1b2d4f3b4dd9b85b2","modified":1698375074933},{"_id":"source/react/node_modules/@babel/core/lib/config/util.js","hash":"9e12b4352a76f6c337c3d0ad218f2df91d3dcd16","modified":1698375074936},{"_id":"source/react/node_modules/@babel/core/lib/config/resolve-targets.js.map","hash":"32858f93b221fe2ab1bd1a2ba84f3f9664758226","modified":1698375074934},{"_id":"source/react/node_modules/@babel/core/lib/config/util.js.map","hash":"2ae298ad72936fc73b46b050c5d90eec17102220","modified":1698375074936},{"_id":"source/react/node_modules/@babel/core/lib/gensync-utils/async.js.map","hash":"c52b56838178c8a7ce29140562a036776b886a45","modified":1698375074997},{"_id":"source/react/node_modules/@babel/core/lib/gensync-utils/async.js","hash":"d99498c68b5131b8f953a985ea659b621607128e","modified":1698375074996},{"_id":"source/react/node_modules/@babel/core/lib/gensync-utils/fs.js","hash":"64b8ae6335ea7955f78abcde764287888a6d0163","modified":1698375074998},{"_id":"source/react/node_modules/@babel/core/lib/gensync-utils/functional.js","hash":"771183254ea12f82a01c072c87ef8a3810702d34","modified":1698375075000},{"_id":"source/react/node_modules/@babel/core/lib/gensync-utils/fs.js.map","hash":"e4bbf4be19339c672b3f3e3c1b7d20e7f9a59521","modified":1698375074999},{"_id":"source/react/node_modules/@babel/core/lib/gensync-utils/functional.js.map","hash":"74b85d251a339b3f61299857e74cc55ea40a9529","modified":1698375075001},{"_id":"source/react/node_modules/@babel/core/lib/errors/config-error.js","hash":"5f6e69a3f9ef0f2487b7f7956e1d8be8bd1b69f1","modified":1698375074985},{"_id":"source/react/node_modules/@babel/core/lib/errors/config-error.js.map","hash":"800e94b902ef9208470c298071b84236f071f63e","modified":1698375074987},{"_id":"source/react/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js","hash":"13a436127400f915b58359176eec9a5f1462fcc5","modified":1698375074989},{"_id":"source/react/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js.map","hash":"35b4999649965d505e4b3474c5fc00eade7d6c79","modified":1698375074990},{"_id":"source/react/node_modules/@babel/core/lib/parser/index.js","hash":"798b2b609b9f8576967dc8ae8f51e7324d88671d","modified":1698375075015},{"_id":"source/react/node_modules/@babel/core/lib/parser/index.js.map","hash":"e05dc45860ddf684d03891e4ef430172c9f3770f","modified":1698375075016},{"_id":"source/react/node_modules/@babel/core/lib/tools/build-external-helpers.js","hash":"cd564cbc20affad3d2f4ce4b8b1524db9c475d38","modified":1698375075029},{"_id":"source/react/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js","hash":"604bca21f8bb5ce5394e10e0c01013c83484dd37","modified":1698375075041},{"_id":"source/react/node_modules/@babel/core/lib/tools/build-external-helpers.js.map","hash":"9295b124fb6cbf6c5fa20044aa00a3402dca5fed","modified":1698375075029},{"_id":"source/react/node_modules/@babel/core/lib/transformation/index.js","hash":"fe168343875bf93e58e20bccca6a4a23c54756e0","modified":1698375075046},{"_id":"source/react/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js.map","hash":"082e4b1cb2da2f3f51952cd5794aa63f4f5f2f98","modified":1698375075042},{"_id":"source/react/node_modules/@babel/core/lib/transformation/normalize-file.js","hash":"f66d56cc1d98ea825a9e75acd284f45387a6f96f","modified":1698375075048},{"_id":"source/react/node_modules/@babel/core/lib/transformation/normalize-opts.js","hash":"ddebbf6be0ac6053d3b7c54d71be4962ace59e09","modified":1698375075049},{"_id":"source/react/node_modules/@babel/core/lib/transformation/plugin-pass.js","hash":"6be930158ed0b2d942a5a59034d1ed2713a0870d","modified":1698375075065},{"_id":"source/react/node_modules/@babel/core/lib/transformation/normalize-opts.js.map","hash":"4666dadb088084d9e22515698467e22535a05bd4","modified":1698375075064},{"_id":"source/react/node_modules/@babel/core/lib/transformation/plugin-pass.js.map","hash":"0d3f548da262a3ee7fc9114dc681311af86137cc","modified":1698375075066},{"_id":"source/react/node_modules/@babel/core/src/config/resolve-targets-browser.ts","hash":"6e082873dfac69a31a1f8587a48e03cadae758ff","modified":1698375075086},{"_id":"source/react/node_modules/@babel/core/lib/transformation/normalize-file.js.map","hash":"f4f21d0fe75e53189f55d0a5b385368b8f006789","modified":1698375075049},{"_id":"source/react/node_modules/@babel/core/src/config/resolve-targets.ts","hash":"2afedce9e46b0d856a0b05ba6563be7b4849fad7","modified":1698375075087},{"_id":"source/react/node_modules/@babel/core/lib/transformation/index.js.map","hash":"596d07bc80caad2d4676aff852630f18bfe4e637","modified":1698375075048},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/AsyncGenerator.js","hash":"027ed0664dc5452820f9af1663b29d732c040945","modified":1698375074667},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/OverloadYield.js","hash":"b00f70713049a671f4c749552bdbed4007471f7a","modified":1698375074696},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/AsyncGenerator.js.map","hash":"c58e4816a9962831e8e9fea814282aa1d0f96dc3","modified":1698375074684},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/applyDecs.js","hash":"70b86e153595fc308303f651cae07d83e8fafca5","modified":1698375074725},{"_id":"source/react/node_modules/@babel/core/lib/vendor/import-meta-resolve.js","hash":"063e87520a30991c3f26d83a1e71fed4d7b434ca","modified":1698375075072},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/OverloadYield.js.map","hash":"c8a1e34591f4f9f37195674b14bce3a3f12388cb","modified":1698375074702},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/applyDecs2301.js","hash":"d6c41c0f7b72c38dae24c7d21e51f50b2501daef","modified":1698375074828},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/applyDecs.js.map","hash":"5e497c8c0330ba0b0ebc22e395efbb7a172c8a0a","modified":1698375074744},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/applyDecs2305.js","hash":"e3b49e0622ebe54b3a76734f0dea47eba5866ad8","modified":1698375074847},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/applyDecs2203.js","hash":"dc9a23bb014f333ad97772ba4da06e3d5ecf6d10","modified":1698375074760},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/applyDecs2203R.js.map","hash":"a8829f63fdc81e2273325e0bd1e1da4220b3098f","modified":1698375074812},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/applyDecs2301.js.map","hash":"e256e626d13220bdc364b375d1a6b6b9f09114f7","modified":1698375074843},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/asyncIterator.js","hash":"9e1772fc64e3e88a921e37993abf9fdb85e45b19","modified":1698375074869},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/asyncGeneratorDelegate.js.map","hash":"3f7069de3866af269cdd671f689fc82090dd935b","modified":1698375074865},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/asyncIterator.js.map","hash":"07bc980bdfb85bbbb915b64ce0c131c376f93f88","modified":1698375074872},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/asyncGeneratorDelegate.js","hash":"bd35d8c639285d73e078f4bb1f97ecd3b7d7cd12","modified":1698375074862},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/applyDecs2203.js.map","hash":"26515ef4eebd463d3add1d10ef140dc81732d8c5","modified":1698375074771},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/applyDecs2305.js.map","hash":"6cab7ddc5a7f253f58c184326c46f689b15e4113","modified":1698375074857},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/applyDecs2203R.js","hash":"c22c478393b610a12b2633b27413633c624fbde0","modified":1698375074786},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/awaitAsyncGenerator.js","hash":"c598a23357d91bc9f744df9faf6483b2854a0eea","modified":1698375074874},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/awaitAsyncGenerator.js.map","hash":"a621bb60ea6bfbf9adc8b8b8b18c6d5b6a2f13ab","modified":1698375074878},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/checkInRHS.js","hash":"3b05fb0eda76f61e74574863de875cd6eaa9bb2c","modified":1698375074880},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/defineAccessor.js","hash":"67a560f5bdbd5e422a4bd82c27b348e69b588458","modified":1698375074885},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/checkInRHS.js.map","hash":"2444d849126c03f4d9de94436aeb8c503a9e9f65","modified":1698375074882},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/dispose.js","hash":"84ca5f9e4ce9146b895a45594844e63a3ae72781","modified":1698375074895},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/defineAccessor.js.map","hash":"c1ccd1f3a6e582788492fe024a67a4110c83712d","modified":1698375074893},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/dispose.js.map","hash":"f3f0512e18e2d2995e20e44354504aef2bc7abe1","modified":1698375074898},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/importDeferProxy.js","hash":"17eea90bc90a700b09e56616879872866bb290e9","modified":1698375074900},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/interopRequireWildcard.js","hash":"266a214f1d8e459458a17acf0d5eb3c1605a6950","modified":1698375074902},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/importDeferProxy.js.map","hash":"8ed52c2bbaa4e52daee44e9fc63d3a37582c1f0c","modified":1698375074901},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/interopRequireWildcard.js.map","hash":"ef4e2382a525fd6793e699aa835816fd35cc86d4","modified":1698375074908},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/iterableToArrayLimit.js.map","hash":"07517120388e21d952eb89029c626dccdea93f04","modified":1698375074915},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/iterableToArrayLimit.js","hash":"a6373130173a811265076c90e7759437428fe282","modified":1698375074914},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/iterableToArrayLimitLoose.js","hash":"34b195aedc04cc50f26e388734dbafb9d9352722","modified":1698375074918},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/iterableToArrayLimitLoose.js.map","hash":"4629c4605b1b3cff879bd11fba0c9e3e5684671b","modified":1698375074919},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/jsx.js.map","hash":"fad3bd66875eb801b9c6ed52e3e2b966d370831e","modified":1698375074923},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/jsx.js","hash":"46e1f0bbfde0f14bdf92b95bbf06fb03bbe21f72","modified":1698375074921},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/objectSpread2.js","hash":"fe8a1c9685a9615aec71adc4e0f6df1bbe5a305e","modified":1698375074925},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/objectSpread2.js.map","hash":"6be41359269f77c721c21980c4729f870eab073c","modified":1698375074928},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/typeof.js","hash":"a3346c3dbbdc865db28b4b59de1ba107eb6dcfe9","modified":1698375074936},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/regeneratorRuntime.js","hash":"99ef669a43c64e85054aeb3ae9c1c8db07283d1c","modified":1698375074929},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/using.js","hash":"555e6652e756d33e9b9ff7bcf0431ba1c86baa5a","modified":1698375074938},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/typeof.js.map","hash":"edbd104d918eef7797d3c0c99fbb00b2ee7246b3","modified":1698375074936},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/wrapRegExp.js.map","hash":"e60886cdc9f6a06b170e8c325befb7a48914530b","modified":1698375074947},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/regeneratorRuntime.js.map","hash":"f2142abba951f1c5b228ff84f2312a7e2bfa2d0b","modified":1698375074934},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/wrapRegExp.js","hash":"9f52508563ad421c50c483e61f75ad48d22abd0b","modified":1698375074943},{"_id":"source/react/node_modules/@babel/types/lib/asserts/assertNode.js","hash":"f1638bb583fe74ab8bb9a1bc6f454b491a348274","modified":1698375074388},{"_id":"source/react/node_modules/@babel/types/lib/asserts/assertNode.js.map","hash":"cf0b8fa62886192904004c96f0b9eda98a768939","modified":1698375074438},{"_id":"source/react/node_modules/@babel/types/lib/builders/productions.js","hash":"5bf863371b472963ae72c1e64ac1b8630367ac2b","modified":1698375074918},{"_id":"source/react/node_modules/@babel/types/lib/builders/productions.js.map","hash":"abf0baf2d9be0825183ff78fe9d68db283e3955e","modified":1698375074919},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers/using.js.map","hash":"f58aaf7ab7c33203849164e2456e9a4e3f00fa17","modified":1698375074941},{"_id":"source/react/node_modules/@babel/types/lib/builders/validateNode.js.map","hash":"ce4af677984b2f695244e3238460c65232deb1df","modified":1698375074936},{"_id":"source/react/node_modules/@babel/types/lib/builders/validateNode.js","hash":"9f3d5f96da42cbf270e2324816aa2715fa7b8859","modified":1698375074935},{"_id":"source/react/node_modules/@babel/types/lib/comments/addComment.js","hash":"16f2d359874230847f36cb97742de44472f84594","modified":1698375074981},{"_id":"source/react/node_modules/@babel/types/lib/comments/addComment.js.map","hash":"34249402a6a410db16798a1b319ee9b90788dde2","modified":1698375074982},{"_id":"source/react/node_modules/@babel/types/lib/comments/addComments.js","hash":"c62e5ffd8cb9350cf9bc0589ca476d009ac85f9a","modified":1698375074985},{"_id":"source/react/node_modules/@babel/types/lib/comments/addComments.js.map","hash":"2a6bac6a6aba49bce1c25665c1fc2065d71b517d","modified":1698375074987},{"_id":"source/react/node_modules/@babel/types/lib/comments/inheritInnerComments.js","hash":"d040738ed2802ba9d61a8394fe6c9ee65d734a76","modified":1698375074987},{"_id":"source/react/node_modules/@babel/types/lib/comments/inheritLeadingComments.js.map","hash":"1ae3bb4576625e44bbd200e46c83fdfe06195e5f","modified":1698375074991},{"_id":"source/react/node_modules/@babel/types/lib/comments/inheritLeadingComments.js","hash":"f87077b689c318c639537f4c42698ed278e4f829","modified":1698375074990},{"_id":"source/react/node_modules/@babel/types/lib/comments/inheritInnerComments.js.map","hash":"1b09d824339fc769c4c1fad03854c984dbbb2066","modified":1698375074989},{"_id":"source/react/node_modules/@babel/types/lib/comments/inheritTrailingComments.js.map","hash":"97ac377798bdfc53e581631e3489f90d22939a4e","modified":1698375074994},{"_id":"source/react/node_modules/@babel/types/lib/comments/inheritTrailingComments.js","hash":"5bd6c9b811fbe4893a2fbef744b7374e2c1e84c7","modified":1698375074993},{"_id":"source/react/node_modules/@babel/types/lib/comments/inheritsComments.js","hash":"42f6cbab43c95c7d831a62a991f7ae449cd9b5d8","modified":1698375074994},{"_id":"source/react/node_modules/@babel/types/lib/comments/removeComments.js.map","hash":"122cd1d2f6aae5f60fb383cc2380d4532f6e9743","modified":1698375074996},{"_id":"source/react/node_modules/@babel/types/lib/converters/ensureBlock.js","hash":"9546e15b033129e9d14e953a1e431f1f9bf88824","modified":1698375075018},{"_id":"source/react/node_modules/@babel/types/lib/comments/inheritsComments.js.map","hash":"670b225effec0eddb592af1cd9d55409bfe9b8d3","modified":1698375074995},{"_id":"source/react/node_modules/@babel/types/lib/comments/removeComments.js","hash":"a6564e4d0b4893afb3d965c187c6ee3c9990ee77","modified":1698375074996},{"_id":"source/react/node_modules/@babel/types/lib/converters/ensureBlock.js.map","hash":"6d425d1c8e8f6f818f7c0a651045fda3437fde5f","modified":1698375075021},{"_id":"source/react/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js","hash":"26959a098e207bbb2842e79e7bccdbabe8323408","modified":1698375075026},{"_id":"source/react/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js.map","hash":"4c64c6e4fb51d38766f06b4b313dd7e5ed518fed","modified":1698375075022},{"_id":"source/react/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","hash":"1d95066a6e9376331f9f26e47b00d13c93a7b6b5","modified":1698375075021},{"_id":"source/react/node_modules/@babel/types/lib/converters/toComputedKey.js","hash":"9eecc51376934654679e0386cd244a8dda5f0baf","modified":1698375075029},{"_id":"source/react/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js.map","hash":"b7c5d0f88437076b81ff9fe40652655d80f3f30f","modified":1698375075026},{"_id":"source/react/node_modules/@babel/types/lib/converters/toBlock.js","hash":"e42f617eb9a3d06d9e088fa1e41225b663c2bff9","modified":1698375075028},{"_id":"source/react/node_modules/@babel/types/lib/converters/toBlock.js.map","hash":"870149cdd70187e6fc0502f955dbeb6e9e9a7729","modified":1698375075028},{"_id":"source/react/node_modules/@babel/types/lib/converters/toComputedKey.js.map","hash":"ef5ad46a2f426d55c2d23689f9ce628ea6d97bf6","modified":1698375075029},{"_id":"source/react/node_modules/@babel/types/lib/converters/toExpression.js.map","hash":"e406ea7e56d856e148bf97e255f513da65f308ad","modified":1698375075030},{"_id":"source/react/node_modules/@babel/types/lib/converters/toExpression.js","hash":"ce568a01d2fbd8aa78afe82186404b7c63780068","modified":1698375075030},{"_id":"source/react/node_modules/@babel/types/lib/converters/toKeyAlias.js.map","hash":"03a0e5379f5b16a239302fb9ecfd8e178f738e51","modified":1698375075034},{"_id":"source/react/node_modules/@babel/types/lib/converters/toIdentifier.js.map","hash":"41b9ced4b76935409c2d44fc17547aa822958c62","modified":1698375075032},{"_id":"source/react/node_modules/@babel/types/lib/converters/toIdentifier.js","hash":"bb776190e90daa84973bc9941adcdd8193bd1e5e","modified":1698375075032},{"_id":"source/react/node_modules/@babel/types/lib/converters/toSequenceExpression.js","hash":"51577c4d6e717aa7bf737906b04bba32e2a431e8","modified":1698375075034},{"_id":"source/react/node_modules/@babel/types/lib/converters/toKeyAlias.js","hash":"5fbdc0ac8dc95b5eabec0be50d71e6c0865ce35c","modified":1698375075033},{"_id":"source/react/node_modules/@babel/types/lib/converters/toStatement.js","hash":"56abcd262444bd00632c7496b80219d1fac0237e","modified":1698375075036},{"_id":"source/react/node_modules/@babel/types/lib/converters/toSequenceExpression.js.map","hash":"446554b51a906b2a83553b07ef1b0a1beac48ed6","modified":1698375075035},{"_id":"source/react/node_modules/@babel/types/lib/converters/toStatement.js.map","hash":"d65dcf1b145360b43fd416eb40d2588c0f154192","modified":1698375075038},{"_id":"source/react/node_modules/@babel/types/lib/converters/valueToNode.js.map","hash":"59b394529663c72e0eca4c857c43e89f2ba08c2d","modified":1698375075039},{"_id":"source/react/node_modules/@babel/types/lib/clone/cloneDeep.js","hash":"0edb67fa97425f2d4079c8c64e097d0ddd5eb0cc","modified":1698375074949},{"_id":"source/react/node_modules/@babel/types/lib/converters/valueToNode.js","hash":"001eba7cbd5eee10bc2a9b88aedd1535ffe285a2","modified":1698375075039},{"_id":"source/react/node_modules/@babel/types/lib/clone/clone.js.map","hash":"f11cac2a382dd2f1ffbda1644bd2d2898e1103dd","modified":1698375074948},{"_id":"source/react/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js","hash":"e7719f2ecf0c0657c5b6068c09af3c3bf0592068","modified":1698375074968},{"_id":"source/react/node_modules/@babel/types/lib/clone/clone.js","hash":"00c128835dc3ef60c50001bc0e1372f29b797cd4","modified":1698375074948},{"_id":"source/react/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js.map","hash":"3e5e0c4f9c01167e3ad2de837289713f10af2f1f","modified":1698375074969},{"_id":"source/react/node_modules/@babel/types/lib/clone/cloneDeep.js.map","hash":"a5e741a73d2bf70a4e6fe28c40c1ee39c9181e7c","modified":1698375074952},{"_id":"source/react/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js.map","hash":"81b8ddfcf0a37ab9107c5db3fd1995047dcdd812","modified":1698375074976},{"_id":"source/react/node_modules/@babel/types/lib/clone/cloneNode.js","hash":"5f9672675007b7ccf19c1662f1c478b15baeda38","modified":1698375074970},{"_id":"source/react/node_modules/@babel/types/lib/constants/index.js","hash":"1800a220c33581cfaa52ab21e133996212c5ec2d","modified":1698375075013},{"_id":"source/react/node_modules/@babel/types/lib/clone/cloneNode.js.map","hash":"05a4f5d7ed4332fc2e9286835d6be5b17624f9be","modified":1698375074972},{"_id":"source/react/node_modules/@babel/types/lib/constants/index.js.map","hash":"8a3c510566fac0e2b40f9a14922d8bfb59b2f66c","modified":1698375075015},{"_id":"source/react/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js","hash":"f63ebfbdab6d34badb74fd376c38f5cc8930423c","modified":1698375074975},{"_id":"source/react/node_modules/@babel/types/lib/utils/inherit.js","hash":"5896fd13c8a775e0155b7185805c9727329f6730","modified":1698375075212},{"_id":"source/react/node_modules/@babel/types/lib/utils/deprecationWarning.js","hash":"afa3da502a334e2761cdd333fd39352dc94fc835","modified":1698375075211},{"_id":"source/react/node_modules/@babel/types/lib/utils/deprecationWarning.js.map","hash":"abae9fa4252b5c9943d0a90385285a8c6d74583c","modified":1698375075212},{"_id":"source/react/node_modules/@babel/types/lib/utils/inherit.js.map","hash":"ca661ce96974181d9c0598fdcb0370fe8691f8b3","modified":1698375075213},{"_id":"source/react/node_modules/@babel/types/lib/utils/shallowEqual.js.map","hash":"2832375b3ba7c1396c51bf0055e2b8b46fae5598","modified":1698375075217},{"_id":"source/react/node_modules/@babel/types/lib/utils/shallowEqual.js","hash":"10edc2f8f2dc3288ac96e3945e4ec1c0488f6487","modified":1698375075216},{"_id":"source/react/node_modules/@babel/types/lib/definitions/deprecated-aliases.js","hash":"2f85b6a846a35510bd0ec93d5299f930536db5e2","modified":1698375075066},{"_id":"source/react/node_modules/@babel/types/lib/definitions/experimental.js.map","hash":"1956a98c4c449a0500f8c44328166abe14025c1d","modified":1698375075069},{"_id":"source/react/node_modules/@babel/types/lib/definitions/deprecated-aliases.js.map","hash":"28c182bc9dfb1b0298638cf074b963dbcc3297ff","modified":1698375075066},{"_id":"source/react/node_modules/@babel/types/lib/definitions/experimental.js","hash":"d79101cd151187ddfd0dd80c38f777759d01ae5d","modified":1698375075068},{"_id":"source/react/node_modules/@babel/types/lib/definitions/core.js","hash":"7154951f5dd3d4ba313cf317ef619a376707fbab","modified":1698375075044},{"_id":"source/react/node_modules/@babel/types/lib/definitions/index.js","hash":"dac5cd5085b0be8c16791d809bc81fee514763b1","modified":1698375075076},{"_id":"source/react/node_modules/@babel/types/lib/definitions/flow.js","hash":"7f3b07e12e4ca921930a88fe034e52782b646433","modified":1698375075070},{"_id":"source/react/node_modules/@babel/types/lib/definitions/jsx.js","hash":"75150a8a7b5f295714f618445a43b5be5134b3df","modified":1698375075078},{"_id":"source/react/node_modules/@babel/types/lib/definitions/index.js.map","hash":"f900d0c7c6945233003b26c5eca3261bcc84edb9","modified":1698375075077},{"_id":"source/react/node_modules/@babel/types/lib/definitions/placeholders.js","hash":"65b9652f010d787eb88f1309a2adbb1cdf962262","modified":1698375075082},{"_id":"source/react/node_modules/@babel/types/lib/definitions/misc.js","hash":"81f57e1e1fb15e0918d7a46502025a4ab0d1f9d4","modified":1698375075081},{"_id":"source/react/node_modules/@babel/types/lib/definitions/misc.js.map","hash":"970517e7f24b93ba468575964fd9ef1631ee70c7","modified":1698375075082},{"_id":"source/react/node_modules/@babel/types/lib/definitions/flow.js.map","hash":"e645e2118a00f781d12ad2d1d30646b0390e459e","modified":1698375075074},{"_id":"source/react/node_modules/@babel/types/lib/definitions/placeholders.js.map","hash":"791d9f5cd05ac0ed0da63185b79200a7f7e045dc","modified":1698375075083},{"_id":"source/react/node_modules/@babel/types/lib/definitions/utils.js","hash":"3c8f51e48540792494a5204936d202e58d8cd4c0","modified":1698375075090},{"_id":"source/react/node_modules/@babel/types/lib/definitions/typescript.js","hash":"11a06d64eb81523d63686d468030469d10ee907a","modified":1698375075084},{"_id":"source/react/node_modules/@babel/types/lib/definitions/jsx.js.map","hash":"ceab8191eae69291cc086afb453bf295c01f3e20","modified":1698375075079},{"_id":"source/react/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js","hash":"27439fd3e557f640b2f818d7361fc0c12f46cb43","modified":1698375075145},{"_id":"source/react/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js.map","hash":"b5cb79e6958cba56568b130f34e748c0ef77dcb2","modified":1698375075145},{"_id":"source/react/node_modules/@babel/types/lib/modifications/inherits.js.map","hash":"3dc08d4e0580bd1e26ba27c0b3f73be834d34198","modified":1698375075180},{"_id":"source/react/node_modules/@babel/types/lib/modifications/inherits.js","hash":"746ddefd49e0fbafb0f53d49ac490d9e5a67eccf","modified":1698375075179},{"_id":"source/react/node_modules/@babel/types/lib/definitions/typescript.js.map","hash":"8f3cea0dd289b3341d7194e3d13e91bea6f63f1d","modified":1698375075089},{"_id":"source/react/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js","hash":"5a713459848abc5691a7b9f14ad0112175c90ae5","modified":1698375075182},{"_id":"source/react/node_modules/@babel/types/lib/modifications/removeProperties.js","hash":"73107880504998df7f8c5b3bd7a278383e84c8bc","modified":1698375075182},{"_id":"source/react/node_modules/@babel/types/lib/definitions/utils.js.map","hash":"2fe154267fef1b9d3e801134719f87954d4540cd","modified":1698375075093},{"_id":"source/react/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js.map","hash":"3028bed081c1ddfa573d4514075dcae49f4d3524","modified":1698375075182},{"_id":"source/react/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js","hash":"23860ef1d6c45e8f71b8228a1f377668e8c96f1b","modified":1698375075184},{"_id":"source/react/node_modules/@babel/types/lib/modifications/removeProperties.js.map","hash":"3a7b71c33b882acdf6cb87622e9f4638c6595942","modified":1698375075183},{"_id":"source/react/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js.map","hash":"26731753b32c609f400eec1cf1c2bee87e0d87a9","modified":1698375075184},{"_id":"source/react/node_modules/@babel/types/lib/traverse/traverse.js","hash":"7992ab182de5d6e2635aa63d27e20ae6119fd085","modified":1698375075202},{"_id":"source/react/node_modules/@babel/types/lib/traverse/traverse.js.map","hash":"e8ba95e72d71854d9e97f15b2ced3595d6fd7003","modified":1698375075204},{"_id":"source/react/node_modules/@babel/types/lib/traverse/traverseFast.js","hash":"67af8be359598f6a3aafc7637358f7046033aeca","modified":1698375075207},{"_id":"source/react/node_modules/@babel/types/lib/traverse/traverseFast.js.map","hash":"1fba6e434dffc21acf4550501d6fbe3f4c515933","modified":1698375075208},{"_id":"source/react/node_modules/@jridgewell/set-array/dist/types/set-array.d.ts","hash":"ecdc80abc61ff43f120815d530b2bd1c4937ae71","modified":1698375074476},{"_id":"source/react/node_modules/@babel/types/lib/validators/is.js.map","hash":"c2cc7721bb988d6b01372cbdfa43ff1e6b6f4330","modified":1698375075229},{"_id":"source/react/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js","hash":"e5d43e99dde5f498e5a3a92e71f2e952b501aac3","modified":1698375075218},{"_id":"source/react/node_modules/@babel/types/lib/validators/is.js","hash":"ca3a7002a5b3266c519975795feb3df111781548","modified":1698375075228},{"_id":"source/react/node_modules/@babel/types/lib/validators/isBinding.js","hash":"42b4760da869af08f58551fffe3e9f713ec8917f","modified":1698375075229},{"_id":"source/react/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js.map","hash":"915a30c2bcb5dd42530746e7aedf2f60e578f23a","modified":1698375075218},{"_id":"source/react/node_modules/@babel/types/lib/validators/isBlockScoped.js","hash":"551efbe73814fbdf9b09af1a6dbd9edab8ca12c9","modified":1698375075232},{"_id":"source/react/node_modules/@babel/types/lib/validators/isBinding.js.map","hash":"ab893915470971105665d3f04c3edf28e07af06f","modified":1698375075230},{"_id":"source/react/node_modules/@babel/types/lib/validators/isLet.js","hash":"3a0c0986cdca1871a5c5ed9260abcc71f3622c6d","modified":1698375075234},{"_id":"source/react/node_modules/@babel/types/lib/validators/isImmutable.js.map","hash":"10e95616c5bb69f092d2a27f85a8284d46d4e4a7","modified":1698375075234},{"_id":"source/react/node_modules/@babel/types/lib/validators/isBlockScoped.js.map","hash":"5ed796106be60349757afaa5ed033dc480447ae0","modified":1698375075232},{"_id":"source/react/node_modules/@babel/types/lib/validators/isImmutable.js","hash":"87ce8fd906f5fe6fea21757f3b96e2dbf10d45b9","modified":1698375075233},{"_id":"source/react/node_modules/@babel/types/lib/validators/isLet.js.map","hash":"bb40416959c2ca61db63d005d69a900cf67cbc1f","modified":1698375075235},{"_id":"source/react/node_modules/@babel/types/lib/validators/isNode.js","hash":"17f73842d38e0825ffa9f577e40f179503ee031b","modified":1698375075236},{"_id":"source/react/node_modules/@babel/types/lib/validators/isNodesEquivalent.js","hash":"8de1678d5fea7521128e49da8471adb7ac189ad8","modified":1698375075237},{"_id":"source/react/node_modules/@babel/types/lib/validators/isNode.js.map","hash":"f010db7eb8ebd64d5d15d7d18b6417f60ac1679f","modified":1698375075237},{"_id":"source/react/node_modules/@babel/types/lib/validators/isNodesEquivalent.js.map","hash":"f641f0041fc59f51e3c15d7cb46b36c5dd81d7de","modified":1698375075238},{"_id":"source/react/node_modules/@babel/types/lib/validators/isPlaceholderType.js","hash":"29b3523f38b94f9a08d792cc9719bac32db78d27","modified":1698375075241},{"_id":"source/react/node_modules/@babel/types/lib/validators/isReferenced.js.map","hash":"12f6c5370819cd46e47b1d16b30787182b42e637","modified":1698375075243},{"_id":"source/react/node_modules/@babel/types/lib/validators/isReferenced.js","hash":"8759a5583bcae62a90768a3418d106c78e08f2fe","modified":1698375075243},{"_id":"source/react/node_modules/@babel/types/lib/validators/isSpecifierDefault.js","hash":"8c8652248a736fc000db5f45ec1d1a0570acb952","modified":1698375075248},{"_id":"source/react/node_modules/@babel/types/lib/validators/isScope.js.map","hash":"ea29e0e84d39283385b36c5a4f294418383fefce","modified":1698375075246},{"_id":"source/react/node_modules/@babel/types/lib/validators/isPlaceholderType.js.map","hash":"100b966a07727dac6dfc5746abf6a134936cfb40","modified":1698375075243},{"_id":"source/react/node_modules/@babel/types/lib/validators/isScope.js","hash":"db0b7d08fe2f223e5bb846f2713a608d9c4d3204","modified":1698375075244},{"_id":"source/react/node_modules/@babel/types/lib/validators/isType.js","hash":"c35549269452b8a2efed8d388de69e86d02446ad","modified":1698375075249},{"_id":"source/react/node_modules/@babel/types/lib/validators/isSpecifierDefault.js.map","hash":"c9a88f6d3fecb5f6380be2432aa6f2d842cbb0af","modified":1698375075248},{"_id":"source/react/node_modules/@babel/types/lib/validators/isType.js.map","hash":"278eb5c9417f80ec0acdd17c7064caaf2af357eb","modified":1698375075249},{"_id":"source/react/node_modules/@babel/types/lib/validators/isValidIdentifier.js.map","hash":"b9fbfe1c664a0a31d9f52930cf99f2d80a69af36","modified":1698375075251},{"_id":"source/react/node_modules/@babel/types/lib/validators/isValidES3Identifier.js.map","hash":"badada52d3d2d83ff83dcb41ce237d82c145ff54","modified":1698375075250},{"_id":"source/react/node_modules/@babel/types/lib/validators/isValidIdentifier.js","hash":"2b54d4a54bd63122fc8ce0a01eb531972c85eebc","modified":1698375075251},{"_id":"source/react/node_modules/@babel/types/lib/validators/isValidES3Identifier.js","hash":"49d11809665072371ec9b0d5fe83f5214001eb6f","modified":1698375075250},{"_id":"source/react/node_modules/@babel/types/lib/validators/isVar.js","hash":"a8ac19b347058fbb51e9c0b9b35a838cd9c6ef14","modified":1698375075252},{"_id":"source/react/node_modules/@babel/types/lib/validators/isVar.js.map","hash":"aac530a17a4caeaeedeb33315a683075bbfd5f96","modified":1698375075253},{"_id":"source/react/node_modules/@babel/types/lib/validators/matchesPattern.js.map","hash":"ce56f882230dc441448d59fa0d5798a6b2252d87","modified":1698375075254},{"_id":"source/react/node_modules/@babel/types/lib/validators/matchesPattern.js","hash":"8454cf4b6cbd50a08bbc3c1de9ab5c16de493b00","modified":1698375075254},{"_id":"source/react/node_modules/@babel/types/lib/validators/validate.js.map","hash":"2a79c18b779dc98bc1fccaf027c1db7dc96856c3","modified":1698375075261},{"_id":"source/react/node_modules/@babel/types/lib/validators/validate.js","hash":"23bcdbb590e36bbf25fc5cddd90dd95806ca36e6","modified":1698375075260},{"_id":"source/react/node_modules/@jridgewell/gen-mapping/dist/types/sourcemap-segment.d.ts","hash":"55681c676771f5a0ecd80b9c45f0e566631cf5fc","modified":1698375074654},{"_id":"source/react/node_modules/@jridgewell/sourcemap-codec/dist/types/sourcemap-codec.d.ts","hash":"9be1ab759eeb2ddb2b41ac2e424b11b0a033a24f","modified":1698375074598},{"_id":"source/react/node_modules/@jridgewell/gen-mapping/dist/types/types.d.ts","hash":"4d0c4a6b09fb7993d6edf2ff83a3c092817b6746","modified":1698375074660},{"_id":"source/react/node_modules/@babel/traverse/lib/path/ancestry.js","hash":"ed40539dc8c001c46e1811a4d98b47aed7e5a860","modified":1698375074611},{"_id":"source/react/node_modules/@babel/traverse/lib/path/comments.js","hash":"6ca595f33083572e5306bcc63f8cc09aa81d1680","modified":1698375074653},{"_id":"source/react/node_modules/@jridgewell/gen-mapping/dist/types/gen-mapping.d.ts","hash":"01e5c17ecd299efa9ec40abf2b32e765e0d6fdbf","modified":1698375074638},{"_id":"source/react/node_modules/@babel/traverse/lib/path/ancestry.js.map","hash":"ac61172f5b48dcd700ae8eca5d4d1c7e1b2914b5","modified":1698375074638},{"_id":"source/react/node_modules/@babel/traverse/lib/path/comments.js.map","hash":"f9878b4081aa98aed904ead45b7463e04909e200","modified":1698375074660},{"_id":"source/react/node_modules/@babel/traverse/lib/path/context.js","hash":"3a12783d08f53aef4dca696e65ca52cdd4e24dd8","modified":1698375074676},{"_id":"source/react/node_modules/@babel/traverse/lib/path/evaluation.js","hash":"c673270872f199497e11534c7e40b035b08fea7a","modified":1698375074765},{"_id":"source/react/node_modules/@babel/traverse/lib/path/conversion.js","hash":"bb8f7114cb5fff354e8f3bc48c86cdee808f73f6","modified":1698375074725},{"_id":"source/react/node_modules/@babel/traverse/lib/path/context.js.map","hash":"bb97d774d789a4093b83cc36e1b974cca7852a2c","modified":1698375074696},{"_id":"source/react/node_modules/@babel/traverse/lib/path/family.js","hash":"a15b8417ddfa534dbe1659585648d0f05ef8d786","modified":1698375074792},{"_id":"source/react/node_modules/@babel/traverse/lib/path/conversion.js.map","hash":"55aa839cc5909c88b832e1a4d177e746789c5c86","modified":1698375074754},{"_id":"source/react/node_modules/@babel/traverse/lib/path/index.js","hash":"1895e88cc72ffff52d4da9db6a50da9ba24ea2f8","modified":1698375074828},{"_id":"source/react/node_modules/@babel/traverse/lib/path/family.js.map","hash":"b83eadcb7c1f4543249bf9fed4b918b94fff1fbd","modified":1698375074825},{"_id":"source/react/node_modules/@babel/traverse/lib/path/evaluation.js.map","hash":"68b0e25e517c3c42d29dc7b14073c295f24f8f0a","modified":1698375074779},{"_id":"source/react/node_modules/@babel/traverse/lib/path/introspection.js","hash":"ce5fc1907c01479def2bf8b04327b98e993ad457","modified":1698375074883},{"_id":"source/react/node_modules/@babel/traverse/lib/path/index.js.map","hash":"03b23546a91990adecb674f21a87e4c23e38f953","modified":1698375074832},{"_id":"source/react/node_modules/@babel/traverse/lib/path/removal.js","hash":"382efd7e86eaee6684f8dac478263139c0666194","modified":1698375074935},{"_id":"source/react/node_modules/@babel/traverse/lib/path/introspection.js.map","hash":"ac00bdda412b0d03648c6fd1c4cb4d0205586668","modified":1698375074899},{"_id":"source/react/node_modules/@babel/traverse/lib/path/removal.js.map","hash":"2b8aac0869b6ef54b3af194f4445a219d0540c75","modified":1698375074936},{"_id":"source/react/node_modules/@babel/traverse/lib/path/replacement.js","hash":"10ba395d85f3501da28d34b60fc85f9cfffed18a","modified":1698375074938},{"_id":"source/react/node_modules/@babel/traverse/lib/path/modification.js","hash":"130213f963167b84ae03b38f47f4c94438bb5013","modified":1698375074929},{"_id":"source/react/node_modules/@babel/traverse/lib/scope/binding.js","hash":"bf84ba57c342d668a32325e145e1c435332ac15c","modified":1698375074950},{"_id":"source/react/node_modules/@babel/traverse/lib/scope/binding.js.map","hash":"64ac44e42f70c29873816422eb872f7d78f011a6","modified":1698375074962},{"_id":"source/react/node_modules/@babel/traverse/lib/path/replacement.js.map","hash":"21fbc5ed7293d0ea7239d9e80bb99d253d12c132","modified":1698375074942},{"_id":"source/react/node_modules/@babel/traverse/lib/path/modification.js.map","hash":"21522bb7a78a02fe112734c44dca3b7874a5c9da","modified":1698375074932},{"_id":"source/react/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js","hash":"78e7e61fb55acbaec1d1727482833f00671678ea","modified":1698375075192},{"_id":"source/react/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js.map","hash":"0973b1ca8c84dca913440c9de9ca68e3ba035406","modified":1698375075193},{"_id":"source/react/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js.map","hash":"95e6f4261164431b7b9bef116d473b5dcbf20c14","modified":1698375075197},{"_id":"source/react/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js","hash":"43ad262e9cf3be8cc399d8a9c3bb6d3e9ee64778","modified":1698375075195},{"_id":"source/react/node_modules/@babel/traverse/lib/scope/index.js","hash":"77a1a7ed371ce2eaafa407d82a4a032e7b3f2fd1","modified":1698375074972},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/dist/types/any-map.d.ts","hash":"f6176de3a49cb646c0517563a2dac4e618c35252","modified":1698375074808},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/dist/types/binary-search.d.ts","hash":"78bace2fdef9dff1fe678fee846208d1be352d1b","modified":1698375074810},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/dist/types/by-source.d.ts","hash":"caf197befd8a729392afbdb0997045cdd3a92472","modified":1698375074824},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/dist/types/resolve.d.ts","hash":"e4ae77f0bc2c198e739cf4ff883e9f8b68539a9b","modified":1698375074825},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/dist/types/strip-filename.d.ts","hash":"39844c9f081d17b97d61993bfa9e048000e1366e","modified":1698375074833},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/dist/types/sourcemap-segment.d.ts","hash":"3ee1c2da64ea098724732823578f9581aa744abe","modified":1698375074830},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/dist/types/sort.d.ts","hash":"eea33e13029ac2aa1ca10b7b3cabd5c8abd9a1c6","modified":1698375074828},{"_id":"source/react/node_modules/@jridgewell/resolve-uri/dist/types/resolve-uri.d.ts","hash":"4f9b36bbda2a3b06f96524df3558d420878f81be","modified":1698375074550},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/dist/types/trace-mapping.d.ts","hash":"c8940771e42421cfe3e31b63d38632a449a34b76","modified":1698375074835},{"_id":"source/react/node_modules/@jridgewell/trace-mapping/dist/types/types.d.ts","hash":"f2f48ee0d7c54c5c4c0e47168309011de6d5e88f","modified":1698375074844},{"_id":"source/react/node_modules/vite/dist/node/chunks/dep-c423598f.js","hash":"e70ab4a775302897ca58235c895d4d55885973c8","modified":1698375076708},{"_id":"source/react/node_modules/@babel/core/lib/config/helpers/config-api.js","hash":"75164530bff2f450518420f394890f0ebf999567","modified":1698375074874},{"_id":"source/react/node_modules/@babel/core/lib/config/helpers/config-api.js.map","hash":"51711e11b19907933ee72e9eeafc0853460cc162","modified":1698375074876},{"_id":"source/react/node_modules/vite/dist/node/chunks/dep-e4a495ce.js","hash":"c2bb55ebdd871f334e65d8e8d96229e26e855c90","modified":1698375076732},{"_id":"source/react/node_modules/@babel/core/lib/config/helpers/deep-array.js.map","hash":"4cc356076021a3aea2644538149250445aba08b9","modified":1698375074884},{"_id":"source/react/node_modules/@babel/core/lib/config/helpers/environment.js","hash":"b924eb3674ebed75437a9faa29a4046a2e310caf","modified":1698375074894},{"_id":"source/react/node_modules/@babel/core/lib/config/helpers/deep-array.js","hash":"114d52f6ab70597beb856630a48fc619b7427c7b","modified":1698375074880},{"_id":"source/react/node_modules/@babel/core/lib/config/helpers/environment.js.map","hash":"7c482419f4458da232d277967dd9735a720c5c53","modified":1698375074897},{"_id":"source/react/node_modules/@babel/core/lib/config/files/configuration.js","hash":"f38f9bc30763c6588f1c285d93893410dfae32e8","modified":1698375074697},{"_id":"source/react/node_modules/@babel/core/lib/config/files/import.cjs","hash":"451166318bdeb61955342fb355cbe56dbda4cb3b","modified":1698375074728},{"_id":"source/react/node_modules/@babel/core/lib/config/files/index.js","hash":"babe8dff3fc4ed35939be6560369e631f4fb8a9d","modified":1698375074745},{"_id":"source/react/node_modules/@babel/core/lib/config/files/index-browser.js","hash":"51ada7f6751ef1fde01b30f99bb2375f6210a601","modified":1698375074739},{"_id":"source/react/node_modules/@babel/core/lib/config/files/index.js.map","hash":"62601cfd545294c79656ef9336d552e402957fd3","modified":1698375074763},{"_id":"source/react/node_modules/@babel/core/lib/config/files/import.cjs.map","hash":"c572059e9d0057db5654e7fc27e9b826aff5f94a","modified":1698375074736},{"_id":"source/react/node_modules/@babel/core/lib/config/files/configuration.js.map","hash":"700cd2e68351cae600f3f065b7d24b473a6ae598","modified":1698375074724},{"_id":"source/react/node_modules/@babel/core/lib/config/files/module-types.js","hash":"b25dde9725edfb31076f1c44cd4ee85130699bac","modified":1698375074771},{"_id":"source/react/node_modules/@babel/core/lib/config/files/index-browser.js.map","hash":"e2d8151db77be6c1105cf57f218227e2e7af588c","modified":1698375074743},{"_id":"source/react/node_modules/@babel/core/lib/config/files/module-types.js.map","hash":"bb3027fd762f008351f897f6087748dcf8b8a32e","modified":1698375074780},{"_id":"source/react/node_modules/@babel/core/lib/config/files/package.js","hash":"ddaa42eddba3f413ca72dfc6d372df1bf445a45d","modified":1698375074791},{"_id":"source/react/node_modules/@babel/core/lib/config/files/plugins.js","hash":"d3428f7668cb5636c0a409e9039164f2a5958c3b","modified":1698375074811},{"_id":"source/react/node_modules/@babel/core/lib/config/files/package.js.map","hash":"1328e1e8a34d56097b2d9c64cb7a431a91df51c2","modified":1698375074802},{"_id":"source/react/node_modules/@babel/core/lib/config/files/types.js.map","hash":"c8cfcce199b6439f3126595adc0aaf4a11c9d3d8","modified":1698375074840},{"_id":"source/react/node_modules/@babel/core/lib/config/files/types.js","hash":"3d6a40e1855e162a50bd07f2d23ee10e988cfaa4","modified":1698375074833},{"_id":"source/react/node_modules/@babel/core/lib/config/files/plugins.js.map","hash":"c0ee785a1a19a2bd58ed83eb392b844471ff550c","modified":1698375074828},{"_id":"source/react/node_modules/@babel/core/lib/config/validation/option-assertions.js","hash":"c0798977425298d12290986ee7ed78f381ef66f2","modified":1698375074948},{"_id":"source/react/node_modules/@babel/core/lib/config/files/utils.js","hash":"127b3c6411b85611ccd947ed2a6eb7247cf19b2e","modified":1698375074843},{"_id":"source/react/node_modules/@babel/core/lib/config/files/utils.js.map","hash":"2f770566a751139869066806f1fa30c0f1e325e3","modified":1698375074847},{"_id":"source/react/node_modules/@babel/core/lib/config/validation/options.js","hash":"e1233de076b19e8e3b1906791edd537c0c97d674","modified":1698375074968},{"_id":"source/react/node_modules/@babel/core/lib/config/validation/plugins.js.map","hash":"6bbf69529eb52ca27ee72d7b4207952185bbd4d0","modified":1698375074976},{"_id":"source/react/node_modules/@babel/core/lib/config/validation/removed.js.map","hash":"6c71c6c8f7ef051fe70de1cbde72e6b8d52567e6","modified":1698375074979},{"_id":"source/react/node_modules/@babel/core/lib/config/validation/plugins.js","hash":"436f7e065db16e8555d4b2784431bce3c6f259b0","modified":1698375074973},{"_id":"source/react/node_modules/@babel/core/lib/config/validation/option-assertions.js.map","hash":"2e543753aa312bee6572e738f6aa114da8cc260d","modified":1698375074952},{"_id":"source/react/node_modules/@babel/core/lib/config/validation/removed.js","hash":"fad6d9d1af83f5b23a83e6801a8ff5a797581108","modified":1698375074978},{"_id":"source/react/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js","hash":"a1432a201109ca59c2582d2170a38f79c86125f0","modified":1698375075020},{"_id":"source/react/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js.map","hash":"396e915b9e332b351ec9b7352f4212dd52015d4a","modified":1698375075024},{"_id":"source/react/node_modules/@babel/core/lib/config/validation/options.js.map","hash":"baf3c070d19ec6a9773ef32a197fa5842fc07b5f","modified":1698375074971},{"_id":"source/react/node_modules/@babel/core/lib/transformation/util/clone-deep.js","hash":"cceb640282ca7e677b709916472d91de04a2684a","modified":1698375075068},{"_id":"source/react/node_modules/@babel/core/lib/transformation/util/clone-deep.js.map","hash":"cd304717c3e897a095a048b660692d4a1a5cf2df","modified":1698375075069},{"_id":"source/react/node_modules/@babel/core/lib/transformation/file/file.js","hash":"3081770594def1671f892ede18a13305c95570c5","modified":1698375075043},{"_id":"source/react/node_modules/@babel/core/lib/transformation/file/generate.js","hash":"07ff20a5ce5a8658e8a13680c95e374f2bb3e942","modified":1698375075044},{"_id":"source/react/node_modules/@babel/core/lib/transformation/file/merge-map.js","hash":"543604508e394a47e9f26df7937a8bf70f3500ec","modified":1698375075046},{"_id":"source/react/node_modules/@babel/core/lib/transformation/file/generate.js.map","hash":"8535fa42b745178023712a70070b10937ae7cd5b","modified":1698375075045},{"_id":"source/react/node_modules/@babel/core/src/config/files/index-browser.ts","hash":"33d1c8a7131e317e6d6907108d049b3a0d1eb2d0","modified":1698375075082},{"_id":"source/react/node_modules/@babel/core/lib/transformation/file/merge-map.js.map","hash":"4021cf19895570278c324c03298f6eeec908575b","modified":1698375075046},{"_id":"source/react/node_modules/@babel/core/lib/transformation/file/file.js.map","hash":"dd5fc38196dd603cf868a9be6a1d43d406eac22e","modified":1698375075044},{"_id":"source/react/node_modules/@babel/core/src/config/files/index.ts","hash":"886b96af380edea9c9a0881648711b3ae2862191","modified":1698375075083},{"_id":"source/react/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js.map","hash":"0bdff4473eebb755cd1f566812363a1cf9c67f59","modified":1698375074826},{"_id":"source/react/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js","hash":"3c7a20f8b066ef7f858dcf14d6afcf1698ee141c","modified":1698375074812},{"_id":"source/react/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js.map","hash":"4fef44d07207bd3d9e60c5cdb42f9217d635e02d","modified":1698375074834},{"_id":"source/react/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js","hash":"5c68d0c545887be2445cb1b74bc5809405073d98","modified":1698375074831},{"_id":"source/react/node_modules/@babel/types/lib/builders/generated/index.js","hash":"f17e140cca1099762e9480e9d170a62d7179d950","modified":1698375074864},{"_id":"source/react/node_modules/@babel/types/lib/builders/generated/uppercase.js.map","hash":"215f6f3e8c49772e6fb5495ba3ea8bbfc095dce9","modified":1698375074903},{"_id":"source/react/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js","hash":"ac99b6bbdb3ee5879edb6ba5dbb012f987ef690b","modified":1698375074930},{"_id":"source/react/node_modules/@babel/types/lib/builders/generated/uppercase.js","hash":"01146dc1a091c09905f4d4bd51bd9befcfc6013b","modified":1698375074900},{"_id":"source/react/node_modules/@babel/types/lib/builders/react/buildChildren.js","hash":"9d4954881254318ce49c25a46c0e273cc92ed501","modified":1698375074925},{"_id":"source/react/node_modules/@babel/types/lib/builders/react/buildChildren.js.map","hash":"84d132fbd98fe64eb452d5221c4569776a4bdad3","modified":1698375074926},{"_id":"source/react/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js.map","hash":"90624822b3b3b20d8236ae1077486cf6b2e17920","modified":1698375074932},{"_id":"source/react/node_modules/@babel/types/lib/asserts/generated/index.js","hash":"148205bd999ad2039159ece59f6c8ac33a33606a","modified":1698375074526},{"_id":"source/react/node_modules/@babel/types/lib/ast-types/generated/index.js","hash":"aab676ff66b8f23e9aaed01fa498bbdf4868e5f7","modified":1698375074691},{"_id":"source/react/node_modules/@babel/types/lib/constants/generated/index.js","hash":"294f7026a6ff33fc6e9ec29f20176b98caa76793","modified":1698375075001},{"_id":"source/react/node_modules/@babel/types/lib/constants/generated/index.js.map","hash":"1288c97ecc986713e09afb2229e8354661e26f50","modified":1698375075003},{"_id":"source/react/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js","hash":"69ba47e56e43be5991531088449b51c74b45b09d","modified":1698375075168},{"_id":"source/react/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js.map","hash":"3e18435662cea24a3f0a0328ee1a4ad2358d3d43","modified":1698375075168},{"_id":"source/react/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js","hash":"0652504cfa3bc83a5bee33eb656b0650fa8b3880","modified":1698375075214},{"_id":"source/react/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js.map","hash":"2a6f5bab26df25a43561f40f973f9810a0fb666b","modified":1698375075215},{"_id":"source/react/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js","hash":"f29cf9e7344e33144bd461e9841740402f896f08","modified":1698375075191},{"_id":"source/react/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js.map","hash":"f8e495c565afc2fc8b2a489753f0fd001ac35f06","modified":1698375075191},{"_id":"source/react/node_modules/@babel/types/lib/validators/react/isCompatTag.js.map","hash":"07612c218e988caa2c4a63ffce515658bf8f7b43","modified":1698375075258},{"_id":"source/react/node_modules/@babel/types/lib/validators/react/isCompatTag.js","hash":"ff2f399e3c4be990b0da48d9bcba447ac6d461a2","modified":1698375075257},{"_id":"source/react/node_modules/@babel/types/lib/validators/react/isReactComponent.js","hash":"b1772a4e18cdc88229435553bc51d6f32bca630f","modified":1698375075259},{"_id":"source/react/node_modules/@babel/types/lib/validators/react/isReactComponent.js.map","hash":"a1870a478dbb554fcfd89f2af4ef576109bff5ba","modified":1698375075259},{"_id":"source/react/node_modules/@babel/traverse/lib/path/inference/index.js","hash":"b4bb2eecc48c021e992d0b44c159fca4fac54bc1","modified":1698375074846},{"_id":"source/react/node_modules/@babel/traverse/lib/path/inference/index.js.map","hash":"c4d3cf7318542e9cb37a6b194b28ce0c71cd1546","modified":1698375074849},{"_id":"source/react/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js","hash":"25024a15229efbced6d3f92875e0a70e65c06621","modified":1698375074860},{"_id":"source/react/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js.map","hash":"a4c5c81620477f198bdd8df024d5ec3c9951dad9","modified":1698375074864},{"_id":"source/react/node_modules/@babel/traverse/lib/path/inference/util.js.map","hash":"dc2d3ef502be86da06d1d1c8590e056e0ed72e8c","modified":1698375074880},{"_id":"source/react/node_modules/@babel/traverse/lib/path/inference/util.js","hash":"607276db6eed656eda4b95b48c25585e62ffa04f","modified":1698375074875},{"_id":"source/react/node_modules/@babel/traverse/lib/path/inference/inferers.js","hash":"d7b6efcffec8a8ddbece9b23ef266b3e166b2c9f","modified":1698375074868},{"_id":"source/react/node_modules/@babel/traverse/lib/scope/lib/renamer.js.map","hash":"8b565e0e87af3a13520aa525cdc0be4c6a60d424","modified":1698375074990},{"_id":"source/react/node_modules/@babel/traverse/lib/scope/lib/renamer.js","hash":"64ed9deb1aebc4973a350b5f01088d54f805e1d2","modified":1698375074987},{"_id":"source/react/node_modules/@babel/traverse/lib/path/inference/inferers.js.map","hash":"cd0f36a7e53d45a4cc49352b7b059c0d0053b9d6","modified":1698375074874},{"_id":"source/react/node_modules/@babel/traverse/lib/path/lib/hoister.js","hash":"89cbcc70797e191f43949dd99dade1f34a306ede","modified":1698375074902},{"_id":"source/react/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js","hash":"4c5d34b778567aafcb2a51880b9cbd7431d7d9ff","modified":1698375074913},{"_id":"source/react/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js.map","hash":"3c7f3ebd047b3def2deac8ad912d4990b1634378","modified":1698375074917},{"_id":"source/react/node_modules/@babel/traverse/lib/path/lib/hoister.js.map","hash":"d3c145d36899eac42c26321765b0575bd75c0876","modified":1698375074907},{"_id":"source/react/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js.map","hash":"db07020a30c97b3984c2a85e36333e2ff0584bf9","modified":1698375074924},{"_id":"source/react/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js","hash":"58dff6a7433802d9e6b1a91c4f3319b7855b51f5","modified":1698375074920},{"_id":"source/react/node_modules/@babel/traverse/lib/path/lib/virtual-types.js","hash":"df71edf93ffa6a1f39877ce599d81512a7f899cc","modified":1698375074926},{"_id":"source/react/node_modules/@babel/traverse/lib/path/lib/virtual-types.js.map","hash":"09c1cde37dc2f9cc4028d990896ffbc1043cb92a","modified":1698375074927},{"_id":"source/react/node_modules/electron-to-chromium/full-versions.js","hash":"2938569195190fe19ec947df1904dfb2aa0c3718","modified":1698375074744},{"_id":"source/react/node_modules/electron-to-chromium/full-versions.json","hash":"c7237386228a93cd1b0b4e1a817384e0f93df20a","modified":1698375074828},{"_id":"source/react/node_modules/.bin/rollup","hash":"d766aef7653a42fc7bf2907aa4db713731467fbc","modified":1698375074731},{"_id":"source/react/node_modules/@types/babel__traverse/index.d.ts","hash":"b0d0a1968e45e451562cf0e2f2d28dd567a1810c","modified":1698375074972},{"_id":"source/react/node_modules/esbuild/lib/main.js","hash":"db2e13ef147e0a4e69e06bb760ce1e2be848522b","modified":1698375074739},{"_id":"source/react/node_modules/@babel/helpers/lib/helpers.js.map","hash":"d283f8e51cb472be1ea833e15fcdd819cf20dcb3","modified":1698375074652},{"_id":"source/react/node_modules/rollup/dist/bin/rollup","hash":"d766aef7653a42fc7bf2907aa4db713731467fbc","modified":1698375074731},{"_id":"source/react/node_modules/rollup/dist/shared/index.js","hash":"13a7c8bb3f2bcb6a99a4b5a26eaa1b8c80dcea8e","modified":1698375074906},{"_id":"source/react/node_modules/vite/dist/node/index.d.ts","hash":"095b9ec90b5b614dd048c90ca64a1336454a5ce1","modified":1698375076918},{"_id":"source/react/node_modules/vite/dist/node-cjs/publicUtils.cjs","hash":"9402778342d662da01be753e37c28446a55c8942","modified":1698375075005},{"_id":"source/react/node_modules/@babel/core/lib/vendor/import-meta-resolve.js.map","hash":"2d51b97cd8c2c479322873ef421f557fb13bd30f","modified":1698375075077},{"_id":"source/react/node_modules/@babel/types/lib/definitions/core.js.map","hash":"6a406cf1054979428dd35527e206fc3734cedda7","modified":1698375075063},{"_id":"source/react/node_modules/@babel/traverse/lib/scope/index.js.map","hash":"80e1d0b740ab7814a9db1cab82b0afc8c4a340d2","modified":1698375074981},{"_id":"source/react/node_modules/rollup/dist/es/shared/watch.js","hash":"a5f225214bb55487cbb097b23e0ea75991048a1f","modified":1698375076548},{"_id":"source/react/node_modules/@babel/types/lib/builders/generated/index.js.map","hash":"45bd606c6a6150cfcb3d9b7cc1ab46c433cb756a","modified":1698375074885},{"_id":"source/react/node_modules/@babel/types/lib/asserts/generated/index.js.map","hash":"9128173b6437d02f7181d80463af26060a281905","modified":1698375074653},{"_id":"source/react/node_modules/@babel/types/lib/validators/generated/index.js","hash":"5397377964d899fec62d8c34ffefadcf2fc440db","modified":1698375075223},{"_id":"source/react/node_modules/fsevents/fsevents.node","hash":"e73e5bf267a38e2f1d4276bd71ccb06e58e62c1c","modified":1698375074573},{"_id":"source/react/node_modules/vite/LICENSE.md","hash":"783f65e79119128104a38dbb421e987a2b0ca2d6","modified":1698375076859},{"_id":"source/react/node_modules/@babel/types/lib/index-legacy.d.ts","hash":"9420c865245d4f8d340c43525caf59ef1eaf71c9","modified":1698375075100},{"_id":"source/react/node_modules/@babel/types/lib/index.js.flow","hash":"1b5d519e7be860e56da47e3dd0798fbd7004a130","modified":1698375075134},{"_id":"source/react/node_modules/vite/dist/node/chunks/dep-98d4beff.js","hash":"81bf4b5bcff0d1c14824ac4a277ebf95fac216a5","modified":1698375075243},{"_id":"source/react/node_modules/@babel/types/lib/ast-types/generated/index.js.map","hash":"c7c20129286643f54e676b31f002b1e3a87c386c","modified":1698375074777},{"_id":"source/react/node_modules/@babel/types/lib/validators/generated/index.js.map","hash":"795d9e10fcaa93d052ffd193577e50645e9265aa","modified":1698375075227},{"_id":"source/react/node_modules/vite/dist/node/chunks/dep-f0c7dae0.js","hash":"349ec0a5200b1a1e8dd6ded8bd3012d634debdf9","modified":1698375076807},{"_id":"source/react/node_modules/@babel/parser/lib/index.js","hash":"4e6d9184d3388753d2d380a893fca9de7f70269f","modified":1698375074777},{"_id":"source/react/node_modules/@babel/types/lib/index.d.ts","hash":"97a3e0e40dd8d60efb2c9671dc45422294b0dda5","modified":1698375075118},{"_id":"source/react/node_modules/rollup/dist/shared/rollup.js","hash":"7ed81f2c4a11d6b8d7ff3bec71bc2999a1e5fc20","modified":1698375076445},{"_id":"source/react/node_modules/rollup/dist/es/shared/node-entry.js","hash":"a6628fbcd5da6bca6dcb5c3f8ec36bc07d8a026c","modified":1698375075725},{"_id":"source/react/node_modules/@babel/parser/lib/index.js.map","hash":"b42178fec678172b7f209f843c33a81456dc1906","modified":1698375074990},{"_id":"source/react/node_modules/vite/dist/node/chunks/dep-bb8a8339.js","hash":"83aeabcb0d0affc35cdd446400ca989de79d16a7","modified":1698375076707},{"_id":"source/react/node_modules/@esbuild/darwin-x64/bin/esbuild","hash":"3ec5848c36cf50530b9ca66955b822150b4ba521","modified":1698375078974},{"_id":"source/react/node_modules/.bin/esbuild","hash":"3ec5848c36cf50530b9ca66955b822150b4ba521","modified":1698375078974},{"_id":"source/react/node_modules/esbuild/bin/esbuild","hash":"3ec5848c36cf50530b9ca66955b822150b4ba521","modified":1698375078974}],"Category":[{"name":"浏览器","_id":"clo6whxco0004dif30ksm66ww"},{"name":"渲染","parent":"clo6whxco0004dif30ksm66ww","_id":"clo6whxcy000mdif3hs7ce1kj"},{"name":"网路安全","parent":"clo6whxco0004dif30ksm66ww","_id":"clo6whxd1000rdif34v6n8kf7"},{"name":"Cache","parent":"clo6whxco0004dif30ksm66ww","_id":"clo6whxd4000ydif3b309bit0"},{"name":"通讯","parent":"clo6whxco0004dif30ksm66ww","_id":"clo6whxd60014dif34ell5h0w"},{"name":"协议","parent":"clo6whxco0004dif30ksm66ww","_id":"clo6whxd8001bdif3hkt9el1e"},{"name":"前端","_id":"clo6whxd9001hdif35y1v1bcj"},{"name":"缓存","parent":"clo6whxco0004dif30ksm66ww","_id":"clo6whxde001xdif37i4vgi1d"},{"name":"React","_id":"clo6whxdm002pdif34p7o9kq9"},{"name":"网络安全","parent":"clo6whxco0004dif30ksm66ww","_id":"clo6whxdq003gdif3h5ro2iw6"},{"name":"es6","parent":"clo6whxd9001hdif35y1v1bcj","_id":"clo6whxdr003kdif3e097budo"},{"name":"性能优化","parent":"clo6whxco0004dif30ksm66ww","_id":"clo6whxdt0046dif38s5o3k3x"},{"name":"npm","parent":"clo6whxd9001hdif35y1v1bcj","_id":"clo6whxdx0052dif3amvy5bdx"},{"name":"框架","parent":"clo6whxd9001hdif35y1v1bcj","_id":"clo6whxe0005ndif39o80ek7t"},{"name":"WebPack","parent":"clo6whxd9001hdif35y1v1bcj","_id":"clo6whxe1005rdif38nc1bcna"},{"name":"Fiber","parent":"clo6whxdm002pdif34p7o9kq9","_id":"clo6whxe30067dif3cvylggjq"},{"name":"TypeScript","parent":"clo6whxd9001hdif35y1v1bcj","_id":"clo6whxe5006rdif3a6dd2b10"},{"name":"components","parent":"clo6whxdm002pdif34p7o9kq9","_id":"clo6whxe5006wdif3023y9pe1"},{"name":"Hexo","parent":"clo6whxe0005ndif39o80ek7t","_id":"clo6whxe60071dif35w4982tj"},{"name":"unstate-next","parent":"clo6whxe5006wdif3023y9pe1","_id":"clo6whxe8007ldif3d94r9gw0"}],"Data":[],"Page":[{"title":"404","description":"404 – Page not found.","comments":0,"sitemap":false,"_content":"\n```\n  ██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗\n  ██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝\n  ███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║\n  ╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║\n       ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║\n       ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝\n\n      ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗\n      ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗\n      █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║\n      ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║\n      ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝\n      ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝\n```\n","source":"404/index.md","raw":"---\npermalink: /404.html\ntitle: 404\ndescription: 404 – Page not found.\ncomments: false\nsitemap: false\n---\n\n```\n  ██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗\n  ██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝\n  ███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║\n  ╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║\n       ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║\n       ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝\n\n      ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗\n      ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗\n      █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║\n      ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║\n      ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝\n      ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝\n```\n","date":"2023-10-19T12:00:19.495Z","updated":"2023-10-19T12:00:19.495Z","path":"/404.html","_id":"clo6whxcg0000dif33w3o2all","layout":"page","content":"<div id=\"vip-container\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗</span><br><span class=\"line\">██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝</span><br><span class=\"line\">███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║</span><br><span class=\"line\">╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║</span><br><span class=\"line\">     ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║</span><br><span class=\"line\">     ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">    ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗</span><br><span class=\"line\">    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗</span><br><span class=\"line\">    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║</span><br><span class=\"line\">    ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║</span><br><span class=\"line\">    ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝</span><br><span class=\"line\">    ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝</span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":471,"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗</span><br><span class=\"line\">██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝</span><br><span class=\"line\">███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║</span><br><span class=\"line\">╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║</span><br><span class=\"line\">     ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║</span><br><span class=\"line\">     ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">    ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗</span><br><span class=\"line\">    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗</span><br><span class=\"line\">    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║</span><br><span class=\"line\">    ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║</span><br><span class=\"line\">    ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝</span><br><span class=\"line\">    ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝</span><br></pre></td></tr></table></figure>\n"},{"title":"categories","date":"2023-10-18T13:35:55.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-10-18 21:35:55\ntype: categories\n---\n","updated":"2023-10-19T09:02:13.376Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clo6whxcm0002dif34vju684o","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":0,"excerpt":"","more":""},{"title":"archives","date":"2023-10-18T13:51:12.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2023-10-18 21:51:12\ntype: archives\n---\n","updated":"2023-10-19T09:02:13.376Z","path":"archives/index.html","comments":1,"layout":"page","_id":"clo6whxcp0006dif32ix44k4r","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":0,"excerpt":"","more":""},{"title":"docs","date":"2023-10-19T09:39:06.000Z","_content":"","source":"docs/index.md","raw":"---\ntitle: docs\ndate: 2023-10-19 17:39:06\n---\n","updated":"2023-10-19T12:00:19.495Z","path":"docs/index.html","_id":"clo6whxcq0008dif372bs7lpg","comments":1,"layout":"page","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":0,"excerpt":"","more":""},{"title":"有关于我","date":"2023-10-21T06:17:15.000Z","_content":"\n------\n\n#### 个人信息\n\n- 性 别：男 \t\t\t\t\t\t\t\t\t\t\t  年 龄：27\n- 手 机：15594555052                           邮 箱：songsshao@foxmail.com\n- 专 业：计算机科学与技术                    岗 位：研发工程师\n\n------\n\n#### 工作及教育经历\n\n- 博彦科技：前端开发⼯程师 \t\t\t\t\t          2021.08.16 ~ 至今\n- 神玥软件：软件开发⼯程师部⻔技术负责⼈\t2019.07.03 ~  2021.08.13\n- 安康学院 \t\t\t\t\t \t\t\t\t\t                    2015.09.01 ~ 2019.06.24\n\n------\n\n#### 专业技能\n\n- 熟练使用：React、JavaScript、HTML、CSS、TypeScript、Java\n- 前端框架：Taro-UI、JQuery、Echarts、Antd、ThreeJS\n- 前端服务层：Mobx、Redux\n- 前端请求服务：Axios、Ajax、fetch\n- 前端资源加载/打包⼯具：Webpack 、UmiJS、Vite\n- 后端微服务框架：SpringBoot\n- 后端服务框架：SpringMVC、Struct2\n- 后端Jdbc层：MyBatis、Hibernate\n- 框架：Django、Pillow、requests、urllib3、bs4、Selemiun、lxml\n- 数据库：MySQL、Oracle、Redis、SqLite、memcache\n- 服务器：Tomcat、Nginx\n- 算法：快速排序、深度优先策略、贪心算法\n\n------\n\n#### 项目经历\n\n1. 博彦科技 - 某某云开发平台 - 2020年9⽉⾄今\n   - 职 责：主要负责项⽬开发、框架服务维护、⾃动化部署、处理程序紧急问题等职责\n   - 内 容：在项⽬期间负责前端⻚⾯设计、开发、维护等。主要通过该项⽬对⾃⼰的个⼈技能有了⼀个较强的提升，对于⾃⼰的知识⾯有了⼀个更⾼层次的认知，使⽤第三⽅⼯具进⾏快速开发，采⽤React技术栈和其周边⼯具开发，项⽬架构采⽤umiJs + vite 协同开发模式。技术难度是项目系统结构复杂，系统代码老旧，改造升级难度大大增加。\n\n\n\n2. 神玥软件 - ⼴东动态监管平台 - 2020年6⽉⾄2021年7⽉\n\n   - 职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责\n\n   - 内 容：在该项⽬中同样采⽤全后端分离架构，该项⽬中不同之处在于使⽤架构发⽣改变，增加使⽤接⼝获取数据、动态切换数据源等。\n\n   - 项⽬架构：\n\n     前端+展示服务后台+数据抓取服务端+定时器数据处理服务端+接⼝获取数据端+第三⽅数据获取服务端组成。\n\n     在前端开发中，项⽬使⽤4层架构进程⻚⾯处理，临时数据存储使⽤session进⾏，使⽤有效⻚⾯数据传输保证⻚⾯独⽴性、依赖性降低、项⽬可扩展性增加、便与开发进⾏。\n\n     在定时器数据处理服务端不同之处，在于其需要兼容多中不同数据源，主要包oracle、db2(及其as400版本)、MySQL等，兼容其不同语法进⾏处理，连接⼯具类处理，初始化连接等问题，后台数据报⽂传输使⽤某某加密⽅式实现。\n\n     第三⽅接⼝程序实现主要是提供于第三⽅进⾏对接数据，汇总返回数据，进⾏数据统计，完成展示。\n\n   - 技 术：React、antd、Spring、SpringBoot、mybatis、SpringSecurity、oauth2、Sqlite、MySQL、redis等。\n\n\n\n3. 神玥软件 - 公积⾦监督管理云平台 - 2019年8⽉⾄2020年5⽉\n\n   - 职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责\n\n   - 内 容：在公积⾦监督管理云平台开发中，使⽤前后端分离架构。\n\n   - 项⽬架构： 前端+展示服务后台+数据抓取服务端+定时器数据处理服务端组成。在前端开发中，使⽤React开发框架辅助antd、amap、echarts、mobx、Axios等，借助webpack打包压缩⽂件等技术实现前端开发任务。\n\n     在后端技术⽀撑⽅⾯使⽤SpringBoot微服务框架，进⾏数据展示层⾯服务服务端程序编写。\n\n     在数据获取⽅⾯，数据均来⾃于各现场数据库，编写定时器服务端程序，使⽤频率为5 分钟到1⼩时不等等⽅法策略实现，适⽤于各种不同的核⼼版本库，通过sqlite轻量级数据库进⾏数据暂存，等待公司客户端服务器抓取数据，该技术由于公司限制使⽤该⽅法策略实现，在程序实现⽅⾯使⽤mybatis解析SQL⽅式编写，xml配置⽂件进⾏SQL配置，通过dao4j进⾏xml解析获取对应sql，使⽤XMLScriptBuilder进⾏获取SQL处理⽣成sqlSource资源，根据sqlSource获取boundSql对象获取编译后带有占位符资源对象，获取占位符信息数据，替换对应参数完成可执⾏sql。\n\n     在数据抓取客户端使⽤5分钟频率去更新数据，实时抓取数据与数据可进⾏⽐较并且进⾏更新。\n\n     对接使⽤微型前端服务框架，加载第三⽅服务程序。\n\n   - 技 术：React、antd、Spring、SpringBoot、mybatis、Sqlite、MySQL、redis等。\n\n\n\n4. 个人项目 - 微信⼩程序API+停⻋场客户端编写 - 2018年11⽉⾄-2019年1⽉\n   - 职 责：项⽬设计、需求、开发、部署等\n   - 内 容：该项⽬主要使⽤微信⼩程序、Django框架、H5前端完成。后端基于Django框架，主要是在Django框架中进⾏setting.py 配置，url编写，数据库模型创建、映射⽂件，view视图编写，服务代码编写。Api返回数据序列化处理、json数据处理。进⾏停⻋场实时数据监控数据处理。并且使⽤window 2008 server R2 进⾏环境部署，服务器搭建使⽤ nginx+fastCGI+Django进⾏配置，使⽤https进⾏数据访问。\n   - 职 责：负责编写model、admin、view、API编写、⽀付接⼝编写；\n   - 开发⼯具、语⾔及框架：JetBrains PyCharm、MySQL、Dreamweaver、Photoshop、Python、Django、HTML、CSS、JavaScript、Ajax、jQuery、Bootstrap以及Python开源框架。\n5. 个人项目 - 爬取wikipedia深度为3的超链接\n   - 内 容：Wikipedia 深度为3的所有URL资源链接的获取（1000万条记录），采取进程的⽅法进⾏访问Wikipedia，根据深度优先策略进⾏URL第⼆层资源遍历获取第三层URL资源。在数据处理过程中，使⽤request2技术获取源码、解析拦截⽆⽤⽂件，使⽤lxml技术进⾏分离出需要数据，并且检测出可⽤链接， 后进⾏URL保存到本地资源。\n   - 难 点：在获取Wikipedia 网站数据的时候需要处理反爬虫、过滤网站数据、获取需要的资源进行解析。\n\n------\n\n#### 获奖经历\n\n- 博彦科技 - 技术之星\n- 信息安全一级证书\n\n------\n\n#### ⾃我评价\n\n- 爱 好：骑⾏、登⼭、旅游、⽻⽑球、篮球、乒乓球。\n- 评 价：在我的从事计算机⾏业学习到⼯作也有6年之久，从刚开始对计算机的感兴趣到现在的⼯作，以及它成为了我⽣活不可或缺的⼀部分，都是⼀个变化和不多学习的过程，在这个过程中，经历了太多太多的苦难，从刚开始的⼀窍不通到现在的应⽤⾃如以及更深层次的了解，都是在不断⾃学中成⻓起来。需要这般⾃学就必须要有⾃学的动⼒和持之以恒的坚持都是不可缺少的。学习过程中不断的纠正⾃⼰学的⽅向，处理存在的问题以及快速处理问题的解决⽅法，都是⼀个能⼒的提升。 后还有就是对这个⾏业的热爱。","source":"about/me.md","raw":"---\ntitle: 有关于我\npermalink: /about/me.html\ndate: 2023-10-21 14:17:15\n---\n\n------\n\n#### 个人信息\n\n- 性 别：男 \t\t\t\t\t\t\t\t\t\t\t  年 龄：27\n- 手 机：15594555052                           邮 箱：songsshao@foxmail.com\n- 专 业：计算机科学与技术                    岗 位：研发工程师\n\n------\n\n#### 工作及教育经历\n\n- 博彦科技：前端开发⼯程师 \t\t\t\t\t          2021.08.16 ~ 至今\n- 神玥软件：软件开发⼯程师部⻔技术负责⼈\t2019.07.03 ~  2021.08.13\n- 安康学院 \t\t\t\t\t \t\t\t\t\t                    2015.09.01 ~ 2019.06.24\n\n------\n\n#### 专业技能\n\n- 熟练使用：React、JavaScript、HTML、CSS、TypeScript、Java\n- 前端框架：Taro-UI、JQuery、Echarts、Antd、ThreeJS\n- 前端服务层：Mobx、Redux\n- 前端请求服务：Axios、Ajax、fetch\n- 前端资源加载/打包⼯具：Webpack 、UmiJS、Vite\n- 后端微服务框架：SpringBoot\n- 后端服务框架：SpringMVC、Struct2\n- 后端Jdbc层：MyBatis、Hibernate\n- 框架：Django、Pillow、requests、urllib3、bs4、Selemiun、lxml\n- 数据库：MySQL、Oracle、Redis、SqLite、memcache\n- 服务器：Tomcat、Nginx\n- 算法：快速排序、深度优先策略、贪心算法\n\n------\n\n#### 项目经历\n\n1. 博彦科技 - 某某云开发平台 - 2020年9⽉⾄今\n   - 职 责：主要负责项⽬开发、框架服务维护、⾃动化部署、处理程序紧急问题等职责\n   - 内 容：在项⽬期间负责前端⻚⾯设计、开发、维护等。主要通过该项⽬对⾃⼰的个⼈技能有了⼀个较强的提升，对于⾃⼰的知识⾯有了⼀个更⾼层次的认知，使⽤第三⽅⼯具进⾏快速开发，采⽤React技术栈和其周边⼯具开发，项⽬架构采⽤umiJs + vite 协同开发模式。技术难度是项目系统结构复杂，系统代码老旧，改造升级难度大大增加。\n\n\n\n2. 神玥软件 - ⼴东动态监管平台 - 2020年6⽉⾄2021年7⽉\n\n   - 职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责\n\n   - 内 容：在该项⽬中同样采⽤全后端分离架构，该项⽬中不同之处在于使⽤架构发⽣改变，增加使⽤接⼝获取数据、动态切换数据源等。\n\n   - 项⽬架构：\n\n     前端+展示服务后台+数据抓取服务端+定时器数据处理服务端+接⼝获取数据端+第三⽅数据获取服务端组成。\n\n     在前端开发中，项⽬使⽤4层架构进程⻚⾯处理，临时数据存储使⽤session进⾏，使⽤有效⻚⾯数据传输保证⻚⾯独⽴性、依赖性降低、项⽬可扩展性增加、便与开发进⾏。\n\n     在定时器数据处理服务端不同之处，在于其需要兼容多中不同数据源，主要包oracle、db2(及其as400版本)、MySQL等，兼容其不同语法进⾏处理，连接⼯具类处理，初始化连接等问题，后台数据报⽂传输使⽤某某加密⽅式实现。\n\n     第三⽅接⼝程序实现主要是提供于第三⽅进⾏对接数据，汇总返回数据，进⾏数据统计，完成展示。\n\n   - 技 术：React、antd、Spring、SpringBoot、mybatis、SpringSecurity、oauth2、Sqlite、MySQL、redis等。\n\n\n\n3. 神玥软件 - 公积⾦监督管理云平台 - 2019年8⽉⾄2020年5⽉\n\n   - 职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责\n\n   - 内 容：在公积⾦监督管理云平台开发中，使⽤前后端分离架构。\n\n   - 项⽬架构： 前端+展示服务后台+数据抓取服务端+定时器数据处理服务端组成。在前端开发中，使⽤React开发框架辅助antd、amap、echarts、mobx、Axios等，借助webpack打包压缩⽂件等技术实现前端开发任务。\n\n     在后端技术⽀撑⽅⾯使⽤SpringBoot微服务框架，进⾏数据展示层⾯服务服务端程序编写。\n\n     在数据获取⽅⾯，数据均来⾃于各现场数据库，编写定时器服务端程序，使⽤频率为5 分钟到1⼩时不等等⽅法策略实现，适⽤于各种不同的核⼼版本库，通过sqlite轻量级数据库进⾏数据暂存，等待公司客户端服务器抓取数据，该技术由于公司限制使⽤该⽅法策略实现，在程序实现⽅⾯使⽤mybatis解析SQL⽅式编写，xml配置⽂件进⾏SQL配置，通过dao4j进⾏xml解析获取对应sql，使⽤XMLScriptBuilder进⾏获取SQL处理⽣成sqlSource资源，根据sqlSource获取boundSql对象获取编译后带有占位符资源对象，获取占位符信息数据，替换对应参数完成可执⾏sql。\n\n     在数据抓取客户端使⽤5分钟频率去更新数据，实时抓取数据与数据可进⾏⽐较并且进⾏更新。\n\n     对接使⽤微型前端服务框架，加载第三⽅服务程序。\n\n   - 技 术：React、antd、Spring、SpringBoot、mybatis、Sqlite、MySQL、redis等。\n\n\n\n4. 个人项目 - 微信⼩程序API+停⻋场客户端编写 - 2018年11⽉⾄-2019年1⽉\n   - 职 责：项⽬设计、需求、开发、部署等\n   - 内 容：该项⽬主要使⽤微信⼩程序、Django框架、H5前端完成。后端基于Django框架，主要是在Django框架中进⾏setting.py 配置，url编写，数据库模型创建、映射⽂件，view视图编写，服务代码编写。Api返回数据序列化处理、json数据处理。进⾏停⻋场实时数据监控数据处理。并且使⽤window 2008 server R2 进⾏环境部署，服务器搭建使⽤ nginx+fastCGI+Django进⾏配置，使⽤https进⾏数据访问。\n   - 职 责：负责编写model、admin、view、API编写、⽀付接⼝编写；\n   - 开发⼯具、语⾔及框架：JetBrains PyCharm、MySQL、Dreamweaver、Photoshop、Python、Django、HTML、CSS、JavaScript、Ajax、jQuery、Bootstrap以及Python开源框架。\n5. 个人项目 - 爬取wikipedia深度为3的超链接\n   - 内 容：Wikipedia 深度为3的所有URL资源链接的获取（1000万条记录），采取进程的⽅法进⾏访问Wikipedia，根据深度优先策略进⾏URL第⼆层资源遍历获取第三层URL资源。在数据处理过程中，使⽤request2技术获取源码、解析拦截⽆⽤⽂件，使⽤lxml技术进⾏分离出需要数据，并且检测出可⽤链接， 后进⾏URL保存到本地资源。\n   - 难 点：在获取Wikipedia 网站数据的时候需要处理反爬虫、过滤网站数据、获取需要的资源进行解析。\n\n------\n\n#### 获奖经历\n\n- 博彦科技 - 技术之星\n- 信息安全一级证书\n\n------\n\n#### ⾃我评价\n\n- 爱 好：骑⾏、登⼭、旅游、⽻⽑球、篮球、乒乓球。\n- 评 价：在我的从事计算机⾏业学习到⼯作也有6年之久，从刚开始对计算机的感兴趣到现在的⼯作，以及它成为了我⽣活不可或缺的⼀部分，都是⼀个变化和不多学习的过程，在这个过程中，经历了太多太多的苦难，从刚开始的⼀窍不通到现在的应⽤⾃如以及更深层次的了解，都是在不断⾃学中成⻓起来。需要这般⾃学就必须要有⾃学的动⼒和持之以恒的坚持都是不可缺少的。学习过程中不断的纠正⾃⼰学的⽅向，处理存在的问题以及快速处理问题的解决⽅法，都是⼀个能⼒的提升。 后还有就是对这个⾏业的热爱。","updated":"2023-10-21T14:49:24.216Z","path":"/about/me.html","_id":"clo6whxcr000adif300ovcfaw","comments":1,"layout":"page","content":"<div id=\"vip-container\"><hr>\n<h4 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h4><ul>\n<li>性 别：男 \t\t\t\t\t\t\t\t\t\t\t  年 龄：27</li>\n<li>手 机：15594555052                           邮 箱：<a href=\"mailto:&#x73;&#111;&#x6e;&#103;&#x73;&#x73;&#x68;&#x61;&#111;&#64;&#102;&#111;&#x78;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;\">&#x73;&#111;&#x6e;&#103;&#x73;&#x73;&#x68;&#x61;&#111;&#64;&#102;&#111;&#x78;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a></li>\n<li>专 业：计算机科学与技术                    岗 位：研发工程师</li>\n</ul>\n<hr>\n<h4 id=\"工作及教育经历\"><a href=\"#工作及教育经历\" class=\"headerlink\" title=\"工作及教育经历\"></a>工作及教育经历</h4><ul>\n<li>博彦科技：前端开发⼯程师 \t\t\t\t\t          2021.08.16 ~ 至今</li>\n<li>神玥软件：软件开发⼯程师部⻔技术负责⼈\t2019.07.03 ~  2021.08.13</li>\n<li>安康学院 \t\t\t\t\t \t\t\t\t\t                    2015.09.01 ~ 2019.06.24</li>\n</ul>\n<hr>\n<h4 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h4><ul>\n<li>熟练使用：React、JavaScript、HTML、CSS、TypeScript、Java</li>\n<li>前端框架：Taro-UI、JQuery、Echarts、Antd、ThreeJS</li>\n<li>前端服务层：Mobx、Redux</li>\n<li>前端请求服务：Axios、Ajax、fetch</li>\n<li>前端资源加载&#x2F;打包⼯具：Webpack 、UmiJS、Vite</li>\n<li>后端微服务框架：SpringBoot</li>\n<li>后端服务框架：SpringMVC、Struct2</li>\n<li>后端Jdbc层：MyBatis、Hibernate</li>\n<li>框架：Django、Pillow、requests、urllib3、bs4、Selemiun、lxml</li>\n<li>数据库：MySQL、Oracle、Redis、SqLite、memcache</li>\n<li>服务器：Tomcat、Nginx</li>\n<li>算法：快速排序、深度优先策略、贪心算法</li>\n</ul>\n<hr>\n<h4 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h4><ol>\n<li><p>博彦科技 - 某某云开发平台 - 2020年9⽉⾄今</p>\n<ul>\n<li>职 责：主要负责项⽬开发、框架服务维护、⾃动化部署、处理程序紧急问题等职责</li>\n<li>内 容：在项⽬期间负责前端⻚⾯设计、开发、维护等。主要通过该项⽬对⾃⼰的个⼈技能有了⼀个较强的提升，对于⾃⼰的知识⾯有了⼀个更⾼层次的认知，使⽤第三⽅⼯具进⾏快速开发，采⽤React技术栈和其周边⼯具开发，项⽬架构采⽤umiJs + vite 协同开发模式。技术难度是项目系统结构复杂，系统代码老旧，改造升级难度大大增加。</li>\n</ul>\n</li>\n<li><p>神玥软件 - ⼴东动态监管平台 - 2020年6⽉⾄2021年7⽉</p>\n<ul>\n<li><p>职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责</p>\n</li>\n<li><p>内 容：在该项⽬中同样采⽤全后端分离架构，该项⽬中不同之处在于使⽤架构发⽣改变，增加使⽤接⼝获取数据、动态切换数据源等。</p>\n</li>\n<li><p>项⽬架构：</p>\n<p>前端+展示服务后台+数据抓取服务端+定时器数据处理服务端+接⼝获取数据端+第三⽅数据获取服务端组成。</p>\n<p>在前端开发中，项⽬使⽤4层架构进程⻚⾯处理，临时数据存储使⽤session进⾏，使⽤有效⻚⾯数据传输保证⻚⾯独⽴性、依赖性降低、项⽬可扩展性增加、便与开发进⾏。</p>\n<p>在定时器数据处理服务端不同之处，在于其需要兼容多中不同数据源，主要包oracle、db2(及其as400版本)、MySQL等，兼容其不同语法进⾏处理，连接⼯具类处理，初始化连接等问题，后台数据报⽂传输使⽤某某加密⽅式实现。</p>\n<p>第三⽅接⼝程序实现主要是提供于第三⽅进⾏对接数据，汇总返回数据，进⾏数据统计，完成展示。</p>\n</li>\n<li><p>技 术：React、antd、Spring、SpringBoot、mybatis、SpringSecurity、oauth2、Sqlite、MySQL、redis等。</p>\n</li>\n</ul>\n</li>\n<li><p>神玥软件 - 公积⾦监督管理云平台 - 2019年8⽉⾄2020年5⽉</p>\n<ul>\n<li><p>职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责</p>\n</li>\n<li><p>内 容：在公积⾦监督管理云平台开发中，使⽤前后端分离架构。</p>\n</li>\n<li><p>项⽬架构： 前端+展示服务后台+数据抓取服务端+定时器数据处理服务端组成。在前端开发中，使⽤React开发框架辅助antd、amap、echarts、mobx、Axios等，借助webpack打包压缩⽂件等技术实现前端开发任务。</p>\n<p>在后端技术⽀撑⽅⾯使⽤SpringBoot微服务框架，进⾏数据展示层⾯服务服务端程序编写。</p>\n<p>在数据获取⽅⾯，数据均来⾃于各现场数据库，编写定时器服务端程序，使⽤频率为5 分钟到1⼩时不等等⽅法策略实现，适⽤于各种不同的核⼼版本库，通过sqlite轻量级数据库进⾏数据暂存，等待公司客户端服务器抓取数据，该技术由于公司限制使⽤该⽅法策略实现，在程序实现⽅⾯使⽤mybatis解析SQL⽅式编写，xml配置⽂件进⾏SQL配置，通过dao4j进⾏xml解析获取对应sql，使⽤XMLScriptBuilder进⾏获取SQL处理⽣成sqlSource资源，根据sqlSource获取boundSql对象获取编译后带有占位符资源对象，获取占位符信息数据，替换对应参数完成可执⾏sql。</p>\n<p>在数据抓取客户端使⽤5分钟频率去更新数据，实时抓取数据与数据可进⾏⽐较并且进⾏更新。</p>\n<p>对接使⽤微型前端服务框架，加载第三⽅服务程序。</p>\n</li>\n<li><p>技 术：React、antd、Spring、SpringBoot、mybatis、Sqlite、MySQL、redis等。</p>\n</li>\n</ul>\n</li>\n<li><p>个人项目 - 微信⼩程序API+停⻋场客户端编写 - 2018年11⽉⾄-2019年1⽉</p>\n<ul>\n<li>职 责：项⽬设计、需求、开发、部署等</li>\n<li>内 容：该项⽬主要使⽤微信⼩程序、Django框架、H5前端完成。后端基于Django框架，主要是在Django框架中进⾏setting.py 配置，url编写，数据库模型创建、映射⽂件，view视图编写，服务代码编写。Api返回数据序列化处理、json数据处理。进⾏停⻋场实时数据监控数据处理。并且使⽤window 2008 server R2 进⾏环境部署，服务器搭建使⽤ nginx+fastCGI+Django进⾏配置，使⽤https进⾏数据访问。</li>\n<li>职 责：负责编写model、admin、view、API编写、⽀付接⼝编写；</li>\n<li>开发⼯具、语⾔及框架：JetBrains PyCharm、MySQL、Dreamweaver、Photoshop、Python、Django、HTML、CSS、JavaScript、Ajax、jQuery、Bootstrap以及Python开源框架。</li>\n</ul>\n</li>\n<li><p>个人项目 - 爬取wikipedia深度为3的超链接</p>\n<ul>\n<li>内 容：Wikipedia 深度为3的所有URL资源链接的获取（1000万条记录），采取进程的⽅法进⾏访问Wikipedia，根据深度优先策略进⾏URL第⼆层资源遍历获取第三层URL资源。在数据处理过程中，使⽤request2技术获取源码、解析拦截⽆⽤⽂件，使⽤lxml技术进⾏分离出需要数据，并且检测出可⽤链接， 后进⾏URL保存到本地资源。</li>\n<li>难 点：在获取Wikipedia 网站数据的时候需要处理反爬虫、过滤网站数据、获取需要的资源进行解析。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"获奖经历\"><a href=\"#获奖经历\" class=\"headerlink\" title=\"获奖经历\"></a>获奖经历</h4><ul>\n<li>博彦科技 - 技术之星</li>\n<li>信息安全一级证书</li>\n</ul>\n<hr>\n<h4 id=\"⾃我评价\"><a href=\"#⾃我评价\" class=\"headerlink\" title=\"⾃我评价\"></a>⾃我评价</h4><ul>\n<li>爱 好：骑⾏、登⼭、旅游、⽻⽑球、篮球、乒乓球。</li>\n<li>评 价：在我的从事计算机⾏业学习到⼯作也有6年之久，从刚开始对计算机的感兴趣到现在的⼯作，以及它成为了我⽣活不可或缺的⼀部分，都是⼀个变化和不多学习的过程，在这个过程中，经历了太多太多的苦难，从刚开始的⼀窍不通到现在的应⽤⾃如以及更深层次的了解，都是在不断⾃学中成⻓起来。需要这般⾃学就必须要有⾃学的动⼒和持之以恒的坚持都是不可缺少的。学习过程中不断的纠正⾃⼰学的⽅向，处理存在的问题以及快速处理问题的解决⽅法，都是⼀个能⼒的提升。 后还有就是对这个⾏业的热爱。</li>\n</ul>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":2972,"excerpt":"","more":"<hr>\n<h4 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h4><ul>\n<li>性 别：男 \t\t\t\t\t\t\t\t\t\t\t  年 龄：27</li>\n<li>手 机：15594555052                           邮 箱：<a href=\"mailto:&#x73;&#111;&#x6e;&#103;&#x73;&#x73;&#x68;&#x61;&#111;&#64;&#102;&#111;&#x78;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;\">&#x73;&#111;&#x6e;&#103;&#x73;&#x73;&#x68;&#x61;&#111;&#64;&#102;&#111;&#x78;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a></li>\n<li>专 业：计算机科学与技术                    岗 位：研发工程师</li>\n</ul>\n<hr>\n<h4 id=\"工作及教育经历\"><a href=\"#工作及教育经历\" class=\"headerlink\" title=\"工作及教育经历\"></a>工作及教育经历</h4><ul>\n<li>博彦科技：前端开发⼯程师 \t\t\t\t\t          2021.08.16 ~ 至今</li>\n<li>神玥软件：软件开发⼯程师部⻔技术负责⼈\t2019.07.03 ~  2021.08.13</li>\n<li>安康学院 \t\t\t\t\t \t\t\t\t\t                    2015.09.01 ~ 2019.06.24</li>\n</ul>\n<hr>\n<h4 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h4><ul>\n<li>熟练使用：React、JavaScript、HTML、CSS、TypeScript、Java</li>\n<li>前端框架：Taro-UI、JQuery、Echarts、Antd、ThreeJS</li>\n<li>前端服务层：Mobx、Redux</li>\n<li>前端请求服务：Axios、Ajax、fetch</li>\n<li>前端资源加载&#x2F;打包⼯具：Webpack 、UmiJS、Vite</li>\n<li>后端微服务框架：SpringBoot</li>\n<li>后端服务框架：SpringMVC、Struct2</li>\n<li>后端Jdbc层：MyBatis、Hibernate</li>\n<li>框架：Django、Pillow、requests、urllib3、bs4、Selemiun、lxml</li>\n<li>数据库：MySQL、Oracle、Redis、SqLite、memcache</li>\n<li>服务器：Tomcat、Nginx</li>\n<li>算法：快速排序、深度优先策略、贪心算法</li>\n</ul>\n<hr>\n<h4 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h4><ol>\n<li><p>博彦科技 - 某某云开发平台 - 2020年9⽉⾄今</p>\n<ul>\n<li>职 责：主要负责项⽬开发、框架服务维护、⾃动化部署、处理程序紧急问题等职责</li>\n<li>内 容：在项⽬期间负责前端⻚⾯设计、开发、维护等。主要通过该项⽬对⾃⼰的个⼈技能有了⼀个较强的提升，对于⾃⼰的知识⾯有了⼀个更⾼层次的认知，使⽤第三⽅⼯具进⾏快速开发，采⽤React技术栈和其周边⼯具开发，项⽬架构采⽤umiJs + vite 协同开发模式。技术难度是项目系统结构复杂，系统代码老旧，改造升级难度大大增加。</li>\n</ul>\n</li>\n<li><p>神玥软件 - ⼴东动态监管平台 - 2020年6⽉⾄2021年7⽉</p>\n<ul>\n<li><p>职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责</p>\n</li>\n<li><p>内 容：在该项⽬中同样采⽤全后端分离架构，该项⽬中不同之处在于使⽤架构发⽣改变，增加使⽤接⼝获取数据、动态切换数据源等。</p>\n</li>\n<li><p>项⽬架构：</p>\n<p>前端+展示服务后台+数据抓取服务端+定时器数据处理服务端+接⼝获取数据端+第三⽅数据获取服务端组成。</p>\n<p>在前端开发中，项⽬使⽤4层架构进程⻚⾯处理，临时数据存储使⽤session进⾏，使⽤有效⻚⾯数据传输保证⻚⾯独⽴性、依赖性降低、项⽬可扩展性增加、便与开发进⾏。</p>\n<p>在定时器数据处理服务端不同之处，在于其需要兼容多中不同数据源，主要包oracle、db2(及其as400版本)、MySQL等，兼容其不同语法进⾏处理，连接⼯具类处理，初始化连接等问题，后台数据报⽂传输使⽤某某加密⽅式实现。</p>\n<p>第三⽅接⼝程序实现主要是提供于第三⽅进⾏对接数据，汇总返回数据，进⾏数据统计，完成展示。</p>\n</li>\n<li><p>技 术：React、antd、Spring、SpringBoot、mybatis、SpringSecurity、oauth2、Sqlite、MySQL、redis等。</p>\n</li>\n</ul>\n</li>\n<li><p>神玥软件 - 公积⾦监督管理云平台 - 2019年8⽉⾄2020年5⽉</p>\n<ul>\n<li><p>职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责</p>\n</li>\n<li><p>内 容：在公积⾦监督管理云平台开发中，使⽤前后端分离架构。</p>\n</li>\n<li><p>项⽬架构： 前端+展示服务后台+数据抓取服务端+定时器数据处理服务端组成。在前端开发中，使⽤React开发框架辅助antd、amap、echarts、mobx、Axios等，借助webpack打包压缩⽂件等技术实现前端开发任务。</p>\n<p>在后端技术⽀撑⽅⾯使⽤SpringBoot微服务框架，进⾏数据展示层⾯服务服务端程序编写。</p>\n<p>在数据获取⽅⾯，数据均来⾃于各现场数据库，编写定时器服务端程序，使⽤频率为5 分钟到1⼩时不等等⽅法策略实现，适⽤于各种不同的核⼼版本库，通过sqlite轻量级数据库进⾏数据暂存，等待公司客户端服务器抓取数据，该技术由于公司限制使⽤该⽅法策略实现，在程序实现⽅⾯使⽤mybatis解析SQL⽅式编写，xml配置⽂件进⾏SQL配置，通过dao4j进⾏xml解析获取对应sql，使⽤XMLScriptBuilder进⾏获取SQL处理⽣成sqlSource资源，根据sqlSource获取boundSql对象获取编译后带有占位符资源对象，获取占位符信息数据，替换对应参数完成可执⾏sql。</p>\n<p>在数据抓取客户端使⽤5分钟频率去更新数据，实时抓取数据与数据可进⾏⽐较并且进⾏更新。</p>\n<p>对接使⽤微型前端服务框架，加载第三⽅服务程序。</p>\n</li>\n<li><p>技 术：React、antd、Spring、SpringBoot、mybatis、Sqlite、MySQL、redis等。</p>\n</li>\n</ul>\n</li>\n<li><p>个人项目 - 微信⼩程序API+停⻋场客户端编写 - 2018年11⽉⾄-2019年1⽉</p>\n<ul>\n<li>职 责：项⽬设计、需求、开发、部署等</li>\n<li>内 容：该项⽬主要使⽤微信⼩程序、Django框架、H5前端完成。后端基于Django框架，主要是在Django框架中进⾏setting.py 配置，url编写，数据库模型创建、映射⽂件，view视图编写，服务代码编写。Api返回数据序列化处理、json数据处理。进⾏停⻋场实时数据监控数据处理。并且使⽤window 2008 server R2 进⾏环境部署，服务器搭建使⽤ nginx+fastCGI+Django进⾏配置，使⽤https进⾏数据访问。</li>\n<li>职 责：负责编写model、admin、view、API编写、⽀付接⼝编写；</li>\n<li>开发⼯具、语⾔及框架：JetBrains PyCharm、MySQL、Dreamweaver、Photoshop、Python、Django、HTML、CSS、JavaScript、Ajax、jQuery、Bootstrap以及Python开源框架。</li>\n</ul>\n</li>\n<li><p>个人项目 - 爬取wikipedia深度为3的超链接</p>\n<ul>\n<li>内 容：Wikipedia 深度为3的所有URL资源链接的获取（1000万条记录），采取进程的⽅法进⾏访问Wikipedia，根据深度优先策略进⾏URL第⼆层资源遍历获取第三层URL资源。在数据处理过程中，使⽤request2技术获取源码、解析拦截⽆⽤⽂件，使⽤lxml技术进⾏分离出需要数据，并且检测出可⽤链接， 后进⾏URL保存到本地资源。</li>\n<li>难 点：在获取Wikipedia 网站数据的时候需要处理反爬虫、过滤网站数据、获取需要的资源进行解析。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"获奖经历\"><a href=\"#获奖经历\" class=\"headerlink\" title=\"获奖经历\"></a>获奖经历</h4><ul>\n<li>博彦科技 - 技术之星</li>\n<li>信息安全一级证书</li>\n</ul>\n<hr>\n<h4 id=\"⾃我评价\"><a href=\"#⾃我评价\" class=\"headerlink\" title=\"⾃我评价\"></a>⾃我评价</h4><ul>\n<li>爱 好：骑⾏、登⼭、旅游、⽻⽑球、篮球、乒乓球。</li>\n<li>评 价：在我的从事计算机⾏业学习到⼯作也有6年之久，从刚开始对计算机的感兴趣到现在的⼯作，以及它成为了我⽣活不可或缺的⼀部分，都是⼀个变化和不多学习的过程，在这个过程中，经历了太多太多的苦难，从刚开始的⼀窍不通到现在的应⽤⾃如以及更深层次的了解，都是在不断⾃学中成⻓起来。需要这般⾃学就必须要有⾃学的动⼒和持之以恒的坚持都是不可缺少的。学习过程中不断的纠正⾃⼰学的⽅向，处理存在的问题以及快速处理问题的解决⽅法，都是⼀个能⼒的提升。 后还有就是对这个⾏业的热爱。</li>\n</ul>\n"},{"title":"schedule","date":"2023-10-18T13:50:02.000Z","type":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2023-10-18 21:50:02\ntype: schedule\n---\n","updated":"2023-10-19T09:02:13.383Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"clo6whxcu000edif3hxp3fggr","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":0,"excerpt":"","more":""},{"title":"Tags","date":"2023-10-18T13:33:27.000Z","type":"tags","comments":1,"toc":{"enable":true,"number":false,"max_depth":3},"reward_settings":{"enable":true,"comment":"Buy me a coffee"},"quicklink":{"enable":true,"delay":true,"timeout":3000,"priority":true},"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2023-10-18 21:33:27\ntype: tags\ncomments: true\ntoc:\n  enable: true\n  number: false\n  max_depth: 3\nreward_settings:\n  enable: true\n  comment: Buy me a coffee\nquicklink:\n  enable: true\n  delay: true\n  timeout: 3000\n  priority: true\n---\n","updated":"2023-10-21T13:47:30.419Z","path":"tags/index.html","_id":"clo6whxcv000gdif3gzm5avsw","layout":"page","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":0,"excerpt":"","more":""}],"Post":[{"title":"浏览器缓存的全过程","date":"2023-10-20T08:29:38.000Z","description":"浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用","comments":1,"_content":"\n### 浏览器缓存的全过程\n\n![浏览器缓存的全过程](https://pic.imgdb.cn/item/65323b8ec458853aef72a6ad.png)\n\n浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；\n\n下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上次返回 200 的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取数据资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；\n\n如果资源已过期，则标明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；\n\n服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；\n\n如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间作对比，一致则命中协商缓存，返回 304；\n\n不一致则返回新的 last-modified 和文件并返回200；\n","source":"_posts/browser/mechanismCache.md","raw":"---\ntitle: 浏览器缓存的全过程\npermalink: /browser/mechanism/cache.html\ndate: 2023-10-20 16:29:38\ndescription: 浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用\ntag: [前端, 浏览器]\ncomments: true\ncategories: \n - 浏览器\n - 缓存\n---\n\n### 浏览器缓存的全过程\n\n![浏览器缓存的全过程](https://pic.imgdb.cn/item/65323b8ec458853aef72a6ad.png)\n\n浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；\n\n下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上次返回 200 的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取数据资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；\n\n如果资源已过期，则标明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；\n\n服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；\n\n如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间作对比，一致则命中协商缓存，返回 304；\n\n不一致则返回新的 last-modified 和文件并返回200；\n","slug":"browser/mechanismCache","published":1,"updated":"2023-10-21T13:54:38.597Z","__permalink":"/browser/mechanism/cache.html","_id":"clo6whxcq0007dif3g3tqgqy7","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h3 id=\"浏览器缓存的全过程\"><a href=\"#浏览器缓存的全过程\" class=\"headerlink\" title=\"浏览器缓存的全过程\"></a>浏览器缓存的全过程</h3><p><img src=\"https://pic.imgdb.cn/item/65323b8ec458853aef72a6ad.png\" alt=\"浏览器缓存的全过程\"></p>\n<p>浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；</p>\n<p>下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上次返回 200 的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取数据资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；</p>\n<p>如果资源已过期，则标明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；</p>\n<p>服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；</p>\n<p>如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间作对比，一致则命中协商缓存，返回 304；</p>\n<p>不一致则返回新的 last-modified 和文件并返回200；</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":477,"excerpt":"","more":"<h3 id=\"浏览器缓存的全过程\"><a href=\"#浏览器缓存的全过程\" class=\"headerlink\" title=\"浏览器缓存的全过程\"></a>浏览器缓存的全过程</h3><p><img src=\"https://pic.imgdb.cn/item/65323b8ec458853aef72a6ad.png\" alt=\"浏览器缓存的全过程\"></p>\n<p>浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；</p>\n<p>下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上次返回 200 的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取数据资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；</p>\n<p>如果资源已过期，则标明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；</p>\n<p>服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；</p>\n<p>如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间作对比，一致则命中协商缓存，返回 304；</p>\n<p>不一致则返回新的 last-modified 和文件并返回200；</p>\n"},{"title":"浏览器的渲染进程的线程","date":"2023-10-20T13:23:26.000Z","description":"GUI 渲染线程是在 GUI 应用程序中负责界面渲染的线程。","comments":1,"_content":"\n#### 浏览器的渲染进程的线程\n![在这里插入图片描述](https://pic.imgdb.cn/item/6532800ac458853aef6782e0.png)\n##### GUI 渲染线程\nGUI 渲染线程是在 GUI 应用程序中负责界面渲染的线程。负责渲染浏览器页面，解析 HTML、CSS，构建DOM 树、构建CSSOM树、构建渲染树和绘制页面；当界面需要重绘或由于某种操作引发回流时，该线程就会执行。\n\n在许多 GUI 应用程序中，渲染线程通常会在主线程中运行，这可能会导致界面卡顿或响应时间过长。为了避免这种情况，一些框架和库已经实现了将 GUI 渲染线程与主线程分离的机制，例如 Android 中的 UI 线程和渲染线程分离机制。\n\n当渲染线程与主线程分离时，它可以专注于绘制和更新屏幕上的内容，而主线程则可以处理用户输入和其他逻辑。这样可以提高应用程序的响应速度和用户体验。\n\n**注意**：GUI 渲染线程和 JS 引擎线程是互斥的，当JS 引擎执行时GUI线程会被挂起，GUI 更新会被保存在一个队列中等到JS 引擎空闲时立即被执行。\n\n##### JS 引擎线程\nJS 引擎线程也称为 JS 内核，负责处理Javascript 脚本程序，解析Javascript 脚本，运行代码；JS 引擎线程一直等待着任务队列中任务的到来，然后加以处理，一个 Tab 页中无论什么时候都只有一个JS 引擎线程在运行 JS 程序。\n\n在浏览器环境中，JavaScript 引擎线程负责解释和执行 JavaScript 代码，并将执行结果返回给主线程。JavaScript 引擎线程通常是单线程的，这意味着它只能同时执行一个任务。这就是为什么一些耗时的 JavaScript 代码可以阻止页面的渲染和响应。\n\n为了解决这个问题，浏览器引入了 Web Workers，使得可以使用多个 JavaScript 引擎线程来执行 JavaScript 代码。这些工作线程可以并行地执行 JavaScript 代码，并在完成任务后将结果返回给主线程，从而防止 JavaScript 代码阻塞页面的渲染和响应。\n\n**注意**：GUI 渲染线程与 JS 引擎线程的互斥关系，所以如果JS 执行的时间过长，会造成页面的渲染不连贯，导致页面渲染加载阻塞。\n##### 时间触发线程\n时间触发线程属于浏览器而不是 JS 引擎，用来控制事件循环；当JS引擎执行代码块如 setTimeOut 时（也可是来自浏览器内核的其他线程,如鼠标点击、AJAX 异步请求等），会将对应任务添加到事件触发线程中；当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理。\n\n时间触发线程在浏览器中起着非常重要的作用，因为它们可以帮助网站实现许多不同的功能，包括：\n\n- 启动定时器：当网页需要执行一些定时任务时，可以使用时间触发线程来启动定时器。\n\n- 处理事件：当用户与网页交互时，例如点击按钮或提交表单，时间触发线程将负责处理这些事件并执行相应的回调函数。\n\n- 处理异步请求：当网页需要从服务器获取数据时，可以使用时间触发线程来处理异步请求并执行回调函数。\n\n**注意**：由于 JS 的单线程关系，所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）。\n\n##### 定时器触发进程\n浏览器定时器触发进程是指浏览器中用来触发定时器的进程。在浏览器中，定时器可以使用 JavaScript 的 setTimeout() 和 setInterval() 方法来创建。当设置的时间到达后，浏览器会触发定时器，并执行对应的函数。\n\n定时器触发进程通常由内核管理，它会在特定时间间隔内不断运行，并检查是否有定时器需要触发。当定时器触发时，该进程会将需要执行的任务推入待执行队列中，然后通知主线程执行。主线程会不断检查待执行队列，如果有任务待执行，则将其取出并执行。\n\n需要**注意**的是，如果执行的任务需要较长时间才能完成，会导致主线程阻塞，影响页面的响应速度。因此，应该尽可能避免在定时器中执行复杂的任务，或者使用 Web Worker 在后台执行任务，以避免阻塞主线程。\n\n**注意**：W3C 在 HTML 标准中规定，定时器的定时时间不能小于4ms，如果是小于 4ms，则默认为 4ms。\n\n##### 异步 http 请求线程\n在浏览器中，异步 HTTP 请求线程通常由浏览器内部的 JavaScript 引擎处理。当 JavaScript 代码发起一个异步 HTTP 请求时，浏览器会创建一个新的线程来处理该请求，该线程通常是浏览器的网络线程。在该线程中，浏览器会向服务器发送 HTTP 请求，并等待服务器返回响应。\n\n在等待服务器响应的同时，JavaScript 引擎会继续执行其他代码，不会被阻塞。当服务器返回响应后，浏览器会将响应数据传递给 JavaScript 引擎，在 JavaScript 线程中执行相应的回调函数，用来处理响应数据。\n\n需要注意的是，由于浏览器对跨域请求进行了限制，在异步 HTTP 请求线程中发起的跨域请求需要经过浏览器的安全机制进行处理，一般需要设置相关的请求头或者使用 JSONP 等技术来解决。","source":"_posts/browser/renderProcess.md","raw":"---\ntitle: 浏览器的渲染进程的线程\npermalink: /browser/render/process.html\ndate: 2023-10-20 21:23:26\ndescription: GUI 渲染线程是在 GUI 应用程序中负责界面渲染的线程。\ntag: [前端, 浏览器, GUI]\ncomments: true\ncategories: \n - 浏览器\n - 渲染\n---\n\n#### 浏览器的渲染进程的线程\n![在这里插入图片描述](https://pic.imgdb.cn/item/6532800ac458853aef6782e0.png)\n##### GUI 渲染线程\nGUI 渲染线程是在 GUI 应用程序中负责界面渲染的线程。负责渲染浏览器页面，解析 HTML、CSS，构建DOM 树、构建CSSOM树、构建渲染树和绘制页面；当界面需要重绘或由于某种操作引发回流时，该线程就会执行。\n\n在许多 GUI 应用程序中，渲染线程通常会在主线程中运行，这可能会导致界面卡顿或响应时间过长。为了避免这种情况，一些框架和库已经实现了将 GUI 渲染线程与主线程分离的机制，例如 Android 中的 UI 线程和渲染线程分离机制。\n\n当渲染线程与主线程分离时，它可以专注于绘制和更新屏幕上的内容，而主线程则可以处理用户输入和其他逻辑。这样可以提高应用程序的响应速度和用户体验。\n\n**注意**：GUI 渲染线程和 JS 引擎线程是互斥的，当JS 引擎执行时GUI线程会被挂起，GUI 更新会被保存在一个队列中等到JS 引擎空闲时立即被执行。\n\n##### JS 引擎线程\nJS 引擎线程也称为 JS 内核，负责处理Javascript 脚本程序，解析Javascript 脚本，运行代码；JS 引擎线程一直等待着任务队列中任务的到来，然后加以处理，一个 Tab 页中无论什么时候都只有一个JS 引擎线程在运行 JS 程序。\n\n在浏览器环境中，JavaScript 引擎线程负责解释和执行 JavaScript 代码，并将执行结果返回给主线程。JavaScript 引擎线程通常是单线程的，这意味着它只能同时执行一个任务。这就是为什么一些耗时的 JavaScript 代码可以阻止页面的渲染和响应。\n\n为了解决这个问题，浏览器引入了 Web Workers，使得可以使用多个 JavaScript 引擎线程来执行 JavaScript 代码。这些工作线程可以并行地执行 JavaScript 代码，并在完成任务后将结果返回给主线程，从而防止 JavaScript 代码阻塞页面的渲染和响应。\n\n**注意**：GUI 渲染线程与 JS 引擎线程的互斥关系，所以如果JS 执行的时间过长，会造成页面的渲染不连贯，导致页面渲染加载阻塞。\n##### 时间触发线程\n时间触发线程属于浏览器而不是 JS 引擎，用来控制事件循环；当JS引擎执行代码块如 setTimeOut 时（也可是来自浏览器内核的其他线程,如鼠标点击、AJAX 异步请求等），会将对应任务添加到事件触发线程中；当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理。\n\n时间触发线程在浏览器中起着非常重要的作用，因为它们可以帮助网站实现许多不同的功能，包括：\n\n- 启动定时器：当网页需要执行一些定时任务时，可以使用时间触发线程来启动定时器。\n\n- 处理事件：当用户与网页交互时，例如点击按钮或提交表单，时间触发线程将负责处理这些事件并执行相应的回调函数。\n\n- 处理异步请求：当网页需要从服务器获取数据时，可以使用时间触发线程来处理异步请求并执行回调函数。\n\n**注意**：由于 JS 的单线程关系，所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）。\n\n##### 定时器触发进程\n浏览器定时器触发进程是指浏览器中用来触发定时器的进程。在浏览器中，定时器可以使用 JavaScript 的 setTimeout() 和 setInterval() 方法来创建。当设置的时间到达后，浏览器会触发定时器，并执行对应的函数。\n\n定时器触发进程通常由内核管理，它会在特定时间间隔内不断运行，并检查是否有定时器需要触发。当定时器触发时，该进程会将需要执行的任务推入待执行队列中，然后通知主线程执行。主线程会不断检查待执行队列，如果有任务待执行，则将其取出并执行。\n\n需要**注意**的是，如果执行的任务需要较长时间才能完成，会导致主线程阻塞，影响页面的响应速度。因此，应该尽可能避免在定时器中执行复杂的任务，或者使用 Web Worker 在后台执行任务，以避免阻塞主线程。\n\n**注意**：W3C 在 HTML 标准中规定，定时器的定时时间不能小于4ms，如果是小于 4ms，则默认为 4ms。\n\n##### 异步 http 请求线程\n在浏览器中，异步 HTTP 请求线程通常由浏览器内部的 JavaScript 引擎处理。当 JavaScript 代码发起一个异步 HTTP 请求时，浏览器会创建一个新的线程来处理该请求，该线程通常是浏览器的网络线程。在该线程中，浏览器会向服务器发送 HTTP 请求，并等待服务器返回响应。\n\n在等待服务器响应的同时，JavaScript 引擎会继续执行其他代码，不会被阻塞。当服务器返回响应后，浏览器会将响应数据传递给 JavaScript 引擎，在 JavaScript 线程中执行相应的回调函数，用来处理响应数据。\n\n需要注意的是，由于浏览器对跨域请求进行了限制，在异步 HTTP 请求线程中发起的跨域请求需要经过浏览器的安全机制进行处理，一般需要设置相关的请求头或者使用 JSONP 等技术来解决。","slug":"browser/renderProcess","published":1,"updated":"2023-10-21T13:54:47.996Z","__permalink":"/browser/render/process.html","_id":"clo6whxcr0009dif386ndbd9x","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h4 id=\"浏览器的渲染进程的线程\"><a href=\"#浏览器的渲染进程的线程\" class=\"headerlink\" title=\"浏览器的渲染进程的线程\"></a>浏览器的渲染进程的线程</h4><p><img src=\"https://pic.imgdb.cn/item/6532800ac458853aef6782e0.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"GUI-渲染线程\"><a href=\"#GUI-渲染线程\" class=\"headerlink\" title=\"GUI 渲染线程\"></a>GUI 渲染线程</h5><p>GUI 渲染线程是在 GUI 应用程序中负责界面渲染的线程。负责渲染浏览器页面，解析 HTML、CSS，构建DOM 树、构建CSSOM树、构建渲染树和绘制页面；当界面需要重绘或由于某种操作引发回流时，该线程就会执行。</p>\n<p>在许多 GUI 应用程序中，渲染线程通常会在主线程中运行，这可能会导致界面卡顿或响应时间过长。为了避免这种情况，一些框架和库已经实现了将 GUI 渲染线程与主线程分离的机制，例如 Android 中的 UI 线程和渲染线程分离机制。</p>\n<p>当渲染线程与主线程分离时，它可以专注于绘制和更新屏幕上的内容，而主线程则可以处理用户输入和其他逻辑。这样可以提高应用程序的响应速度和用户体验。</p>\n<p><strong>注意</strong>：GUI 渲染线程和 JS 引擎线程是互斥的，当JS 引擎执行时GUI线程会被挂起，GUI 更新会被保存在一个队列中等到JS 引擎空闲时立即被执行。</p>\n<h5 id=\"JS-引擎线程\"><a href=\"#JS-引擎线程\" class=\"headerlink\" title=\"JS 引擎线程\"></a>JS 引擎线程</h5><p>JS 引擎线程也称为 JS 内核，负责处理Javascript 脚本程序，解析Javascript 脚本，运行代码；JS 引擎线程一直等待着任务队列中任务的到来，然后加以处理，一个 Tab 页中无论什么时候都只有一个JS 引擎线程在运行 JS 程序。</p>\n<p>在浏览器环境中，JavaScript 引擎线程负责解释和执行 JavaScript 代码，并将执行结果返回给主线程。JavaScript 引擎线程通常是单线程的，这意味着它只能同时执行一个任务。这就是为什么一些耗时的 JavaScript 代码可以阻止页面的渲染和响应。</p>\n<p>为了解决这个问题，浏览器引入了 Web Workers，使得可以使用多个 JavaScript 引擎线程来执行 JavaScript 代码。这些工作线程可以并行地执行 JavaScript 代码，并在完成任务后将结果返回给主线程，从而防止 JavaScript 代码阻塞页面的渲染和响应。</p>\n<p><strong>注意</strong>：GUI 渲染线程与 JS 引擎线程的互斥关系，所以如果JS 执行的时间过长，会造成页面的渲染不连贯，导致页面渲染加载阻塞。</p>\n<h5 id=\"时间触发线程\"><a href=\"#时间触发线程\" class=\"headerlink\" title=\"时间触发线程\"></a>时间触发线程</h5><p>时间触发线程属于浏览器而不是 JS 引擎，用来控制事件循环；当JS引擎执行代码块如 setTimeOut 时（也可是来自浏览器内核的其他线程,如鼠标点击、AJAX 异步请求等），会将对应任务添加到事件触发线程中；当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理。</p>\n<p>时间触发线程在浏览器中起着非常重要的作用，因为它们可以帮助网站实现许多不同的功能，包括：</p>\n<ul>\n<li><p>启动定时器：当网页需要执行一些定时任务时，可以使用时间触发线程来启动定时器。</p>\n</li>\n<li><p>处理事件：当用户与网页交互时，例如点击按钮或提交表单，时间触发线程将负责处理这些事件并执行相应的回调函数。</p>\n</li>\n<li><p>处理异步请求：当网页需要从服务器获取数据时，可以使用时间触发线程来处理异步请求并执行回调函数。</p>\n</li>\n</ul>\n<p><strong>注意</strong>：由于 JS 的单线程关系，所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）。</p>\n<h5 id=\"定时器触发进程\"><a href=\"#定时器触发进程\" class=\"headerlink\" title=\"定时器触发进程\"></a>定时器触发进程</h5><p>浏览器定时器触发进程是指浏览器中用来触发定时器的进程。在浏览器中，定时器可以使用 JavaScript 的 setTimeout() 和 setInterval() 方法来创建。当设置的时间到达后，浏览器会触发定时器，并执行对应的函数。</p>\n<p>定时器触发进程通常由内核管理，它会在特定时间间隔内不断运行，并检查是否有定时器需要触发。当定时器触发时，该进程会将需要执行的任务推入待执行队列中，然后通知主线程执行。主线程会不断检查待执行队列，如果有任务待执行，则将其取出并执行。</p>\n<p>需要<strong>注意</strong>的是，如果执行的任务需要较长时间才能完成，会导致主线程阻塞，影响页面的响应速度。因此，应该尽可能避免在定时器中执行复杂的任务，或者使用 Web Worker 在后台执行任务，以避免阻塞主线程。</p>\n<p><strong>注意</strong>：W3C 在 HTML 标准中规定，定时器的定时时间不能小于4ms，如果是小于 4ms，则默认为 4ms。</p>\n<h5 id=\"异步-http-请求线程\"><a href=\"#异步-http-请求线程\" class=\"headerlink\" title=\"异步 http 请求线程\"></a>异步 http 请求线程</h5><p>在浏览器中，异步 HTTP 请求线程通常由浏览器内部的 JavaScript 引擎处理。当 JavaScript 代码发起一个异步 HTTP 请求时，浏览器会创建一个新的线程来处理该请求，该线程通常是浏览器的网络线程。在该线程中，浏览器会向服务器发送 HTTP 请求，并等待服务器返回响应。</p>\n<p>在等待服务器响应的同时，JavaScript 引擎会继续执行其他代码，不会被阻塞。当服务器返回响应后，浏览器会将响应数据传递给 JavaScript 引擎，在 JavaScript 线程中执行相应的回调函数，用来处理响应数据。</p>\n<p>需要注意的是，由于浏览器对跨域请求进行了限制，在异步 HTTP 请求线程中发起的跨域请求需要经过浏览器的安全机制进行处理，一般需要设置相关的请求头或者使用 JSONP 等技术来解决。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/web/security/question.html","/javascript/prototype.html"],"length":1924,"excerpt":"","more":"<h4 id=\"浏览器的渲染进程的线程\"><a href=\"#浏览器的渲染进程的线程\" class=\"headerlink\" title=\"浏览器的渲染进程的线程\"></a>浏览器的渲染进程的线程</h4><p><img src=\"https://pic.imgdb.cn/item/6532800ac458853aef6782e0.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"GUI-渲染线程\"><a href=\"#GUI-渲染线程\" class=\"headerlink\" title=\"GUI 渲染线程\"></a>GUI 渲染线程</h5><p>GUI 渲染线程是在 GUI 应用程序中负责界面渲染的线程。负责渲染浏览器页面，解析 HTML、CSS，构建DOM 树、构建CSSOM树、构建渲染树和绘制页面；当界面需要重绘或由于某种操作引发回流时，该线程就会执行。</p>\n<p>在许多 GUI 应用程序中，渲染线程通常会在主线程中运行，这可能会导致界面卡顿或响应时间过长。为了避免这种情况，一些框架和库已经实现了将 GUI 渲染线程与主线程分离的机制，例如 Android 中的 UI 线程和渲染线程分离机制。</p>\n<p>当渲染线程与主线程分离时，它可以专注于绘制和更新屏幕上的内容，而主线程则可以处理用户输入和其他逻辑。这样可以提高应用程序的响应速度和用户体验。</p>\n<p><strong>注意</strong>：GUI 渲染线程和 JS 引擎线程是互斥的，当JS 引擎执行时GUI线程会被挂起，GUI 更新会被保存在一个队列中等到JS 引擎空闲时立即被执行。</p>\n<h5 id=\"JS-引擎线程\"><a href=\"#JS-引擎线程\" class=\"headerlink\" title=\"JS 引擎线程\"></a>JS 引擎线程</h5><p>JS 引擎线程也称为 JS 内核，负责处理Javascript 脚本程序，解析Javascript 脚本，运行代码；JS 引擎线程一直等待着任务队列中任务的到来，然后加以处理，一个 Tab 页中无论什么时候都只有一个JS 引擎线程在运行 JS 程序。</p>\n<p>在浏览器环境中，JavaScript 引擎线程负责解释和执行 JavaScript 代码，并将执行结果返回给主线程。JavaScript 引擎线程通常是单线程的，这意味着它只能同时执行一个任务。这就是为什么一些耗时的 JavaScript 代码可以阻止页面的渲染和响应。</p>\n<p>为了解决这个问题，浏览器引入了 Web Workers，使得可以使用多个 JavaScript 引擎线程来执行 JavaScript 代码。这些工作线程可以并行地执行 JavaScript 代码，并在完成任务后将结果返回给主线程，从而防止 JavaScript 代码阻塞页面的渲染和响应。</p>\n<p><strong>注意</strong>：GUI 渲染线程与 JS 引擎线程的互斥关系，所以如果JS 执行的时间过长，会造成页面的渲染不连贯，导致页面渲染加载阻塞。</p>\n<h5 id=\"时间触发线程\"><a href=\"#时间触发线程\" class=\"headerlink\" title=\"时间触发线程\"></a>时间触发线程</h5><p>时间触发线程属于浏览器而不是 JS 引擎，用来控制事件循环；当JS引擎执行代码块如 setTimeOut 时（也可是来自浏览器内核的其他线程,如鼠标点击、AJAX 异步请求等），会将对应任务添加到事件触发线程中；当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理。</p>\n<p>时间触发线程在浏览器中起着非常重要的作用，因为它们可以帮助网站实现许多不同的功能，包括：</p>\n<ul>\n<li><p>启动定时器：当网页需要执行一些定时任务时，可以使用时间触发线程来启动定时器。</p>\n</li>\n<li><p>处理事件：当用户与网页交互时，例如点击按钮或提交表单，时间触发线程将负责处理这些事件并执行相应的回调函数。</p>\n</li>\n<li><p>处理异步请求：当网页需要从服务器获取数据时，可以使用时间触发线程来处理异步请求并执行回调函数。</p>\n</li>\n</ul>\n<p><strong>注意</strong>：由于 JS 的单线程关系，所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）。</p>\n<h5 id=\"定时器触发进程\"><a href=\"#定时器触发进程\" class=\"headerlink\" title=\"定时器触发进程\"></a>定时器触发进程</h5><p>浏览器定时器触发进程是指浏览器中用来触发定时器的进程。在浏览器中，定时器可以使用 JavaScript 的 setTimeout() 和 setInterval() 方法来创建。当设置的时间到达后，浏览器会触发定时器，并执行对应的函数。</p>\n<p>定时器触发进程通常由内核管理，它会在特定时间间隔内不断运行，并检查是否有定时器需要触发。当定时器触发时，该进程会将需要执行的任务推入待执行队列中，然后通知主线程执行。主线程会不断检查待执行队列，如果有任务待执行，则将其取出并执行。</p>\n<p>需要<strong>注意</strong>的是，如果执行的任务需要较长时间才能完成，会导致主线程阻塞，影响页面的响应速度。因此，应该尽可能避免在定时器中执行复杂的任务，或者使用 Web Worker 在后台执行任务，以避免阻塞主线程。</p>\n<p><strong>注意</strong>：W3C 在 HTML 标准中规定，定时器的定时时间不能小于4ms，如果是小于 4ms，则默认为 4ms。</p>\n<h5 id=\"异步-http-请求线程\"><a href=\"#异步-http-请求线程\" class=\"headerlink\" title=\"异步 http 请求线程\"></a>异步 http 请求线程</h5><p>在浏览器中，异步 HTTP 请求线程通常由浏览器内部的 JavaScript 引擎处理。当 JavaScript 代码发起一个异步 HTTP 请求时，浏览器会创建一个新的线程来处理该请求，该线程通常是浏览器的网络线程。在该线程中，浏览器会向服务器发送 HTTP 请求，并等待服务器返回响应。</p>\n<p>在等待服务器响应的同时，JavaScript 引擎会继续执行其他代码，不会被阻塞。当服务器返回响应后，浏览器会将响应数据传递给 JavaScript 引擎，在 JavaScript 线程中执行相应的回调函数，用来处理响应数据。</p>\n<p>需要注意的是，由于浏览器对跨域请求进行了限制，在异步 HTTP 请求线程中发起的跨域请求需要经过浏览器的安全机制进行处理，一般需要设置相关的请求头或者使用 JSONP 等技术来解决。</p>\n"},{"title":"session-cookies 三个缓存 localStorage、sessionStorage、Cookies。","date":"2023-10-22T10:06:18.000Z","description":"session-cookies This plugin is used to summarize the browser’s three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.","comments":1,"_content":"\n\n# session-cookies\n\n    session-cookies is localStorage、sessionStorage、Cookies。\n\n\n <a href=\"https://badge.fury.io/js/session-cookies\"><img src=\"https://badge.fury.io/js/session-cookies.svg\" /></a>\n\n\nsession-cookies This plugin is used to summarize the browser's three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.\n\nsession-cookies 这个插件是用来汇总浏览器的三个缓存 localStorage、sessionStorage、Cookies。该插件注重使用方便快捷下面是一些API汇总说明。\n\n#### API \n\n|  名称   |       获取所有       |     获取单个      |     设置单个      |       移除单个       |      清除所有       |\n| :-----: | :------------------: | :---------------: | :---------------: | :------------------: | :-----------------: |\n| cookies |    getCookieList     |     getCookie     |     setCookie     |     removeCookie     |     clearCookie     |\n| session | getAllSessionStorage | getSessionStorage | setSessionStorage | removeSessionStorage | clearSessionStorage |\n|  local  |  getAllLocalStorage  |  getLocalStorage  |  setLocalStorage  |  removeLocalStorage  |  clearLocalStorage  |\n\n\n\n#### 使用案例\n\n```shell\nnpm i session-cookies\n```\n\n##### 获取所有Cookies\n\n```ts\nimport { cookies } from 'session-cookies'\n\ncookies.getCookieList(); // 返回JSON结果数据\ncookies.getCookie('test'); // 返回属性值\n```\n\n##### 设置单个\n\n```ts\ncookies.setCookie('test', '1234567'); // 设置属性为字符串需要JSON.stringify\n```\n\n##### 移除单个\n\n```tsx\ncookies.removeCookie('test');\n```\n\n##### 清除所有\n\n```tsx\ncookies.clearCookie();\n```\n\n#### 附加API\n\n| 根据index下标获取key值        | 参数      | 结果    |\n| ----------------------------- | --------- | ------- |\n| getLocalStorageKeyFindIndex   | index下标 | 返回key |\n| getSessionStorageKeyFindIndex | index下标 | 返回key |\n\n##### 使用\n\n```ts\nimport { local } from 'session-cookies';\n\nlocal.setLocalStorage('test', '123456');\nlocal.setLocalStorage('usename', 'songshao');\nlocal.getLocalStorageKeyFindIndex(0); // test\nlocal.getLocalStorageKeyFindIndex(1); // username\n```\n\n### Browsers\n\n```html\n\n<!-- 只能使用0.1.5 以后版本 -->\n<script src='https://unpkg.com/session-cookies/lib/sessionCookies.js' ></script>\n\n<script>\n    // 其他接口同上面使用只需要增加 sessionCookies 全局配置。\n    sessionCookies.local.setLocalStorage('test', '123456');\n</script>\n\n```\n","source":"_posts/browser/sessionCookies.md","raw":"---\ntitle: session-cookies 三个缓存 localStorage、sessionStorage、Cookies。\npermalink: /browser/session/cookies.html\ndate: 2023-10-22 18:06:18\ndescription: session-cookies This plugin is used to summarize the browser’s three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.\ntag: [前端, 浏览器, cookies, localStorage, sessionStorage, TypeScript]\ncomments: true\ncategories: \n - 浏览器\n - Cache\n---\n\n\n# session-cookies\n\n    session-cookies is localStorage、sessionStorage、Cookies。\n\n\n <a href=\"https://badge.fury.io/js/session-cookies\"><img src=\"https://badge.fury.io/js/session-cookies.svg\" /></a>\n\n\nsession-cookies This plugin is used to summarize the browser's three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.\n\nsession-cookies 这个插件是用来汇总浏览器的三个缓存 localStorage、sessionStorage、Cookies。该插件注重使用方便快捷下面是一些API汇总说明。\n\n#### API \n\n|  名称   |       获取所有       |     获取单个      |     设置单个      |       移除单个       |      清除所有       |\n| :-----: | :------------------: | :---------------: | :---------------: | :------------------: | :-----------------: |\n| cookies |    getCookieList     |     getCookie     |     setCookie     |     removeCookie     |     clearCookie     |\n| session | getAllSessionStorage | getSessionStorage | setSessionStorage | removeSessionStorage | clearSessionStorage |\n|  local  |  getAllLocalStorage  |  getLocalStorage  |  setLocalStorage  |  removeLocalStorage  |  clearLocalStorage  |\n\n\n\n#### 使用案例\n\n```shell\nnpm i session-cookies\n```\n\n##### 获取所有Cookies\n\n```ts\nimport { cookies } from 'session-cookies'\n\ncookies.getCookieList(); // 返回JSON结果数据\ncookies.getCookie('test'); // 返回属性值\n```\n\n##### 设置单个\n\n```ts\ncookies.setCookie('test', '1234567'); // 设置属性为字符串需要JSON.stringify\n```\n\n##### 移除单个\n\n```tsx\ncookies.removeCookie('test');\n```\n\n##### 清除所有\n\n```tsx\ncookies.clearCookie();\n```\n\n#### 附加API\n\n| 根据index下标获取key值        | 参数      | 结果    |\n| ----------------------------- | --------- | ------- |\n| getLocalStorageKeyFindIndex   | index下标 | 返回key |\n| getSessionStorageKeyFindIndex | index下标 | 返回key |\n\n##### 使用\n\n```ts\nimport { local } from 'session-cookies';\n\nlocal.setLocalStorage('test', '123456');\nlocal.setLocalStorage('usename', 'songshao');\nlocal.getLocalStorageKeyFindIndex(0); // test\nlocal.getLocalStorageKeyFindIndex(1); // username\n```\n\n### Browsers\n\n```html\n\n<!-- 只能使用0.1.5 以后版本 -->\n<script src='https://unpkg.com/session-cookies/lib/sessionCookies.js' ></script>\n\n<script>\n    // 其他接口同上面使用只需要增加 sessionCookies 全局配置。\n    sessionCookies.local.setLocalStorage('test', '123456');\n</script>\n\n```\n","slug":"browser/sessionCookies","published":1,"updated":"2023-10-22T10:08:23.922Z","__permalink":"/browser/session/cookies.html","_id":"clo6whxcs000bdif357v4fknv","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h1 id=\"session-cookies\"><a href=\"#session-cookies\" class=\"headerlink\" title=\"session-cookies\"></a>session-cookies</h1><pre><code>session-cookies is localStorage、sessionStorage、Cookies。\n</code></pre>\n<p> <a href=\"https://badge.fury.io/js/session-cookies\"><img src=\"https://badge.fury.io/js/session-cookies.svg\" /></a></p>\n<p>session-cookies This plugin is used to summarize the browser’s three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.</p>\n<p>session-cookies 这个插件是用来汇总浏览器的三个缓存 localStorage、sessionStorage、Cookies。该插件注重使用方便快捷下面是一些API汇总说明。</p>\n<h4 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h4><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">获取所有</th>\n<th align=\"center\">获取单个</th>\n<th align=\"center\">设置单个</th>\n<th align=\"center\">移除单个</th>\n<th align=\"center\">清除所有</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">cookies</td>\n<td align=\"center\">getCookieList</td>\n<td align=\"center\">getCookie</td>\n<td align=\"center\">setCookie</td>\n<td align=\"center\">removeCookie</td>\n<td align=\"center\">clearCookie</td>\n</tr>\n<tr>\n<td align=\"center\">session</td>\n<td align=\"center\">getAllSessionStorage</td>\n<td align=\"center\">getSessionStorage</td>\n<td align=\"center\">setSessionStorage</td>\n<td align=\"center\">removeSessionStorage</td>\n<td align=\"center\">clearSessionStorage</td>\n</tr>\n<tr>\n<td align=\"center\">local</td>\n<td align=\"center\">getAllLocalStorage</td>\n<td align=\"center\">getLocalStorage</td>\n<td align=\"center\">setLocalStorage</td>\n<td align=\"center\">removeLocalStorage</td>\n<td align=\"center\">clearLocalStorage</td>\n</tr>\n</tbody></table>\n<h4 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i session-cookies</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"获取所有Cookies\"><a href=\"#获取所有Cookies\" class=\"headerlink\" title=\"获取所有Cookies\"></a>获取所有Cookies</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; cookies &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;session-cookies&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cookies.<span class=\"title function_\">getCookieList</span>(); <span class=\"comment\">// 返回JSON结果数据</span></span><br><span class=\"line\">cookies.<span class=\"title function_\">getCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>); <span class=\"comment\">// 返回属性值</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设置单个\"><a href=\"#设置单个\" class=\"headerlink\" title=\"设置单个\"></a>设置单个</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">setCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;1234567&#x27;</span>); <span class=\"comment\">// 设置属性为字符串需要JSON.stringify</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"移除单个\"><a href=\"#移除单个\" class=\"headerlink\" title=\"移除单个\"></a>移除单个</h5><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">removeCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"清除所有\"><a href=\"#清除所有\" class=\"headerlink\" title=\"清除所有\"></a>清除所有</h5><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">clearCookie</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"附加API\"><a href=\"#附加API\" class=\"headerlink\" title=\"附加API\"></a>附加API</h4><table>\n<thead>\n<tr>\n<th>根据index下标获取key值</th>\n<th>参数</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getLocalStorageKeyFindIndex</td>\n<td>index下标</td>\n<td>返回key</td>\n</tr>\n<tr>\n<td>getSessionStorageKeyFindIndex</td>\n<td>index下标</td>\n<td>返回key</td>\n</tr>\n</tbody></table>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; local &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;session-cookies&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">local.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>);</span><br><span class=\"line\">local.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;usename&#x27;</span>, <span class=\"string\">&#x27;songshao&#x27;</span>);</span><br><span class=\"line\">local.<span class=\"title function_\">getLocalStorageKeyFindIndex</span>(<span class=\"number\">0</span>); <span class=\"comment\">// test</span></span><br><span class=\"line\">local.<span class=\"title function_\">getLocalStorageKeyFindIndex</span>(<span class=\"number\">1</span>); <span class=\"comment\">// username</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Browsers\"><a href=\"#Browsers\" class=\"headerlink\" title=\"Browsers\"></a>Browsers</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只能使用0.1.5 以后版本 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;https://unpkg.com/session-cookies/lib/sessionCookies.js&#x27;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 其他接口同上面使用只需要增加 sessionCookies 全局配置。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    sessionCookies.<span class=\"property\">local</span>.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/web/cross/site/request/forgeries.html","/web/cross/site/script.html","/hexo/config/readmore.html"],"length":1595,"excerpt":"","more":"<h1 id=\"session-cookies\"><a href=\"#session-cookies\" class=\"headerlink\" title=\"session-cookies\"></a>session-cookies</h1><pre><code>session-cookies is localStorage、sessionStorage、Cookies。\n</code></pre>\n<p> <a href=\"https://badge.fury.io/js/session-cookies\"><img src=\"https://badge.fury.io/js/session-cookies.svg\" /></a></p>\n<p>session-cookies This plugin is used to summarize the browser’s three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.</p>\n<p>session-cookies 这个插件是用来汇总浏览器的三个缓存 localStorage、sessionStorage、Cookies。该插件注重使用方便快捷下面是一些API汇总说明。</p>\n<h4 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h4><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">获取所有</th>\n<th align=\"center\">获取单个</th>\n<th align=\"center\">设置单个</th>\n<th align=\"center\">移除单个</th>\n<th align=\"center\">清除所有</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">cookies</td>\n<td align=\"center\">getCookieList</td>\n<td align=\"center\">getCookie</td>\n<td align=\"center\">setCookie</td>\n<td align=\"center\">removeCookie</td>\n<td align=\"center\">clearCookie</td>\n</tr>\n<tr>\n<td align=\"center\">session</td>\n<td align=\"center\">getAllSessionStorage</td>\n<td align=\"center\">getSessionStorage</td>\n<td align=\"center\">setSessionStorage</td>\n<td align=\"center\">removeSessionStorage</td>\n<td align=\"center\">clearSessionStorage</td>\n</tr>\n<tr>\n<td align=\"center\">local</td>\n<td align=\"center\">getAllLocalStorage</td>\n<td align=\"center\">getLocalStorage</td>\n<td align=\"center\">setLocalStorage</td>\n<td align=\"center\">removeLocalStorage</td>\n<td align=\"center\">clearLocalStorage</td>\n</tr>\n</tbody></table>\n<h4 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i session-cookies</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"获取所有Cookies\"><a href=\"#获取所有Cookies\" class=\"headerlink\" title=\"获取所有Cookies\"></a>获取所有Cookies</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; cookies &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;session-cookies&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cookies.<span class=\"title function_\">getCookieList</span>(); <span class=\"comment\">// 返回JSON结果数据</span></span><br><span class=\"line\">cookies.<span class=\"title function_\">getCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>); <span class=\"comment\">// 返回属性值</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设置单个\"><a href=\"#设置单个\" class=\"headerlink\" title=\"设置单个\"></a>设置单个</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">setCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;1234567&#x27;</span>); <span class=\"comment\">// 设置属性为字符串需要JSON.stringify</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"移除单个\"><a href=\"#移除单个\" class=\"headerlink\" title=\"移除单个\"></a>移除单个</h5><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">removeCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"清除所有\"><a href=\"#清除所有\" class=\"headerlink\" title=\"清除所有\"></a>清除所有</h5><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">clearCookie</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"附加API\"><a href=\"#附加API\" class=\"headerlink\" title=\"附加API\"></a>附加API</h4><table>\n<thead>\n<tr>\n<th>根据index下标获取key值</th>\n<th>参数</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getLocalStorageKeyFindIndex</td>\n<td>index下标</td>\n<td>返回key</td>\n</tr>\n<tr>\n<td>getSessionStorageKeyFindIndex</td>\n<td>index下标</td>\n<td>返回key</td>\n</tr>\n</tbody></table>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; local &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;session-cookies&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">local.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>);</span><br><span class=\"line\">local.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;usename&#x27;</span>, <span class=\"string\">&#x27;songshao&#x27;</span>);</span><br><span class=\"line\">local.<span class=\"title function_\">getLocalStorageKeyFindIndex</span>(<span class=\"number\">0</span>); <span class=\"comment\">// test</span></span><br><span class=\"line\">local.<span class=\"title function_\">getLocalStorageKeyFindIndex</span>(<span class=\"number\">1</span>); <span class=\"comment\">// username</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Browsers\"><a href=\"#Browsers\" class=\"headerlink\" title=\"Browsers\"></a>Browsers</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只能使用0.1.5 以后版本 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;https://unpkg.com/session-cookies/lib/sessionCookies.js&#x27;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 其他接口同上面使用只需要增加 sessionCookies 全局配置。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    sessionCookies.<span class=\"property\">local</span>.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"如何实现浏览器内多个标签页之间的通信?","date":"2023-10-20T13:20:37.000Z","description":"实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。","comments":1,"_content":"\n实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。通信方法如下：\n\n- 使用 websocket 协议，因为 websocket 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。\n- 使用 ShareWorker 的方式，shareWorker 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。\n- 使用localStorage 的方式，我们可以在一个标签页对localStorage的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候localStorage对象就是充当的中介者的角色。\n- 使用 postMessage 方法，如果我们能够获得对应标签页的引用，就可以使用 postMessage 方法，进行通信。","source":"_posts/browser/tabToTab.md","raw":"---\ntitle: 如何实现浏览器内多个标签页之间的通信?\npermalink: /browser/tab/to/tab.html\ndate: 2023-10-20 21:20:37\ndescription: 实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。\ntag: [前端, 浏览器, 性能优化]\ncomments: true\ncategories: \n - 浏览器\n - 通讯\n---\n\n实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。通信方法如下：\n\n- 使用 websocket 协议，因为 websocket 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。\n- 使用 ShareWorker 的方式，shareWorker 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。\n- 使用localStorage 的方式，我们可以在一个标签页对localStorage的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候localStorage对象就是充当的中介者的角色。\n- 使用 postMessage 方法，如果我们能够获得对应标签页的引用，就可以使用 postMessage 方法，进行通信。","slug":"browser/tabToTab","published":1,"updated":"2023-10-21T13:55:27.490Z","__permalink":"/browser/tab/to/tab.html","_id":"clo6whxcv000fdif3cdvs8jup","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><p>实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。通信方法如下：</p>\n<ul>\n<li>使用 websocket 协议，因为 websocket 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。</li>\n<li>使用 ShareWorker 的方式，shareWorker 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。</li>\n<li>使用localStorage 的方式，我们可以在一个标签页对localStorage的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候localStorage对象就是充当的中介者的角色。</li>\n<li>使用 postMessage 方法，如果我们能够获得对应标签页的引用，就可以使用 postMessage 方法，进行通信。</li>\n</ul>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":479,"excerpt":"","more":"<p>实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。通信方法如下：</p>\n<ul>\n<li>使用 websocket 协议，因为 websocket 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。</li>\n<li>使用 ShareWorker 的方式，shareWorker 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。</li>\n<li>使用localStorage 的方式，我们可以在一个标签页对localStorage的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候localStorage对象就是充当的中介者的角色。</li>\n<li>使用 postMessage 方法，如果我们能够获得对应标签页的引用，就可以使用 postMessage 方法，进行通信。</li>\n</ul>\n"},{"title":"Hexo 内容分页配置","date":"2023-10-23T13:27:22.000Z","description":"Hexo 内容分页配置Pagination，有助于阅读能力的提升。","comments":1,"_content":"\n\n#### per_page _config.yml\n\n```yml\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 20 # 分页条数\npagination_dir: page # 自定义分页路径\n```\n\n","source":"_posts/hexo/pagination.md","raw":"---\ntitle: Hexo 内容分页配置\npermalink: /hexo/config/pagination.html\ndate: 2023-10-23 21:27:22\ndescription: Hexo 内容分页配置Pagination，有助于阅读能力的提升。\ntag: [前端, Hexo, Pagination]\ncomments: true\ncategories: \n - 前端\n - 框架\n - Hexo\n---\n\n\n#### per_page _config.yml\n\n```yml\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 20 # 分页条数\npagination_dir: page # 自定义分页路径\n```\n\n","slug":"hexo/pagination","published":1,"updated":"2023-10-23T13:27:24.363Z","__permalink":"/hexo/config/pagination.html","_id":"clo6whxd1000qdif37clu4w4l","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h4 id=\"per-page-config-yml\"><a href=\"#per-page-config-yml\" class=\"headerlink\" title=\"per_page _config.yml\"></a>per_page _config.yml</h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Pagination</span></span><br><span class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></span><br><span class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">20</span> <span class=\"comment\"># 分页条数</span></span><br><span class=\"line\"><span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span> <span class=\"comment\"># 自定义分页路径</span></span><br></pre></td></tr></table></figure>\n\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/hexo/config/rss.html","/hexo/config/readmore.html"],"length":112,"excerpt":"","more":"<h4 id=\"per-page-config-yml\"><a href=\"#per-page-config-yml\" class=\"headerlink\" title=\"per_page _config.yml\"></a>per_page _config.yml</h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Pagination</span></span><br><span class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></span><br><span class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">20</span> <span class=\"comment\"># 分页条数</span></span><br><span class=\"line\"><span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span> <span class=\"comment\"># 自定义分页路径</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Hexo 开启公众号引流工具","date":"2023-10-23T02:31:24.000Z","description":"Hexo 开启公众号引流工具，可以通过阅读更多引流至微信公众平台。","comments":1,"_content":"\n###  配置博客信息\n\n![](https://pic.imgdb.cn/item/6535dc4dc458853aef3ec866.jpg)\n\n### hexo _config.yml 配置\n\n```yml\nplugins:\n  readmore:\n    blogId: 31652-1697970027416-119\n    name: BaType\n    qrcode: https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\n    keyword: 666\n```\n\n其中,配置参数含义如下:\n\n- blogId : [必选]OpenWrite 后台申请的博客唯一标识,例如:31652-1697970027416-119\n- name : [必选]OpenWrite 后台申请的博客名称,例如:BaType\n- qrcode : [必选]OpenWrite 后台申请的微信公众号二维码,例如:https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\n- keyword : [必选]OpenWrite 后台申请的微信公众号后台回复关键字,例如:666\n\n### 安装插件\n\n`npm install hexo-plugin-readmore --save`\n\n### 展示\n\n![](https://pic.imgdb.cn/item/6535dddec458853aef428ef6.jpg)","source":"_posts/hexo/readmore.md","raw":"---\ntitle: Hexo 开启公众号引流工具\npermalink: /hexo/config/readmore.html\ndate: 2023-10-23 10:31:24\ndescription: Hexo 开启公众号引流工具，可以通过阅读更多引流至微信公众平台。\ntag: [前端, Hexo, ReadMore]\ncomments: true\ncategories: \n - 前端\n - 框架\n - Hexo\n---\n\n###  配置博客信息\n\n![](https://pic.imgdb.cn/item/6535dc4dc458853aef3ec866.jpg)\n\n### hexo _config.yml 配置\n\n```yml\nplugins:\n  readmore:\n    blogId: 31652-1697970027416-119\n    name: BaType\n    qrcode: https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\n    keyword: 666\n```\n\n其中,配置参数含义如下:\n\n- blogId : [必选]OpenWrite 后台申请的博客唯一标识,例如:31652-1697970027416-119\n- name : [必选]OpenWrite 后台申请的博客名称,例如:BaType\n- qrcode : [必选]OpenWrite 后台申请的微信公众号二维码,例如:https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\n- keyword : [必选]OpenWrite 后台申请的微信公众号后台回复关键字,例如:666\n\n### 安装插件\n\n`npm install hexo-plugin-readmore --save`\n\n### 展示\n\n![](https://pic.imgdb.cn/item/6535dddec458853aef428ef6.jpg)","slug":"hexo/readmore","published":1,"updated":"2023-10-23T12:33:02.357Z","__permalink":"/hexo/config/readmore.html","_id":"clo6whxd2000udif3bpz2asux","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h3 id=\"配置博客信息\"><a href=\"#配置博客信息\" class=\"headerlink\" title=\"配置博客信息\"></a>配置博客信息</h3><p><img src=\"https://pic.imgdb.cn/item/6535dc4dc458853aef3ec866.jpg\"></p>\n<h3 id=\"hexo-config-yml-配置\"><a href=\"#hexo-config-yml-配置\" class=\"headerlink\" title=\"hexo _config.yml 配置\"></a>hexo _config.yml 配置</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\">  <span class=\"attr\">readmore:</span></span><br><span class=\"line\">    <span class=\"attr\">blogId:</span> <span class=\"number\">31652</span><span class=\"number\">-1697970027416</span><span class=\"number\">-119</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">BaType</span></span><br><span class=\"line\">    <span class=\"attr\">qrcode:</span> <span class=\"string\">https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg</span></span><br><span class=\"line\">    <span class=\"attr\">keyword:</span> <span class=\"number\">666</span></span><br></pre></td></tr></table></figure>\n\n<p>其中,配置参数含义如下:</p>\n<ul>\n<li>blogId : [必选]OpenWrite 后台申请的博客唯一标识,例如:31652-1697970027416-119</li>\n<li>name : [必选]OpenWrite 后台申请的博客名称,例如:BaType</li>\n<li>qrcode : [必选]OpenWrite 后台申请的微信公众号二维码,例如:<a href=\"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\">https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg</a></li>\n<li>keyword : [必选]OpenWrite 后台申请的微信公众号后台回复关键字,例如:666</li>\n</ul>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p><code>npm install hexo-plugin-readmore --save</code></p>\n<h3 id=\"展示\"><a href=\"#展示\" class=\"headerlink\" title=\"展示\"></a>展示</h3><p><img src=\"https://pic.imgdb.cn/item/6535dddec458853aef428ef6.jpg\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/hexo/config/pagination.html","/web/npm/nrm.html","/hexo/config/rss.html","/react/components/unstate-next-use.html","/browser/session/cookies.html"],"length":464,"excerpt":"","more":"<h3 id=\"配置博客信息\"><a href=\"#配置博客信息\" class=\"headerlink\" title=\"配置博客信息\"></a>配置博客信息</h3><p><img src=\"https://pic.imgdb.cn/item/6535dc4dc458853aef3ec866.jpg\"></p>\n<h3 id=\"hexo-config-yml-配置\"><a href=\"#hexo-config-yml-配置\" class=\"headerlink\" title=\"hexo _config.yml 配置\"></a>hexo _config.yml 配置</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\">  <span class=\"attr\">readmore:</span></span><br><span class=\"line\">    <span class=\"attr\">blogId:</span> <span class=\"number\">31652</span><span class=\"number\">-1697970027416</span><span class=\"number\">-119</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">BaType</span></span><br><span class=\"line\">    <span class=\"attr\">qrcode:</span> <span class=\"string\">https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg</span></span><br><span class=\"line\">    <span class=\"attr\">keyword:</span> <span class=\"number\">666</span></span><br></pre></td></tr></table></figure>\n\n<p>其中,配置参数含义如下:</p>\n<ul>\n<li>blogId : [必选]OpenWrite 后台申请的博客唯一标识,例如:31652-1697970027416-119</li>\n<li>name : [必选]OpenWrite 后台申请的博客名称,例如:BaType</li>\n<li>qrcode : [必选]OpenWrite 后台申请的微信公众号二维码,例如:<a href=\"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\">https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg</a></li>\n<li>keyword : [必选]OpenWrite 后台申请的微信公众号后台回复关键字,例如:666</li>\n</ul>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p><code>npm install hexo-plugin-readmore --save</code></p>\n<h3 id=\"展示\"><a href=\"#展示\" class=\"headerlink\" title=\"展示\"></a>展示</h3><p><img src=\"https://pic.imgdb.cn/item/6535dddec458853aef428ef6.jpg\"></p>\n"},{"title":"Hexo 开启 RSS","date":"2023-10-21T13:32:38.000Z","description":"Hexo 开启RSS，可以查看RSS版本的note 数据，也可以导入到其他blog环境。","comments":1,"_content":"\n##### 安装hexo-generator-feed 插件\n\n###### npm\n`npm install hexo-generator-feed -d`\n###### yarn\n`yarn add hexo-generator-feed`\n\n##### 配置_config.[themes].yml\n\n###### 增加导航栏菜单\n```yml\n    RSS: /atom.xml || fa fa-rss\n```\n\n###### 参数配置\n\n```yml\n    feed:\n        type: atom  # 类型为atom\n        path: atom.xml # 访问路径\n        limit: 20 # 分页\n\n```\n##### 清除重启\n\n`hexo clean && hexo generate`\n\n##### 页面效果\n\n![atom.xml](https://pic.imgdb.cn/item/6533d473c458853aefb79c42.png)","source":"_posts/hexo/rss.md","raw":"---\ntitle: Hexo 开启 RSS\npermalink: /hexo/config/rss.html\ndate: 2023-10-21 21:32:38\ndescription: Hexo 开启RSS，可以查看RSS版本的note 数据，也可以导入到其他blog环境。\ntag: [前端, Hexo, RSS]\ncomments: true\ncategories: \n - 前端\n - 框架\n - Hexo\n---\n\n##### 安装hexo-generator-feed 插件\n\n###### npm\n`npm install hexo-generator-feed -d`\n###### yarn\n`yarn add hexo-generator-feed`\n\n##### 配置_config.[themes].yml\n\n###### 增加导航栏菜单\n```yml\n    RSS: /atom.xml || fa fa-rss\n```\n\n###### 参数配置\n\n```yml\n    feed:\n        type: atom  # 类型为atom\n        path: atom.xml # 访问路径\n        limit: 20 # 分页\n\n```\n##### 清除重启\n\n`hexo clean && hexo generate`\n\n##### 页面效果\n\n![atom.xml](https://pic.imgdb.cn/item/6533d473c458853aefb79c42.png)","slug":"hexo/rss","published":1,"updated":"2023-10-21T13:54:06.202Z","__permalink":"/hexo/config/rss.html","_id":"clo6whxd3000wdif3ccoc834r","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h5 id=\"安装hexo-generator-feed-插件\"><a href=\"#安装hexo-generator-feed-插件\" class=\"headerlink\" title=\"安装hexo-generator-feed 插件\"></a>安装hexo-generator-feed 插件</h5><h6 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h6><p><code>npm install hexo-generator-feed -d</code></p>\n<h6 id=\"yarn\"><a href=\"#yarn\" class=\"headerlink\" title=\"yarn\"></a>yarn</h6><p><code>yarn add hexo-generator-feed</code></p>\n<h5 id=\"配置-config-themes-yml\"><a href=\"#配置-config-themes-yml\" class=\"headerlink\" title=\"配置_config.[themes].yml\"></a>配置_config.[themes].yml</h5><h6 id=\"增加导航栏菜单\"><a href=\"#增加导航栏菜单\" class=\"headerlink\" title=\"增加导航栏菜单\"></a>增加导航栏菜单</h6><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">RSS:</span> <span class=\"string\">/atom.xml</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-rss</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"参数配置\"><a href=\"#参数配置\" class=\"headerlink\" title=\"参数配置\"></a>参数配置</h6><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">atom</span>  <span class=\"comment\"># 类型为atom</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">atom.xml</span> <span class=\"comment\"># 访问路径</span></span><br><span class=\"line\">    <span class=\"attr\">limit:</span> <span class=\"number\">20</span> <span class=\"comment\"># 分页</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"清除重启\"><a href=\"#清除重启\" class=\"headerlink\" title=\"清除重启\"></a>清除重启</h5><p><code>hexo clean &amp;&amp; hexo generate</code></p>\n<h5 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h5><p><img src=\"https://pic.imgdb.cn/item/6533d473c458853aefb79c42.png\" alt=\"atom.xml\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/hexo/config/pagination.html","/web/npm/nrm.html","/hexo/config/readmore.html","/react/components/unstate-next-use.html","/javascript/async/await.html"],"length":239,"excerpt":"","more":"<h5 id=\"安装hexo-generator-feed-插件\"><a href=\"#安装hexo-generator-feed-插件\" class=\"headerlink\" title=\"安装hexo-generator-feed 插件\"></a>安装hexo-generator-feed 插件</h5><h6 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h6><p><code>npm install hexo-generator-feed -d</code></p>\n<h6 id=\"yarn\"><a href=\"#yarn\" class=\"headerlink\" title=\"yarn\"></a>yarn</h6><p><code>yarn add hexo-generator-feed</code></p>\n<h5 id=\"配置-config-themes-yml\"><a href=\"#配置-config-themes-yml\" class=\"headerlink\" title=\"配置_config.[themes].yml\"></a>配置_config.[themes].yml</h5><h6 id=\"增加导航栏菜单\"><a href=\"#增加导航栏菜单\" class=\"headerlink\" title=\"增加导航栏菜单\"></a>增加导航栏菜单</h6><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">RSS:</span> <span class=\"string\">/atom.xml</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-rss</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"参数配置\"><a href=\"#参数配置\" class=\"headerlink\" title=\"参数配置\"></a>参数配置</h6><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">atom</span>  <span class=\"comment\"># 类型为atom</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">atom.xml</span> <span class=\"comment\"># 访问路径</span></span><br><span class=\"line\">    <span class=\"attr\">limit:</span> <span class=\"number\">20</span> <span class=\"comment\"># 分页</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"清除重启\"><a href=\"#清除重启\" class=\"headerlink\" title=\"清除重启\"></a>清除重启</h5><p><code>hexo clean &amp;&amp; hexo generate</code></p>\n<h5 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h5><p><img src=\"https://pic.imgdb.cn/item/6533d473c458853aefb79c42.png\" alt=\"atom.xml\"></p>\n"},{"title":"Fiber 架构的起源","date":"2023-10-19T12:12:08.000Z","description":"Fiber 架构的引入使得 React 在渲染过程中可以更加灵活地响应用户交互，提供更好的用户体验。","comments":1,"_content":"\n# Fiber 架构的起源\nFiber 架构的起源可以追溯到 React 团队在 2017 年提出的一项重大改进计划。在过去的 React 版本中，渲染过程是基于递归的，即组件树的遍历是通过递归函数来完成的。这种方式在大规模复杂应用中可能会引发一些性能问题，例如长时间的主线程阻塞，导致用户体验下降。\n<!-- more -->\n为了解决这些性能问题，React 团队开始着手设计一种新的渲染架构，即 Fiber 架构。Fiber 架构的目标是使 React 的渲染过程可中断和恢复，从而实现更好的任务调度、优先级管理和增量更新。\n\nFiber 这个名字来源于计算机科学中的 \"Fiber\"（纤程）概念，指的是一种轻量级的执行单元，可以在多个任务之间切换，并且可以中断和恢复执行。React 中的 Fiber 也是类似的概念，表示渲染过程中的任务单元，可以根据任务的优先级和时间片进行灵活的调度和中断。\n\n通过 Fiber 架构，React 实现了一个基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。同时，React 还引入了优先级调度算法，通过动态调整任务的优先级，可以根据不同任务的重要性和紧急程度来合理地分配渲染资源。\n\nFiber 架构的引入使得 React 在渲染过程中可以更加灵活地响应用户交互，提供更好的用户体验。它为 React 提供了更强大的渲染能力，能够支持更复杂、更大规模的应用程序。\n\n值得一提的是，Fiber 架构的设计和实现是一个非常复杂的过程，并且在不同版本的 React 中可能会有一些细节上的差异。React 团队在不断地改进和优化 Fiber 架构，以进一步提升 React 应用的性能和可靠性。\n\n# Fiber的含义\n> 总的来说，Fiber 是 React 中的一种渲染架构和调度算法，通过将渲染过程划分为可中断和恢复的任务单元，实现了增量更新和优先级调度。Fiber 架构的引入使得 React 能够更加高效地处理渲染任务，提供更好的用户体验和更高的性能。\n\nFiber 是 React 中的一个概念，它有多个含义和作用：\n\n- 渲染任务单元：在 React 中，Fiber 表示渲染过程中的任务单元。传统的递归渲染方式可能会导致长时间的主线程阻塞，影响用户体验。而 Fiber 架构将渲染过程划分为一系列小的任务单元（Fiber 节点），可以根据任务的优先级和时间片进行灵活的调度和中断，实现增量更新和任务的并发处理。\n\n- 调度和优先级管理：Fiber 架构引入了一套调度算法，用于根据任务的优先级和时间片来动态调整任务的执行顺序。通过优先级调度，React 可以根据任务的重要性和紧急程度合理地分配渲染资源，从而提供更好的用户体验。优先级调度还使得 React 可以在不同任务之间进行中断和恢复，避免了长时间的阻塞。\n\n- 组件结构表示：Fiber 架构引入了基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。每个 Fiber 节点表示一个组件或 DOM 元素，并通过 child、sibling 和 return 等属性建立起节点之间的关联。通过 Fiber 树的结构，React 可以更加高效地遍历和更新组件树，实现增量渲染。\n\n- 增量更新：Fiber 架构支持增量更新，即仅更新发生变化的部分，而不需要重新渲染整个组件树。通过对比 Fiber 树的两个状态，React 可以确定哪些组件需要更新，并且可以跳过不需要更新的部分，从而提高渲染性能。\n\n![react 中一帧的过程](https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg)\n","source":"_posts/react/fiber.md","raw":"---\ntitle: Fiber 架构的起源\npermalink: /react/fiber.html\ndate: 2023-10-19 20:12:08\ndescription: Fiber 架构的引入使得 React 在渲染过程中可以更加灵活地响应用户交互，提供更好的用户体验。\ntag: [前端, react, JavaScript, Fiber]\ncomments: true\ncategories: \n - React\n - Fiber\n---\n\n# Fiber 架构的起源\nFiber 架构的起源可以追溯到 React 团队在 2017 年提出的一项重大改进计划。在过去的 React 版本中，渲染过程是基于递归的，即组件树的遍历是通过递归函数来完成的。这种方式在大规模复杂应用中可能会引发一些性能问题，例如长时间的主线程阻塞，导致用户体验下降。\n<!-- more -->\n为了解决这些性能问题，React 团队开始着手设计一种新的渲染架构，即 Fiber 架构。Fiber 架构的目标是使 React 的渲染过程可中断和恢复，从而实现更好的任务调度、优先级管理和增量更新。\n\nFiber 这个名字来源于计算机科学中的 \"Fiber\"（纤程）概念，指的是一种轻量级的执行单元，可以在多个任务之间切换，并且可以中断和恢复执行。React 中的 Fiber 也是类似的概念，表示渲染过程中的任务单元，可以根据任务的优先级和时间片进行灵活的调度和中断。\n\n通过 Fiber 架构，React 实现了一个基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。同时，React 还引入了优先级调度算法，通过动态调整任务的优先级，可以根据不同任务的重要性和紧急程度来合理地分配渲染资源。\n\nFiber 架构的引入使得 React 在渲染过程中可以更加灵活地响应用户交互，提供更好的用户体验。它为 React 提供了更强大的渲染能力，能够支持更复杂、更大规模的应用程序。\n\n值得一提的是，Fiber 架构的设计和实现是一个非常复杂的过程，并且在不同版本的 React 中可能会有一些细节上的差异。React 团队在不断地改进和优化 Fiber 架构，以进一步提升 React 应用的性能和可靠性。\n\n# Fiber的含义\n> 总的来说，Fiber 是 React 中的一种渲染架构和调度算法，通过将渲染过程划分为可中断和恢复的任务单元，实现了增量更新和优先级调度。Fiber 架构的引入使得 React 能够更加高效地处理渲染任务，提供更好的用户体验和更高的性能。\n\nFiber 是 React 中的一个概念，它有多个含义和作用：\n\n- 渲染任务单元：在 React 中，Fiber 表示渲染过程中的任务单元。传统的递归渲染方式可能会导致长时间的主线程阻塞，影响用户体验。而 Fiber 架构将渲染过程划分为一系列小的任务单元（Fiber 节点），可以根据任务的优先级和时间片进行灵活的调度和中断，实现增量更新和任务的并发处理。\n\n- 调度和优先级管理：Fiber 架构引入了一套调度算法，用于根据任务的优先级和时间片来动态调整任务的执行顺序。通过优先级调度，React 可以根据任务的重要性和紧急程度合理地分配渲染资源，从而提供更好的用户体验。优先级调度还使得 React 可以在不同任务之间进行中断和恢复，避免了长时间的阻塞。\n\n- 组件结构表示：Fiber 架构引入了基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。每个 Fiber 节点表示一个组件或 DOM 元素，并通过 child、sibling 和 return 等属性建立起节点之间的关联。通过 Fiber 树的结构，React 可以更加高效地遍历和更新组件树，实现增量渲染。\n\n- 增量更新：Fiber 架构支持增量更新，即仅更新发生变化的部分，而不需要重新渲染整个组件树。通过对比 Fiber 树的两个状态，React 可以确定哪些组件需要更新，并且可以跳过不需要更新的部分，从而提高渲染性能。\n\n![react 中一帧的过程](https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg)\n","slug":"react/fiber","published":1,"updated":"2023-10-27T13:18:10.710Z","__permalink":"/react/fiber.html","_id":"clo6whxd50010dif3f5yog2wu","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h1 id=\"Fiber-架构的起源\"><a href=\"#Fiber-架构的起源\" class=\"headerlink\" title=\"Fiber 架构的起源\"></a>Fiber 架构的起源</h1><p>Fiber 架构的起源可以追溯到 React 团队在 2017 年提出的一项重大改进计划。在过去的 React 版本中，渲染过程是基于递归的，即组件树的遍历是通过递归函数来完成的。这种方式在大规模复杂应用中可能会引发一些性能问题，例如长时间的主线程阻塞，导致用户体验下降。</p>\n<span id=\"more\"></span>\n<p>为了解决这些性能问题，React 团队开始着手设计一种新的渲染架构，即 Fiber 架构。Fiber 架构的目标是使 React 的渲染过程可中断和恢复，从而实现更好的任务调度、优先级管理和增量更新。</p>\n<p>Fiber 这个名字来源于计算机科学中的 “Fiber”（纤程）概念，指的是一种轻量级的执行单元，可以在多个任务之间切换，并且可以中断和恢复执行。React 中的 Fiber 也是类似的概念，表示渲染过程中的任务单元，可以根据任务的优先级和时间片进行灵活的调度和中断。</p>\n<p>通过 Fiber 架构，React 实现了一个基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。同时，React 还引入了优先级调度算法，通过动态调整任务的优先级，可以根据不同任务的重要性和紧急程度来合理地分配渲染资源。</p>\n<p>Fiber 架构的引入使得 React 在渲染过程中可以更加灵活地响应用户交互，提供更好的用户体验。它为 React 提供了更强大的渲染能力，能够支持更复杂、更大规模的应用程序。</p>\n<p>值得一提的是，Fiber 架构的设计和实现是一个非常复杂的过程，并且在不同版本的 React 中可能会有一些细节上的差异。React 团队在不断地改进和优化 Fiber 架构，以进一步提升 React 应用的性能和可靠性。</p>\n<h1 id=\"Fiber的含义\"><a href=\"#Fiber的含义\" class=\"headerlink\" title=\"Fiber的含义\"></a>Fiber的含义</h1><blockquote>\n<p>总的来说，Fiber 是 React 中的一种渲染架构和调度算法，通过将渲染过程划分为可中断和恢复的任务单元，实现了增量更新和优先级调度。Fiber 架构的引入使得 React 能够更加高效地处理渲染任务，提供更好的用户体验和更高的性能。</p>\n</blockquote>\n<p>Fiber 是 React 中的一个概念，它有多个含义和作用：</p>\n<ul>\n<li><p>渲染任务单元：在 React 中，Fiber 表示渲染过程中的任务单元。传统的递归渲染方式可能会导致长时间的主线程阻塞，影响用户体验。而 Fiber 架构将渲染过程划分为一系列小的任务单元（Fiber 节点），可以根据任务的优先级和时间片进行灵活的调度和中断，实现增量更新和任务的并发处理。</p>\n</li>\n<li><p>调度和优先级管理：Fiber 架构引入了一套调度算法，用于根据任务的优先级和时间片来动态调整任务的执行顺序。通过优先级调度，React 可以根据任务的重要性和紧急程度合理地分配渲染资源，从而提供更好的用户体验。优先级调度还使得 React 可以在不同任务之间进行中断和恢复，避免了长时间的阻塞。</p>\n</li>\n<li><p>组件结构表示：Fiber 架构引入了基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。每个 Fiber 节点表示一个组件或 DOM 元素，并通过 child、sibling 和 return 等属性建立起节点之间的关联。通过 Fiber 树的结构，React 可以更加高效地遍历和更新组件树，实现增量渲染。</p>\n</li>\n<li><p>增量更新：Fiber 架构支持增量更新，即仅更新发生变化的部分，而不需要重新渲染整个组件树。通过对比 Fiber 树的两个状态，React 可以确定哪些组件需要更新，并且可以跳过不需要更新的部分，从而提高渲染性能。</p>\n</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg\" alt=\"react 中一帧的过程\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/fiber/implement.html","/react/implement.html","/react/synthetic/event.html","/react/fiber/works.html","/react/fiber/node.html"],"length":1342,"excerpt":"<h1 id=\"Fiber-架构的起源\"><a href=\"#Fiber-架构的起源\" class=\"headerlink\" title=\"Fiber 架构的起源\"></a>Fiber 架构的起源</h1><p>Fiber 架构的起源可以追溯到 React 团队在 2017 年提出的一项重大改进计划。在过去的 React 版本中，渲染过程是基于递归的，即组件树的遍历是通过递归函数来完成的。这种方式在大规模复杂应用中可能会引发一些性能问题，例如长时间的主线程阻塞，导致用户体验下降。</p>","more":"<p>为了解决这些性能问题，React 团队开始着手设计一种新的渲染架构，即 Fiber 架构。Fiber 架构的目标是使 React 的渲染过程可中断和恢复，从而实现更好的任务调度、优先级管理和增量更新。</p>\n<p>Fiber 这个名字来源于计算机科学中的 “Fiber”（纤程）概念，指的是一种轻量级的执行单元，可以在多个任务之间切换，并且可以中断和恢复执行。React 中的 Fiber 也是类似的概念，表示渲染过程中的任务单元，可以根据任务的优先级和时间片进行灵活的调度和中断。</p>\n<p>通过 Fiber 架构，React 实现了一个基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。同时，React 还引入了优先级调度算法，通过动态调整任务的优先级，可以根据不同任务的重要性和紧急程度来合理地分配渲染资源。</p>\n<p>Fiber 架构的引入使得 React 在渲染过程中可以更加灵活地响应用户交互，提供更好的用户体验。它为 React 提供了更强大的渲染能力，能够支持更复杂、更大规模的应用程序。</p>\n<p>值得一提的是，Fiber 架构的设计和实现是一个非常复杂的过程，并且在不同版本的 React 中可能会有一些细节上的差异。React 团队在不断地改进和优化 Fiber 架构，以进一步提升 React 应用的性能和可靠性。</p>\n<h1 id=\"Fiber的含义\"><a href=\"#Fiber的含义\" class=\"headerlink\" title=\"Fiber的含义\"></a>Fiber的含义</h1><blockquote>\n<p>总的来说，Fiber 是 React 中的一种渲染架构和调度算法，通过将渲染过程划分为可中断和恢复的任务单元，实现了增量更新和优先级调度。Fiber 架构的引入使得 React 能够更加高效地处理渲染任务，提供更好的用户体验和更高的性能。</p>\n</blockquote>\n<p>Fiber 是 React 中的一个概念，它有多个含义和作用：</p>\n<ul>\n<li><p>渲染任务单元：在 React 中，Fiber 表示渲染过程中的任务单元。传统的递归渲染方式可能会导致长时间的主线程阻塞，影响用户体验。而 Fiber 架构将渲染过程划分为一系列小的任务单元（Fiber 节点），可以根据任务的优先级和时间片进行灵活的调度和中断，实现增量更新和任务的并发处理。</p>\n</li>\n<li><p>调度和优先级管理：Fiber 架构引入了一套调度算法，用于根据任务的优先级和时间片来动态调整任务的执行顺序。通过优先级调度，React 可以根据任务的重要性和紧急程度合理地分配渲染资源，从而提供更好的用户体验。优先级调度还使得 React 可以在不同任务之间进行中断和恢复，避免了长时间的阻塞。</p>\n</li>\n<li><p>组件结构表示：Fiber 架构引入了基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。每个 Fiber 节点表示一个组件或 DOM 元素，并通过 child、sibling 和 return 等属性建立起节点之间的关联。通过 Fiber 树的结构，React 可以更加高效地遍历和更新组件树，实现增量渲染。</p>\n</li>\n<li><p>增量更新：Fiber 架构支持增量更新，即仅更新发生变化的部分，而不需要重新渲染整个组件树。通过对比 Fiber 树的两个状态，React 可以确定哪些组件需要更新，并且可以跳过不需要更新的部分，从而提高渲染性能。</p>\n</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg\" alt=\"react 中一帧的过程\"></p>"},{"title":"FiberNode结构解析","date":"2023-10-19T12:12:08.000Z","comments":1,"description":"FiberNode（也称为 Fiber 节点）是 React Fiber 架构中的核心概念之一，用于表示组件的层级结构和渲染过程中的任务。","_content":"\n# FiberNode结构解析\n\nFiberNode（也称为 Fiber 节点）是 React Fiber 架构中的核心概念之一，用于表示组件的层级结构和渲染过程中的任务。\n<!-- more -->\n\n\n```javascript\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null; // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n  this.alternate = null;\n\n  {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n```\n\n#### \n\n##### tag\n\n表示 FiberNode 的类型，可以是 HostComponent、ClassComponent、FunctionComponent 等。\n\n##### key\n\n表示组件的唯一标识符，用于在列表渲染中进行元素的重用。\n\n##### elementType\n\n表示组件元素的类型。大部分情况同type，某些情况不同，比如FunctionComponent使用React.memo包裹。\n\n##### type\n\ntype 属性表示 FiberNode 对应的组件类型，可以是字符串（原生组件）或函数/类（自定义组件）。对于 FunctionComponent，指函数本身，对于ClassComponent，指class，对于HostComponent，指DOM节点tagName。\n\n##### stateNode\n\n每个 FiberNode 包含一个 stateNode 属性，它指向组件实例。stateNode 可以是一个 DOM 元素（对于原生组件），也可以是一个类实例（对于自定义组件）。\n\n\n\n> ​\tFiberNode 使用链表结构来表示组件的层级关系\n\n##### return\n\nreturn 指向父节点。\n\n#####   child\n\n  child 属性指向第一个子节点。\n\n##### sibling\n\n  sibling 属性指向下一个兄弟节点。\n\n###### 例子：\n\n```react\nfunction App() {\n  return (\n    <div>\n      i am\n      <span>SongShao</span>\n    </div>\n  )\n}\n\n```\n\n对应的`Fiber树`结构\n\n```sh\n\t\t    App\n\t\t    ||\n\t  child || return\n\t\t\t||\n    --------div ----------------\n\t        ||  \t\t\t ||\n\t  child || return  child || return \n            ||\t\t\t\t ||\n           i am ----------- span\n                  sibling    ||\n              \t\t   child || return\n              \t\t \t     ||\n              \t\t      SongShao\n       \n```\n\n> 这里需要提一下，为什么父级指针叫做`return`而不是`parent`或者`father`呢？因为作为一个工作单元，`return`指节点执完`completeWork`（本章后面会介绍）后会返回的下一个节点。子`Fiber节点`及其兄弟节点完成工作后会返回其父级节点，所以用`return`指代父级节点。\n\n##### index\n\n在父节点中的索引位置。\n\n##### ref\n\n用于引用组件。\n\n##### pendingProps\n\n组件的待处理属性。\n\n##### memoizedProps 和 memoizedState\n\n这些属性保存了组件的当前状态（props 和 state）。在渲染过程中，React 使用 memoizedProps 和 memoizedState 保存组件的最新状态，并通过比较前后两次状态的差异，确定是否需要更新组件。\n\n##### updateQueue\n\n用于存储组件的更新队列。\n\n##### dependencies\n\n表示组件的依赖项。\n\n##### mode\n\n表示渲染模式。\n\n##### flags 和 subtreeFlags\n\n表示 FiberNode 的状态标志。\n\n##### deletions\n\n表示待删除的节点。\n\n##### lanes 和 childLanes\n\n表示调度的优先级。\n\n##### alternate\n\nalternate 属性指向 FiberNode 的替代节点。在渲染过程中，React 会创建两个 FiberNode，一个表示当前渲染状态，另一个表示下一次渲染状态。通过 alternate 属性，React 在两个状态之间进行比较，找出需要更新的节点。\n\n##### actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\n\n用于记录组件的实际渲染时间和基准时间。\n\n##### __debugSource、__debugOwner、__debugNeedsRemount、__debugHookTypes\n\n用于调试和内部记录。","source":"_posts/react/fiberNode.md","raw":"---\ntitle: FiberNode结构解析\npermalink: /react/fiber/node.html\ndate: 2023-10-19 20:12:08\ntag: [前端, react, JavaScript, Fiber]\ncomments: true\ndescription: FiberNode（也称为 Fiber 节点）是 React Fiber 架构中的核心概念之一，用于表示组件的层级结构和渲染过程中的任务。\ncategories: \n - React\n - Fiber\n---\n\n# FiberNode结构解析\n\nFiberNode（也称为 Fiber 节点）是 React Fiber 架构中的核心概念之一，用于表示组件的层级结构和渲染过程中的任务。\n<!-- more -->\n\n\n```javascript\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null; // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n  this.alternate = null;\n\n  {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n```\n\n#### \n\n##### tag\n\n表示 FiberNode 的类型，可以是 HostComponent、ClassComponent、FunctionComponent 等。\n\n##### key\n\n表示组件的唯一标识符，用于在列表渲染中进行元素的重用。\n\n##### elementType\n\n表示组件元素的类型。大部分情况同type，某些情况不同，比如FunctionComponent使用React.memo包裹。\n\n##### type\n\ntype 属性表示 FiberNode 对应的组件类型，可以是字符串（原生组件）或函数/类（自定义组件）。对于 FunctionComponent，指函数本身，对于ClassComponent，指class，对于HostComponent，指DOM节点tagName。\n\n##### stateNode\n\n每个 FiberNode 包含一个 stateNode 属性，它指向组件实例。stateNode 可以是一个 DOM 元素（对于原生组件），也可以是一个类实例（对于自定义组件）。\n\n\n\n> ​\tFiberNode 使用链表结构来表示组件的层级关系\n\n##### return\n\nreturn 指向父节点。\n\n#####   child\n\n  child 属性指向第一个子节点。\n\n##### sibling\n\n  sibling 属性指向下一个兄弟节点。\n\n###### 例子：\n\n```react\nfunction App() {\n  return (\n    <div>\n      i am\n      <span>SongShao</span>\n    </div>\n  )\n}\n\n```\n\n对应的`Fiber树`结构\n\n```sh\n\t\t    App\n\t\t    ||\n\t  child || return\n\t\t\t||\n    --------div ----------------\n\t        ||  \t\t\t ||\n\t  child || return  child || return \n            ||\t\t\t\t ||\n           i am ----------- span\n                  sibling    ||\n              \t\t   child || return\n              \t\t \t     ||\n              \t\t      SongShao\n       \n```\n\n> 这里需要提一下，为什么父级指针叫做`return`而不是`parent`或者`father`呢？因为作为一个工作单元，`return`指节点执完`completeWork`（本章后面会介绍）后会返回的下一个节点。子`Fiber节点`及其兄弟节点完成工作后会返回其父级节点，所以用`return`指代父级节点。\n\n##### index\n\n在父节点中的索引位置。\n\n##### ref\n\n用于引用组件。\n\n##### pendingProps\n\n组件的待处理属性。\n\n##### memoizedProps 和 memoizedState\n\n这些属性保存了组件的当前状态（props 和 state）。在渲染过程中，React 使用 memoizedProps 和 memoizedState 保存组件的最新状态，并通过比较前后两次状态的差异，确定是否需要更新组件。\n\n##### updateQueue\n\n用于存储组件的更新队列。\n\n##### dependencies\n\n表示组件的依赖项。\n\n##### mode\n\n表示渲染模式。\n\n##### flags 和 subtreeFlags\n\n表示 FiberNode 的状态标志。\n\n##### deletions\n\n表示待删除的节点。\n\n##### lanes 和 childLanes\n\n表示调度的优先级。\n\n##### alternate\n\nalternate 属性指向 FiberNode 的替代节点。在渲染过程中，React 会创建两个 FiberNode，一个表示当前渲染状态，另一个表示下一次渲染状态。通过 alternate 属性，React 在两个状态之间进行比较，找出需要更新的节点。\n\n##### actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\n\n用于记录组件的实际渲染时间和基准时间。\n\n##### __debugSource、__debugOwner、__debugNeedsRemount、__debugHookTypes\n\n用于调试和内部记录。","slug":"react/fiberNode","published":1,"updated":"2023-10-21T13:56:49.549Z","__permalink":"/react/fiber/node.html","_id":"clo6whxd60012dif35y7c1wx8","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h1 id=\"FiberNode结构解析\"><a href=\"#FiberNode结构解析\" class=\"headerlink\" title=\"FiberNode结构解析\"></a>FiberNode结构解析</h1><p>FiberNode（也称为 Fiber 节点）是 React Fiber 架构中的核心概念之一，用于表示组件的层级结构和渲染过程中的任务。</p>\n<span id=\"more\"></span>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberNode</span>(<span class=\"params\">tag, pendingProps, key, mode</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Instance</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">elementType</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">stateNode</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// Fiber</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">return</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">child</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sibling</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">index</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">ref</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">pendingProps</span> = pendingProps;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">memoizedProps</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">updateQueue</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">memoizedState</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">dependencies</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">mode</span> = mode; <span class=\"comment\">// Effects</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">flags</span> = <span class=\"title class_\">NoFlags</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">subtreeFlags</span> = <span class=\"title class_\">NoFlags</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">deletions</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">lanes</span> = <span class=\"title class_\">NoLanes</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">childLanes</span> = <span class=\"title class_\">NoLanes</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Note: The following is done to avoid a v8 performance cliff.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Initializing the fields below to smis and later updating them with</span></span><br><span class=\"line\">    <span class=\"comment\">// double values will cause Fibers to end up having separate shapes.</span></span><br><span class=\"line\">    <span class=\"comment\">// This behavior/bug has something to do with Object.preventExtension().</span></span><br><span class=\"line\">    <span class=\"comment\">// Fortunately this only impacts DEV builds.</span></span><br><span class=\"line\">    <span class=\"comment\">// Unfortunately it makes React unusably slow for some applications.</span></span><br><span class=\"line\">    <span class=\"comment\">// To work around this, initialize the fields below with doubles.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Learn more about this here:</span></span><br><span class=\"line\">    <span class=\"comment\">// https://github.com/facebook/react/issues/14365</span></span><br><span class=\"line\">    <span class=\"comment\">// https://bugs.chromium.org/p/v8/issues/detail?id=8538</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualStartTime</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selfBaseDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">treeBaseDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>; <span class=\"comment\">// It&#x27;s okay to replace the initial doubles with smis after initialization.</span></span><br><span class=\"line\">    <span class=\"comment\">// This won&#x27;t trigger the performance cliff mentioned above,</span></span><br><span class=\"line\">    <span class=\"comment\">// and it simplifies other profiler code (including DevTools).</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualStartTime</span> = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selfBaseDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">treeBaseDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This isn&#x27;t directly used but is handy for debugging internals:</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugSource</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugOwner</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugNeedsRemount</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugHookTypes</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasBadMapPolyfill &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Object</span>.<span class=\"property\">preventExtensions</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Object</span>.<span class=\"title function_\">preventExtensions</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><h5 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h5><p>表示 FiberNode 的类型，可以是 HostComponent、ClassComponent、FunctionComponent 等。</p>\n<h5 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h5><p>表示组件的唯一标识符，用于在列表渲染中进行元素的重用。</p>\n<h5 id=\"elementType\"><a href=\"#elementType\" class=\"headerlink\" title=\"elementType\"></a>elementType</h5><p>表示组件元素的类型。大部分情况同type，某些情况不同，比如FunctionComponent使用React.memo包裹。</p>\n<h5 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h5><p>type 属性表示 FiberNode 对应的组件类型，可以是字符串（原生组件）或函数&#x2F;类（自定义组件）。对于 FunctionComponent，指函数本身，对于ClassComponent，指class，对于HostComponent，指DOM节点tagName。</p>\n<h5 id=\"stateNode\"><a href=\"#stateNode\" class=\"headerlink\" title=\"stateNode\"></a>stateNode</h5><p>每个 FiberNode 包含一个 stateNode 属性，它指向组件实例。stateNode 可以是一个 DOM 元素（对于原生组件），也可以是一个类实例（对于自定义组件）。</p>\n<blockquote>\n<p>​\tFiberNode 使用链表结构来表示组件的层级关系</p>\n</blockquote>\n<h5 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h5><p>return 指向父节点。</p>\n<h5 id=\"child\"><a href=\"#child\" class=\"headerlink\" title=\"child\"></a>child</h5><p>  child 属性指向第一个子节点。</p>\n<h5 id=\"sibling\"><a href=\"#sibling\" class=\"headerlink\" title=\"sibling\"></a>sibling</h5><p>  sibling 属性指向下一个兄弟节点。</p>\n<h6 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function App() &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      i am</span><br><span class=\"line\">      &lt;span&gt;SongShao&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对应的<code>Fiber树</code>结构</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   App</span><br><span class=\"line\">   ||</span><br><span class=\"line\">child || <span class=\"built_in\">return</span></span><br><span class=\"line\">||</span><br><span class=\"line\"> --------div ----------------</span><br><span class=\"line\">      ||  \t\t\t ||</span><br><span class=\"line\">child || <span class=\"built_in\">return</span>  child || <span class=\"built_in\">return</span> </span><br><span class=\"line\">         ||\t\t\t\t ||</span><br><span class=\"line\">        i am ----------- span</span><br><span class=\"line\">               sibling    ||</span><br><span class=\"line\">           \t\t   child || <span class=\"built_in\">return</span></span><br><span class=\"line\">           \t\t \t     ||</span><br><span class=\"line\">           \t\t      SongShao</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里需要提一下，为什么父级指针叫做<code>return</code>而不是<code>parent</code>或者<code>father</code>呢？因为作为一个工作单元，<code>return</code>指节点执完<code>completeWork</code>（本章后面会介绍）后会返回的下一个节点。子<code>Fiber节点</code>及其兄弟节点完成工作后会返回其父级节点，所以用<code>return</code>指代父级节点。</p>\n</blockquote>\n<h5 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h5><p>在父节点中的索引位置。</p>\n<h5 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h5><p>用于引用组件。</p>\n<h5 id=\"pendingProps\"><a href=\"#pendingProps\" class=\"headerlink\" title=\"pendingProps\"></a>pendingProps</h5><p>组件的待处理属性。</p>\n<h5 id=\"memoizedProps-和-memoizedState\"><a href=\"#memoizedProps-和-memoizedState\" class=\"headerlink\" title=\"memoizedProps 和 memoizedState\"></a>memoizedProps 和 memoizedState</h5><p>这些属性保存了组件的当前状态（props 和 state）。在渲染过程中，React 使用 memoizedProps 和 memoizedState 保存组件的最新状态，并通过比较前后两次状态的差异，确定是否需要更新组件。</p>\n<h5 id=\"updateQueue\"><a href=\"#updateQueue\" class=\"headerlink\" title=\"updateQueue\"></a>updateQueue</h5><p>用于存储组件的更新队列。</p>\n<h5 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h5><p>表示组件的依赖项。</p>\n<h5 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h5><p>表示渲染模式。</p>\n<h5 id=\"flags-和-subtreeFlags\"><a href=\"#flags-和-subtreeFlags\" class=\"headerlink\" title=\"flags 和 subtreeFlags\"></a>flags 和 subtreeFlags</h5><p>表示 FiberNode 的状态标志。</p>\n<h5 id=\"deletions\"><a href=\"#deletions\" class=\"headerlink\" title=\"deletions\"></a>deletions</h5><p>表示待删除的节点。</p>\n<h5 id=\"lanes-和-childLanes\"><a href=\"#lanes-和-childLanes\" class=\"headerlink\" title=\"lanes 和 childLanes\"></a>lanes 和 childLanes</h5><p>表示调度的优先级。</p>\n<h5 id=\"alternate\"><a href=\"#alternate\" class=\"headerlink\" title=\"alternate\"></a>alternate</h5><p>alternate 属性指向 FiberNode 的替代节点。在渲染过程中，React 会创建两个 FiberNode，一个表示当前渲染状态，另一个表示下一次渲染状态。通过 alternate 属性，React 在两个状态之间进行比较，找出需要更新的节点。</p>\n<h5 id=\"actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\"><a href=\"#actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\" class=\"headerlink\" title=\"actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\"></a>actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration</h5><p>用于记录组件的实际渲染时间和基准时间。</p>\n<h5 id=\"debugSource、-debugOwner、-debugNeedsRemount、-debugHookTypes\"><a href=\"#debugSource、-debugOwner、-debugNeedsRemount、-debugHookTypes\" class=\"headerlink\" title=\"__debugSource、__debugOwner、__debugNeedsRemount、__debugHookTypes\"></a>__debugSource、__debugOwner、__debugNeedsRemount、__debugHookTypes</h5><p>用于调试和内部记录。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/fiber.html","/react/fiber/implement.html","/react/fiber/works.html","/react/implement.html","/react/synthetic/event.html"],"length":3431,"excerpt":"<h1 id=\"FiberNode结构解析\"><a href=\"#FiberNode结构解析\" class=\"headerlink\" title=\"FiberNode结构解析\"></a>FiberNode结构解析</h1><p>FiberNode（也称为 Fiber 节点）是 React Fiber 架构中的核心概念之一，用于表示组件的层级结构和渲染过程中的任务。</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberNode</span>(<span class=\"params\">tag, pendingProps, key, mode</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Instance</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">elementType</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">stateNode</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// Fiber</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">return</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">child</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sibling</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">index</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">ref</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">pendingProps</span> = pendingProps;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">memoizedProps</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">updateQueue</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">memoizedState</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">dependencies</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">mode</span> = mode; <span class=\"comment\">// Effects</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">flags</span> = <span class=\"title class_\">NoFlags</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">subtreeFlags</span> = <span class=\"title class_\">NoFlags</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">deletions</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">lanes</span> = <span class=\"title class_\">NoLanes</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">childLanes</span> = <span class=\"title class_\">NoLanes</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Note: The following is done to avoid a v8 performance cliff.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Initializing the fields below to smis and later updating them with</span></span><br><span class=\"line\">    <span class=\"comment\">// double values will cause Fibers to end up having separate shapes.</span></span><br><span class=\"line\">    <span class=\"comment\">// This behavior/bug has something to do with Object.preventExtension().</span></span><br><span class=\"line\">    <span class=\"comment\">// Fortunately this only impacts DEV builds.</span></span><br><span class=\"line\">    <span class=\"comment\">// Unfortunately it makes React unusably slow for some applications.</span></span><br><span class=\"line\">    <span class=\"comment\">// To work around this, initialize the fields below with doubles.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Learn more about this here:</span></span><br><span class=\"line\">    <span class=\"comment\">// https://github.com/facebook/react/issues/14365</span></span><br><span class=\"line\">    <span class=\"comment\">// https://bugs.chromium.org/p/v8/issues/detail?id=8538</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualStartTime</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selfBaseDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">treeBaseDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>; <span class=\"comment\">// It&#x27;s okay to replace the initial doubles with smis after initialization.</span></span><br><span class=\"line\">    <span class=\"comment\">// This won&#x27;t trigger the performance cliff mentioned above,</span></span><br><span class=\"line\">    <span class=\"comment\">// and it simplifies other profiler code (including DevTools).</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualStartTime</span> = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selfBaseDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">treeBaseDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This isn&#x27;t directly used but is handy for debugging internals:</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugSource</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugOwner</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugNeedsRemount</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugHookTypes</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasBadMapPolyfill &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Object</span>.<span class=\"property\">preventExtensions</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Object</span>.<span class=\"title function_\">preventExtensions</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><h5 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h5><p>表示 FiberNode 的类型，可以是 HostComponent、ClassComponent、FunctionComponent 等。</p>\n<h5 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h5><p>表示组件的唯一标识符，用于在列表渲染中进行元素的重用。</p>\n<h5 id=\"elementType\"><a href=\"#elementType\" class=\"headerlink\" title=\"elementType\"></a>elementType</h5><p>表示组件元素的类型。大部分情况同type，某些情况不同，比如FunctionComponent使用React.memo包裹。</p>\n<h5 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h5><p>type 属性表示 FiberNode 对应的组件类型，可以是字符串（原生组件）或函数&#x2F;类（自定义组件）。对于 FunctionComponent，指函数本身，对于ClassComponent，指class，对于HostComponent，指DOM节点tagName。</p>\n<h5 id=\"stateNode\"><a href=\"#stateNode\" class=\"headerlink\" title=\"stateNode\"></a>stateNode</h5><p>每个 FiberNode 包含一个 stateNode 属性，它指向组件实例。stateNode 可以是一个 DOM 元素（对于原生组件），也可以是一个类实例（对于自定义组件）。</p>\n<blockquote>\n<p>​\tFiberNode 使用链表结构来表示组件的层级关系</p>\n</blockquote>\n<h5 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h5><p>return 指向父节点。</p>\n<h5 id=\"child\"><a href=\"#child\" class=\"headerlink\" title=\"child\"></a>child</h5><p>  child 属性指向第一个子节点。</p>\n<h5 id=\"sibling\"><a href=\"#sibling\" class=\"headerlink\" title=\"sibling\"></a>sibling</h5><p>  sibling 属性指向下一个兄弟节点。</p>\n<h6 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function App() &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      i am</span><br><span class=\"line\">      &lt;span&gt;SongShao&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对应的<code>Fiber树</code>结构</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   App</span><br><span class=\"line\">   ||</span><br><span class=\"line\">child || <span class=\"built_in\">return</span></span><br><span class=\"line\">||</span><br><span class=\"line\"> --------div ----------------</span><br><span class=\"line\">      ||  \t\t\t ||</span><br><span class=\"line\">child || <span class=\"built_in\">return</span>  child || <span class=\"built_in\">return</span> </span><br><span class=\"line\">         ||\t\t\t\t ||</span><br><span class=\"line\">        i am ----------- span</span><br><span class=\"line\">               sibling    ||</span><br><span class=\"line\">           \t\t   child || <span class=\"built_in\">return</span></span><br><span class=\"line\">           \t\t \t     ||</span><br><span class=\"line\">           \t\t      SongShao</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里需要提一下，为什么父级指针叫做<code>return</code>而不是<code>parent</code>或者<code>father</code>呢？因为作为一个工作单元，<code>return</code>指节点执完<code>completeWork</code>（本章后面会介绍）后会返回的下一个节点。子<code>Fiber节点</code>及其兄弟节点完成工作后会返回其父级节点，所以用<code>return</code>指代父级节点。</p>\n</blockquote>\n<h5 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h5><p>在父节点中的索引位置。</p>\n<h5 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h5><p>用于引用组件。</p>\n<h5 id=\"pendingProps\"><a href=\"#pendingProps\" class=\"headerlink\" title=\"pendingProps\"></a>pendingProps</h5><p>组件的待处理属性。</p>\n<h5 id=\"memoizedProps-和-memoizedState\"><a href=\"#memoizedProps-和-memoizedState\" class=\"headerlink\" title=\"memoizedProps 和 memoizedState\"></a>memoizedProps 和 memoizedState</h5><p>这些属性保存了组件的当前状态（props 和 state）。在渲染过程中，React 使用 memoizedProps 和 memoizedState 保存组件的最新状态，并通过比较前后两次状态的差异，确定是否需要更新组件。</p>\n<h5 id=\"updateQueue\"><a href=\"#updateQueue\" class=\"headerlink\" title=\"updateQueue\"></a>updateQueue</h5><p>用于存储组件的更新队列。</p>\n<h5 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h5><p>表示组件的依赖项。</p>\n<h5 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h5><p>表示渲染模式。</p>\n<h5 id=\"flags-和-subtreeFlags\"><a href=\"#flags-和-subtreeFlags\" class=\"headerlink\" title=\"flags 和 subtreeFlags\"></a>flags 和 subtreeFlags</h5><p>表示 FiberNode 的状态标志。</p>\n<h5 id=\"deletions\"><a href=\"#deletions\" class=\"headerlink\" title=\"deletions\"></a>deletions</h5><p>表示待删除的节点。</p>\n<h5 id=\"lanes-和-childLanes\"><a href=\"#lanes-和-childLanes\" class=\"headerlink\" title=\"lanes 和 childLanes\"></a>lanes 和 childLanes</h5><p>表示调度的优先级。</p>\n<h5 id=\"alternate\"><a href=\"#alternate\" class=\"headerlink\" title=\"alternate\"></a>alternate</h5><p>alternate 属性指向 FiberNode 的替代节点。在渲染过程中，React 会创建两个 FiberNode，一个表示当前渲染状态，另一个表示下一次渲染状态。通过 alternate 属性，React 在两个状态之间进行比较，找出需要更新的节点。</p>\n<h5 id=\"actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\"><a href=\"#actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\" class=\"headerlink\" title=\"actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\"></a>actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration</h5><p>用于记录组件的实际渲染时间和基准时间。</p>\n<h5 id=\"debugSource、-debugOwner、-debugNeedsRemount、-debugHookTypes\"><a href=\"#debugSource、-debugOwner、-debugNeedsRemount、-debugHookTypes\" class=\"headerlink\" title=\"__debugSource、__debugOwner、__debugNeedsRemount、__debugHookTypes\"></a>__debugSource、__debugOwner、__debugNeedsRemount、__debugHookTypes</h5><p>用于调试和内部记录。</p>"},{"title":"Fiber架构工作原理","date":"2023-10-25T10:12:49.000Z","comments":1,"description":"在`React`中最多会同时存在两棵`Fiber树`。当前屏幕上显示内容对应的`Fiber树`称为`current Fiber树`，正在内存中构建的`Fiber树`称为`workInProgress Fiber树`。","_content":"\n## 什么是“双缓存”？\n\n\"双缓存\"是一种常见的图形处理技术，用于在图像渲染中实现平滑的、无闪烁的更新效果。它通过使用两个缓冲区（即两块内存区域）来完成。其中一个缓冲区用于显示图像，而另一个缓冲区则用于在后台进行图像的更新和绘制。当更新完成后，通过交换两个缓冲区的引用，以实现无缝的切换和更新。\n\n在图形处理中使用双缓存的好处包括：\n\n1. 无闪烁：通过在后台缓冲区进行绘制，然后将绘制结果一次性地切换到显示缓冲区，可以避免在图像更新过程中的闪烁问题。这对于实时图形、动画和视频等应用非常重要。\n2. 平滑更新：使用双缓冲可以实现平滑的更新效果。在后台缓冲区进行绘制和更新，然后在更新完成后将其切换到显示缓冲区，可以避免直接在显示缓冲区上进行绘制和修改，从而减少了可能出现的可见的渲染中间状态。\n3. 减少渲染延迟：使用双缓冲可以减少渲染延迟。由于绘制和更新发生在后台缓冲区，因此可以在绘制完成后立即切换到显示缓冲区，从而减少了等待绘制完成的时间，提高了渲染效率和响应时间。\n\n双缓存技术在图形处理、动画、视频播放和游戏开发等领域得到广泛应用。在图形库、操作系统和桌面应用程序中，双缓存被用于实现平滑的图像渲染和交互效果。在前端开发中，双缓存也被广泛应用于图形绘制和动画效果的实现，以提供更好的用户体验。\n\n`React`使用“双缓存”来完成`Fiber树`的构建与替换——对应着`DOM树`的创建与更新。\n\n## 双缓存Fiber树\n\n在`React`中最多会同时存在两棵`Fiber树`。当前屏幕上显示内容对应的`Fiber树`称为`current Fiber树`，正在内存中构建的`Fiber树`称为`workInProgress Fiber树`。\n\n`current Fiber树`中的`Fiber节点`被称为`current fiber`，`workInProgress Fiber树`中的`Fiber节点`被称为`workInProgress fiber`，他们通过`alternate`属性连接。\n\n```js\ncurrentFiber.alternate === workInProgressFiber;\nworkInProgressFiber.alternate === currentFiber;\n```\n\n`React `应用的根节点通过使 `current ` 指针在不同 `Fiber树` 的 `rootFiber` 间切换来完成 `current Fiber` 树指向的切换。\n\n即当 `workInProgress Fiber树` 构建完成交给 `Renderer` 渲染在页面上后，应用根节点的 `current` 指针指向 `workInProgress Fiber树` ，此时`workInProgress Fiber树`就变为`current Fiber树`。\n\n每次状态更新都会产生新的`workInProgress Fiber树`，通过`current`与`workInProgress`的替换，完成`DOM`更新。\n\n接下来我们以具体例子讲解`mount时`、`update时`的构建/替换流程。\n\n## mount时\n\n考虑如下例子：\n\n```js\nfunction App() {\n  return (\n    <h1>hello<span style={{ color: 'red' }}>world</span></h1>\n  )\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n```\n\n1. 首次执行`ReactDOM.render`会创建`fiberRootNode`（源码中叫`fiberRoot`）和`rootFiber`。其中`fiberRootNode`是整个应用的根节点，`rootFiber`是`<App/>`所在组件树的根节点。\n\n之所以要区分`fiberRootNode`与`rootFiber`，是因为在应用中我们可以多次调用`ReactDOM.render`渲染不同的组件树，他们会拥有不同的`rootFiber`。但是整个应用的根节点只有一个，那就是`fiberRootNode`。\n\n`fiberRootNode`的`current`会指向当前页面上已渲染内容对应`Fiber树`，即`current Fiber树`。\n\n![fiberRootNode](https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg)\n\n`fiberRootNode.current = rootFiber;`\n\n由于是首屏渲染，页面中还没有挂载任何`DOM`，所以`fiberRootNode.current`指向的`rootFiber`没有任何`子Fiber节点`（即`current Fiber树`为空）。\n\n2. 接下来进入`render阶段`，根据组件返回的`JSX`在内存中依次创建`Fiber节点`并连接在一起构建`Fiber树`，被称为`workInProgress Fiber树`。（下图中右侧为内存中构建的树，左侧为页面显示的树）\n\n在构建`workInProgress Fiber树`时会尝试复用`current Fiber树`中已有的`Fiber节点`内的属性，在`首屏渲染`时只有`rootFiber`存在对应的`current fiber`（即`rootFiber.alternate`）。\n\n![](https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg)\n\n3. 图中右侧已构建完的`workInProgress Fiber树`在`commit阶段`渲染到页面。\n\n此时`DOM`更新为右侧树对应的样子。`fiberRootNode`的`current`指针指向`workInProgress Fiber树`使其变为`current Fiber 树`。\n\n![](https://react.iamkasong.com/img/wipTreeFinish.png)\n\n## update时\n\n1. 接下来我们点击`p节点`触发状态改变，这会开启一次新的`render阶段`并构建一棵新的`workInProgress Fiber 树`。\n\n   ![](https://react.iamkasong.com/img/wipTreeUpdate.png)\n\n和`mount`时一样，`workInProgress fiber`的创建可以复用`current Fiber树`对应的节点数据。\n\n2. `workInProgress Fiber 树`在`render阶段`完成构建后进入`commit阶段`渲染到页面上。渲染完毕后，`workInProgress Fiber 树`变为`current Fiber 树`。\n\n![渲染过程](https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg)\n","source":"_posts/react/fiberWorksHow.md","raw":"---\ntitle: Fiber架构工作原理\npermalink: /react/fiber/works.html\ndate: 2023-10-25 18:12:49\ntag: [前端, react, JavaScript, Fiber]\ncomments: true\ndescription: 在`React`中最多会同时存在两棵`Fiber树`。当前屏幕上显示内容对应的`Fiber树`称为`current Fiber树`，正在内存中构建的`Fiber树`称为`workInProgress Fiber树`。\ncategories: \n - React\n - Fiber\n---\n\n## 什么是“双缓存”？\n\n\"双缓存\"是一种常见的图形处理技术，用于在图像渲染中实现平滑的、无闪烁的更新效果。它通过使用两个缓冲区（即两块内存区域）来完成。其中一个缓冲区用于显示图像，而另一个缓冲区则用于在后台进行图像的更新和绘制。当更新完成后，通过交换两个缓冲区的引用，以实现无缝的切换和更新。\n\n在图形处理中使用双缓存的好处包括：\n\n1. 无闪烁：通过在后台缓冲区进行绘制，然后将绘制结果一次性地切换到显示缓冲区，可以避免在图像更新过程中的闪烁问题。这对于实时图形、动画和视频等应用非常重要。\n2. 平滑更新：使用双缓冲可以实现平滑的更新效果。在后台缓冲区进行绘制和更新，然后在更新完成后将其切换到显示缓冲区，可以避免直接在显示缓冲区上进行绘制和修改，从而减少了可能出现的可见的渲染中间状态。\n3. 减少渲染延迟：使用双缓冲可以减少渲染延迟。由于绘制和更新发生在后台缓冲区，因此可以在绘制完成后立即切换到显示缓冲区，从而减少了等待绘制完成的时间，提高了渲染效率和响应时间。\n\n双缓存技术在图形处理、动画、视频播放和游戏开发等领域得到广泛应用。在图形库、操作系统和桌面应用程序中，双缓存被用于实现平滑的图像渲染和交互效果。在前端开发中，双缓存也被广泛应用于图形绘制和动画效果的实现，以提供更好的用户体验。\n\n`React`使用“双缓存”来完成`Fiber树`的构建与替换——对应着`DOM树`的创建与更新。\n\n## 双缓存Fiber树\n\n在`React`中最多会同时存在两棵`Fiber树`。当前屏幕上显示内容对应的`Fiber树`称为`current Fiber树`，正在内存中构建的`Fiber树`称为`workInProgress Fiber树`。\n\n`current Fiber树`中的`Fiber节点`被称为`current fiber`，`workInProgress Fiber树`中的`Fiber节点`被称为`workInProgress fiber`，他们通过`alternate`属性连接。\n\n```js\ncurrentFiber.alternate === workInProgressFiber;\nworkInProgressFiber.alternate === currentFiber;\n```\n\n`React `应用的根节点通过使 `current ` 指针在不同 `Fiber树` 的 `rootFiber` 间切换来完成 `current Fiber` 树指向的切换。\n\n即当 `workInProgress Fiber树` 构建完成交给 `Renderer` 渲染在页面上后，应用根节点的 `current` 指针指向 `workInProgress Fiber树` ，此时`workInProgress Fiber树`就变为`current Fiber树`。\n\n每次状态更新都会产生新的`workInProgress Fiber树`，通过`current`与`workInProgress`的替换，完成`DOM`更新。\n\n接下来我们以具体例子讲解`mount时`、`update时`的构建/替换流程。\n\n## mount时\n\n考虑如下例子：\n\n```js\nfunction App() {\n  return (\n    <h1>hello<span style={{ color: 'red' }}>world</span></h1>\n  )\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n```\n\n1. 首次执行`ReactDOM.render`会创建`fiberRootNode`（源码中叫`fiberRoot`）和`rootFiber`。其中`fiberRootNode`是整个应用的根节点，`rootFiber`是`<App/>`所在组件树的根节点。\n\n之所以要区分`fiberRootNode`与`rootFiber`，是因为在应用中我们可以多次调用`ReactDOM.render`渲染不同的组件树，他们会拥有不同的`rootFiber`。但是整个应用的根节点只有一个，那就是`fiberRootNode`。\n\n`fiberRootNode`的`current`会指向当前页面上已渲染内容对应`Fiber树`，即`current Fiber树`。\n\n![fiberRootNode](https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg)\n\n`fiberRootNode.current = rootFiber;`\n\n由于是首屏渲染，页面中还没有挂载任何`DOM`，所以`fiberRootNode.current`指向的`rootFiber`没有任何`子Fiber节点`（即`current Fiber树`为空）。\n\n2. 接下来进入`render阶段`，根据组件返回的`JSX`在内存中依次创建`Fiber节点`并连接在一起构建`Fiber树`，被称为`workInProgress Fiber树`。（下图中右侧为内存中构建的树，左侧为页面显示的树）\n\n在构建`workInProgress Fiber树`时会尝试复用`current Fiber树`中已有的`Fiber节点`内的属性，在`首屏渲染`时只有`rootFiber`存在对应的`current fiber`（即`rootFiber.alternate`）。\n\n![](https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg)\n\n3. 图中右侧已构建完的`workInProgress Fiber树`在`commit阶段`渲染到页面。\n\n此时`DOM`更新为右侧树对应的样子。`fiberRootNode`的`current`指针指向`workInProgress Fiber树`使其变为`current Fiber 树`。\n\n![](https://react.iamkasong.com/img/wipTreeFinish.png)\n\n## update时\n\n1. 接下来我们点击`p节点`触发状态改变，这会开启一次新的`render阶段`并构建一棵新的`workInProgress Fiber 树`。\n\n   ![](https://react.iamkasong.com/img/wipTreeUpdate.png)\n\n和`mount`时一样，`workInProgress fiber`的创建可以复用`current Fiber树`对应的节点数据。\n\n2. `workInProgress Fiber 树`在`render阶段`完成构建后进入`commit阶段`渲染到页面上。渲染完毕后，`workInProgress Fiber 树`变为`current Fiber 树`。\n\n![渲染过程](https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg)\n","slug":"react/fiberWorksHow","published":1,"updated":"2023-10-27T13:18:10.726Z","__permalink":"/react/fiber/works.html","_id":"clo6whxd60016dif3797phg6x","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h2 id=\"什么是“双缓存”？\"><a href=\"#什么是“双缓存”？\" class=\"headerlink\" title=\"什么是“双缓存”？\"></a>什么是“双缓存”？</h2><p>“双缓存”是一种常见的图形处理技术，用于在图像渲染中实现平滑的、无闪烁的更新效果。它通过使用两个缓冲区（即两块内存区域）来完成。其中一个缓冲区用于显示图像，而另一个缓冲区则用于在后台进行图像的更新和绘制。当更新完成后，通过交换两个缓冲区的引用，以实现无缝的切换和更新。</p>\n<p>在图形处理中使用双缓存的好处包括：</p>\n<ol>\n<li>无闪烁：通过在后台缓冲区进行绘制，然后将绘制结果一次性地切换到显示缓冲区，可以避免在图像更新过程中的闪烁问题。这对于实时图形、动画和视频等应用非常重要。</li>\n<li>平滑更新：使用双缓冲可以实现平滑的更新效果。在后台缓冲区进行绘制和更新，然后在更新完成后将其切换到显示缓冲区，可以避免直接在显示缓冲区上进行绘制和修改，从而减少了可能出现的可见的渲染中间状态。</li>\n<li>减少渲染延迟：使用双缓冲可以减少渲染延迟。由于绘制和更新发生在后台缓冲区，因此可以在绘制完成后立即切换到显示缓冲区，从而减少了等待绘制完成的时间，提高了渲染效率和响应时间。</li>\n</ol>\n<p>双缓存技术在图形处理、动画、视频播放和游戏开发等领域得到广泛应用。在图形库、操作系统和桌面应用程序中，双缓存被用于实现平滑的图像渲染和交互效果。在前端开发中，双缓存也被广泛应用于图形绘制和动画效果的实现，以提供更好的用户体验。</p>\n<p><code>React</code>使用“双缓存”来完成<code>Fiber树</code>的构建与替换——对应着<code>DOM树</code>的创建与更新。</p>\n<h2 id=\"双缓存Fiber树\"><a href=\"#双缓存Fiber树\" class=\"headerlink\" title=\"双缓存Fiber树\"></a>双缓存Fiber树</h2><p>在<code>React</code>中最多会同时存在两棵<code>Fiber树</code>。当前屏幕上显示内容对应的<code>Fiber树</code>称为<code>current Fiber树</code>，正在内存中构建的<code>Fiber树</code>称为<code>workInProgress Fiber树</code>。</p>\n<p><code>current Fiber树</code>中的<code>Fiber节点</code>被称为<code>current fiber</code>，<code>workInProgress Fiber树</code>中的<code>Fiber节点</code>被称为<code>workInProgress fiber</code>，他们通过<code>alternate</code>属性连接。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">currentFiber.<span class=\"property\">alternate</span> === workInProgressFiber;</span><br><span class=\"line\">workInProgressFiber.<span class=\"property\">alternate</span> === currentFiber;</span><br></pre></td></tr></table></figure>\n\n<p><code>React </code>应用的根节点通过使 <code>current </code> 指针在不同 <code>Fiber树</code> 的 <code>rootFiber</code> 间切换来完成 <code>current Fiber</code> 树指向的切换。</p>\n<p>即当 <code>workInProgress Fiber树</code> 构建完成交给 <code>Renderer</code> 渲染在页面上后，应用根节点的 <code>current</code> 指针指向 <code>workInProgress Fiber树</code> ，此时<code>workInProgress Fiber树</code>就变为<code>current Fiber树</code>。</p>\n<p>每次状态更新都会产生新的<code>workInProgress Fiber树</code>，通过<code>current</code>与<code>workInProgress</code>的替换，完成<code>DOM</code>更新。</p>\n<p>接下来我们以具体例子讲解<code>mount时</code>、<code>update时</code>的构建&#x2F;替换流程。</p>\n<h2 id=\"mount时\"><a href=\"#mount时\" class=\"headerlink\" title=\"mount时\"></a>mount时</h2><p>考虑如下例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">red</span>&#x27; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span>/&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>首次执行<code>ReactDOM.render</code>会创建<code>fiberRootNode</code>（源码中叫<code>fiberRoot</code>）和<code>rootFiber</code>。其中<code>fiberRootNode</code>是整个应用的根节点，<code>rootFiber</code>是<code>&lt;App/&gt;</code>所在组件树的根节点。</li>\n</ol>\n<p>之所以要区分<code>fiberRootNode</code>与<code>rootFiber</code>，是因为在应用中我们可以多次调用<code>ReactDOM.render</code>渲染不同的组件树，他们会拥有不同的<code>rootFiber</code>。但是整个应用的根节点只有一个，那就是<code>fiberRootNode</code>。</p>\n<p><code>fiberRootNode</code>的<code>current</code>会指向当前页面上已渲染内容对应<code>Fiber树</code>，即<code>current Fiber树</code>。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"fiberRootNode\"></p>\n<p><code>fiberRootNode.current = rootFiber;</code></p>\n<p>由于是首屏渲染，页面中还没有挂载任何<code>DOM</code>，所以<code>fiberRootNode.current</code>指向的<code>rootFiber</code>没有任何<code>子Fiber节点</code>（即<code>current Fiber树</code>为空）。</p>\n<ol start=\"2\">\n<li>接下来进入<code>render阶段</code>，根据组件返回的<code>JSX</code>在内存中依次创建<code>Fiber节点</code>并连接在一起构建<code>Fiber树</code>，被称为<code>workInProgress Fiber树</code>。（下图中右侧为内存中构建的树，左侧为页面显示的树）</li>\n</ol>\n<p>在构建<code>workInProgress Fiber树</code>时会尝试复用<code>current Fiber树</code>中已有的<code>Fiber节点</code>内的属性，在<code>首屏渲染</code>时只有<code>rootFiber</code>存在对应的<code>current fiber</code>（即<code>rootFiber.alternate</code>）。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg\"></p>\n<ol start=\"3\">\n<li>图中右侧已构建完的<code>workInProgress Fiber树</code>在<code>commit阶段</code>渲染到页面。</li>\n</ol>\n<p>此时<code>DOM</code>更新为右侧树对应的样子。<code>fiberRootNode</code>的<code>current</code>指针指向<code>workInProgress Fiber树</code>使其变为<code>current Fiber 树</code>。</p>\n<p><img src=\"https://react.iamkasong.com/img/wipTreeFinish.png\"></p>\n<h2 id=\"update时\"><a href=\"#update时\" class=\"headerlink\" title=\"update时\"></a>update时</h2><ol>\n<li><p>接下来我们点击<code>p节点</code>触发状态改变，这会开启一次新的<code>render阶段</code>并构建一棵新的<code>workInProgress Fiber 树</code>。</p>\n<p><img src=\"https://react.iamkasong.com/img/wipTreeUpdate.png\"></p>\n</li>\n</ol>\n<p>和<code>mount</code>时一样，<code>workInProgress fiber</code>的创建可以复用<code>current Fiber树</code>对应的节点数据。</p>\n<ol start=\"2\">\n<li><code>workInProgress Fiber 树</code>在<code>render阶段</code>完成构建后进入<code>commit阶段</code>渲染到页面上。渲染完毕后，<code>workInProgress Fiber 树</code>变为<code>current Fiber 树</code>。</li>\n</ol>\n<p><img src=\"https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg\" alt=\"渲染过程\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/fiber.html","/react/implement.html","/react/fiber/implement.html","/react/fiber/node.html"],"length":2381,"excerpt":"","more":"<h2 id=\"什么是“双缓存”？\"><a href=\"#什么是“双缓存”？\" class=\"headerlink\" title=\"什么是“双缓存”？\"></a>什么是“双缓存”？</h2><p>“双缓存”是一种常见的图形处理技术，用于在图像渲染中实现平滑的、无闪烁的更新效果。它通过使用两个缓冲区（即两块内存区域）来完成。其中一个缓冲区用于显示图像，而另一个缓冲区则用于在后台进行图像的更新和绘制。当更新完成后，通过交换两个缓冲区的引用，以实现无缝的切换和更新。</p>\n<p>在图形处理中使用双缓存的好处包括：</p>\n<ol>\n<li>无闪烁：通过在后台缓冲区进行绘制，然后将绘制结果一次性地切换到显示缓冲区，可以避免在图像更新过程中的闪烁问题。这对于实时图形、动画和视频等应用非常重要。</li>\n<li>平滑更新：使用双缓冲可以实现平滑的更新效果。在后台缓冲区进行绘制和更新，然后在更新完成后将其切换到显示缓冲区，可以避免直接在显示缓冲区上进行绘制和修改，从而减少了可能出现的可见的渲染中间状态。</li>\n<li>减少渲染延迟：使用双缓冲可以减少渲染延迟。由于绘制和更新发生在后台缓冲区，因此可以在绘制完成后立即切换到显示缓冲区，从而减少了等待绘制完成的时间，提高了渲染效率和响应时间。</li>\n</ol>\n<p>双缓存技术在图形处理、动画、视频播放和游戏开发等领域得到广泛应用。在图形库、操作系统和桌面应用程序中，双缓存被用于实现平滑的图像渲染和交互效果。在前端开发中，双缓存也被广泛应用于图形绘制和动画效果的实现，以提供更好的用户体验。</p>\n<p><code>React</code>使用“双缓存”来完成<code>Fiber树</code>的构建与替换——对应着<code>DOM树</code>的创建与更新。</p>\n<h2 id=\"双缓存Fiber树\"><a href=\"#双缓存Fiber树\" class=\"headerlink\" title=\"双缓存Fiber树\"></a>双缓存Fiber树</h2><p>在<code>React</code>中最多会同时存在两棵<code>Fiber树</code>。当前屏幕上显示内容对应的<code>Fiber树</code>称为<code>current Fiber树</code>，正在内存中构建的<code>Fiber树</code>称为<code>workInProgress Fiber树</code>。</p>\n<p><code>current Fiber树</code>中的<code>Fiber节点</code>被称为<code>current fiber</code>，<code>workInProgress Fiber树</code>中的<code>Fiber节点</code>被称为<code>workInProgress fiber</code>，他们通过<code>alternate</code>属性连接。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">currentFiber.<span class=\"property\">alternate</span> === workInProgressFiber;</span><br><span class=\"line\">workInProgressFiber.<span class=\"property\">alternate</span> === currentFiber;</span><br></pre></td></tr></table></figure>\n\n<p><code>React </code>应用的根节点通过使 <code>current </code> 指针在不同 <code>Fiber树</code> 的 <code>rootFiber</code> 间切换来完成 <code>current Fiber</code> 树指向的切换。</p>\n<p>即当 <code>workInProgress Fiber树</code> 构建完成交给 <code>Renderer</code> 渲染在页面上后，应用根节点的 <code>current</code> 指针指向 <code>workInProgress Fiber树</code> ，此时<code>workInProgress Fiber树</code>就变为<code>current Fiber树</code>。</p>\n<p>每次状态更新都会产生新的<code>workInProgress Fiber树</code>，通过<code>current</code>与<code>workInProgress</code>的替换，完成<code>DOM</code>更新。</p>\n<p>接下来我们以具体例子讲解<code>mount时</code>、<code>update时</code>的构建&#x2F;替换流程。</p>\n<h2 id=\"mount时\"><a href=\"#mount时\" class=\"headerlink\" title=\"mount时\"></a>mount时</h2><p>考虑如下例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">red</span>&#x27; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span>/&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>首次执行<code>ReactDOM.render</code>会创建<code>fiberRootNode</code>（源码中叫<code>fiberRoot</code>）和<code>rootFiber</code>。其中<code>fiberRootNode</code>是整个应用的根节点，<code>rootFiber</code>是<code>&lt;App/&gt;</code>所在组件树的根节点。</li>\n</ol>\n<p>之所以要区分<code>fiberRootNode</code>与<code>rootFiber</code>，是因为在应用中我们可以多次调用<code>ReactDOM.render</code>渲染不同的组件树，他们会拥有不同的<code>rootFiber</code>。但是整个应用的根节点只有一个，那就是<code>fiberRootNode</code>。</p>\n<p><code>fiberRootNode</code>的<code>current</code>会指向当前页面上已渲染内容对应<code>Fiber树</code>，即<code>current Fiber树</code>。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"fiberRootNode\"></p>\n<p><code>fiberRootNode.current = rootFiber;</code></p>\n<p>由于是首屏渲染，页面中还没有挂载任何<code>DOM</code>，所以<code>fiberRootNode.current</code>指向的<code>rootFiber</code>没有任何<code>子Fiber节点</code>（即<code>current Fiber树</code>为空）。</p>\n<ol start=\"2\">\n<li>接下来进入<code>render阶段</code>，根据组件返回的<code>JSX</code>在内存中依次创建<code>Fiber节点</code>并连接在一起构建<code>Fiber树</code>，被称为<code>workInProgress Fiber树</code>。（下图中右侧为内存中构建的树，左侧为页面显示的树）</li>\n</ol>\n<p>在构建<code>workInProgress Fiber树</code>时会尝试复用<code>current Fiber树</code>中已有的<code>Fiber节点</code>内的属性，在<code>首屏渲染</code>时只有<code>rootFiber</code>存在对应的<code>current fiber</code>（即<code>rootFiber.alternate</code>）。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg\"></p>\n<ol start=\"3\">\n<li>图中右侧已构建完的<code>workInProgress Fiber树</code>在<code>commit阶段</code>渲染到页面。</li>\n</ol>\n<p>此时<code>DOM</code>更新为右侧树对应的样子。<code>fiberRootNode</code>的<code>current</code>指针指向<code>workInProgress Fiber树</code>使其变为<code>current Fiber 树</code>。</p>\n<p><img src=\"https://react.iamkasong.com/img/wipTreeFinish.png\"></p>\n<h2 id=\"update时\"><a href=\"#update时\" class=\"headerlink\" title=\"update时\"></a>update时</h2><ol>\n<li><p>接下来我们点击<code>p节点</code>触发状态改变，这会开启一次新的<code>render阶段</code>并构建一棵新的<code>workInProgress Fiber 树</code>。</p>\n<p><img src=\"https://react.iamkasong.com/img/wipTreeUpdate.png\"></p>\n</li>\n</ol>\n<p>和<code>mount</code>时一样，<code>workInProgress fiber</code>的创建可以复用<code>current Fiber树</code>对应的节点数据。</p>\n<ol start=\"2\">\n<li><code>workInProgress Fiber 树</code>在<code>render阶段</code>完成构建后进入<code>commit阶段</code>渲染到页面上。渲染完毕后，<code>workInProgress Fiber 树</code>变为<code>current Fiber 树</code>。</li>\n</ol>\n<p><img src=\"https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg\" alt=\"渲染过程\"></p>\n"},{"title":"React 获取服务器端时间","date":"2023-10-19T12:12:08.000Z","description":"本质上就是给服务器端发送一个请求","comments":1,"_content":"\n## React 获取服务器端时间\n\n**思路**：React获取服务器端时间，本质上就是给服务器端发送一个请求，然后从返回数据里面的headers里面获取到服务器date，然后更新服务器时间去格式化，获取服务器时间结束。按秒进行数据刷新，其实也很简单，就是使用定时器，进行动态递增即可，直接上代码。\n<!-- more -->\n获取服务器时间的方法：\n\n```react\nchangeTime = async () => {\n    let leftTime = await axios.get('/').then(response => {\n        console.log(response.headers)\n        return new Date(response.headers.date).getTime()\n     }).catch(error => {\n        console.log(error)\n        return 0\n     })\n        this.setState({\n        time: moment(leftTime).format('YYYY-MM-DD HH:mm:ss')\n    })\n}\n```\n\n自动增加的方法（以秒为单位）:\n\n```react\naddTime = date => {\n      let newDate = new Date(date)\n      newDate.setSeconds(newDate.getSeconds() + 1)\n      this.setState({\n        time: moment(newDate).format('YYYY-MM-DD HH:mm:ss')\n      })\n      window.time = {\n        date: this.state.time,\n        timestamp: Date.parse(new Date(this.state.time))\n      }\n    }\n```\n\n最后根据react  state状态进行页面渲染。","source":"_posts/react/getServiceTime.md","raw":"---\ntitle: React 获取服务器端时间\npermalink: /react/service/time.html\ndate: 2023-10-19 20:12:08\ndescription: 本质上就是给服务器端发送一个请求\ntag: [前端, react, JavaScript]\ncomments: true\ncategories: \n - React\n---\n\n## React 获取服务器端时间\n\n**思路**：React获取服务器端时间，本质上就是给服务器端发送一个请求，然后从返回数据里面的headers里面获取到服务器date，然后更新服务器时间去格式化，获取服务器时间结束。按秒进行数据刷新，其实也很简单，就是使用定时器，进行动态递增即可，直接上代码。\n<!-- more -->\n获取服务器时间的方法：\n\n```react\nchangeTime = async () => {\n    let leftTime = await axios.get('/').then(response => {\n        console.log(response.headers)\n        return new Date(response.headers.date).getTime()\n     }).catch(error => {\n        console.log(error)\n        return 0\n     })\n        this.setState({\n        time: moment(leftTime).format('YYYY-MM-DD HH:mm:ss')\n    })\n}\n```\n\n自动增加的方法（以秒为单位）:\n\n```react\naddTime = date => {\n      let newDate = new Date(date)\n      newDate.setSeconds(newDate.getSeconds() + 1)\n      this.setState({\n        time: moment(newDate).format('YYYY-MM-DD HH:mm:ss')\n      })\n      window.time = {\n        date: this.state.time,\n        timestamp: Date.parse(new Date(this.state.time))\n      }\n    }\n```\n\n最后根据react  state状态进行页面渲染。","slug":"react/getServiceTime","published":1,"updated":"2023-10-21T13:57:22.379Z","__permalink":"/react/service/time.html","_id":"clo6whxd70018dif3ea53bhr4","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h2 id=\"React-获取服务器端时间\"><a href=\"#React-获取服务器端时间\" class=\"headerlink\" title=\"React 获取服务器端时间\"></a>React 获取服务器端时间</h2><p><strong>思路</strong>：React获取服务器端时间，本质上就是给服务器端发送一个请求，然后从返回数据里面的headers里面获取到服务器date，然后更新服务器时间去格式化，获取服务器时间结束。按秒进行数据刷新，其实也很简单，就是使用定时器，进行动态递增即可，直接上代码。</p>\n<span id=\"more\"></span>\n<p>获取服务器时间的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeTime = async () =&gt; &#123;</span><br><span class=\"line\">    let leftTime = await axios.get(&#x27;/&#x27;).then(response =&gt; &#123;</span><br><span class=\"line\">        console.log(response.headers)</span><br><span class=\"line\">        return new Date(response.headers.date).getTime()</span><br><span class=\"line\">     &#125;).catch(error =&gt; &#123;</span><br><span class=\"line\">        console.log(error)</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">        time: moment(leftTime).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自动增加的方法（以秒为单位）:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addTime = date =&gt; &#123;</span><br><span class=\"line\">      let newDate = new Date(date)</span><br><span class=\"line\">      newDate.setSeconds(newDate.getSeconds() + 1)</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        time: moment(newDate).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      window.time = &#123;</span><br><span class=\"line\">        date: this.state.time,</span><br><span class=\"line\">        timestamp: Date.parse(new Date(this.state.time))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后根据react  state状态进行页面渲染。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/fiber.html","/react/fiber/implement.html","/react/synthetic/event.html","/react/implement.html"],"length":814,"excerpt":"<h2 id=\"React-获取服务器端时间\"><a href=\"#React-获取服务器端时间\" class=\"headerlink\" title=\"React 获取服务器端时间\"></a>React 获取服务器端时间</h2><p><strong>思路</strong>：React获取服务器端时间，本质上就是给服务器端发送一个请求，然后从返回数据里面的headers里面获取到服务器date，然后更新服务器时间去格式化，获取服务器时间结束。按秒进行数据刷新，其实也很简单，就是使用定时器，进行动态递增即可，直接上代码。</p>","more":"<p>获取服务器时间的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeTime = async () =&gt; &#123;</span><br><span class=\"line\">    let leftTime = await axios.get(&#x27;/&#x27;).then(response =&gt; &#123;</span><br><span class=\"line\">        console.log(response.headers)</span><br><span class=\"line\">        return new Date(response.headers.date).getTime()</span><br><span class=\"line\">     &#125;).catch(error =&gt; &#123;</span><br><span class=\"line\">        console.log(error)</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">        time: moment(leftTime).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自动增加的方法（以秒为单位）:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addTime = date =&gt; &#123;</span><br><span class=\"line\">      let newDate = new Date(date)</span><br><span class=\"line\">      newDate.setSeconds(newDate.getSeconds() + 1)</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        time: moment(newDate).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      window.time = &#123;</span><br><span class=\"line\">        date: this.state.time,</span><br><span class=\"line\">        timestamp: Date.parse(new Date(this.state.time))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后根据react  state状态进行页面渲染。</p>"},{"title":"React 使用合成事件（SyntheticEvent）","description":"React 使用合成事件（SyntheticEvent）来处理浏览器原生事件的跨浏览器兼容性问题。合成事件是一个封装了原生事件的对象，提供了一致的跨浏览器接口，使您能够在不同浏览器中以一致的方式处理事件。","date":"2023-10-18T13:27:49.000Z","comments":1,"_content":"\n# React 使用合成事件\nReact 使用合成事件（SyntheticEvent）来处理浏览器原生事件的跨浏览器兼容性问题。合成事件是一个封装了原生事件的对象，提供了一致的跨浏览器接口，使您能够在不同浏览器中以一致的方式处理事件。\n<!-- more -->\n在 React 中，您可以通过在组件中定义事件处理函数并将其传递给相应的元素来处理合成事件。例如，您可以在一个按钮上定义一个点击事件处理函数：\n```js\nclass MyComponent extends React.Component {\n  handleClick = (event) => {\n    console.log('Button clicked!');\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>Click me!</button>\n    );\n  }\n}\n```\n在上面的示例中，我们定义了一个名为handleClick的点击事件处理函数，并将其传递给按钮的onClick属性。当按钮被点击时，React 将自动创建一个合成事件对象，并将其作为参数传递给handleClick函数。您可以在事件处理函数中访问合成事件对象，并使用其属性和方法进行操作。\n\n合成事件对象具有与原生事件对象相似的属性和方法，但也有一些额外的属性和方法，用于处理 React 特定的功能。例如，您可以使用event.target来访问触发事件的元素，event.preventDefault()来阻止默认行为，以及event.stopPropagation()来阻止事件冒泡。\n\n请注意，由于合成事件是 React 提供的跨浏览器抽象，它并不是浏览器原生事件对象。因此，某些浏览器特定的功能可能不可用或表现不一致。如果需要访问原生事件对象，您可以使用合成事件对象的nativeEvent属性。\n# React合成事件如何阻止事件传播\n\nReact合成事件可以通过调用`e.stopPropagation()`来阻止事件传播。\n当根容器接收到捕获事件时，先触发一次React事件的捕获阶段，然后再执行原生事件的捕获传播。所以，调用`e.stopPropagation()`可以阻止原生事件的传播。\n合成事件是根据事件类型对原生事件的属性进行处理，并包装了关键方法，从而实现了事件的触发和处理。","source":"_posts/react/react-synthetic-event.md","raw":"---\ntitle: React 使用合成事件（SyntheticEvent）\npermalink: /react/synthetic/event.html\ndescription: React 使用合成事件（SyntheticEvent）来处理浏览器原生事件的跨浏览器兼容性问题。合成事件是一个封装了原生事件的对象，提供了一致的跨浏览器接口，使您能够在不同浏览器中以一致的方式处理事件。\ndate: 2023-10-18 21:27:49\ntag: [前端, react, JavaScript]\ncomments: true\ncategories: \n - React\n---\n\n# React 使用合成事件\nReact 使用合成事件（SyntheticEvent）来处理浏览器原生事件的跨浏览器兼容性问题。合成事件是一个封装了原生事件的对象，提供了一致的跨浏览器接口，使您能够在不同浏览器中以一致的方式处理事件。\n<!-- more -->\n在 React 中，您可以通过在组件中定义事件处理函数并将其传递给相应的元素来处理合成事件。例如，您可以在一个按钮上定义一个点击事件处理函数：\n```js\nclass MyComponent extends React.Component {\n  handleClick = (event) => {\n    console.log('Button clicked!');\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>Click me!</button>\n    );\n  }\n}\n```\n在上面的示例中，我们定义了一个名为handleClick的点击事件处理函数，并将其传递给按钮的onClick属性。当按钮被点击时，React 将自动创建一个合成事件对象，并将其作为参数传递给handleClick函数。您可以在事件处理函数中访问合成事件对象，并使用其属性和方法进行操作。\n\n合成事件对象具有与原生事件对象相似的属性和方法，但也有一些额外的属性和方法，用于处理 React 特定的功能。例如，您可以使用event.target来访问触发事件的元素，event.preventDefault()来阻止默认行为，以及event.stopPropagation()来阻止事件冒泡。\n\n请注意，由于合成事件是 React 提供的跨浏览器抽象，它并不是浏览器原生事件对象。因此，某些浏览器特定的功能可能不可用或表现不一致。如果需要访问原生事件对象，您可以使用合成事件对象的nativeEvent属性。\n# React合成事件如何阻止事件传播\n\nReact合成事件可以通过调用`e.stopPropagation()`来阻止事件传播。\n当根容器接收到捕获事件时，先触发一次React事件的捕获阶段，然后再执行原生事件的捕获传播。所以，调用`e.stopPropagation()`可以阻止原生事件的传播。\n合成事件是根据事件类型对原生事件的属性进行处理，并包装了关键方法，从而实现了事件的触发和处理。","slug":"react/react-synthetic-event","published":1,"updated":"2023-10-21T13:57:14.266Z","__permalink":"/react/synthetic/event.html","_id":"clo6whxd7001adif304hjdhd1","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h1 id=\"React-使用合成事件\"><a href=\"#React-使用合成事件\" class=\"headerlink\" title=\"React 使用合成事件\"></a>React 使用合成事件</h1><p>React 使用合成事件（SyntheticEvent）来处理浏览器原生事件的跨浏览器兼容性问题。合成事件是一个封装了原生事件的对象，提供了一致的跨浏览器接口，使您能够在不同浏览器中以一致的方式处理事件。</p>\n<span id=\"more\"></span>\n<p>在 React 中，您可以通过在组件中定义事件处理函数并将其传递给相应的元素来处理合成事件。例如，您可以在一个按钮上定义一个点击事件处理函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  handleClick = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Button clicked!&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，我们定义了一个名为handleClick的点击事件处理函数，并将其传递给按钮的onClick属性。当按钮被点击时，React 将自动创建一个合成事件对象，并将其作为参数传递给handleClick函数。您可以在事件处理函数中访问合成事件对象，并使用其属性和方法进行操作。</p>\n<p>合成事件对象具有与原生事件对象相似的属性和方法，但也有一些额外的属性和方法，用于处理 React 特定的功能。例如，您可以使用event.target来访问触发事件的元素，event.preventDefault()来阻止默认行为，以及event.stopPropagation()来阻止事件冒泡。</p>\n<p>请注意，由于合成事件是 React 提供的跨浏览器抽象，它并不是浏览器原生事件对象。因此，某些浏览器特定的功能可能不可用或表现不一致。如果需要访问原生事件对象，您可以使用合成事件对象的nativeEvent属性。</p>\n<h1 id=\"React合成事件如何阻止事件传播\"><a href=\"#React合成事件如何阻止事件传播\" class=\"headerlink\" title=\"React合成事件如何阻止事件传播\"></a>React合成事件如何阻止事件传播</h1><p>React合成事件可以通过调用<code>e.stopPropagation()</code>来阻止事件传播。<br>当根容器接收到捕获事件时，先触发一次React事件的捕获阶段，然后再执行原生事件的捕获传播。所以，调用<code>e.stopPropagation()</code>可以阻止原生事件的传播。<br>合成事件是根据事件类型对原生事件的属性进行处理，并包装了关键方法，从而实现了事件的触发和处理。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/fiber.html","/react/fiber/implement.html","/react/service/time.html","/react/implement.html","/react/fiber/node.html"],"length":1003,"excerpt":"<h1 id=\"React-使用合成事件\"><a href=\"#React-使用合成事件\" class=\"headerlink\" title=\"React 使用合成事件\"></a>React 使用合成事件</h1><p>React 使用合成事件（SyntheticEvent）来处理浏览器原生事件的跨浏览器兼容性问题。合成事件是一个封装了原生事件的对象，提供了一致的跨浏览器接口，使您能够在不同浏览器中以一致的方式处理事件。</p>","more":"<p>在 React 中，您可以通过在组件中定义事件处理函数并将其传递给相应的元素来处理合成事件。例如，您可以在一个按钮上定义一个点击事件处理函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  handleClick = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Button clicked!&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，我们定义了一个名为handleClick的点击事件处理函数，并将其传递给按钮的onClick属性。当按钮被点击时，React 将自动创建一个合成事件对象，并将其作为参数传递给handleClick函数。您可以在事件处理函数中访问合成事件对象，并使用其属性和方法进行操作。</p>\n<p>合成事件对象具有与原生事件对象相似的属性和方法，但也有一些额外的属性和方法，用于处理 React 特定的功能。例如，您可以使用event.target来访问触发事件的元素，event.preventDefault()来阻止默认行为，以及event.stopPropagation()来阻止事件冒泡。</p>\n<p>请注意，由于合成事件是 React 提供的跨浏览器抽象，它并不是浏览器原生事件对象。因此，某些浏览器特定的功能可能不可用或表现不一致。如果需要访问原生事件对象，您可以使用合成事件对象的nativeEvent属性。</p>\n<h1 id=\"React合成事件如何阻止事件传播\"><a href=\"#React合成事件如何阻止事件传播\" class=\"headerlink\" title=\"React合成事件如何阻止事件传播\"></a>React合成事件如何阻止事件传播</h1><p>React合成事件可以通过调用<code>e.stopPropagation()</code>来阻止事件传播。<br>当根容器接收到捕获事件时，先触发一次React事件的捕获阶段，然后再执行原生事件的捕获传播。所以，调用<code>e.stopPropagation()</code>可以阻止原生事件的传播。<br>合成事件是根据事件类型对原生事件的属性进行处理，并包装了关键方法，从而实现了事件的触发和处理。</p>"},{"title":"Fiber 架构实现流程","date":"2023-10-20T08:29:47.000Z","description":"Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。","comments":1,"_content":"\nFiber 架构是 React 中用于实现虚拟 DOM 的一种算法架构。它的目标是提高渲染性能和用户体验，通过将渲染工作分割成多个小任务，在不阻塞主线程的情况下逐步完成整个渲染过程。\n\n下面是 Fiber 架构的简要实现过程：\n\n- 构建 Fiber 树：在进行首次渲染时，React 会构建一棵 Fiber 树，用于表示组件的层级结构和渲染顺序。每个 Fiber 节点对应一个组件实例，其中包含组件的状态、属性和其他相关信息。\n\n- 初始渲染阶段：React 通过递归遍历 Fiber 树，在每个 Fiber 节点上执行渲染操作，生成对应的虚拟 DOM 元素。\n\n- 任务拆分：在渲染过程中，React 根据时间片（Time Slicing）的概念将渲染任务拆分为多个小任务（Fiber），每个小任务执行时间有限，并且可以中断和恢复。\n\n- 优先级调度：React 使用优先级调度算法确定哪些任务具有更高的优先级，并按照顺序执行这些高优先级的任务，以保证用户界面的流畅度。\n\n- 增量更新：在执行每个小任务时，React 会比较前后两次渲染结果，找出需要更新的部分，并对其进行增量更新。这样可以避免全量重新渲染，提高性能。\n\n- 渲染结果提交：当所有小任务完成后，React 将最终渲染结果提交给浏览器进行绘制，完成整个渲染过程。\n\nFiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。这样可以更好地响应用户的交互，提供更流畅的用户体验。\n\n遍历结构：\n\n","source":"_posts/react/fiberImplement.md","raw":"---\ntitle: Fiber 架构实现流程\npermalink: /react/fiber/implement.html\ndate: 2023-10-20 16:29:47\ndescription: Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。\ntag: [前端, react, JavaScript, Fiber]\ncomments: true\ncategories: \n - React\n - Fiber\n---\n\nFiber 架构是 React 中用于实现虚拟 DOM 的一种算法架构。它的目标是提高渲染性能和用户体验，通过将渲染工作分割成多个小任务，在不阻塞主线程的情况下逐步完成整个渲染过程。\n\n下面是 Fiber 架构的简要实现过程：\n\n- 构建 Fiber 树：在进行首次渲染时，React 会构建一棵 Fiber 树，用于表示组件的层级结构和渲染顺序。每个 Fiber 节点对应一个组件实例，其中包含组件的状态、属性和其他相关信息。\n\n- 初始渲染阶段：React 通过递归遍历 Fiber 树，在每个 Fiber 节点上执行渲染操作，生成对应的虚拟 DOM 元素。\n\n- 任务拆分：在渲染过程中，React 根据时间片（Time Slicing）的概念将渲染任务拆分为多个小任务（Fiber），每个小任务执行时间有限，并且可以中断和恢复。\n\n- 优先级调度：React 使用优先级调度算法确定哪些任务具有更高的优先级，并按照顺序执行这些高优先级的任务，以保证用户界面的流畅度。\n\n- 增量更新：在执行每个小任务时，React 会比较前后两次渲染结果，找出需要更新的部分，并对其进行增量更新。这样可以避免全量重新渲染，提高性能。\n\n- 渲染结果提交：当所有小任务完成后，React 将最终渲染结果提交给浏览器进行绘制，完成整个渲染过程。\n\nFiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。这样可以更好地响应用户的交互，提供更流畅的用户体验。\n\n遍历结构：\n\n","slug":"react/fiberImplement","published":1,"updated":"2023-10-27T13:18:10.726Z","__permalink":"/react/fiber/implement.html","_id":"clo6whxd8001edif30xac1c0s","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><p>Fiber 架构是 React 中用于实现虚拟 DOM 的一种算法架构。它的目标是提高渲染性能和用户体验，通过将渲染工作分割成多个小任务，在不阻塞主线程的情况下逐步完成整个渲染过程。</p>\n<p>下面是 Fiber 架构的简要实现过程：</p>\n<ul>\n<li><p>构建 Fiber 树：在进行首次渲染时，React 会构建一棵 Fiber 树，用于表示组件的层级结构和渲染顺序。每个 Fiber 节点对应一个组件实例，其中包含组件的状态、属性和其他相关信息。</p>\n</li>\n<li><p>初始渲染阶段：React 通过递归遍历 Fiber 树，在每个 Fiber 节点上执行渲染操作，生成对应的虚拟 DOM 元素。</p>\n</li>\n<li><p>任务拆分：在渲染过程中，React 根据时间片（Time Slicing）的概念将渲染任务拆分为多个小任务（Fiber），每个小任务执行时间有限，并且可以中断和恢复。</p>\n</li>\n<li><p>优先级调度：React 使用优先级调度算法确定哪些任务具有更高的优先级，并按照顺序执行这些高优先级的任务，以保证用户界面的流畅度。</p>\n</li>\n<li><p>增量更新：在执行每个小任务时，React 会比较前后两次渲染结果，找出需要更新的部分，并对其进行增量更新。这样可以避免全量重新渲染，提高性能。</p>\n</li>\n<li><p>渲染结果提交：当所有小任务完成后，React 将最终渲染结果提交给浏览器进行绘制，完成整个渲染过程。</p>\n</li>\n</ul>\n<p>Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。这样可以更好地响应用户的交互，提供更流畅的用户体验。</p>\n<p>遍历结构：</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/fiber.html","/react/implement.html","/react/synthetic/event.html","/react/fiber/works.html","/react/fiber/node.html"],"length":597,"excerpt":"","more":"<p>Fiber 架构是 React 中用于实现虚拟 DOM 的一种算法架构。它的目标是提高渲染性能和用户体验，通过将渲染工作分割成多个小任务，在不阻塞主线程的情况下逐步完成整个渲染过程。</p>\n<p>下面是 Fiber 架构的简要实现过程：</p>\n<ul>\n<li><p>构建 Fiber 树：在进行首次渲染时，React 会构建一棵 Fiber 树，用于表示组件的层级结构和渲染顺序。每个 Fiber 节点对应一个组件实例，其中包含组件的状态、属性和其他相关信息。</p>\n</li>\n<li><p>初始渲染阶段：React 通过递归遍历 Fiber 树，在每个 Fiber 节点上执行渲染操作，生成对应的虚拟 DOM 元素。</p>\n</li>\n<li><p>任务拆分：在渲染过程中，React 根据时间片（Time Slicing）的概念将渲染任务拆分为多个小任务（Fiber），每个小任务执行时间有限，并且可以中断和恢复。</p>\n</li>\n<li><p>优先级调度：React 使用优先级调度算法确定哪些任务具有更高的优先级，并按照顺序执行这些高优先级的任务，以保证用户界面的流畅度。</p>\n</li>\n<li><p>增量更新：在执行每个小任务时，React 会比较前后两次渲染结果，找出需要更新的部分，并对其进行增量更新。这样可以避免全量重新渲染，提高性能。</p>\n</li>\n<li><p>渲染结果提交：当所有小任务完成后，React 将最终渲染结果提交给浏览器进行绘制，完成整个渲染过程。</p>\n</li>\n</ul>\n<p>Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。这样可以更好地响应用户的交互，提供更流畅的用户体验。</p>\n<p>遍历结构：</p>\n"},{"title":"type 的使用","date":"2023-10-22T10:12:30.000Z","description":"给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 ).","comments":1,"_content":"\n#### type 的使用\n\n作用 : 给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 )\n\n##### 1. 类型别名\n\n**语法 :** `type 别名 = 类型`\n\n**实例 :**\n\n```typescript\n  type St = string // 定义\n\n  let str1:St = 'abc'\n  let str2:string = 'abc'\n\n```\n\n##### 2.自定义类型\n\n**语法 :** `type 别名 = 类型 | 类型1 | 类型2`\n\n**实例 :**\n\n```typescript\n  type NewType = string | number // 定义类型\n\n  let a: NewType = 1\n  let b: NewType = '1'\n\n```\n\n##### 3.泛型定义\n\n**语法**： `type 别名<T> = 类型<T> | 类型1<T> | 类型2<T>`\n\n**实例** :\n\n```typescript\n\ttype NewType<T> = {\n    name: T\n  }\n  let a : NewType<number> = { name: 0 }\n  let b : NewType<string> = { name: '0' }\n```\n\n\n\n##### 4.联合类型(相当于继承类型)\n\n**语法**：`type 别名 = 类型 & 类型1 & 类型2`\n\n**示例**：\n\n```typescript\n  type User = {\n      name: string;\n      age?: number;\n  }\n\n  type Job = {\n      jobs: string;\n  }\n\n  type UserInfo = User & Job;\n\n```","source":"_posts/typeScript/useType.md","raw":"---\ntitle: type 的使用\npermalink: /typescript/use/type.html\ndate: 2023-10-22 18:12:30\ndescription: 给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 ).\ntag: [前端, TypeScript]\ncomments: true\ncategories: \n - 前端\n - TypeScript\n---\n\n#### type 的使用\n\n作用 : 给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 )\n\n##### 1. 类型别名\n\n**语法 :** `type 别名 = 类型`\n\n**实例 :**\n\n```typescript\n  type St = string // 定义\n\n  let str1:St = 'abc'\n  let str2:string = 'abc'\n\n```\n\n##### 2.自定义类型\n\n**语法 :** `type 别名 = 类型 | 类型1 | 类型2`\n\n**实例 :**\n\n```typescript\n  type NewType = string | number // 定义类型\n\n  let a: NewType = 1\n  let b: NewType = '1'\n\n```\n\n##### 3.泛型定义\n\n**语法**： `type 别名<T> = 类型<T> | 类型1<T> | 类型2<T>`\n\n**实例** :\n\n```typescript\n\ttype NewType<T> = {\n    name: T\n  }\n  let a : NewType<number> = { name: 0 }\n  let b : NewType<string> = { name: '0' }\n```\n\n\n\n##### 4.联合类型(相当于继承类型)\n\n**语法**：`type 别名 = 类型 & 类型1 & 类型2`\n\n**示例**：\n\n```typescript\n  type User = {\n      name: string;\n      age?: number;\n  }\n\n  type Job = {\n      jobs: string;\n  }\n\n  type UserInfo = User & Job;\n\n```","slug":"typeScript/useType","published":1,"updated":"2023-10-23T12:33:02.357Z","__permalink":"/typescript/use/type.html","_id":"clo6whxd9001fdif33vx2ck35","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h4 id=\"type-的使用\"><a href=\"#type-的使用\" class=\"headerlink\" title=\"type 的使用\"></a>type 的使用</h4><p>作用 : 给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 )</p>\n<h5 id=\"1-类型别名\"><a href=\"#1-类型别名\" class=\"headerlink\" title=\"1. 类型别名\"></a>1. 类型别名</h5><p><strong>语法 :</strong> <code>type 别名 = 类型</code></p>\n<p><strong>实例 :</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">St</span> = <span class=\"built_in\">string</span> <span class=\"comment\">// 定义</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str1</span>:<span class=\"title class_\">St</span> = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str2</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-自定义类型\"><a href=\"#2-自定义类型\" class=\"headerlink\" title=\"2.自定义类型\"></a>2.自定义类型</h5><p><strong>语法 :</strong> <code>type 别名 = 类型 | 类型1 | 类型2</code></p>\n<p><strong>实例 :</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> <span class=\"comment\">// 定义类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">NewType</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"title class_\">NewType</span> = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-泛型定义\"><a href=\"#3-泛型定义\" class=\"headerlink\" title=\"3.泛型定义\"></a>3.泛型定义</h5><p><strong>语法</strong>： <code>type 别名&lt;T&gt; = 类型&lt;T&gt; | 类型1&lt;T&gt; | 类型2&lt;T&gt;</code></p>\n<p><strong>实例</strong> :</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>: T</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> a : <span class=\"title class_\">NewType</span>&lt;<span class=\"built_in\">number</span>&gt; = &#123; <span class=\"attr\">name</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> b : <span class=\"title class_\">NewType</span>&lt;<span class=\"built_in\">string</span>&gt; = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;0&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"4-联合类型-相当于继承类型\"><a href=\"#4-联合类型-相当于继承类型\" class=\"headerlink\" title=\"4.联合类型(相当于继承类型)\"></a>4.联合类型(相当于继承类型)</h5><p><strong>语法</strong>：<code>type 别名 = 类型 &amp; 类型1 &amp; 类型2</code></p>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Job</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">jobs</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo</span> = <span class=\"title class_\">User</span> &amp; <span class=\"title class_\">Job</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":615,"excerpt":"","more":"<h4 id=\"type-的使用\"><a href=\"#type-的使用\" class=\"headerlink\" title=\"type 的使用\"></a>type 的使用</h4><p>作用 : 给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 )</p>\n<h5 id=\"1-类型别名\"><a href=\"#1-类型别名\" class=\"headerlink\" title=\"1. 类型别名\"></a>1. 类型别名</h5><p><strong>语法 :</strong> <code>type 别名 = 类型</code></p>\n<p><strong>实例 :</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">St</span> = <span class=\"built_in\">string</span> <span class=\"comment\">// 定义</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str1</span>:<span class=\"title class_\">St</span> = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str2</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-自定义类型\"><a href=\"#2-自定义类型\" class=\"headerlink\" title=\"2.自定义类型\"></a>2.自定义类型</h5><p><strong>语法 :</strong> <code>type 别名 = 类型 | 类型1 | 类型2</code></p>\n<p><strong>实例 :</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> <span class=\"comment\">// 定义类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">NewType</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"title class_\">NewType</span> = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-泛型定义\"><a href=\"#3-泛型定义\" class=\"headerlink\" title=\"3.泛型定义\"></a>3.泛型定义</h5><p><strong>语法</strong>： <code>type 别名&lt;T&gt; = 类型&lt;T&gt; | 类型1&lt;T&gt; | 类型2&lt;T&gt;</code></p>\n<p><strong>实例</strong> :</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>: T</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> a : <span class=\"title class_\">NewType</span>&lt;<span class=\"built_in\">number</span>&gt; = &#123; <span class=\"attr\">name</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> b : <span class=\"title class_\">NewType</span>&lt;<span class=\"built_in\">string</span>&gt; = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;0&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"4-联合类型-相当于继承类型\"><a href=\"#4-联合类型-相当于继承类型\" class=\"headerlink\" title=\"4.联合类型(相当于继承类型)\"></a>4.联合类型(相当于继承类型)</h5><p><strong>语法</strong>：<code>type 别名 = 类型 &amp; 类型1 &amp; 类型2</code></p>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Job</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">jobs</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo</span> = <span class=\"title class_\">User</span> &amp; <span class=\"title class_\">Job</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"什么是 CSRF 攻击？","date":"2023-10-21T13:11:16.000Z","description":"在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。","comments":1,"_content":"\n##### 概念\nCSRF（Cross-Site Request Forgeries） 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。\n\nCSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。\n##### 攻击类型\n常见的 CSRF 攻击有三种：\n- GET 类型的 CSRF 攻击，比如在网站中的一个img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交；\n- POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。\n- 链接类型的 CSRF 攻击，比如在 a 标签的href 属性里构建一个请求，然后诱导用户去点击。\n\n##### 如何防御 CSRF 攻击？\nCSRF 攻击可以使用以下方法来防护：\n\n进行同源检测，服务器根据 http 请求头中origin 或者referer信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer字段会告诉服务器该网页是从哪个页面链接过来的）\n\n使用 CSRF Token 进行验证，服务器向用户返回一个随机数Token，当网站再次发起请求时，在请求参数中加入服务器端返回的token，然后服务器对这个 token 进行验证。这种方法解决了使用cookie单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个token，操作比较繁琐。\n\n还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的session中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。\n\n对 Cookie 进行双重验证，服务器在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到URL参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用cookie，但是不能访问获取 cookie 的特点。并且这种方法比CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。\n\n在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。","source":"_posts/web/CrossSiteRequestForgeries.md","raw":"---\ntitle: 什么是 CSRF 攻击？\npermalink: /web/cross/site/request/forgeries.html\ndate: 2023-10-21 21:11:16\ndescription: 在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。\n\ntag: [前端, 浏览器, 网络安全, CSRF]\ncomments: true\ncategories: \n - 浏览器\n - 网络安全\n---\n\n##### 概念\nCSRF（Cross-Site Request Forgeries） 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。\n\nCSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。\n##### 攻击类型\n常见的 CSRF 攻击有三种：\n- GET 类型的 CSRF 攻击，比如在网站中的一个img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交；\n- POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。\n- 链接类型的 CSRF 攻击，比如在 a 标签的href 属性里构建一个请求，然后诱导用户去点击。\n\n##### 如何防御 CSRF 攻击？\nCSRF 攻击可以使用以下方法来防护：\n\n进行同源检测，服务器根据 http 请求头中origin 或者referer信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer字段会告诉服务器该网页是从哪个页面链接过来的）\n\n使用 CSRF Token 进行验证，服务器向用户返回一个随机数Token，当网站再次发起请求时，在请求参数中加入服务器端返回的token，然后服务器对这个 token 进行验证。这种方法解决了使用cookie单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个token，操作比较繁琐。\n\n还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的session中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。\n\n对 Cookie 进行双重验证，服务器在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到URL参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用cookie，但是不能访问获取 cookie 的特点。并且这种方法比CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。\n\n在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。","slug":"web/CrossSiteRequestForgeries","published":1,"updated":"2023-10-21T14:19:24.690Z","__permalink":"/web/cross/site/request/forgeries.html","_id":"clo6whxda001jdif3em0l2a8m","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5><p>CSRF（Cross-Site Request Forgeries） 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。</p>\n<p>CSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。</p>\n<h5 id=\"攻击类型\"><a href=\"#攻击类型\" class=\"headerlink\" title=\"攻击类型\"></a>攻击类型</h5><p>常见的 CSRF 攻击有三种：</p>\n<ul>\n<li>GET 类型的 CSRF 攻击，比如在网站中的一个img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交；</li>\n<li>POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。</li>\n<li>链接类型的 CSRF 攻击，比如在 a 标签的href 属性里构建一个请求，然后诱导用户去点击。</li>\n</ul>\n<h5 id=\"如何防御-CSRF-攻击？\"><a href=\"#如何防御-CSRF-攻击？\" class=\"headerlink\" title=\"如何防御 CSRF 攻击？\"></a>如何防御 CSRF 攻击？</h5><p>CSRF 攻击可以使用以下方法来防护：</p>\n<p>进行同源检测，服务器根据 http 请求头中origin 或者referer信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer字段会告诉服务器该网页是从哪个页面链接过来的）</p>\n<p>使用 CSRF Token 进行验证，服务器向用户返回一个随机数Token，当网站再次发起请求时，在请求参数中加入服务器端返回的token，然后服务器对这个 token 进行验证。这种方法解决了使用cookie单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个token，操作比较繁琐。</p>\n<p>还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的session中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。</p>\n<p>对 Cookie 进行双重验证，服务器在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到URL参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用cookie，但是不能访问获取 cookie 的特点。并且这种方法比CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。</p>\n<p>在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/browser/session/cookies.html","/web/cross/site/script.html","/web/security/question.html"],"length":1290,"excerpt":"","more":"<h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5><p>CSRF（Cross-Site Request Forgeries） 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。</p>\n<p>CSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。</p>\n<h5 id=\"攻击类型\"><a href=\"#攻击类型\" class=\"headerlink\" title=\"攻击类型\"></a>攻击类型</h5><p>常见的 CSRF 攻击有三种：</p>\n<ul>\n<li>GET 类型的 CSRF 攻击，比如在网站中的一个img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交；</li>\n<li>POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。</li>\n<li>链接类型的 CSRF 攻击，比如在 a 标签的href 属性里构建一个请求，然后诱导用户去点击。</li>\n</ul>\n<h5 id=\"如何防御-CSRF-攻击？\"><a href=\"#如何防御-CSRF-攻击？\" class=\"headerlink\" title=\"如何防御 CSRF 攻击？\"></a>如何防御 CSRF 攻击？</h5><p>CSRF 攻击可以使用以下方法来防护：</p>\n<p>进行同源检测，服务器根据 http 请求头中origin 或者referer信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer字段会告诉服务器该网页是从哪个页面链接过来的）</p>\n<p>使用 CSRF Token 进行验证，服务器向用户返回一个随机数Token，当网站再次发起请求时，在请求参数中加入服务器端返回的token，然后服务器对这个 token 进行验证。这种方法解决了使用cookie单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个token，操作比较繁琐。</p>\n<p>还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的session中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。</p>\n<p>对 Cookie 进行双重验证，服务器在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到URL参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用cookie，但是不能访问获取 cookie 的特点。并且这种方法比CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。</p>\n<p>在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。</p>\n"},{"title":"什么是 XSS 攻击？","date":"2023-10-21T13:10:16.000Z","description":"XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。","comments":1,"_content":"\n##### 概念\n\nXSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。\n\nXSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。\n\n攻击者可以通过这种攻击方式可以进行以下操作：\n1. 获取页面的数据，如 DOM、cookie、localStorage；\n2. DOS 攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；\n3. 破坏页面结构；\n4. 流量劫持（将链接指向某网站）\n\n##### 攻击类型\n\nXSS 可以分为存储型、反射型和 DOM 型：\n- 存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。\n- 反射型指的是攻击者诱导用户访问一个带有恶意代码的URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成XSS 攻击。\n- DOM 型指的通过修改页面的 DOM 节点形成的XSS。\n\n###### 存储型 XSS 的攻击步骤：\n\n 1. 攻击者将恶意代码提交到⽬标⽹站的数据库中。\n 2. ⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。\n 3. ⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。\n 4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。\n\n###### 反射型 XSS 的攻击步骤：\n\n1. 攻击者构造出特殊的 URL，其中包含恶意代码。\n2. ⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码从URL中取出，拼接在 HTML 中返回给浏览器。\n3. ⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。\n4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n\n   反射型 XSS 跟存储型 XSS 的区别是：存储型XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在URL ⾥。\n\n   反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。\n\n###### DOM 型 XSS 的攻击步骤：\n\n1. 攻击者构造出特殊的 URL，其中包含恶意代码。\n2. ⽤户打开带有恶意代码的 URL。\n3. ⽤户浏览器接收到响应后解析执⾏，前端JavaScript 取出URL中的恶意代码并执⾏。\n4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n\n   **DOM 型 XSS 跟前两种 XSS 的区别**：DOM 型XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。\n\n##### 如何防御 XSS 攻击？\n\n可以看到 XSS 危害如此之大，那么在开发网站时就要做好防御措施，具体措施如下：\n\n可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。\n\n使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。\n\n1. CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。\n\n2. 通常有两种方式来开启 CSP，一种是设置HTTP 首部中的Content-Security-Policy，一种是设置meta 标签的方式<metahttp-equiv=\"Content-Security-Policy\">\n对一些敏感信息进行保护，比如 cookie 使用http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。","source":"_posts/web/CrossSiteScript.md","raw":"---\ntitle: 什么是 XSS 攻击？\npermalink: /web/cross/site/script.html\ndate: 2023-10-21 21:10:16\ndescription: XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。\ntag: [前端, 浏览器, 网络安全, XSS]\ncomments: true\ncategories: \n - 浏览器\n - 网络安全\n---\n\n##### 概念\n\nXSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。\n\nXSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。\n\n攻击者可以通过这种攻击方式可以进行以下操作：\n1. 获取页面的数据，如 DOM、cookie、localStorage；\n2. DOS 攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；\n3. 破坏页面结构；\n4. 流量劫持（将链接指向某网站）\n\n##### 攻击类型\n\nXSS 可以分为存储型、反射型和 DOM 型：\n- 存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。\n- 反射型指的是攻击者诱导用户访问一个带有恶意代码的URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成XSS 攻击。\n- DOM 型指的通过修改页面的 DOM 节点形成的XSS。\n\n###### 存储型 XSS 的攻击步骤：\n\n 1. 攻击者将恶意代码提交到⽬标⽹站的数据库中。\n 2. ⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。\n 3. ⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。\n 4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。\n\n###### 反射型 XSS 的攻击步骤：\n\n1. 攻击者构造出特殊的 URL，其中包含恶意代码。\n2. ⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码从URL中取出，拼接在 HTML 中返回给浏览器。\n3. ⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。\n4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n\n   反射型 XSS 跟存储型 XSS 的区别是：存储型XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在URL ⾥。\n\n   反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。\n\n###### DOM 型 XSS 的攻击步骤：\n\n1. 攻击者构造出特殊的 URL，其中包含恶意代码。\n2. ⽤户打开带有恶意代码的 URL。\n3. ⽤户浏览器接收到响应后解析执⾏，前端JavaScript 取出URL中的恶意代码并执⾏。\n4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n\n   **DOM 型 XSS 跟前两种 XSS 的区别**：DOM 型XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。\n\n##### 如何防御 XSS 攻击？\n\n可以看到 XSS 危害如此之大，那么在开发网站时就要做好防御措施，具体措施如下：\n\n可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。\n\n使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。\n\n1. CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。\n\n2. 通常有两种方式来开启 CSP，一种是设置HTTP 首部中的Content-Security-Policy，一种是设置meta 标签的方式<metahttp-equiv=\"Content-Security-Policy\">\n对一些敏感信息进行保护，比如 cookie 使用http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。","slug":"web/CrossSiteScript","published":1,"updated":"2023-10-21T14:15:32.698Z","__permalink":"/web/cross/site/script.html","_id":"clo6whxda001mdif3e7e4cjdr","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5><p>XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。</p>\n<p>XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。</p>\n<p>攻击者可以通过这种攻击方式可以进行以下操作：</p>\n<ol>\n<li>获取页面的数据，如 DOM、cookie、localStorage；</li>\n<li>DOS 攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；</li>\n<li>破坏页面结构；</li>\n<li>流量劫持（将链接指向某网站）</li>\n</ol>\n<h5 id=\"攻击类型\"><a href=\"#攻击类型\" class=\"headerlink\" title=\"攻击类型\"></a>攻击类型</h5><p>XSS 可以分为存储型、反射型和 DOM 型：</p>\n<ul>\n<li>存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。</li>\n<li>反射型指的是攻击者诱导用户访问一个带有恶意代码的URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成XSS 攻击。</li>\n<li>DOM 型指的通过修改页面的 DOM 节点形成的XSS。</li>\n</ul>\n<h6 id=\"存储型-XSS-的攻击步骤：\"><a href=\"#存储型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"存储型 XSS 的攻击步骤：\"></a>存储型 XSS 的攻击步骤：</h6><ol>\n<li>攻击者将恶意代码提交到⽬标⽹站的数据库中。</li>\n<li>⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。</li>\n<li>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</li>\n<li>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。<br>这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。</li>\n</ol>\n<h6 id=\"反射型-XSS-的攻击步骤：\"><a href=\"#反射型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"反射型 XSS 的攻击步骤：\"></a>反射型 XSS 的攻击步骤：</h6><ol>\n<li><p>攻击者构造出特殊的 URL，其中包含恶意代码。</p>\n</li>\n<li><p>⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码从URL中取出，拼接在 HTML 中返回给浏览器。</p>\n</li>\n<li><p>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</p>\n</li>\n<li><p>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</p>\n<p>反射型 XSS 跟存储型 XSS 的区别是：存储型XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在URL ⾥。</p>\n<p>反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。</p>\n</li>\n</ol>\n<h6 id=\"DOM-型-XSS-的攻击步骤：\"><a href=\"#DOM-型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"DOM 型 XSS 的攻击步骤：\"></a>DOM 型 XSS 的攻击步骤：</h6><ol>\n<li><p>攻击者构造出特殊的 URL，其中包含恶意代码。</p>\n</li>\n<li><p>⽤户打开带有恶意代码的 URL。</p>\n</li>\n<li><p>⽤户浏览器接收到响应后解析执⾏，前端JavaScript 取出URL中的恶意代码并执⾏。</p>\n</li>\n<li><p>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</p>\n<p><strong>DOM 型 XSS 跟前两种 XSS 的区别</strong>：DOM 型XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。</p>\n</li>\n</ol>\n<h5 id=\"如何防御-XSS-攻击？\"><a href=\"#如何防御-XSS-攻击？\" class=\"headerlink\" title=\"如何防御 XSS 攻击？\"></a>如何防御 XSS 攻击？</h5><p>可以看到 XSS 危害如此之大，那么在开发网站时就要做好防御措施，具体措施如下：</p>\n<p>可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。</p>\n<p>使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。</p>\n<ol>\n<li><p>CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。</p>\n</li>\n<li><p>通常有两种方式来开启 CSP，一种是设置HTTP 首部中的Content-Security-Policy，一种是设置meta 标签的方式&lt;metahttp-equiv&#x3D;”Content-Security-Policy”&gt;<br>对一些敏感信息进行保护，比如 cookie 使用http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。</p>\n</li>\n</ol>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/browser/session/cookies.html","/web/cross/site/request/forgeries.html"],"length":1646,"excerpt":"","more":"<h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5><p>XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。</p>\n<p>XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。</p>\n<p>攻击者可以通过这种攻击方式可以进行以下操作：</p>\n<ol>\n<li>获取页面的数据，如 DOM、cookie、localStorage；</li>\n<li>DOS 攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；</li>\n<li>破坏页面结构；</li>\n<li>流量劫持（将链接指向某网站）</li>\n</ol>\n<h5 id=\"攻击类型\"><a href=\"#攻击类型\" class=\"headerlink\" title=\"攻击类型\"></a>攻击类型</h5><p>XSS 可以分为存储型、反射型和 DOM 型：</p>\n<ul>\n<li>存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。</li>\n<li>反射型指的是攻击者诱导用户访问一个带有恶意代码的URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成XSS 攻击。</li>\n<li>DOM 型指的通过修改页面的 DOM 节点形成的XSS。</li>\n</ul>\n<h6 id=\"存储型-XSS-的攻击步骤：\"><a href=\"#存储型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"存储型 XSS 的攻击步骤：\"></a>存储型 XSS 的攻击步骤：</h6><ol>\n<li>攻击者将恶意代码提交到⽬标⽹站的数据库中。</li>\n<li>⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。</li>\n<li>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</li>\n<li>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。<br>这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。</li>\n</ol>\n<h6 id=\"反射型-XSS-的攻击步骤：\"><a href=\"#反射型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"反射型 XSS 的攻击步骤：\"></a>反射型 XSS 的攻击步骤：</h6><ol>\n<li><p>攻击者构造出特殊的 URL，其中包含恶意代码。</p>\n</li>\n<li><p>⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码从URL中取出，拼接在 HTML 中返回给浏览器。</p>\n</li>\n<li><p>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</p>\n</li>\n<li><p>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</p>\n<p>反射型 XSS 跟存储型 XSS 的区别是：存储型XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在URL ⾥。</p>\n<p>反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。</p>\n</li>\n</ol>\n<h6 id=\"DOM-型-XSS-的攻击步骤：\"><a href=\"#DOM-型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"DOM 型 XSS 的攻击步骤：\"></a>DOM 型 XSS 的攻击步骤：</h6><ol>\n<li><p>攻击者构造出特殊的 URL，其中包含恶意代码。</p>\n</li>\n<li><p>⽤户打开带有恶意代码的 URL。</p>\n</li>\n<li><p>⽤户浏览器接收到响应后解析执⾏，前端JavaScript 取出URL中的恶意代码并执⾏。</p>\n</li>\n<li><p>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</p>\n<p><strong>DOM 型 XSS 跟前两种 XSS 的区别</strong>：DOM 型XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。</p>\n</li>\n</ol>\n<h5 id=\"如何防御-XSS-攻击？\"><a href=\"#如何防御-XSS-攻击？\" class=\"headerlink\" title=\"如何防御 XSS 攻击？\"></a>如何防御 XSS 攻击？</h5><p>可以看到 XSS 危害如此之大，那么在开发网站时就要做好防御措施，具体措施如下：</p>\n<p>可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。</p>\n<p>使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。</p>\n<ol>\n<li><p>CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。</p>\n</li>\n<li><p>通常有两种方式来开启 CSP，一种是设置HTTP 首部中的Content-Security-Policy，一种是设置meta 标签的方式&lt;metahttp-equiv&#x3D;”Content-Security-Policy”&gt;<br>对一些敏感信息进行保护，比如 cookie 使用http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。</p>\n</li>\n</ol>\n"},{"title":"有哪些可能引起前端安全的问题?","date":"2023-10-21T13:09:16.000Z","description":"⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript / CSS / Flash 等。","comments":1,"_content":"\n##### [跨站脚本 (Cross-Site Scripting, XSS)](https://blog.csdn.net/qq_35490191/article/details/132212266)\n\n⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript / CSS / Flash 等；\n\n##### iframe 的滥⽤\niframe 中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在 iframe 中运⾏JavaScirpt 脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；\n\n##### [跨站点请求伪造（Cross-Site Request Forgeries，CSRF）](https://blog.csdn.net/qq_35490191/article/details/132220538)\n\n指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击恶意\n\n##### 第三⽅库\n\n⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。","source":"_posts/web/WebSecurityQuestion.md","raw":"---\ntitle: 有哪些可能引起前端安全的问题?\npermalink: /web/security/question.html\ndate: 2023-10-21 21:09:16\ndescription: ⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript / CSS / Flash 等。\ntag: [前端, 浏览器, 网络安全]\ncomments: true\ncategories: \n - 浏览器\n - 网络安全\n---\n\n##### [跨站脚本 (Cross-Site Scripting, XSS)](https://blog.csdn.net/qq_35490191/article/details/132212266)\n\n⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript / CSS / Flash 等；\n\n##### iframe 的滥⽤\niframe 中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在 iframe 中运⾏JavaScirpt 脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；\n\n##### [跨站点请求伪造（Cross-Site Request Forgeries，CSRF）](https://blog.csdn.net/qq_35490191/article/details/132220538)\n\n指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击恶意\n\n##### 第三⽅库\n\n⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。","slug":"web/WebSecurityQuestion","published":1,"updated":"2023-10-21T14:19:22.875Z","__permalink":"/web/security/question.html","_id":"clo6whxdc001rdif32tq5468l","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h5 id=\"跨站脚本-Cross-Site-Scripting-XSS\"><a href=\"#跨站脚本-Cross-Site-Scripting-XSS\" class=\"headerlink\" title=\"跨站脚本 (Cross-Site Scripting, XSS)\"></a><a href=\"https://blog.csdn.net/qq_35490191/article/details/132212266\">跨站脚本 (Cross-Site Scripting, XSS)</a></h5><p>⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript &#x2F; CSS &#x2F; Flash 等；</p>\n<h5 id=\"iframe-的滥⽤\"><a href=\"#iframe-的滥⽤\" class=\"headerlink\" title=\"iframe 的滥⽤\"></a>iframe 的滥⽤</h5><p>iframe 中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在 iframe 中运⾏JavaScirpt 脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；</p>\n<h5 id=\"跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）\"><a href=\"#跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）\" class=\"headerlink\" title=\"跨站点请求伪造（Cross-Site Request Forgeries，CSRF）\"></a><a href=\"https://blog.csdn.net/qq_35490191/article/details/132220538\">跨站点请求伪造（Cross-Site Request Forgeries，CSRF）</a></h5><p>指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击恶意</p>\n<h5 id=\"第三⽅库\"><a href=\"#第三⽅库\" class=\"headerlink\" title=\"第三⽅库\"></a>第三⽅库</h5><p>⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/browser/render/process.html","/web/cross/site/request/forgeries.html"],"length":428,"excerpt":"","more":"<h5 id=\"跨站脚本-Cross-Site-Scripting-XSS\"><a href=\"#跨站脚本-Cross-Site-Scripting-XSS\" class=\"headerlink\" title=\"跨站脚本 (Cross-Site Scripting, XSS)\"></a><a href=\"https://blog.csdn.net/qq_35490191/article/details/132212266\">跨站脚本 (Cross-Site Scripting, XSS)</a></h5><p>⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript &#x2F; CSS &#x2F; Flash 等；</p>\n<h5 id=\"iframe-的滥⽤\"><a href=\"#iframe-的滥⽤\" class=\"headerlink\" title=\"iframe 的滥⽤\"></a>iframe 的滥⽤</h5><p>iframe 中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在 iframe 中运⾏JavaScirpt 脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；</p>\n<h5 id=\"跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）\"><a href=\"#跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）\" class=\"headerlink\" title=\"跨站点请求伪造（Cross-Site Request Forgeries，CSRF）\"></a><a href=\"https://blog.csdn.net/qq_35490191/article/details/132220538\">跨站点请求伪造（Cross-Site Request Forgeries，CSRF）</a></h5><p>指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击恶意</p>\n<h5 id=\"第三⽅库\"><a href=\"#第三⽅库\" class=\"headerlink\" title=\"第三⽅库\"></a>第三⽅库</h5><p>⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。</p>\n"},{"title":"前端懒加载是什么?","date":"2023-10-21T13:05:16.000Z","description":"懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。","comments":1,"_content":"\n\n##### 懒加载的概念\n\n懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。\n如果使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。\n\n##### 懒加载的特点\n\n- 减少无用资源的加载：使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。\n- 提升用户体验: 如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。\n- 防止加载过多图片而影响其他资源文件的加载：会影响网站应用的正常使用。\n\n#####  懒加载的实现原理\n\n图片的加载是由 src 引起的，当对 src 赋值时，浏览器就会请求图片资源。根据这个原理，我们使用 HTML5 的data-xxx 属性来储存图片的路径，在需要加载图片的时候，将 data-xxx 中图片的路径赋值给src，这样就实现了图片的按需加载，即懒加载。\n\n**注意**：data-xxx 中的 xxx 可以自定义，这里我们使用data-src来定义。\n\n懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。\n\n使用原生 JavaScript 实现懒加载：\n\n**知识点**：\n\nwindow.innerHeight 是浏览器可视区的高度\n\ndocument.body.scrollTop\n\ndocument.documentElement.scrollTop 是浏览器滚动的过的距离\n\nimgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）\n\n图片加载条件 ： img.offsetTop < window.innerHeight+document.body.scrollTop;\n\n![在这里插入图片描述](https://pic.imgdb.cn/item/6533ccf1c458853aef92497a.png)\n\n代码实现：\n\n```html\n<div class='container'>\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n</div>\n\n<script>\n    var imgs = document.querySelectorAll('img');\n    function lazyLoad() {\n        var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n        var winHeight = window.innerHeight;\n        for(let i = 0; i < imgs.lenght; i++) {\n            if(imgs[i].offsetTop < scrollTop + winHeight) {\n                imgs[i].src = imgs[i].getAttribute('data-src');\n            }\n        }\n    }\n    window.onsrcoll = lazyLoad();\n</script>\n```\n","source":"_posts/web/lazyLoad.md","raw":"---\ntitle: 前端懒加载是什么?\npermalink: /web/lazy/loading.html\ndate: 2023-10-21 21:05:16\ndescription: 懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。\ntag: [前端, 浏览器, 性能优化]\ncomments: true\ncategories: \n - 浏览器\n - 性能优化\n---\n\n\n##### 懒加载的概念\n\n懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。\n如果使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。\n\n##### 懒加载的特点\n\n- 减少无用资源的加载：使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。\n- 提升用户体验: 如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。\n- 防止加载过多图片而影响其他资源文件的加载：会影响网站应用的正常使用。\n\n#####  懒加载的实现原理\n\n图片的加载是由 src 引起的，当对 src 赋值时，浏览器就会请求图片资源。根据这个原理，我们使用 HTML5 的data-xxx 属性来储存图片的路径，在需要加载图片的时候，将 data-xxx 中图片的路径赋值给src，这样就实现了图片的按需加载，即懒加载。\n\n**注意**：data-xxx 中的 xxx 可以自定义，这里我们使用data-src来定义。\n\n懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。\n\n使用原生 JavaScript 实现懒加载：\n\n**知识点**：\n\nwindow.innerHeight 是浏览器可视区的高度\n\ndocument.body.scrollTop\n\ndocument.documentElement.scrollTop 是浏览器滚动的过的距离\n\nimgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）\n\n图片加载条件 ： img.offsetTop < window.innerHeight+document.body.scrollTop;\n\n![在这里插入图片描述](https://pic.imgdb.cn/item/6533ccf1c458853aef92497a.png)\n\n代码实现：\n\n```html\n<div class='container'>\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n</div>\n\n<script>\n    var imgs = document.querySelectorAll('img');\n    function lazyLoad() {\n        var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n        var winHeight = window.innerHeight;\n        for(let i = 0; i < imgs.lenght; i++) {\n            if(imgs[i].offsetTop < scrollTop + winHeight) {\n                imgs[i].src = imgs[i].getAttribute('data-src');\n            }\n        }\n    }\n    window.onsrcoll = lazyLoad();\n</script>\n```\n","slug":"web/lazyLoad","published":1,"updated":"2023-10-21T13:57:45.049Z","__permalink":"/web/lazy/loading.html","_id":"clo6whxdd001udif3cl651nvn","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h5 id=\"懒加载的概念\"><a href=\"#懒加载的概念\" class=\"headerlink\" title=\"懒加载的概念\"></a>懒加载的概念</h5><p>懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。<br>如果使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。</p>\n<h5 id=\"懒加载的特点\"><a href=\"#懒加载的特点\" class=\"headerlink\" title=\"懒加载的特点\"></a>懒加载的特点</h5><ul>\n<li>减少无用资源的加载：使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。</li>\n<li>提升用户体验: 如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。</li>\n<li>防止加载过多图片而影响其他资源文件的加载：会影响网站应用的正常使用。</li>\n</ul>\n<h5 id=\"懒加载的实现原理\"><a href=\"#懒加载的实现原理\" class=\"headerlink\" title=\"懒加载的实现原理\"></a>懒加载的实现原理</h5><p>图片的加载是由 src 引起的，当对 src 赋值时，浏览器就会请求图片资源。根据这个原理，我们使用 HTML5 的data-xxx 属性来储存图片的路径，在需要加载图片的时候，将 data-xxx 中图片的路径赋值给src，这样就实现了图片的按需加载，即懒加载。</p>\n<p><strong>注意</strong>：data-xxx 中的 xxx 可以自定义，这里我们使用data-src来定义。</p>\n<p>懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。</p>\n<p>使用原生 JavaScript 实现懒加载：</p>\n<p><strong>知识点</strong>：</p>\n<p>window.innerHeight 是浏览器可视区的高度</p>\n<p>document.body.scrollTop</p>\n<p>document.documentElement.scrollTop 是浏览器滚动的过的距离</p>\n<p>imgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）</p>\n<p>图片加载条件 ： img.offsetTop &lt; window.innerHeight+document.body.scrollTop;</p>\n<p><img src=\"https://pic.imgdb.cn/item/6533ccf1c458853aef92497a.png\" alt=\"在这里插入图片描述\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;container&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> imgs = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;img&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">lazyLoad</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> scrollTop = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">scrollTop</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">scrollTop</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> winHeight = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; imgs.<span class=\"property\">lenght</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(imgs[i].<span class=\"property\">offsetTop</span> &lt; scrollTop + winHeight) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                imgs[i].<span class=\"property\">src</span> = imgs[i].<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;data-src&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">window</span>.<span class=\"property\">onsrcoll</span> = <span class=\"title function_\">lazyLoad</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":1727,"excerpt":"","more":"<h5 id=\"懒加载的概念\"><a href=\"#懒加载的概念\" class=\"headerlink\" title=\"懒加载的概念\"></a>懒加载的概念</h5><p>懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。<br>如果使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。</p>\n<h5 id=\"懒加载的特点\"><a href=\"#懒加载的特点\" class=\"headerlink\" title=\"懒加载的特点\"></a>懒加载的特点</h5><ul>\n<li>减少无用资源的加载：使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。</li>\n<li>提升用户体验: 如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。</li>\n<li>防止加载过多图片而影响其他资源文件的加载：会影响网站应用的正常使用。</li>\n</ul>\n<h5 id=\"懒加载的实现原理\"><a href=\"#懒加载的实现原理\" class=\"headerlink\" title=\"懒加载的实现原理\"></a>懒加载的实现原理</h5><p>图片的加载是由 src 引起的，当对 src 赋值时，浏览器就会请求图片资源。根据这个原理，我们使用 HTML5 的data-xxx 属性来储存图片的路径，在需要加载图片的时候，将 data-xxx 中图片的路径赋值给src，这样就实现了图片的按需加载，即懒加载。</p>\n<p><strong>注意</strong>：data-xxx 中的 xxx 可以自定义，这里我们使用data-src来定义。</p>\n<p>懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。</p>\n<p>使用原生 JavaScript 实现懒加载：</p>\n<p><strong>知识点</strong>：</p>\n<p>window.innerHeight 是浏览器可视区的高度</p>\n<p>document.body.scrollTop</p>\n<p>document.documentElement.scrollTop 是浏览器滚动的过的距离</p>\n<p>imgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）</p>\n<p>图片加载条件 ： img.offsetTop &lt; window.innerHeight+document.body.scrollTop;</p>\n<p><img src=\"https://pic.imgdb.cn/item/6533ccf1c458853aef92497a.png\" alt=\"在这里插入图片描述\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;container&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> imgs = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;img&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">lazyLoad</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> scrollTop = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">scrollTop</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">scrollTop</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> winHeight = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; imgs.<span class=\"property\">lenght</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(imgs[i].<span class=\"property\">offsetTop</span> &lt; scrollTop + winHeight) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                imgs[i].<span class=\"property\">src</span> = imgs[i].<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;data-src&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">window</span>.<span class=\"property\">onsrcoll</span> = <span class=\"title function_\">lazyLoad</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"如何对项目中的图片进行优化?","date":"2023-10-21T12:52:25.000Z","description":"为什么要优化项目中的图片，优化图片可以解决因为图片造成的加载时间过长，页面体验不佳。","comments":1,"_content":"\n##### 优化步骤方案\n 1. 不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片\n完全可以用 CSS 去代替。\n\n 2. 对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪\n费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然\n后去请求相应裁剪好的图片。\n\n 3. 小图使用 base64 格式\n\n 4. 将多个图标文件整合到一张图片中（雪碧图）\n\n 5. 选择正确的图片格式：\n\t- 对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好\n    \n\t- 小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替\n\n\t- 照片使用 JPEG\n\n##### 常见的图片格式及使用场景\n\n 1. BMP：是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以 BMP 格式的图片通常是较大的文件。\n\n 2. GIF：是无损的、采用索引色的点阵图。采用 LZW 压缩算法进行\n编码。文件小，是 GIF 格式的优点，同时，GIF 格式还具有支持动画\n以及透明的优点。但是 GIF 格式仅支持 8bit 的索引色，所以 GIF 格\n式适用于对色彩要求不高同时需要文件体积较小的场景。\n\n 3. JPEG：是有损的、采用直接色的点阵图。JPEG 的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG 非常适合用来存储照片，与 GIF 相比，JPEG 不适合用来存储企业 Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较 GIF更大。\n\n 4. PNG-8：是无损的、使用索引色的点阵图。PNG 是一种比较新的图片格式，PNG-8 是非常好的 GIF 格式替代者，在可能的情况下，应该尽可能的使用 PNG-8 而不是 GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8 还支持透明度的调节，而 GIF并不支持。除非需要动画的支持，否则没有理由使用 GIF而不是 PNG-8。\n\n 5. PNG-24：是无损的、使用直接色的点阵图。PNG-24 的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24 格式的文件大小要比 BMP 小得多。当然，PNG24 的图片还是要比 JPEG、GIF、PNG-8大得多。\n\n 6. SVG 是无损的矢量图。SVG 是矢量图意味着 SVG 图片由直线和曲线以及绘制它们的方法组成。当放大 SVG 图片时，看到的还是线和曲线，而不会出现像素点。这意味着 SVG 图片在放大时，不会失真，所以它非常适合用来绘制 Logo、Icon 等。\n\n 7. WebP：是谷歌开发的一种新图片格式，WebP 是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为 Web 而生的，什么叫为 Web 而生呢？就是说相同质量的图片，WebP 具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有 Chrome 浏览器和 Opera浏览器支持 WebP 格式，兼容性不太好。\n\n在无损压缩的情况下，相同质量的 WebP 图片，文件大小要比 PNG 小26%；\n在有损压缩的情况下，具有相同图片精度的 WebP 图片，文件大小要比 JPEG 小 25%~34%；\n\nWebP 图片格式支持图片透明度，一个无损压缩的 WebP 图片，如果要支持透明度只需要 22%的格外文件大小。\n","source":"_posts/web/imagePerform.md","raw":"---\ntitle: 如何对项目中的图片进行优化?\npermalink: /web/image/perform.html\ndate: 2023-10-21 20:52:25\ndescription: 为什么要优化项目中的图片，优化图片可以解决因为图片造成的加载时间过长，页面体验不佳。\ntag: [前端, 浏览器, 性能优化, Webpack, 图片]\ncomments: true\ncategories: \n - 浏览器\n - 性能优化\n---\n\n##### 优化步骤方案\n 1. 不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片\n完全可以用 CSS 去代替。\n\n 2. 对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪\n费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然\n后去请求相应裁剪好的图片。\n\n 3. 小图使用 base64 格式\n\n 4. 将多个图标文件整合到一张图片中（雪碧图）\n\n 5. 选择正确的图片格式：\n\t- 对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好\n    \n\t- 小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替\n\n\t- 照片使用 JPEG\n\n##### 常见的图片格式及使用场景\n\n 1. BMP：是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以 BMP 格式的图片通常是较大的文件。\n\n 2. GIF：是无损的、采用索引色的点阵图。采用 LZW 压缩算法进行\n编码。文件小，是 GIF 格式的优点，同时，GIF 格式还具有支持动画\n以及透明的优点。但是 GIF 格式仅支持 8bit 的索引色，所以 GIF 格\n式适用于对色彩要求不高同时需要文件体积较小的场景。\n\n 3. JPEG：是有损的、采用直接色的点阵图。JPEG 的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG 非常适合用来存储照片，与 GIF 相比，JPEG 不适合用来存储企业 Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较 GIF更大。\n\n 4. PNG-8：是无损的、使用索引色的点阵图。PNG 是一种比较新的图片格式，PNG-8 是非常好的 GIF 格式替代者，在可能的情况下，应该尽可能的使用 PNG-8 而不是 GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8 还支持透明度的调节，而 GIF并不支持。除非需要动画的支持，否则没有理由使用 GIF而不是 PNG-8。\n\n 5. PNG-24：是无损的、使用直接色的点阵图。PNG-24 的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24 格式的文件大小要比 BMP 小得多。当然，PNG24 的图片还是要比 JPEG、GIF、PNG-8大得多。\n\n 6. SVG 是无损的矢量图。SVG 是矢量图意味着 SVG 图片由直线和曲线以及绘制它们的方法组成。当放大 SVG 图片时，看到的还是线和曲线，而不会出现像素点。这意味着 SVG 图片在放大时，不会失真，所以它非常适合用来绘制 Logo、Icon 等。\n\n 7. WebP：是谷歌开发的一种新图片格式，WebP 是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为 Web 而生的，什么叫为 Web 而生呢？就是说相同质量的图片，WebP 具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有 Chrome 浏览器和 Opera浏览器支持 WebP 格式，兼容性不太好。\n\n在无损压缩的情况下，相同质量的 WebP 图片，文件大小要比 PNG 小26%；\n在有损压缩的情况下，具有相同图片精度的 WebP 图片，文件大小要比 JPEG 小 25%~34%；\n\nWebP 图片格式支持图片透明度，一个无损压缩的 WebP 图片，如果要支持透明度只需要 22%的格外文件大小。\n","slug":"web/imagePerform","published":1,"updated":"2023-10-21T13:57:38.086Z","__permalink":"/web/image/perform.html","_id":"clo6whxde001ydif31r7o5gqu","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h5 id=\"优化步骤方案\"><a href=\"#优化步骤方案\" class=\"headerlink\" title=\"优化步骤方案\"></a>优化步骤方案</h5><ol>\n<li><p>不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片<br>完全可以用 CSS 去代替。</p>\n</li>\n<li><p>对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪<br>费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然<br>后去请求相应裁剪好的图片。</p>\n</li>\n<li><p>小图使用 base64 格式</p>\n</li>\n<li><p>将多个图标文件整合到一张图片中（雪碧图）</p>\n</li>\n<li><p>选择正确的图片格式：</p>\n<ul>\n<li><p>对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好</p>\n</li>\n<li><p>小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替</p>\n</li>\n<li><p>照片使用 JPEG</p>\n</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"常见的图片格式及使用场景\"><a href=\"#常见的图片格式及使用场景\" class=\"headerlink\" title=\"常见的图片格式及使用场景\"></a>常见的图片格式及使用场景</h5><ol>\n<li><p>BMP：是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以 BMP 格式的图片通常是较大的文件。</p>\n</li>\n<li><p>GIF：是无损的、采用索引色的点阵图。采用 LZW 压缩算法进行<br>编码。文件小，是 GIF 格式的优点，同时，GIF 格式还具有支持动画<br>以及透明的优点。但是 GIF 格式仅支持 8bit 的索引色，所以 GIF 格<br>式适用于对色彩要求不高同时需要文件体积较小的场景。</p>\n</li>\n<li><p>JPEG：是有损的、采用直接色的点阵图。JPEG 的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG 非常适合用来存储照片，与 GIF 相比，JPEG 不适合用来存储企业 Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较 GIF更大。</p>\n</li>\n<li><p>PNG-8：是无损的、使用索引色的点阵图。PNG 是一种比较新的图片格式，PNG-8 是非常好的 GIF 格式替代者，在可能的情况下，应该尽可能的使用 PNG-8 而不是 GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8 还支持透明度的调节，而 GIF并不支持。除非需要动画的支持，否则没有理由使用 GIF而不是 PNG-8。</p>\n</li>\n<li><p>PNG-24：是无损的、使用直接色的点阵图。PNG-24 的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24 格式的文件大小要比 BMP 小得多。当然，PNG24 的图片还是要比 JPEG、GIF、PNG-8大得多。</p>\n</li>\n<li><p>SVG 是无损的矢量图。SVG 是矢量图意味着 SVG 图片由直线和曲线以及绘制它们的方法组成。当放大 SVG 图片时，看到的还是线和曲线，而不会出现像素点。这意味着 SVG 图片在放大时，不会失真，所以它非常适合用来绘制 Logo、Icon 等。</p>\n</li>\n<li><p>WebP：是谷歌开发的一种新图片格式，WebP 是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为 Web 而生的，什么叫为 Web 而生呢？就是说相同质量的图片，WebP 具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有 Chrome 浏览器和 Opera浏览器支持 WebP 格式，兼容性不太好。</p>\n</li>\n</ol>\n<p>在无损压缩的情况下，相同质量的 WebP 图片，文件大小要比 PNG 小26%；<br>在有损压缩的情况下，具有相同图片精度的 WebP 图片，文件大小要比 JPEG 小 25%~34%；</p>\n<p>WebP 图片格式支持图片透明度，一个无损压缩的 WebP 图片，如果要支持透明度只需要 22%的格外文件大小。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":1349,"excerpt":"","more":"<h5 id=\"优化步骤方案\"><a href=\"#优化步骤方案\" class=\"headerlink\" title=\"优化步骤方案\"></a>优化步骤方案</h5><ol>\n<li><p>不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片<br>完全可以用 CSS 去代替。</p>\n</li>\n<li><p>对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪<br>费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然<br>后去请求相应裁剪好的图片。</p>\n</li>\n<li><p>小图使用 base64 格式</p>\n</li>\n<li><p>将多个图标文件整合到一张图片中（雪碧图）</p>\n</li>\n<li><p>选择正确的图片格式：</p>\n<ul>\n<li><p>对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好</p>\n</li>\n<li><p>小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替</p>\n</li>\n<li><p>照片使用 JPEG</p>\n</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"常见的图片格式及使用场景\"><a href=\"#常见的图片格式及使用场景\" class=\"headerlink\" title=\"常见的图片格式及使用场景\"></a>常见的图片格式及使用场景</h5><ol>\n<li><p>BMP：是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以 BMP 格式的图片通常是较大的文件。</p>\n</li>\n<li><p>GIF：是无损的、采用索引色的点阵图。采用 LZW 压缩算法进行<br>编码。文件小，是 GIF 格式的优点，同时，GIF 格式还具有支持动画<br>以及透明的优点。但是 GIF 格式仅支持 8bit 的索引色，所以 GIF 格<br>式适用于对色彩要求不高同时需要文件体积较小的场景。</p>\n</li>\n<li><p>JPEG：是有损的、采用直接色的点阵图。JPEG 的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG 非常适合用来存储照片，与 GIF 相比，JPEG 不适合用来存储企业 Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较 GIF更大。</p>\n</li>\n<li><p>PNG-8：是无损的、使用索引色的点阵图。PNG 是一种比较新的图片格式，PNG-8 是非常好的 GIF 格式替代者，在可能的情况下，应该尽可能的使用 PNG-8 而不是 GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8 还支持透明度的调节，而 GIF并不支持。除非需要动画的支持，否则没有理由使用 GIF而不是 PNG-8。</p>\n</li>\n<li><p>PNG-24：是无损的、使用直接色的点阵图。PNG-24 的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24 格式的文件大小要比 BMP 小得多。当然，PNG24 的图片还是要比 JPEG、GIF、PNG-8大得多。</p>\n</li>\n<li><p>SVG 是无损的矢量图。SVG 是矢量图意味着 SVG 图片由直线和曲线以及绘制它们的方法组成。当放大 SVG 图片时，看到的还是线和曲线，而不会出现像素点。这意味着 SVG 图片在放大时，不会失真，所以它非常适合用来绘制 Logo、Icon 等。</p>\n</li>\n<li><p>WebP：是谷歌开发的一种新图片格式，WebP 是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为 Web 而生的，什么叫为 Web 而生呢？就是说相同质量的图片，WebP 具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有 Chrome 浏览器和 Opera浏览器支持 WebP 格式，兼容性不太好。</p>\n</li>\n</ol>\n<p>在无损压缩的情况下，相同质量的 WebP 图片，文件大小要比 PNG 小26%；<br>在有损压缩的情况下，具有相同图片精度的 WebP 图片，文件大小要比 JPEG 小 25%~34%；</p>\n<p>WebP 图片格式支持图片透明度，一个无损压缩的 WebP 图片，如果要支持透明度只需要 22%的格外文件大小。</p>\n"},{"title":"节流和防抖","date":"2023-10-21T13:00:16.000Z","description":"节流和防抖，有助于在输入或者点击某个按钮时进行优化事件响应。","comments":1,"_content":"\n#### 对节流与防抖的理解\n函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件\n又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因\n为用户的多次点击向后端发送多次请求。\n函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发\n事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只\n有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件\n节流来降低事件调用的频率。\n\n防抖函数的应用场景：\n- 按钮提交场景：防止多次提交按钮，只执行最后一次提交\n- 服务端验证场景： 表达验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有索联想词功能类似生存环境可以使用lodash.debounce\n\n节流函数的适用场景：\n\n- 拖拽场景：固定实际内只执行一次，防止超高频次触发位置变动\n- 缩放场景：监控浏览器resize\n- 动画场景：避免短时间内多次触发动画引起性能问题\n\n#### 实现节流函数和防抖函数\n\n##### 函数防抖的实现\n```javascript\nfunction debounce(fn, wait) {\n    let timer = null;\n    return function() {\n        console.log(123);\n        let context = this, args = [...arguments];\n        // 如果此时存在定时器则取消之前的定时器重新计时\n        if(timer) {\n            clearTimeout(timer);\n            timer = null;\n        }\n        timer = setTimeout(() => {\n            fn.apply(context, args);\n        }, wait);\n    }\n}\n```\n\n##### 函数节流的实现\n```javascript\n// 时间戳版\nfunction throttle(fn, delay) {\n    var preTime = Date.now();\n\n    return function() {\n        var context = this,\n        args = [...arguments],\n        nowTime = Date.now();\n\n        // 如果两次时间间隔超过了指定时间，则执行函数。\n        if(nowTime - preTime >= delay) {\n            preTime = Date.now();\n            return fn.apply(context, args);\n        }\n    };\n}\n\n// 定时器版\nfunction throttle(fu, wait) {\n    let timer = null;\n    return function(){\n        let context = this,\n        args = [...arguments];\n        if(!timer) {\n            timer = setTimeout(() => {\n                fu.apply(context, args);\n                clearTimeout(timer);\n            }, wait);\n        }\n    }\n}\n```\n","source":"_posts/web/lodashDebounce.md","raw":"---\ntitle: 节流和防抖\npermalink: /web/lodash/dubounce.html\ndate: 2023-10-21 21:00:16\ndescription: 节流和防抖，有助于在输入或者点击某个按钮时进行优化事件响应。\ntag: [前端, 浏览器, 性能优化]\ncomments: true\ncategories: \n - 浏览器\n - 性能优化\n---\n\n#### 对节流与防抖的理解\n函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件\n又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因\n为用户的多次点击向后端发送多次请求。\n函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发\n事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只\n有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件\n节流来降低事件调用的频率。\n\n防抖函数的应用场景：\n- 按钮提交场景：防止多次提交按钮，只执行最后一次提交\n- 服务端验证场景： 表达验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有索联想词功能类似生存环境可以使用lodash.debounce\n\n节流函数的适用场景：\n\n- 拖拽场景：固定实际内只执行一次，防止超高频次触发位置变动\n- 缩放场景：监控浏览器resize\n- 动画场景：避免短时间内多次触发动画引起性能问题\n\n#### 实现节流函数和防抖函数\n\n##### 函数防抖的实现\n```javascript\nfunction debounce(fn, wait) {\n    let timer = null;\n    return function() {\n        console.log(123);\n        let context = this, args = [...arguments];\n        // 如果此时存在定时器则取消之前的定时器重新计时\n        if(timer) {\n            clearTimeout(timer);\n            timer = null;\n        }\n        timer = setTimeout(() => {\n            fn.apply(context, args);\n        }, wait);\n    }\n}\n```\n\n##### 函数节流的实现\n```javascript\n// 时间戳版\nfunction throttle(fn, delay) {\n    var preTime = Date.now();\n\n    return function() {\n        var context = this,\n        args = [...arguments],\n        nowTime = Date.now();\n\n        // 如果两次时间间隔超过了指定时间，则执行函数。\n        if(nowTime - preTime >= delay) {\n            preTime = Date.now();\n            return fn.apply(context, args);\n        }\n    };\n}\n\n// 定时器版\nfunction throttle(fu, wait) {\n    let timer = null;\n    return function(){\n        let context = this,\n        args = [...arguments];\n        if(!timer) {\n            timer = setTimeout(() => {\n                fu.apply(context, args);\n                clearTimeout(timer);\n            }, wait);\n        }\n    }\n}\n```\n","slug":"web/lodashDebounce","published":1,"updated":"2023-10-21T13:57:49.996Z","__permalink":"/web/lodash/dubounce.html","_id":"clo6whxdf0020dif36k6ocacp","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h4 id=\"对节流与防抖的理解\"><a href=\"#对节流与防抖的理解\" class=\"headerlink\" title=\"对节流与防抖的理解\"></a>对节流与防抖的理解</h4><p>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件<br>又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因<br>为用户的多次点击向后端发送多次请求。<br>函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发<br>事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只<br>有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件<br>节流来降低事件调用的频率。</p>\n<p>防抖函数的应用场景：</p>\n<ul>\n<li>按钮提交场景：防止多次提交按钮，只执行最后一次提交</li>\n<li>服务端验证场景： 表达验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有索联想词功能类似生存环境可以使用lodash.debounce</li>\n</ul>\n<p>节流函数的适用场景：</p>\n<ul>\n<li>拖拽场景：固定实际内只执行一次，防止超高频次触发位置变动</li>\n<li>缩放场景：监控浏览器resize</li>\n<li>动画场景：避免短时间内多次触发动画引起性能问题</li>\n</ul>\n<h4 id=\"实现节流函数和防抖函数\"><a href=\"#实现节流函数和防抖函数\" class=\"headerlink\" title=\"实现节流函数和防抖函数\"></a>实现节流函数和防抖函数</h4><h5 id=\"函数防抖的实现\"><a href=\"#函数防抖的实现\" class=\"headerlink\" title=\"函数防抖的实现\"></a>函数防抖的实现</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>, args = [...<span class=\"variable language_\">arguments</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 如果此时存在定时器则取消之前的定时器重新计时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数节流的实现\"><a href=\"#函数节流的实现\" class=\"headerlink\" title=\"函数节流的实现\"></a>函数节流的实现</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 时间戳版</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> preTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> context = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">        args = [...<span class=\"variable language_\">arguments</span>],</span><br><span class=\"line\">        nowTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果两次时间间隔超过了指定时间，则执行函数。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nowTime - preTime &gt;= delay) &#123;</span><br><span class=\"line\">            preTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定时器版</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fu, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">        args = [...<span class=\"variable language_\">arguments</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                fu.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">                <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":1244,"excerpt":"","more":"<h4 id=\"对节流与防抖的理解\"><a href=\"#对节流与防抖的理解\" class=\"headerlink\" title=\"对节流与防抖的理解\"></a>对节流与防抖的理解</h4><p>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件<br>又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因<br>为用户的多次点击向后端发送多次请求。<br>函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发<br>事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只<br>有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件<br>节流来降低事件调用的频率。</p>\n<p>防抖函数的应用场景：</p>\n<ul>\n<li>按钮提交场景：防止多次提交按钮，只执行最后一次提交</li>\n<li>服务端验证场景： 表达验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有索联想词功能类似生存环境可以使用lodash.debounce</li>\n</ul>\n<p>节流函数的适用场景：</p>\n<ul>\n<li>拖拽场景：固定实际内只执行一次，防止超高频次触发位置变动</li>\n<li>缩放场景：监控浏览器resize</li>\n<li>动画场景：避免短时间内多次触发动画引起性能问题</li>\n</ul>\n<h4 id=\"实现节流函数和防抖函数\"><a href=\"#实现节流函数和防抖函数\" class=\"headerlink\" title=\"实现节流函数和防抖函数\"></a>实现节流函数和防抖函数</h4><h5 id=\"函数防抖的实现\"><a href=\"#函数防抖的实现\" class=\"headerlink\" title=\"函数防抖的实现\"></a>函数防抖的实现</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>, args = [...<span class=\"variable language_\">arguments</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 如果此时存在定时器则取消之前的定时器重新计时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数节流的实现\"><a href=\"#函数节流的实现\" class=\"headerlink\" title=\"函数节流的实现\"></a>函数节流的实现</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 时间戳版</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> preTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> context = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">        args = [...<span class=\"variable language_\">arguments</span>],</span><br><span class=\"line\">        nowTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果两次时间间隔超过了指定时间，则执行函数。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nowTime - preTime &gt;= delay) &#123;</span><br><span class=\"line\">            preTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定时器版</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fu, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">        args = [...<span class=\"variable language_\">arguments</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                fu.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">                <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"如何⽤webpack 来优化前端性能?","date":"2023-10-21T12:52:25.000Z","description":"⽤webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运⾏快速⾼效","comments":1,"_content":"\n##### 如何⽤webpack 来优化前端性能？\n⽤webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。\n- 压缩代码：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩 css；\n- 利⽤CDN 加速: 在构建过程中，将引⽤的静态资源路径修改为 CDN 上对应的路径。可以利⽤webpack 对于 output 参数和各 loader 的publicPath 参数来修改资源路径；\n- Tree Shaking: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动 webpack 时追加参数 --optimize-minimize 来实现；\n- Code Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存；\n- 提取公共第三⽅库: SplitChunksPlugin 插件来进⾏公共模块抽取, 利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码。\n\n##### 如何提⾼webpack 的构建速度？\n1. 多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码；\n2. 通过 externals 配置来提取常⽤库；\n3. 利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过DllPlugin 来对那些我们引⽤但是绝对不会修改的 npm 包来进⾏预编译，再通过DllReferencePlugin 将预编译的模块加载进来；\n4. 使⽤ Happypack 实现多线程加速编译；\n5. 使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。原理上 webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度；\n6. 使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码。","source":"_posts/web/webpackPerform.md","raw":"---\ntitle: 如何⽤webpack 来优化前端性能?\npermalink: /web/webpack/perform.html\ndate: 2023-10-21 20:52:25\ndescription: ⽤webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运⾏快速⾼效\ntag: [前端, 浏览器, 性能优化, Webpack, 插件]\ncomments: true\ncategories: \n - 浏览器\n - 性能优化\n---\n\n##### 如何⽤webpack 来优化前端性能？\n⽤webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。\n- 压缩代码：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩 css；\n- 利⽤CDN 加速: 在构建过程中，将引⽤的静态资源路径修改为 CDN 上对应的路径。可以利⽤webpack 对于 output 参数和各 loader 的publicPath 参数来修改资源路径；\n- Tree Shaking: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动 webpack 时追加参数 --optimize-minimize 来实现；\n- Code Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存；\n- 提取公共第三⽅库: SplitChunksPlugin 插件来进⾏公共模块抽取, 利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码。\n\n##### 如何提⾼webpack 的构建速度？\n1. 多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码；\n2. 通过 externals 配置来提取常⽤库；\n3. 利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过DllPlugin 来对那些我们引⽤但是绝对不会修改的 npm 包来进⾏预编译，再通过DllReferencePlugin 将预编译的模块加载进来；\n4. 使⽤ Happypack 实现多线程加速编译；\n5. 使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。原理上 webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度；\n6. 使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码。","slug":"web/webpackPerform","published":1,"updated":"2023-10-21T13:58:00.346Z","__permalink":"/web/webpack/perform.html","_id":"clo6whxdg0024dif3huzfcjsj","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h5 id=\"如何⽤webpack-来优化前端性能？\"><a href=\"#如何⽤webpack-来优化前端性能？\" class=\"headerlink\" title=\"如何⽤webpack 来优化前端性能？\"></a>如何⽤webpack 来优化前端性能？</h5><p>⽤webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。</p>\n<ul>\n<li>压缩代码：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩 css；</li>\n<li>利⽤CDN 加速: 在构建过程中，将引⽤的静态资源路径修改为 CDN 上对应的路径。可以利⽤webpack 对于 output 参数和各 loader 的publicPath 参数来修改资源路径；</li>\n<li>Tree Shaking: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动 webpack 时追加参数 –optimize-minimize 来实现；</li>\n<li>Code Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存；</li>\n<li>提取公共第三⽅库: SplitChunksPlugin 插件来进⾏公共模块抽取, 利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码。</li>\n</ul>\n<h5 id=\"如何提⾼webpack-的构建速度？\"><a href=\"#如何提⾼webpack-的构建速度？\" class=\"headerlink\" title=\"如何提⾼webpack 的构建速度？\"></a>如何提⾼webpack 的构建速度？</h5><ol>\n<li>多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码；</li>\n<li>通过 externals 配置来提取常⽤库；</li>\n<li>利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过DllPlugin 来对那些我们引⽤但是绝对不会修改的 npm 包来进⾏预编译，再通过DllReferencePlugin 将预编译的模块加载进来；</li>\n<li>使⽤ Happypack 实现多线程加速编译；</li>\n<li>使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。原理上 webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度；</li>\n<li>使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码。</li>\n</ol>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/web/webpack/hot/module/replacement.html"],"length":797,"excerpt":"","more":"<h5 id=\"如何⽤webpack-来优化前端性能？\"><a href=\"#如何⽤webpack-来优化前端性能？\" class=\"headerlink\" title=\"如何⽤webpack 来优化前端性能？\"></a>如何⽤webpack 来优化前端性能？</h5><p>⽤webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。</p>\n<ul>\n<li>压缩代码：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩 css；</li>\n<li>利⽤CDN 加速: 在构建过程中，将引⽤的静态资源路径修改为 CDN 上对应的路径。可以利⽤webpack 对于 output 参数和各 loader 的publicPath 参数来修改资源路径；</li>\n<li>Tree Shaking: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动 webpack 时追加参数 –optimize-minimize 来实现；</li>\n<li>Code Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存；</li>\n<li>提取公共第三⽅库: SplitChunksPlugin 插件来进⾏公共模块抽取, 利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码。</li>\n</ul>\n<h5 id=\"如何提⾼webpack-的构建速度？\"><a href=\"#如何提⾼webpack-的构建速度？\" class=\"headerlink\" title=\"如何提⾼webpack 的构建速度？\"></a>如何提⾼webpack 的构建速度？</h5><ol>\n<li>多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码；</li>\n<li>通过 externals 配置来提取常⽤库；</li>\n<li>利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过DllPlugin 来对那些我们引⽤但是绝对不会修改的 npm 包来进⾏预编译，再通过DllReferencePlugin 将预编译的模块加载进来；</li>\n<li>使⽤ Happypack 实现多线程加速编译；</li>\n<li>使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。原理上 webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度；</li>\n<li>使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码。</li>\n</ol>\n"},{"title":"浅谈回流与重绘","date":"2023-10-21T13:05:16.000Z","description":"回流与重绘，都是在浏览器响应过程中展示环节对数据进行对比，而产生的两种不同的方式。","comments":1,"_content":"\n##### 回流\n当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。\n下面这些操作会导致回流：\n\n - 页面的首次渲染\n - 浏览器的窗口大小发生变化\n - 元素的内容发生变化\n - 元素的尺寸或者位置发生变化\n - 元素的字体大小发生变化\n - 激活 CSS 伪类\n - 查询某些属性或者调用某些方法\n - 添加或者删除可见的 DOM 元素\n \n在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的 DOM 元素重新排列，它的影响范围有两种：\n全局范围：从根节点开始，对整个渲染树进行重新布局\n局部范围：对渲染树的某部分或者一个渲染对象进行重新布局\n\n##### 重绘\n当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是重绘。\n\n下面这些操作会导致重绘：\ncolor、background 相关属性：background-color、background-image等\noutline 相 关 属 性 ： outline-color 、outline-width、text-decoration\nborder-radius、visibility、box-shadow\n\n注意： 当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。\n\n##### 如何避免回流与重绘？\n减少回流与重绘的措施：\n\n操作 DOM 时，尽量在低层级的 DOM 节点进行操作不要使用 table 布局， 一个小的改动可能会使整个table 进行重新布局\n\n使用 CSS 的表达式\n\n不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。\n\n使用 absolute 或者 fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素\n\n避免频繁操作 DOM，可以创建一个文档片段documentFragment，在它上面应用所有 DOM 操作，最后再把它添加到文档中\n\n将元素先设置 display: none，操作结束后再把它显示出来。因为在display 属性为 none 的元素上进行的 DOM 操作不会引发回流和重绘。将 DOM 的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。\n\n浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。\n\n上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。","source":"_posts/web/refluxAndRedrawing.md","raw":"---\ntitle: 浅谈回流与重绘\npermalink: /web/reflux/and/redrawing.html\ndate: 2023-10-21 21:05:16\ndescription: 回流与重绘，都是在浏览器响应过程中展示环节对数据进行对比，而产生的两种不同的方式。\ntag: [前端, 浏览器, 性能优化]\ncomments: true\ncategories: \n - 浏览器\n - 性能优化\n---\n\n##### 回流\n当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。\n下面这些操作会导致回流：\n\n - 页面的首次渲染\n - 浏览器的窗口大小发生变化\n - 元素的内容发生变化\n - 元素的尺寸或者位置发生变化\n - 元素的字体大小发生变化\n - 激活 CSS 伪类\n - 查询某些属性或者调用某些方法\n - 添加或者删除可见的 DOM 元素\n \n在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的 DOM 元素重新排列，它的影响范围有两种：\n全局范围：从根节点开始，对整个渲染树进行重新布局\n局部范围：对渲染树的某部分或者一个渲染对象进行重新布局\n\n##### 重绘\n当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是重绘。\n\n下面这些操作会导致重绘：\ncolor、background 相关属性：background-color、background-image等\noutline 相 关 属 性 ： outline-color 、outline-width、text-decoration\nborder-radius、visibility、box-shadow\n\n注意： 当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。\n\n##### 如何避免回流与重绘？\n减少回流与重绘的措施：\n\n操作 DOM 时，尽量在低层级的 DOM 节点进行操作不要使用 table 布局， 一个小的改动可能会使整个table 进行重新布局\n\n使用 CSS 的表达式\n\n不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。\n\n使用 absolute 或者 fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素\n\n避免频繁操作 DOM，可以创建一个文档片段documentFragment，在它上面应用所有 DOM 操作，最后再把它添加到文档中\n\n将元素先设置 display: none，操作结束后再把它显示出来。因为在display 属性为 none 的元素上进行的 DOM 操作不会引发回流和重绘。将 DOM 的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。\n\n浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。\n\n上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。","slug":"web/refluxAndRedrawing","published":1,"updated":"2023-10-21T13:57:55.821Z","__permalink":"/web/reflux/and/redrawing.html","_id":"clo6whxdh0026dif3462h52fa","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h5 id=\"回流\"><a href=\"#回流\" class=\"headerlink\" title=\"回流\"></a>回流</h5><p>当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。<br>下面这些操作会导致回流：</p>\n<ul>\n<li>页面的首次渲染</li>\n<li>浏览器的窗口大小发生变化</li>\n<li>元素的内容发生变化</li>\n<li>元素的尺寸或者位置发生变化</li>\n<li>元素的字体大小发生变化</li>\n<li>激活 CSS 伪类</li>\n<li>查询某些属性或者调用某些方法</li>\n<li>添加或者删除可见的 DOM 元素</li>\n</ul>\n<p>在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的 DOM 元素重新排列，它的影响范围有两种：<br>全局范围：从根节点开始，对整个渲染树进行重新布局<br>局部范围：对渲染树的某部分或者一个渲染对象进行重新布局</p>\n<h5 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h5><p>当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是重绘。</p>\n<p>下面这些操作会导致重绘：<br>color、background 相关属性：background-color、background-image等<br>outline 相 关 属 性 ： outline-color 、outline-width、text-decoration<br>border-radius、visibility、box-shadow</p>\n<p>注意： 当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。</p>\n<h5 id=\"如何避免回流与重绘？\"><a href=\"#如何避免回流与重绘？\" class=\"headerlink\" title=\"如何避免回流与重绘？\"></a>如何避免回流与重绘？</h5><p>减少回流与重绘的措施：</p>\n<p>操作 DOM 时，尽量在低层级的 DOM 节点进行操作不要使用 table 布局， 一个小的改动可能会使整个table 进行重新布局</p>\n<p>使用 CSS 的表达式</p>\n<p>不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</p>\n<p>使用 absolute 或者 fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素</p>\n<p>避免频繁操作 DOM，可以创建一个文档片段documentFragment，在它上面应用所有 DOM 操作，最后再把它添加到文档中</p>\n<p>将元素先设置 display: none，操作结束后再把它显示出来。因为在display 属性为 none 的元素上进行的 DOM 操作不会引发回流和重绘。将 DOM 的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。</p>\n<p>浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。</p>\n<p>上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":1044,"excerpt":"","more":"<h5 id=\"回流\"><a href=\"#回流\" class=\"headerlink\" title=\"回流\"></a>回流</h5><p>当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。<br>下面这些操作会导致回流：</p>\n<ul>\n<li>页面的首次渲染</li>\n<li>浏览器的窗口大小发生变化</li>\n<li>元素的内容发生变化</li>\n<li>元素的尺寸或者位置发生变化</li>\n<li>元素的字体大小发生变化</li>\n<li>激活 CSS 伪类</li>\n<li>查询某些属性或者调用某些方法</li>\n<li>添加或者删除可见的 DOM 元素</li>\n</ul>\n<p>在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的 DOM 元素重新排列，它的影响范围有两种：<br>全局范围：从根节点开始，对整个渲染树进行重新布局<br>局部范围：对渲染树的某部分或者一个渲染对象进行重新布局</p>\n<h5 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h5><p>当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是重绘。</p>\n<p>下面这些操作会导致重绘：<br>color、background 相关属性：background-color、background-image等<br>outline 相 关 属 性 ： outline-color 、outline-width、text-decoration<br>border-radius、visibility、box-shadow</p>\n<p>注意： 当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。</p>\n<h5 id=\"如何避免回流与重绘？\"><a href=\"#如何避免回流与重绘？\" class=\"headerlink\" title=\"如何避免回流与重绘？\"></a>如何避免回流与重绘？</h5><p>减少回流与重绘的措施：</p>\n<p>操作 DOM 时，尽量在低层级的 DOM 节点进行操作不要使用 table 布局， 一个小的改动可能会使整个table 进行重新布局</p>\n<p>使用 CSS 的表达式</p>\n<p>不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</p>\n<p>使用 absolute 或者 fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素</p>\n<p>避免频繁操作 DOM，可以创建一个文档片段documentFragment，在它上面应用所有 DOM 操作，最后再把它添加到文档中</p>\n<p>将元素先设置 display: none，操作结束后再把它显示出来。因为在display 属性为 none 的元素上进行的 DOM 操作不会引发回流和重绘。将 DOM 的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。</p>\n<p>浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。</p>\n<p>上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。</p>\n"},{"title":"nrm 管理 npm registry","date":"2023-10-25T07:25:17.000Z","description":"nrm -- NPM registry manager。","comments":1,"_content":"\n#### Install\n\n`npm install -g nrm`\n\n#### nrm ls\n\n```shell\n  nrm ls\n\n  npm ---------- https://registry.npmjs.org/\n  yarn --------- https://registry.yarnpkg.com/\n  tencent ------ https://mirrors.cloud.tencent.com/npm/\n  cnpm --------- https://r.cnpmjs.org/\n  taobao ------- https://registry.npmmirror.com/\n  npmMirror ---- https://skimdb.npmjs.com/registry/\n```\n\n#### nrm use\n\n```shell\n    nrm use taobao\n    Registry has been set to: https://registry.npmmirror.com/\n\n```\n\n#### Usage\n\n```shell\nUsage: nrm [options] [command]\n\nOptions:\n  -V, --version                           output the version number\n  -h, --help                              output usage information\n\nCommands:\n  ls                                      List all the registries\n  current [options]                       Show current registry name or URL\n  use <registry>                          Change registry to registry\n  add <registry> <url> [home]             Add one custom registry\n  login [options] <registryName> [value]  Set authorize information for a custom registry with a base64 encoded string or username and pasword\n  set-hosted-repo <registry> <value>      Set hosted npm repository for a custom registry to publish packages\n  set-scope <scopeName> <value>           Associating a scope with a registry\n  del-scope <scopeName>                   Remove a scope\n  set [options] <registryName>            Set custom registry attribute\n  rename <registryName> <newName>         Set custom registry name\n  del <registry>                          Delete one custom registry\n  home <registry> [browser]               Open the homepage of registry with optional browser\n  publish [options] [<tarball>|<folder>]  Publish package to current registry if current registry is a custom registry.\n   if you're not using custom registry, this command will run npm publish directly\n  test [registry]                         Show response time for specific or all registries\n  help                                    Print this help \n   if you want to clear the NRM configuration when uninstall you can execute \"npm uninstall nrm -g -C or npm uninstall nrm -g --clean\"\n```","source":"_posts/web/npm/nrm.md","raw":"---\ntitle: nrm 管理 npm registry\npermalink: /web/npm/nrm.html\ndate: 2023-10-25 15:25:17\ndescription: nrm -- NPM registry manager。\n\ntag: [前端, npm, nrm]\ncomments: true\ncategories: \n - 前端\n - npm\n---\n\n#### Install\n\n`npm install -g nrm`\n\n#### nrm ls\n\n```shell\n  nrm ls\n\n  npm ---------- https://registry.npmjs.org/\n  yarn --------- https://registry.yarnpkg.com/\n  tencent ------ https://mirrors.cloud.tencent.com/npm/\n  cnpm --------- https://r.cnpmjs.org/\n  taobao ------- https://registry.npmmirror.com/\n  npmMirror ---- https://skimdb.npmjs.com/registry/\n```\n\n#### nrm use\n\n```shell\n    nrm use taobao\n    Registry has been set to: https://registry.npmmirror.com/\n\n```\n\n#### Usage\n\n```shell\nUsage: nrm [options] [command]\n\nOptions:\n  -V, --version                           output the version number\n  -h, --help                              output usage information\n\nCommands:\n  ls                                      List all the registries\n  current [options]                       Show current registry name or URL\n  use <registry>                          Change registry to registry\n  add <registry> <url> [home]             Add one custom registry\n  login [options] <registryName> [value]  Set authorize information for a custom registry with a base64 encoded string or username and pasword\n  set-hosted-repo <registry> <value>      Set hosted npm repository for a custom registry to publish packages\n  set-scope <scopeName> <value>           Associating a scope with a registry\n  del-scope <scopeName>                   Remove a scope\n  set [options] <registryName>            Set custom registry attribute\n  rename <registryName> <newName>         Set custom registry name\n  del <registry>                          Delete one custom registry\n  home <registry> [browser]               Open the homepage of registry with optional browser\n  publish [options] [<tarball>|<folder>]  Publish package to current registry if current registry is a custom registry.\n   if you're not using custom registry, this command will run npm publish directly\n  test [registry]                         Show response time for specific or all registries\n  help                                    Print this help \n   if you want to clear the NRM configuration when uninstall you can execute \"npm uninstall nrm -g -C or npm uninstall nrm -g --clean\"\n```","slug":"web/npm/nrm","published":1,"updated":"2023-10-26T12:50:44.436Z","__permalink":"/web/npm/nrm.html","_id":"clo6whxdi002adif33y8o63yk","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><p><code>npm install -g nrm</code></p>\n<h4 id=\"nrm-ls\"><a href=\"#nrm-ls\" class=\"headerlink\" title=\"nrm ls\"></a>nrm ls</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br><span class=\"line\"></span><br><span class=\"line\">npm ---------- https://registry.npmjs.org/</span><br><span class=\"line\">yarn --------- https://registry.yarnpkg.com/</span><br><span class=\"line\">tencent ------ https://mirrors.cloud.tencent.com/npm/</span><br><span class=\"line\">cnpm --------- https://r.cnpmjs.org/</span><br><span class=\"line\">taobao ------- https://registry.npmmirror.com/</span><br><span class=\"line\">npmMirror ---- https://skimdb.npmjs.com/registry/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"nrm-use\"><a href=\"#nrm-use\" class=\"headerlink\" title=\"nrm use\"></a>nrm use</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm use taobao</span><br><span class=\"line\">Registry has been set to: https://registry.npmmirror.com/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: nrm [options] [command]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -V, --version                           output the version number</span><br><span class=\"line\">  -h, --help                              output usage information</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  ls                                      List all the registries</span><br><span class=\"line\">  current [options]                       Show current registry name or URL</span><br><span class=\"line\">  use &lt;registry&gt;                          Change registry to registry</span><br><span class=\"line\">  add &lt;registry&gt; &lt;url&gt; [home]             Add one custom registry</span><br><span class=\"line\">  login [options] &lt;registryName&gt; [value]  Set authorize information for a custom registry with a base64 encoded string or username and pasword</span><br><span class=\"line\">  set-hosted-repo &lt;registry&gt; &lt;value&gt;      Set hosted npm repository for a custom registry to publish packages</span><br><span class=\"line\">  set-scope &lt;scopeName&gt; &lt;value&gt;           Associating a scope with a registry</span><br><span class=\"line\">  del-scope &lt;scopeName&gt;                   Remove a scope</span><br><span class=\"line\">  set [options] &lt;registryName&gt;            Set custom registry attribute</span><br><span class=\"line\">  rename &lt;registryName&gt; &lt;newName&gt;         Set custom registry name</span><br><span class=\"line\">  del &lt;registry&gt;                          Delete one custom registry</span><br><span class=\"line\">  home &lt;registry&gt; [browser]               Open the homepage of registry with optional browser</span><br><span class=\"line\">  publish [options] [&lt;tarball&gt;|&lt;folder&gt;]  Publish package to current registry if current registry is a custom registry.</span><br><span class=\"line\">   if you&#x27;re not using custom registry, this command will run npm publish directly</span><br><span class=\"line\">  test [registry]                         Show response time for specific or all registries</span><br><span class=\"line\">  help                                    Print this help </span><br><span class=\"line\">   if you want to clear the NRM configuration when uninstall you can execute &quot;npm uninstall nrm -g -C or npm uninstall nrm -g --clean&quot;</span><br></pre></td></tr></table></figure></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/components/unstate-next-use.html","/hexo/config/rss.html","/hexo/config/readmore.html"],"length":1635,"excerpt":"","more":"<h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><p><code>npm install -g nrm</code></p>\n<h4 id=\"nrm-ls\"><a href=\"#nrm-ls\" class=\"headerlink\" title=\"nrm ls\"></a>nrm ls</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br><span class=\"line\"></span><br><span class=\"line\">npm ---------- https://registry.npmjs.org/</span><br><span class=\"line\">yarn --------- https://registry.yarnpkg.com/</span><br><span class=\"line\">tencent ------ https://mirrors.cloud.tencent.com/npm/</span><br><span class=\"line\">cnpm --------- https://r.cnpmjs.org/</span><br><span class=\"line\">taobao ------- https://registry.npmmirror.com/</span><br><span class=\"line\">npmMirror ---- https://skimdb.npmjs.com/registry/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"nrm-use\"><a href=\"#nrm-use\" class=\"headerlink\" title=\"nrm use\"></a>nrm use</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm use taobao</span><br><span class=\"line\">Registry has been set to: https://registry.npmmirror.com/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: nrm [options] [command]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -V, --version                           output the version number</span><br><span class=\"line\">  -h, --help                              output usage information</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  ls                                      List all the registries</span><br><span class=\"line\">  current [options]                       Show current registry name or URL</span><br><span class=\"line\">  use &lt;registry&gt;                          Change registry to registry</span><br><span class=\"line\">  add &lt;registry&gt; &lt;url&gt; [home]             Add one custom registry</span><br><span class=\"line\">  login [options] &lt;registryName&gt; [value]  Set authorize information for a custom registry with a base64 encoded string or username and pasword</span><br><span class=\"line\">  set-hosted-repo &lt;registry&gt; &lt;value&gt;      Set hosted npm repository for a custom registry to publish packages</span><br><span class=\"line\">  set-scope &lt;scopeName&gt; &lt;value&gt;           Associating a scope with a registry</span><br><span class=\"line\">  del-scope &lt;scopeName&gt;                   Remove a scope</span><br><span class=\"line\">  set [options] &lt;registryName&gt;            Set custom registry attribute</span><br><span class=\"line\">  rename &lt;registryName&gt; &lt;newName&gt;         Set custom registry name</span><br><span class=\"line\">  del &lt;registry&gt;                          Delete one custom registry</span><br><span class=\"line\">  home &lt;registry&gt; [browser]               Open the homepage of registry with optional browser</span><br><span class=\"line\">  publish [options] [&lt;tarball&gt;|&lt;folder&gt;]  Publish package to current registry if current registry is a custom registry.</span><br><span class=\"line\">   if you&#x27;re not using custom registry, this command will run npm publish directly</span><br><span class=\"line\">  test [registry]                         Show response time for specific or all registries</span><br><span class=\"line\">  help                                    Print this help </span><br><span class=\"line\">   if you want to clear the NRM configuration when uninstall you can execute &quot;npm uninstall nrm -g -C or npm uninstall nrm -g --clean&quot;</span><br></pre></td></tr></table></figure>"},{"title":"nvm 管理node版本","date":"2023-10-25T07:47:01.000Z","description":"nvm -- Node version manager。","comments":1,"_content":"\n#### Windows 上安装\n\n[nvm_github](https://github.com/nvm-sh/nvm)\n\n1. 点击 \"Code\" 按钮，然后选择 \"Download ZIP\" 下载 ZIP 文件。\n2. 解压缩 ZIP 文件：解压缩下载的 ZIP 文件，将解压后的文件夹放在您想要安装 NVM 的位置。\n3. 配置环境变量：打开命令提示符或 PowerShell，并运行以下命令来配置 NVM 的环境变量：\n\n```shell\n    setx NVM_HOME \"解压缩文件夹的完整路径\"\n    setx NVM_SYMLINK \"解压缩文件夹的完整路径\"\n```\n\n#### Linux 上安装\n\n1. 下载 NVM 安装脚本：打开终端并运行以下命令下载 NVM 安装脚本：\n\n```shell\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n```\n\n这将从 NVM GitHub 存储库下载并运行安装脚本。\n\n2. 配置 NVM 环境变量：安装脚本运行后，会将 NVM 相关的路径和初始化脚本添加到您的个人配置文件（如 ~/.bashrc、~/.zshrc 等）。要使这些更改生效，可以运行以下命令：\n\n```shell\nsource ~/.bashrc\n```\n\n如果您使用的是其他 Shell，替换 ~/.bashrc 为您实际使用的配置文件。\n\n#### 验证安装\n\n```shell\nnvm --version\n```\n\n#### 安装node.js 版本\n\n```shell\nnvm install <version>\n```\n\n**例如**\n\n```shell\nnvm install 16.13.0\n```\n\n安装成功后，NVM 会自动将该版本设置为默认版本。\n\n#### 切换版本\n\n切换 Node.js 版本：如果您有多个安装的 Node.js 版本，可以使用以下命令切换不同的版本：\n\n```shell\nnvm use <version>\n```\n\n**例如**\n\n```shell\nnvm use 18.16.0\n```\n\n这将将您的当前 Shell 会话设置为使用指定的 Node.js 版本。\n\n#### 查询当前版本\n\n```shell\nnvm use node\n```\n\n#### 查询当前node路径\n\n```shell\nnvm which 18.16.0\n/Users/shaosong/.nvm/versions/node/v18.16.0/bin/node\n```\n\n#### listing Version\n\n```shell\nnvm ls\n```\n\n#### 设置默认version\n\n```shell\nnvm alias default 18.16.0\n```\n\n现在，您已经在 Linux 上成功安装了 NVM。您可以使用 nvm use 命令切换不同的 Node.js 版本，并使用 node 和 npm 命令来管理您的 Node.js 环境。\n","source":"_posts/web/npm/nvm.md","raw":"---\ntitle: nvm 管理node版本\npermalink: /web/npm/nvm.html\ndate: 2023-10-25 15:47:01\ndescription: nvm -- Node version manager。\n\ntag: [前端, npm, nvm]\ncomments: true\ncategories: \n - 前端\n - npm\n---\n\n#### Windows 上安装\n\n[nvm_github](https://github.com/nvm-sh/nvm)\n\n1. 点击 \"Code\" 按钮，然后选择 \"Download ZIP\" 下载 ZIP 文件。\n2. 解压缩 ZIP 文件：解压缩下载的 ZIP 文件，将解压后的文件夹放在您想要安装 NVM 的位置。\n3. 配置环境变量：打开命令提示符或 PowerShell，并运行以下命令来配置 NVM 的环境变量：\n\n```shell\n    setx NVM_HOME \"解压缩文件夹的完整路径\"\n    setx NVM_SYMLINK \"解压缩文件夹的完整路径\"\n```\n\n#### Linux 上安装\n\n1. 下载 NVM 安装脚本：打开终端并运行以下命令下载 NVM 安装脚本：\n\n```shell\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n```\n\n这将从 NVM GitHub 存储库下载并运行安装脚本。\n\n2. 配置 NVM 环境变量：安装脚本运行后，会将 NVM 相关的路径和初始化脚本添加到您的个人配置文件（如 ~/.bashrc、~/.zshrc 等）。要使这些更改生效，可以运行以下命令：\n\n```shell\nsource ~/.bashrc\n```\n\n如果您使用的是其他 Shell，替换 ~/.bashrc 为您实际使用的配置文件。\n\n#### 验证安装\n\n```shell\nnvm --version\n```\n\n#### 安装node.js 版本\n\n```shell\nnvm install <version>\n```\n\n**例如**\n\n```shell\nnvm install 16.13.0\n```\n\n安装成功后，NVM 会自动将该版本设置为默认版本。\n\n#### 切换版本\n\n切换 Node.js 版本：如果您有多个安装的 Node.js 版本，可以使用以下命令切换不同的版本：\n\n```shell\nnvm use <version>\n```\n\n**例如**\n\n```shell\nnvm use 18.16.0\n```\n\n这将将您的当前 Shell 会话设置为使用指定的 Node.js 版本。\n\n#### 查询当前版本\n\n```shell\nnvm use node\n```\n\n#### 查询当前node路径\n\n```shell\nnvm which 18.16.0\n/Users/shaosong/.nvm/versions/node/v18.16.0/bin/node\n```\n\n#### listing Version\n\n```shell\nnvm ls\n```\n\n#### 设置默认version\n\n```shell\nnvm alias default 18.16.0\n```\n\n现在，您已经在 Linux 上成功安装了 NVM。您可以使用 nvm use 命令切换不同的 Node.js 版本，并使用 node 和 npm 命令来管理您的 Node.js 环境。\n","slug":"web/npm/nvm","published":1,"updated":"2023-10-26T12:50:44.451Z","__permalink":"/web/npm/nvm.html","_id":"clo6whxdj002ddif338ar0se6","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h4 id=\"Windows-上安装\"><a href=\"#Windows-上安装\" class=\"headerlink\" title=\"Windows 上安装\"></a>Windows 上安装</h4><p><a href=\"https://github.com/nvm-sh/nvm\">nvm_github</a></p>\n<ol>\n<li>点击 “Code” 按钮，然后选择 “Download ZIP” 下载 ZIP 文件。</li>\n<li>解压缩 ZIP 文件：解压缩下载的 ZIP 文件，将解压后的文件夹放在您想要安装 NVM 的位置。</li>\n<li>配置环境变量：打开命令提示符或 PowerShell，并运行以下命令来配置 NVM 的环境变量：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setx NVM_HOME &quot;解压缩文件夹的完整路径&quot;</span><br><span class=\"line\">setx NVM_SYMLINK &quot;解压缩文件夹的完整路径&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Linux-上安装\"><a href=\"#Linux-上安装\" class=\"headerlink\" title=\"Linux 上安装\"></a>Linux 上安装</h4><ol>\n<li>下载 NVM 安装脚本：打开终端并运行以下命令下载 NVM 安装脚本：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>这将从 NVM GitHub 存储库下载并运行安装脚本。</p>\n<ol start=\"2\">\n<li>配置 NVM 环境变量：安装脚本运行后，会将 NVM 相关的路径和初始化脚本添加到您的个人配置文件（如 <del>&#x2F;.bashrc、</del>&#x2F;.zshrc 等）。要使这些更改生效，可以运行以下命令：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>如果您使用的是其他 Shell，替换 ~&#x2F;.bashrc 为您实际使用的配置文件。</p>\n<h4 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装node-js-版本\"><a href=\"#安装node-js-版本\" class=\"headerlink\" title=\"安装node.js 版本\"></a>安装node.js 版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install &lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>例如</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 16.13.0</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后，NVM 会自动将该版本设置为默认版本。</p>\n<h4 id=\"切换版本\"><a href=\"#切换版本\" class=\"headerlink\" title=\"切换版本\"></a>切换版本</h4><p>切换 Node.js 版本：如果您有多个安装的 Node.js 版本，可以使用以下命令切换不同的版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>例如</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 18.16.0</span><br></pre></td></tr></table></figure>\n\n<p>这将将您的当前 Shell 会话设置为使用指定的 Node.js 版本。</p>\n<h4 id=\"查询当前版本\"><a href=\"#查询当前版本\" class=\"headerlink\" title=\"查询当前版本\"></a>查询当前版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use node</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询当前node路径\"><a href=\"#查询当前node路径\" class=\"headerlink\" title=\"查询当前node路径\"></a>查询当前node路径</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm which 18.16.0</span><br><span class=\"line\">/Users/shaosong/.nvm/versions/node/v18.16.0/bin/node</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"listing-Version\"><a href=\"#listing-Version\" class=\"headerlink\" title=\"listing Version\"></a>listing Version</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置默认version\"><a href=\"#设置默认version\" class=\"headerlink\" title=\"设置默认version\"></a>设置默认version</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm alias default 18.16.0</span><br></pre></td></tr></table></figure>\n\n<p>现在，您已经在 Linux 上成功安装了 NVM。您可以使用 nvm use 命令切换不同的 Node.js 版本，并使用 node 和 npm 命令来管理您的 Node.js 环境。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":959,"excerpt":"","more":"<h4 id=\"Windows-上安装\"><a href=\"#Windows-上安装\" class=\"headerlink\" title=\"Windows 上安装\"></a>Windows 上安装</h4><p><a href=\"https://github.com/nvm-sh/nvm\">nvm_github</a></p>\n<ol>\n<li>点击 “Code” 按钮，然后选择 “Download ZIP” 下载 ZIP 文件。</li>\n<li>解压缩 ZIP 文件：解压缩下载的 ZIP 文件，将解压后的文件夹放在您想要安装 NVM 的位置。</li>\n<li>配置环境变量：打开命令提示符或 PowerShell，并运行以下命令来配置 NVM 的环境变量：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setx NVM_HOME &quot;解压缩文件夹的完整路径&quot;</span><br><span class=\"line\">setx NVM_SYMLINK &quot;解压缩文件夹的完整路径&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Linux-上安装\"><a href=\"#Linux-上安装\" class=\"headerlink\" title=\"Linux 上安装\"></a>Linux 上安装</h4><ol>\n<li>下载 NVM 安装脚本：打开终端并运行以下命令下载 NVM 安装脚本：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>这将从 NVM GitHub 存储库下载并运行安装脚本。</p>\n<ol start=\"2\">\n<li>配置 NVM 环境变量：安装脚本运行后，会将 NVM 相关的路径和初始化脚本添加到您的个人配置文件（如 <del>&#x2F;.bashrc、</del>&#x2F;.zshrc 等）。要使这些更改生效，可以运行以下命令：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>如果您使用的是其他 Shell，替换 ~&#x2F;.bashrc 为您实际使用的配置文件。</p>\n<h4 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装node-js-版本\"><a href=\"#安装node-js-版本\" class=\"headerlink\" title=\"安装node.js 版本\"></a>安装node.js 版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install &lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>例如</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 16.13.0</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后，NVM 会自动将该版本设置为默认版本。</p>\n<h4 id=\"切换版本\"><a href=\"#切换版本\" class=\"headerlink\" title=\"切换版本\"></a>切换版本</h4><p>切换 Node.js 版本：如果您有多个安装的 Node.js 版本，可以使用以下命令切换不同的版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>例如</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 18.16.0</span><br></pre></td></tr></table></figure>\n\n<p>这将将您的当前 Shell 会话设置为使用指定的 Node.js 版本。</p>\n<h4 id=\"查询当前版本\"><a href=\"#查询当前版本\" class=\"headerlink\" title=\"查询当前版本\"></a>查询当前版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use node</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询当前node路径\"><a href=\"#查询当前node路径\" class=\"headerlink\" title=\"查询当前node路径\"></a>查询当前node路径</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm which 18.16.0</span><br><span class=\"line\">/Users/shaosong/.nvm/versions/node/v18.16.0/bin/node</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"listing-Version\"><a href=\"#listing-Version\" class=\"headerlink\" title=\"listing Version\"></a>listing Version</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置默认version\"><a href=\"#设置默认version\" class=\"headerlink\" title=\"设置默认version\"></a>设置默认version</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm alias default 18.16.0</span><br></pre></td></tr></table></figure>\n\n<p>现在，您已经在 Linux 上成功安装了 NVM。您可以使用 nvm use 命令切换不同的 Node.js 版本，并使用 node 和 npm 命令来管理您的 Node.js 环境。</p>\n"},{"title":"unstate-next 的使用","date":"2023-10-25T08:42:53.000Z","description":"unstated-next 的使用可以简化react state manager，可以替换React 原有的useContext 方法, 亦可以管理全局状态信息。","comments":1,"_content":"\n#### Install\n\n[Code-Test](https://gitcode.net/qq_35490191/React-TypeScript)\n\n```shell\nnpm install --save unstated-next\n\nyarn add unstated-next\n```\n\n#### createContainer\n\n```ts\n    import { useState } from \"react\";\n    import { createContainer } from \"unstated-next\"\n\n    const useCounter = (props: any) => {\n        const { initNum } = props;\n        const [num, changeNum] = useState<number>(initNum);\n        let decrement = () => changeNum(num - 1)\n        let increment = () => changeNum(num + 1)\n        return {num, decrement, increment};\n    }\n\n    export const Counter = createContainer(useCounter);\n\n```\n\n#### use Provider && initialState\n\n```ts\n    import './App.css'\n    import { Counter } from './Context'\n    import {TestCounter} from './TestCounter'\n\n    export default function App() {\n    return (\n        <Counter.Provider initialState={{ initNum: 1 }}>\n        <TestCounter />\n        </Counter.Provider>\n    )\n    }\n```\n\n#### useContainer\n\n##### TestCounter\n\n```ts\n    import { Counter } from \"./Context\"\n    import {TestChild} from './TestChild'\n\n    export const TestCounter = () => {\n        const { num, decrement } = Counter.useContainer();\n        \n        return <>\n            <button onClick={decrement}>减法</button>\n            <TestChild />\n        </>\n    }\n```\n\n##### TestChild\n\n```ts\n    import { Counter } from \"./Context\"\n\n    export const TestChild = () => {\n        const { num, increment } = Counter.useContainer();\n        return <>\n            {num} <button onClick={increment}>加法</button>\n        </>\n    }\n\n```\n","source":"_posts/react/components/unstate-next/unstated-next-use.md","raw":"---\ntitle: unstate-next 的使用\npermalink: /react/components/unstate-next-use.html\ndate: 2023-10-25 16:42:53\ndescription: unstated-next 的使用可以简化react state manager，可以替换React 原有的useContext 方法, 亦可以管理全局状态信息。\ntag: [前端, react, TypeScript, unstate-next]\ncomments: true\ncategories: \n - React\n - components\n - unstate-next\n---\n\n#### Install\n\n[Code-Test](https://gitcode.net/qq_35490191/React-TypeScript)\n\n```shell\nnpm install --save unstated-next\n\nyarn add unstated-next\n```\n\n#### createContainer\n\n```ts\n    import { useState } from \"react\";\n    import { createContainer } from \"unstated-next\"\n\n    const useCounter = (props: any) => {\n        const { initNum } = props;\n        const [num, changeNum] = useState<number>(initNum);\n        let decrement = () => changeNum(num - 1)\n        let increment = () => changeNum(num + 1)\n        return {num, decrement, increment};\n    }\n\n    export const Counter = createContainer(useCounter);\n\n```\n\n#### use Provider && initialState\n\n```ts\n    import './App.css'\n    import { Counter } from './Context'\n    import {TestCounter} from './TestCounter'\n\n    export default function App() {\n    return (\n        <Counter.Provider initialState={{ initNum: 1 }}>\n        <TestCounter />\n        </Counter.Provider>\n    )\n    }\n```\n\n#### useContainer\n\n##### TestCounter\n\n```ts\n    import { Counter } from \"./Context\"\n    import {TestChild} from './TestChild'\n\n    export const TestCounter = () => {\n        const { num, decrement } = Counter.useContainer();\n        \n        return <>\n            <button onClick={decrement}>减法</button>\n            <TestChild />\n        </>\n    }\n```\n\n##### TestChild\n\n```ts\n    import { Counter } from \"./Context\"\n\n    export const TestChild = () => {\n        const { num, increment } = Counter.useContainer();\n        return <>\n            {num} <button onClick={increment}>加法</button>\n        </>\n    }\n\n```\n","slug":"react/components/unstate-next/unstated-next-use","published":1,"updated":"2023-10-26T12:50:44.436Z","__permalink":"/react/components/unstate-next-use.html","_id":"clo6whxdk002hdif3colo0rlc","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><p><a href=\"https://gitcode.net/qq_35490191/React-TypeScript\">Code-Test</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save unstated-next</span><br><span class=\"line\"></span><br><span class=\"line\">yarn add unstated-next</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"createContainer\"><a href=\"#createContainer\" class=\"headerlink\" title=\"createContainer\"></a>createContainer</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;unstated-next&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">useCounter</span> = (<span class=\"params\">props: <span class=\"built_in\">any</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; initNum &#125; = props;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [num, changeNum] = useState&lt;<span class=\"built_in\">number</span>&gt;(initNum);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">decrement</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">changeNum</span>(num - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">increment</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">changeNum</span>(num + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;num, decrement, increment&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Counter</span> = <span class=\"title function_\">createContainer</span>(useCounter);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"use-Provider-initialState\"><a href=\"#use-Provider-initialState\" class=\"headerlink\" title=\"use Provider &amp;&amp; initialState\"></a>use Provider &amp;&amp; initialState</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./App.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Context&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">TestCounter</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./TestCounter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter.Provider</span> <span class=\"attr\">initialState</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">initNum:</span> <span class=\"attr\">1</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">TestCounter</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Counter.Provider</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useContainer\"><a href=\"#useContainer\" class=\"headerlink\" title=\"useContainer\"></a>useContainer</h4><h5 id=\"TestCounter\"><a href=\"#TestCounter\" class=\"headerlink\" title=\"TestCounter\"></a>TestCounter</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Context&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">TestChild</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./TestChild&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">TestCounter</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; num, decrement &#125; = <span class=\"title class_\">Counter</span>.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;decrement&#125;</span>&gt;</span>减法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">TestChild</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"TestChild\"><a href=\"#TestChild\" class=\"headerlink\" title=\"TestChild\"></a>TestChild</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Context&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">TestChild</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; num, increment &#125; = <span class=\"title class_\">Counter</span>.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;num&#125; <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increment&#125;</span>&gt;</span>加法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/web/npm/nrm.html","/react/components/unstate-next-implement.html","/hexo/config/rss.html","/hexo/config/readmore.html"],"length":1438,"excerpt":"","more":"<h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><p><a href=\"https://gitcode.net/qq_35490191/React-TypeScript\">Code-Test</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save unstated-next</span><br><span class=\"line\"></span><br><span class=\"line\">yarn add unstated-next</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"createContainer\"><a href=\"#createContainer\" class=\"headerlink\" title=\"createContainer\"></a>createContainer</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;unstated-next&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">useCounter</span> = (<span class=\"params\">props: <span class=\"built_in\">any</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; initNum &#125; = props;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [num, changeNum] = useState&lt;<span class=\"built_in\">number</span>&gt;(initNum);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">decrement</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">changeNum</span>(num - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">increment</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">changeNum</span>(num + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;num, decrement, increment&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Counter</span> = <span class=\"title function_\">createContainer</span>(useCounter);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"use-Provider-initialState\"><a href=\"#use-Provider-initialState\" class=\"headerlink\" title=\"use Provider &amp;&amp; initialState\"></a>use Provider &amp;&amp; initialState</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./App.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Context&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">TestCounter</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./TestCounter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter.Provider</span> <span class=\"attr\">initialState</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">initNum:</span> <span class=\"attr\">1</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">TestCounter</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Counter.Provider</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useContainer\"><a href=\"#useContainer\" class=\"headerlink\" title=\"useContainer\"></a>useContainer</h4><h5 id=\"TestCounter\"><a href=\"#TestCounter\" class=\"headerlink\" title=\"TestCounter\"></a>TestCounter</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Context&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">TestChild</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./TestChild&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">TestCounter</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; num, decrement &#125; = <span class=\"title class_\">Counter</span>.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;decrement&#125;</span>&gt;</span>减法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">TestChild</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"TestChild\"><a href=\"#TestChild\" class=\"headerlink\" title=\"TestChild\"></a>TestChild</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Context&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">TestChild</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; num, increment &#125; = <span class=\"title class_\">Counter</span>.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;num&#125; <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increment&#125;</span>&gt;</span>加法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"webpack 热更新的实现原理","date":"2023-10-23T12:43:25.000Z","description":"webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。","comments":1,"_content":"\nwebpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。\n原理：\n![在这里插入图片描述](https://pic.imgdb.cn/item/65366aa5c458853aefbf449c.png)\n\n⾸先要知道 server 端和 client 端都做了处理⼯作：\n1. 在 webpack 的 watch 模式下，⽂件系统中某⼀个⽂件发⽣修改，webpack 监听到⽂件变化，根据配置⽂件对模块重新编译打包，并将打包后的代码通过简单的JavaScript对象保存在内存中。\n2. webpack-dev-server 和 webpack 之间的接⼝交互，⽽在这⼀步，主要是 dev-server 的中间件webpack- dev-middleware和 webpack 之间的交互，webpack-dev-middleware 调⽤webpack暴露的 API 对代码变化进⾏监 控，并且告诉webpack，将代码打包到内存中。\n3. webpack-dev-server 对⽂件变化的⼀个监控，这⼀步不同于第⼀步，并不是监控代码变化重新打包。当我们在配置⽂件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置⽂件夹中静态⽂件的变化，变化后会通知浏览器端对应⽤进⾏ live reload。注意，这⼉是浏览器刷新，和HMR 是两个概念。\n4. webpack-dev-server 代码的⼯作，该步骤主要是通过sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建⽴⼀个 websocket ⻓连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中Server 监听静态⽂件变化的信息。浏览器端根据这些 socket 消息进⾏不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后⾯的步骤根据这⼀hash 值来进⾏模块热替换。\n5. webpack-dev-server/client 端并不能够请求更新的代码，也不会执⾏ 热 更 模 块 操 作 ， ⽽ 把 这 些 ⼯ 作⼜交回给了webpack，webpack/hot/dev-server 的 ⼯ 作就是根据webpack-dev-server/client 传给它的信息以及dev-server的配置决定是刷新浏览器呢还是进⾏模块热更新。当然如果仅仅是刷新浏览器，也就没有后⾯那些步骤了。\n6. HotModuleReplacement.runtime 是客户端HMR 的中枢，它接收到上⼀ 步 传 递 给 他 的 新 模 块 的hash 值，它通过JsonpMainTemplate.runtime 向 server 端发送Ajax 请求，服务端返回⼀个 json，该 json 包含了所有要更新的模块的hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。\n7. ⽽第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进⾏对⽐，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引⽤。\n\n最后⼀步，当 HMR 失败后，回退到 live reload 操作，也就是进⾏浏览器刷新来获取最新打包代码。","source":"_posts/web/webpack/hotModuleReplacement.md","raw":"---\ntitle: webpack 热更新的实现原理\npermalink: /web/webpack/hot/module/replacement.html\ndate: 2023-10-23 20:43:25\ndescription: webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。\n\ntag: [前端, 浏览器, WebPack]\ncomments: true\ncategories: \n - 前端\n - WebPack\n---\n\nwebpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。\n原理：\n![在这里插入图片描述](https://pic.imgdb.cn/item/65366aa5c458853aefbf449c.png)\n\n⾸先要知道 server 端和 client 端都做了处理⼯作：\n1. 在 webpack 的 watch 模式下，⽂件系统中某⼀个⽂件发⽣修改，webpack 监听到⽂件变化，根据配置⽂件对模块重新编译打包，并将打包后的代码通过简单的JavaScript对象保存在内存中。\n2. webpack-dev-server 和 webpack 之间的接⼝交互，⽽在这⼀步，主要是 dev-server 的中间件webpack- dev-middleware和 webpack 之间的交互，webpack-dev-middleware 调⽤webpack暴露的 API 对代码变化进⾏监 控，并且告诉webpack，将代码打包到内存中。\n3. webpack-dev-server 对⽂件变化的⼀个监控，这⼀步不同于第⼀步，并不是监控代码变化重新打包。当我们在配置⽂件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置⽂件夹中静态⽂件的变化，变化后会通知浏览器端对应⽤进⾏ live reload。注意，这⼉是浏览器刷新，和HMR 是两个概念。\n4. webpack-dev-server 代码的⼯作，该步骤主要是通过sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建⽴⼀个 websocket ⻓连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中Server 监听静态⽂件变化的信息。浏览器端根据这些 socket 消息进⾏不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后⾯的步骤根据这⼀hash 值来进⾏模块热替换。\n5. webpack-dev-server/client 端并不能够请求更新的代码，也不会执⾏ 热 更 模 块 操 作 ， ⽽ 把 这 些 ⼯ 作⼜交回给了webpack，webpack/hot/dev-server 的 ⼯ 作就是根据webpack-dev-server/client 传给它的信息以及dev-server的配置决定是刷新浏览器呢还是进⾏模块热更新。当然如果仅仅是刷新浏览器，也就没有后⾯那些步骤了。\n6. HotModuleReplacement.runtime 是客户端HMR 的中枢，它接收到上⼀ 步 传 递 给 他 的 新 模 块 的hash 值，它通过JsonpMainTemplate.runtime 向 server 端发送Ajax 请求，服务端返回⼀个 json，该 json 包含了所有要更新的模块的hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。\n7. ⽽第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进⾏对⽐，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引⽤。\n\n最后⼀步，当 HMR 失败后，回退到 live reload 操作，也就是进⾏浏览器刷新来获取最新打包代码。","slug":"web/webpack/hotModuleReplacement","published":1,"updated":"2023-10-23T12:44:35.814Z","__permalink":"/web/webpack/hot/module/replacement.html","_id":"clo6whxdk002jdif3a2gs92fp","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><p>webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。<br>原理：<br><img src=\"https://pic.imgdb.cn/item/65366aa5c458853aefbf449c.png\" alt=\"在这里插入图片描述\"></p>\n<p>⾸先要知道 server 端和 client 端都做了处理⼯作：</p>\n<ol>\n<li>在 webpack 的 watch 模式下，⽂件系统中某⼀个⽂件发⽣修改，webpack 监听到⽂件变化，根据配置⽂件对模块重新编译打包，并将打包后的代码通过简单的JavaScript对象保存在内存中。</li>\n<li>webpack-dev-server 和 webpack 之间的接⼝交互，⽽在这⼀步，主要是 dev-server 的中间件webpack- dev-middleware和 webpack 之间的交互，webpack-dev-middleware 调⽤webpack暴露的 API 对代码变化进⾏监 控，并且告诉webpack，将代码打包到内存中。</li>\n<li>webpack-dev-server 对⽂件变化的⼀个监控，这⼀步不同于第⼀步，并不是监控代码变化重新打包。当我们在配置⽂件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置⽂件夹中静态⽂件的变化，变化后会通知浏览器端对应⽤进⾏ live reload。注意，这⼉是浏览器刷新，和HMR 是两个概念。</li>\n<li>webpack-dev-server 代码的⼯作，该步骤主要是通过sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建⽴⼀个 websocket ⻓连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中Server 监听静态⽂件变化的信息。浏览器端根据这些 socket 消息进⾏不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后⾯的步骤根据这⼀hash 值来进⾏模块热替换。</li>\n<li>webpack-dev-server&#x2F;client 端并不能够请求更新的代码，也不会执⾏ 热 更 模 块 操 作 ， ⽽ 把 这 些 ⼯ 作⼜交回给了webpack，webpack&#x2F;hot&#x2F;dev-server 的 ⼯ 作就是根据webpack-dev-server&#x2F;client 传给它的信息以及dev-server的配置决定是刷新浏览器呢还是进⾏模块热更新。当然如果仅仅是刷新浏览器，也就没有后⾯那些步骤了。</li>\n<li>HotModuleReplacement.runtime 是客户端HMR 的中枢，它接收到上⼀ 步 传 递 给 他 的 新 模 块 的hash 值，它通过JsonpMainTemplate.runtime 向 server 端发送Ajax 请求，服务端返回⼀个 json，该 json 包含了所有要更新的模块的hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。</li>\n<li>⽽第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进⾏对⽐，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引⽤。</li>\n</ol>\n<p>最后⼀步，当 HMR 失败后，回退到 live reload 操作，也就是进⾏浏览器刷新来获取最新打包代码。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/web/webpack/perform.html"],"length":1305,"excerpt":"","more":"<p>webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。<br>原理：<br><img src=\"https://pic.imgdb.cn/item/65366aa5c458853aefbf449c.png\" alt=\"在这里插入图片描述\"></p>\n<p>⾸先要知道 server 端和 client 端都做了处理⼯作：</p>\n<ol>\n<li>在 webpack 的 watch 模式下，⽂件系统中某⼀个⽂件发⽣修改，webpack 监听到⽂件变化，根据配置⽂件对模块重新编译打包，并将打包后的代码通过简单的JavaScript对象保存在内存中。</li>\n<li>webpack-dev-server 和 webpack 之间的接⼝交互，⽽在这⼀步，主要是 dev-server 的中间件webpack- dev-middleware和 webpack 之间的交互，webpack-dev-middleware 调⽤webpack暴露的 API 对代码变化进⾏监 控，并且告诉webpack，将代码打包到内存中。</li>\n<li>webpack-dev-server 对⽂件变化的⼀个监控，这⼀步不同于第⼀步，并不是监控代码变化重新打包。当我们在配置⽂件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置⽂件夹中静态⽂件的变化，变化后会通知浏览器端对应⽤进⾏ live reload。注意，这⼉是浏览器刷新，和HMR 是两个概念。</li>\n<li>webpack-dev-server 代码的⼯作，该步骤主要是通过sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建⽴⼀个 websocket ⻓连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中Server 监听静态⽂件变化的信息。浏览器端根据这些 socket 消息进⾏不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后⾯的步骤根据这⼀hash 值来进⾏模块热替换。</li>\n<li>webpack-dev-server&#x2F;client 端并不能够请求更新的代码，也不会执⾏ 热 更 模 块 操 作 ， ⽽ 把 这 些 ⼯ 作⼜交回给了webpack，webpack&#x2F;hot&#x2F;dev-server 的 ⼯ 作就是根据webpack-dev-server&#x2F;client 传给它的信息以及dev-server的配置决定是刷新浏览器呢还是进⾏模块热更新。当然如果仅仅是刷新浏览器，也就没有后⾯那些步骤了。</li>\n<li>HotModuleReplacement.runtime 是客户端HMR 的中枢，它接收到上⼀ 步 传 递 给 他 的 新 模 块 的hash 值，它通过JsonpMainTemplate.runtime 向 server 端发送Ajax 请求，服务端返回⼀个 json，该 json 包含了所有要更新的模块的hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。</li>\n<li>⽽第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进⾏对⽐，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引⽤。</li>\n</ol>\n<p>最后⼀步，当 HMR 失败后，回退到 live reload 操作，也就是进⾏浏览器刷新来获取最新打包代码。</p>\n"},{"title":"unstate-next 的实现原理","date":"2023-10-26T07:49:35.000Z","description":"unstate-next 的实现原理，根据 React.createContext 和 React.useContext 方法重新包装，简化使用步骤。","comments":1,"published":1,"_content":"\n#### 定义实现Container接口\n\n需要实现包装方法和获取数据的hooks\n\n```tsx\n    /**\n     * 实现接口\n     */\n    export interface Container<Value, State> {\n    Provider: React.ComponentType<ContainerProviderProps<State>>;\n    useContainer: () => Value;\n    }\n```\n\n#### 定义实现Provider接口\n\n定义接口需要初始化参数和需要使用的子节点。\n\n```tsx\n\n    /**\n     * ContainerProviderProps 定义类型\n     * @param {State} State\n     * @return {State} initialState\n     * @return {React.ReactNode} children\n     */\n    export interface ContainerProviderProps<State = any> {\n    initialState?: State;\n    children: React.ReactNode;\n    }\n\n```\n\n#### createContainer 方法\n\n在 `createContainer` 方法中，使用后会返回两个方法 `Provider` 和 `useContainer`。\n\n步骤：\n\n1. 使用React.createContext 创建Context；\n2. 自定义hooks 获取属性；\n3. 需要使用Context 子组件使用Provider 包装， 将数据写入Context；\n4. 使用React.useContext 从 Context 中获取属性\n\n```tsx\n    export function createContainer<Value, State = void>(\n    useHook: (initialState?: State) => Value\n    ): Container<Value, State> {\n    // 使用React.createContext 创建Context\n    const Context = React.createContext<Value | typeof EMPTY>(EMPTY);\n\n    function Provider(props: ContainerProviderProps<State>) {\n        // 自定义hooks 获取属性\n        let value = useHook(props.initialState);\n        // 需要使用Context 子组件使用Provider 包装， 将数据写入Context。\n        return <Context.Provider value={value}>{props?.children}</Context.Provider>;\n    }\n\n    function useContainer(): Value {\n        // 使用React.useContext 从 Context 中获取属性\n        let value = React.useContext(Context);\n        if (value === EMPTY) {\n        throw new Error(\"Component must be wrapped with <Container.Provider>\");\n        }\n        return value;\n    }\n    return {\n        Provider,\n        useContainer,\n    };\n    }\n```\n\n#### useContainer\n\n使用useContainer 从 Container 中直接获取属性。\n\n```tsx\n    export function useContainer<Value, State = void>(\n    container: Container<Value, State>\n    ): Value {\n    return container.useContainer();\n    }\n```\n\n#### [unstate-next 使用](./unstate-next-use.html)\n\n#### 实现code\n\n```tsx\n    import React from \"react\";\n\n    const EMPTY: unique symbol = Symbol();\n\n    /**\n     * ContainerProviderProps 定义类型\n     * @param {State} State\n     * @return {State} initialState\n     * @return {React.ReactNode} children\n     */\n    export interface ContainerProviderProps<State = any> {\n    initialState?: State;\n    children: React.ReactNode;\n    }\n\n    /**\n     * 实现接口\n     */\n    export interface Container<Value, State> {\n    Provider: React.ComponentType<ContainerProviderProps<State>>;\n    useContainer: () => Value;\n    }\n\n    export function createContainer<Value, State = void>(\n    useHook: (initialState?: State) => Value\n    ): Container<Value, State> {\n    // 使用React.createContext 创建Context\n    const Context = React.createContext<Value | typeof EMPTY>(EMPTY);\n\n    function Provider(props: ContainerProviderProps<State>) {\n        // 自定义hooks 获取属性\n        let value = useHook(props.initialState);\n        // 需要使用Context 子组件使用Provider 包装， 将数据写入Context。\n        return <Context.Provider value={value}>{props?.children}</Context.Provider>;\n    }\n\n    function useContainer(): Value {\n        // 使用React.useContext 从 Context 中获取属性\n        let value = React.useContext(Context);\n        if (value === EMPTY) {\n        throw new Error(\"Component must be wrapped with <Container.Provider>\");\n        }\n        return value;\n    }\n    return {\n        Provider,\n        useContainer,\n    };\n    }\n\n    export function useContainer<Value, State = void>(\n    container: Container<Value, State>\n    ): Value {\n    return container.useContainer();\n    }\n\n```\n","source":"_posts/react/components/unstate-next/unstated-next-implement.md","raw":"---\ntitle: unstate-next 的实现原理\npermalink: /react/components/unstate-next-implement.html\ndate: 2023-10-26 15:49:35\ndescription: unstate-next 的实现原理，根据 React.createContext 和 React.useContext 方法重新包装，简化使用步骤。\ntag: [前端, react, TypeScript, unstate-next]\ncomments: true\npublished: true\ncategories: \n - React\n - components\n - unstate-next\n---\n\n#### 定义实现Container接口\n\n需要实现包装方法和获取数据的hooks\n\n```tsx\n    /**\n     * 实现接口\n     */\n    export interface Container<Value, State> {\n    Provider: React.ComponentType<ContainerProviderProps<State>>;\n    useContainer: () => Value;\n    }\n```\n\n#### 定义实现Provider接口\n\n定义接口需要初始化参数和需要使用的子节点。\n\n```tsx\n\n    /**\n     * ContainerProviderProps 定义类型\n     * @param {State} State\n     * @return {State} initialState\n     * @return {React.ReactNode} children\n     */\n    export interface ContainerProviderProps<State = any> {\n    initialState?: State;\n    children: React.ReactNode;\n    }\n\n```\n\n#### createContainer 方法\n\n在 `createContainer` 方法中，使用后会返回两个方法 `Provider` 和 `useContainer`。\n\n步骤：\n\n1. 使用React.createContext 创建Context；\n2. 自定义hooks 获取属性；\n3. 需要使用Context 子组件使用Provider 包装， 将数据写入Context；\n4. 使用React.useContext 从 Context 中获取属性\n\n```tsx\n    export function createContainer<Value, State = void>(\n    useHook: (initialState?: State) => Value\n    ): Container<Value, State> {\n    // 使用React.createContext 创建Context\n    const Context = React.createContext<Value | typeof EMPTY>(EMPTY);\n\n    function Provider(props: ContainerProviderProps<State>) {\n        // 自定义hooks 获取属性\n        let value = useHook(props.initialState);\n        // 需要使用Context 子组件使用Provider 包装， 将数据写入Context。\n        return <Context.Provider value={value}>{props?.children}</Context.Provider>;\n    }\n\n    function useContainer(): Value {\n        // 使用React.useContext 从 Context 中获取属性\n        let value = React.useContext(Context);\n        if (value === EMPTY) {\n        throw new Error(\"Component must be wrapped with <Container.Provider>\");\n        }\n        return value;\n    }\n    return {\n        Provider,\n        useContainer,\n    };\n    }\n```\n\n#### useContainer\n\n使用useContainer 从 Container 中直接获取属性。\n\n```tsx\n    export function useContainer<Value, State = void>(\n    container: Container<Value, State>\n    ): Value {\n    return container.useContainer();\n    }\n```\n\n#### [unstate-next 使用](./unstate-next-use.html)\n\n#### 实现code\n\n```tsx\n    import React from \"react\";\n\n    const EMPTY: unique symbol = Symbol();\n\n    /**\n     * ContainerProviderProps 定义类型\n     * @param {State} State\n     * @return {State} initialState\n     * @return {React.ReactNode} children\n     */\n    export interface ContainerProviderProps<State = any> {\n    initialState?: State;\n    children: React.ReactNode;\n    }\n\n    /**\n     * 实现接口\n     */\n    export interface Container<Value, State> {\n    Provider: React.ComponentType<ContainerProviderProps<State>>;\n    useContainer: () => Value;\n    }\n\n    export function createContainer<Value, State = void>(\n    useHook: (initialState?: State) => Value\n    ): Container<Value, State> {\n    // 使用React.createContext 创建Context\n    const Context = React.createContext<Value | typeof EMPTY>(EMPTY);\n\n    function Provider(props: ContainerProviderProps<State>) {\n        // 自定义hooks 获取属性\n        let value = useHook(props.initialState);\n        // 需要使用Context 子组件使用Provider 包装， 将数据写入Context。\n        return <Context.Provider value={value}>{props?.children}</Context.Provider>;\n    }\n\n    function useContainer(): Value {\n        // 使用React.useContext 从 Context 中获取属性\n        let value = React.useContext(Context);\n        if (value === EMPTY) {\n        throw new Error(\"Component must be wrapped with <Container.Provider>\");\n        }\n        return value;\n    }\n    return {\n        Provider,\n        useContainer,\n    };\n    }\n\n    export function useContainer<Value, State = void>(\n    container: Container<Value, State>\n    ): Value {\n    return container.useContainer();\n    }\n\n```\n","slug":"react/components/unstate-next/unstated-next-implement","updated":"2023-10-26T12:50:44.436Z","__permalink":"/react/components/unstate-next-implement.html","_id":"clo6whxdl002mdif34oxg0ao2","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h4 id=\"定义实现Container接口\"><a href=\"#定义实现Container接口\" class=\"headerlink\" title=\"定义实现Container接口\"></a>定义实现Container接口</h4><p>需要实现包装方法和获取数据的hooks</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"title class_\">Provider</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;<span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span>&gt;&gt;;</span><br><span class=\"line\"><span class=\"attr\">useContainer</span>: <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义实现Provider接口\"><a href=\"#定义实现Provider接口\" class=\"headerlink\" title=\"定义实现Provider接口\"></a>定义实现Provider接口</h4><p>定义接口需要初始化参数和需要使用的子节点。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ContainerProviderProps 定义类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">State</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">initialState</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">React.ReactNode</span>&#125; <span class=\"variable\">children</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span> = <span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">initialState?: <span class=\"title class_\">State</span>;</span><br><span class=\"line\"><span class=\"attr\">children</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"createContainer-方法\"><a href=\"#createContainer-方法\" class=\"headerlink\" title=\"createContainer 方法\"></a>createContainer 方法</h4><p>在 <code>createContainer</code> 方法中，使用后会返回两个方法 <code>Provider</code> 和 <code>useContainer</code>。</p>\n<p>步骤：</p>\n<ol>\n<li>使用React.createContext 创建Context；</li>\n<li>自定义hooks 获取属性；</li>\n<li>需要使用Context 子组件使用Provider 包装， 将数据写入Context；</li>\n<li>使用React.useContext 从 Context 中获取属性</li>\n</ol>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> createContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">useHook</span>: <span class=\"function\">(<span class=\"params\">initialState?: State</span>) =&gt;</span> <span class=\"title class_\">Value</span></span><br><span class=\"line\">): <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"comment\">// 使用React.createContext 创建Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title class_\">React</span>.<span class=\"property\">createContext</span>&lt;<span class=\"title class_\">Value</span> | <span class=\"keyword\">typeof</span> <span class=\"variable constant_\">EMPTY</span>&gt;(<span class=\"variable constant_\">EMPTY</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Provider</span>(<span class=\"params\">props: ContainerProviderProps&lt;State&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义hooks 获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title function_\">useHook</span>(props.<span class=\"property\">initialState</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要使用Context 子组件使用Provider 包装， 将数据写入Context。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span>&gt;</span>&#123;props?.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useContainer</span>(<span class=\"params\"></span>): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用React.useContext 从 Context 中获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title class_\">React</span>.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"variable constant_\">EMPTY</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Component must be wrapped with &lt;Container.Provider&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Provider</span>,</span><br><span class=\"line\">    useContainer,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useContainer\"><a href=\"#useContainer\" class=\"headerlink\" title=\"useContainer\"></a>useContainer</h4><p>使用useContainer 从 Container 中直接获取属性。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">container</span>: <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> container.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"unstate-next-使用\"><a href=\"#unstate-next-使用\" class=\"headerlink\" title=\"unstate-next 使用\"></a><a href=\"./unstate-next-use.html\">unstate-next 使用</a></h4><h4 id=\"实现code\"><a href=\"#实现code\" class=\"headerlink\" title=\"实现code\"></a>实现code</h4><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">EMPTY</span>: unique <span class=\"built_in\">symbol</span> = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ContainerProviderProps 定义类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">State</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">initialState</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">React.ReactNode</span>&#125; <span class=\"variable\">children</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span> = <span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">initialState?: <span class=\"title class_\">State</span>;</span><br><span class=\"line\"><span class=\"attr\">children</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"title class_\">Provider</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;<span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span>&gt;&gt;;</span><br><span class=\"line\"><span class=\"attr\">useContainer</span>: <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Value</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> createContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">useHook</span>: <span class=\"function\">(<span class=\"params\">initialState?: State</span>) =&gt;</span> <span class=\"title class_\">Value</span></span><br><span class=\"line\">): <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"comment\">// 使用React.createContext 创建Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title class_\">React</span>.<span class=\"property\">createContext</span>&lt;<span class=\"title class_\">Value</span> | <span class=\"keyword\">typeof</span> <span class=\"variable constant_\">EMPTY</span>&gt;(<span class=\"variable constant_\">EMPTY</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Provider</span>(<span class=\"params\">props: ContainerProviderProps&lt;State&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义hooks 获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title function_\">useHook</span>(props.<span class=\"property\">initialState</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要使用Context 子组件使用Provider 包装， 将数据写入Context。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span>&gt;</span>&#123;props?.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useContainer</span>(<span class=\"params\"></span>): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用React.useContext 从 Context 中获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title class_\">React</span>.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"variable constant_\">EMPTY</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Component must be wrapped with &lt;Container.Provider&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Provider</span>,</span><br><span class=\"line\">    useContainer,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">container</span>: <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> container.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/components/unstate-next-use.html"],"length":3211,"excerpt":"","more":"<h4 id=\"定义实现Container接口\"><a href=\"#定义实现Container接口\" class=\"headerlink\" title=\"定义实现Container接口\"></a>定义实现Container接口</h4><p>需要实现包装方法和获取数据的hooks</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"title class_\">Provider</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;<span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span>&gt;&gt;;</span><br><span class=\"line\"><span class=\"attr\">useContainer</span>: <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义实现Provider接口\"><a href=\"#定义实现Provider接口\" class=\"headerlink\" title=\"定义实现Provider接口\"></a>定义实现Provider接口</h4><p>定义接口需要初始化参数和需要使用的子节点。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ContainerProviderProps 定义类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">State</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">initialState</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">React.ReactNode</span>&#125; <span class=\"variable\">children</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span> = <span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">initialState?: <span class=\"title class_\">State</span>;</span><br><span class=\"line\"><span class=\"attr\">children</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"createContainer-方法\"><a href=\"#createContainer-方法\" class=\"headerlink\" title=\"createContainer 方法\"></a>createContainer 方法</h4><p>在 <code>createContainer</code> 方法中，使用后会返回两个方法 <code>Provider</code> 和 <code>useContainer</code>。</p>\n<p>步骤：</p>\n<ol>\n<li>使用React.createContext 创建Context；</li>\n<li>自定义hooks 获取属性；</li>\n<li>需要使用Context 子组件使用Provider 包装， 将数据写入Context；</li>\n<li>使用React.useContext 从 Context 中获取属性</li>\n</ol>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> createContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">useHook</span>: <span class=\"function\">(<span class=\"params\">initialState?: State</span>) =&gt;</span> <span class=\"title class_\">Value</span></span><br><span class=\"line\">): <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"comment\">// 使用React.createContext 创建Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title class_\">React</span>.<span class=\"property\">createContext</span>&lt;<span class=\"title class_\">Value</span> | <span class=\"keyword\">typeof</span> <span class=\"variable constant_\">EMPTY</span>&gt;(<span class=\"variable constant_\">EMPTY</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Provider</span>(<span class=\"params\">props: ContainerProviderProps&lt;State&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义hooks 获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title function_\">useHook</span>(props.<span class=\"property\">initialState</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要使用Context 子组件使用Provider 包装， 将数据写入Context。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span>&gt;</span>&#123;props?.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useContainer</span>(<span class=\"params\"></span>): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用React.useContext 从 Context 中获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title class_\">React</span>.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"variable constant_\">EMPTY</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Component must be wrapped with &lt;Container.Provider&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Provider</span>,</span><br><span class=\"line\">    useContainer,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useContainer\"><a href=\"#useContainer\" class=\"headerlink\" title=\"useContainer\"></a>useContainer</h4><p>使用useContainer 从 Container 中直接获取属性。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">container</span>: <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> container.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"unstate-next-使用\"><a href=\"#unstate-next-使用\" class=\"headerlink\" title=\"unstate-next 使用\"></a><a href=\"./unstate-next-use.html\">unstate-next 使用</a></h4><h4 id=\"实现code\"><a href=\"#实现code\" class=\"headerlink\" title=\"实现code\"></a>实现code</h4><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">EMPTY</span>: unique <span class=\"built_in\">symbol</span> = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ContainerProviderProps 定义类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">State</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">initialState</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">React.ReactNode</span>&#125; <span class=\"variable\">children</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span> = <span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">initialState?: <span class=\"title class_\">State</span>;</span><br><span class=\"line\"><span class=\"attr\">children</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"title class_\">Provider</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;<span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span>&gt;&gt;;</span><br><span class=\"line\"><span class=\"attr\">useContainer</span>: <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Value</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> createContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">useHook</span>: <span class=\"function\">(<span class=\"params\">initialState?: State</span>) =&gt;</span> <span class=\"title class_\">Value</span></span><br><span class=\"line\">): <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"comment\">// 使用React.createContext 创建Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title class_\">React</span>.<span class=\"property\">createContext</span>&lt;<span class=\"title class_\">Value</span> | <span class=\"keyword\">typeof</span> <span class=\"variable constant_\">EMPTY</span>&gt;(<span class=\"variable constant_\">EMPTY</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Provider</span>(<span class=\"params\">props: ContainerProviderProps&lt;State&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义hooks 获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title function_\">useHook</span>(props.<span class=\"property\">initialState</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要使用Context 子组件使用Provider 包装， 将数据写入Context。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span>&gt;</span>&#123;props?.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useContainer</span>(<span class=\"params\"></span>): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用React.useContext 从 Context 中获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title class_\">React</span>.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"variable constant_\">EMPTY</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Component must be wrapped with &lt;Container.Provider&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Provider</span>,</span><br><span class=\"line\">    useContainer,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">container</span>: <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> container.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"React 实现原理","date":"2023-10-27T02:58:50.000Z","description":"Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。","comments":1,"_content":"\n### 实现jsx\n\n```jsx\n    let element = (\n    <h1>\n        hello<span style={{ color: \"red\" }}>world</span>\n    </h1>\n    );\n    console.log(element);\n\n```\n\n### 编译后\n\n![jsx 编译之后](https://pic.imgdb.cn/item/653b2718c458853aef75775a.jpg)\n\n### 如何实现\n\n1. jsx-dev-runtime.js\n\n```jsx\n    export { jsxDEV } from \"./jsx/ReactJSXElement\";\n\n```\n\n2. ReactJSXElement.js\n\n```jsx\n    import hasOwnProperty from '../shared/hasOwnProperty';\n\n    // dom 类型\n    import { REACT_ELEMENT_TYPE  } from '../shared/ReactSymbols';\n\n    const RESERVED_PROPS = {\n        key: true,\n        ref: true,\n        __self: true,\n        __source: true\n    };\n\n    function hasValidKey(config) {\n        return config.key !== undefined;\n    }\n\n    function hasValidRef(config) {\n        return config.ref !== undefined;\n    }\n\n    // ReactElement 创建\n    function ReactElement(type, key, ref, props, owner) {\n        return {\n            // 这个标签允许我们唯一地将其标识为React元素\n            $$typeof: REACT_ELEMENT_TYPE,\n            type,\n            key,\n            ref,\n            props,\n            \n        }\n    }\n\n\n    export function jsxDEV(type, config) {\n        // 提取保留名称\n        const props = {};\n        let key = null;\n        let ref = null;\n        if(hasValidKey(config)) {\n            key = config.key;\n        }\n\n        if(hasValidRef(config)) {\n            ref = config.ref;\n        }\n\n        for(const propName in config) {\n            if(hasOwnProperty.call(config, propName) &&\n            !RESERVED_PROPS.hasOwnProperty(propName)\n            ) {\n                props[propName] = config[propName];\n            }\n        }\n        return ReactElement(type, key, ref, props)\n    }\n\n```\n\n3. hasOwnProperty.js\n\n```jsx\n    const { hasOwnProperty } = Object.prototype;\n\n    export default hasOwnProperty;\n```\n\n4. ReactSymbols.js\n\n```jsx\n    // 用于标记类似 ReactElement 类型的符号。\n    export const REACT_ELEMENT_TYPE = Symbol.for('react.element');\n```\n\n### 根节点和根fiber\n\n- 需要给react提供一个根节点，之后每个节点都是渲染在根节点内部的。\n\n`const root = createRoot(document.getElementById('root'))`\n\n- 根fiber可以通俗理解为一个装着所有虚拟dom的容器，每个虚拟dom又单独对应一个fiber，\n- 渲染可以以单个fiber为单位暂停 / 恢复。\n- 需要创建两个根 `fiber` 去相互替换展示。\n\n#### 创建根节点\n\n更改main.jsx\n\n```jsx\n    import { createRoot } from \"react-dom/client\"\n\n    let element = (\n    <h1>hello<span style={{ color: 'red' }}>world</span></h1>\n    )\n\n    const root = createRoot(document.getElementById('root'));\n    console.log(root)\n\n```\n\n首先要建一个`FiberRootNode`根节点，也就是所有DOM的根，本质就是 `div#root`。\n\n根节点和`fiber`关系：\n\n![根节点和`fiber`关系](https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg)\n\n`FiberRootNode` 和 `HostRootFiber` 中间使用 `current` 相连；\n\n`HostRootFiber` 和 `FiberRootNode` 中间使用 `stateNode` 相连。\n\n#### 实现createRoot\n\n分这么多文件的主要是因为很多其他逻辑要处理，暂时都给省略了。虽然比较绕，但其实本质就是把`div#root`做了几层包装。\n\n1. client.js\n\n```js\n    export { createRoot } from \"./src/client/ReactDOMRoot\";\n```\n\n2. ReactDOMRoot.js\n\n```js\n    import { createContainer } from \"react-reconciler/src/ReactFiberReconciler\";\n    function ReactDOMRoot(internalRoot) {\n    this._internalRoot = internalRoot;\n    }\n    // 创建一个根 实际就是一个被包装过的真实DOM节点\n    // container: div#root\n    export function createRoot(container) {\n    // 1. 创建容器   6. 接收到有#root的容器\n    const root = createContainer(container);\n    // 7. 容器传给 ReactDOMRoot\n    return new ReactDOMRoot(root);\n    }\n```\n\n3. ReactFiberReconciler.js\n\n```js\n    import { createFiberRoot } from \"./ReactFiberRoot\";\n    // 创建容器 containerInfo: 容器信息\n    export function createContainer(containerInfo) {\n    // 2\n    return createFiberRoot(containerInfo);\n    }\n```\n\n4. ReactFiberRoot.js\n\n```js\n    function FiberRootNode(containerInfo) {\n    // 4. 把DOM节点放到容器\n    this.containerInfo = containerInfo\n    }\n    export function createFiberRoot(containerInfo) {\n    // 3. 创建根容器\n    const root = new FiberRootNode(containerInfo);\n    // 这个位置在下一步要创建 FiberRoot\n    // 5. 把容器返回出去\n    return root;\n    }\n```\n\n现在根节点`FiberRootNode`创建好了，最后`root`的打印结果：\n\n![FiberRootNode](https://pic.imgdb.cn/item/653b2e66c458853aef8a195c.jpg)\n\n#### fiber\n\n在创建根fiber之前先了解一下fiber\n\n#### 为什么需要有fiber？\n\n- react以前没有fiber整个计算过程不能暂停，会导致时间过长\n- 浏览器刷新频率为 60Hz,大概 16.6 毫秒渲染一次，而 JS 线程和渲染线程是互斥的，所以如果 JS 线程执行任务时间超过 16.6ms 的话，就会导致掉帧、卡顿，解决方案就是 React 利用空闲的时间进行更新，不影响渲染进行的渲染\n- 把一个耗时任务切分成一个个小任务，分布在每一帧里。这个的方式就叫时间切片\n\n我们需要把渲染变成一个可中断，可暂停，可恢复的过程。\n注：可以去搜一下 requestIdleCallback API ，react封装了一个类似的方法让每帧时间固定 5ms。\n\n#### 什么是fiber？\n\n- Fiber 是一个执行单元\n\n    Fiber 是一个执行单元,每次执行完一个执行单元，React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去。\n\n    react 中一帧的过程：\n\n    ![react 中一帧的过程](https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg)\n\n- Fiber 是一种数据结构\n    React 目前的做法是使用链表, 每个虚拟节点内部表示为一个Fiber\n    从顶点开始遍历\n    如果有第一个儿子，先遍历第一个儿子\n    如果没有第一个儿子，标志着此节点遍历完成\n    如果有弟弟遍历弟弟\n    如果有没有下一个弟弟，返回父节点标识完成父节点遍历，如果有叔叔遍历叔叔\n    没有父节点遍历结束\n\n    遍历结构：\n    ![遍历结构](https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg)\n\n    遍历过程：\n    ![遍历过程](https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg)\n\n#### 创建根fiber\n\n真实DOM需要一个根容器，`fiber`同样需要一个根`fiber`。\n\n相当于每个虚拟DOM都会创建一个对应的`Fiber`，再创建真实DOM\n\n虚拟DOM => Fiber => 真实DOM\n\n在刚刚创建FiberRootNode的函数里去创建`HostRootFiber`并互相指向对方。\n\n![根节点和`fiber`关系](https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg)\n\n1. ReactFiberRoot.js\n\n```js\n    import { createHostRootFiber } from \"./ReactFiber\";\n\n    function FiberRootNode(containerInfo) {\n    this.containerInfo = containerInfo;\n    }\n    export function createFiberRoot(containerInfo) {\n    // 之前创建的根节点容器\n    const root = new FiberRootNode(containerInfo);\n    // 1. 创建根fiber. hostRoot就是根节点dev#root\n    // 未初始化的fiber\n    const uninitializedFiber = createHostRootFiber();\n    // 当前渲染页面的fiber.\n    // 6. 根容器的current指向当前的根fiber\n    root.current = uninitializedFiber;\n    uninitializedFiber.stateNode = root;\n    return root;\n    }\n\n```\n\n2. ReactFiber.js\n\n```js\n    // 3. 工作标签\n    import { HostRoot } from \"./ReactWorkTags\";\n    // 5. 副作用标识\n    import { NoFlags } from \"./ReactFiberFlags\";\n\n    export function FiberNode(tag, pendingProps, key) {\n    this.tag = tag;\n    this.key = key;\n    this.type = null; // fiber类型, 来自于虚拟DOM节点的type   (span h1 p)\n    this.stateNode = null; // 此fiber对应的真实DOM节点\n\n    this.return = null; // 指向父节点\n    this.child = null; // 指向第一个子节点\n    this.sibling = null; // 指向弟弟\n\n    this.pendingProps = pendingProps; // 等待生效的属性\n    this.memoizedProps = null; // 已经生效的属性\n    // 虚拟DOM会提供pendingProps给创建fiber的属性，等处理完复制给memoizedProps\n\n    // 每个fiber还会有自己的状态，每一种fiber状态存的类型都不一样\n    // 比如：类组件对应的fiber存的就是实例的状态，HostRoot存的就是要渲染的元素\n    this.memoizedState = null;\n\n    // 每个fiber可能还有自己的更新队列\n    this.updateQueue = null;\n\n    // 5. \"./ReactFiberFlags\"\n    this.flags = NoFlags; // 副作用标识，表示对此fiber节点进行何种操作\n    this.subtreeFlags = NoFlags; // 子节点对应的副作用标识\n    this.alternate = null; // 轮替 (缓存了另一个fiber节点实例) diff时用\n    }\n\n    export function createFiberNode(tag, pendingProps, key) {\n    return new FiberNode(tag, pendingProps, key);\n    }\n\n    export function createHostRootFiber() {\n    return createFiberNode(HostRoot, null, null);\n    }\n\n```\n\n3. ReactWorkTags.js\n\n```js\n    // 每种虚拟DOM都会对应自己的fiber的类型\n    // 根Fiber的Tag\n    export const HostRoot = 3; // 根节点\n    export const HostComponent = 5; // 原生节点 span div p\n    export const HostText = 6; // 纯文本节点\n    // ...\n\n```\n\n4. ReactFiberFlags.js\n\n```js\n    // 没有任何操作\n    export const NoFlags = 0b000000000000000000000000000000;\n    // 插入\n    export const Placement = 0b000000000000000000000000000010;\n    // 更新\n    export const Update = 0b000000000000000000000000000100;\n\n```\n看最后root的打印结果：根fiber和节点容器互相指向\n\n![](https://pic.imgdb.cn/item/653b5beac458853aef1a1a12.jpg)","source":"_posts/react/reactImplement.md","raw":"---\ntitle: React 实现原理\npermalink: /react/implement.html\ndate: 2023-10-27 10:58:50\ndescription: Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。\ntag: [前端, react, JavaScript, JSX]\ncomments: true\ncategories: \n - React\n---\n\n### 实现jsx\n\n```jsx\n    let element = (\n    <h1>\n        hello<span style={{ color: \"red\" }}>world</span>\n    </h1>\n    );\n    console.log(element);\n\n```\n\n### 编译后\n\n![jsx 编译之后](https://pic.imgdb.cn/item/653b2718c458853aef75775a.jpg)\n\n### 如何实现\n\n1. jsx-dev-runtime.js\n\n```jsx\n    export { jsxDEV } from \"./jsx/ReactJSXElement\";\n\n```\n\n2. ReactJSXElement.js\n\n```jsx\n    import hasOwnProperty from '../shared/hasOwnProperty';\n\n    // dom 类型\n    import { REACT_ELEMENT_TYPE  } from '../shared/ReactSymbols';\n\n    const RESERVED_PROPS = {\n        key: true,\n        ref: true,\n        __self: true,\n        __source: true\n    };\n\n    function hasValidKey(config) {\n        return config.key !== undefined;\n    }\n\n    function hasValidRef(config) {\n        return config.ref !== undefined;\n    }\n\n    // ReactElement 创建\n    function ReactElement(type, key, ref, props, owner) {\n        return {\n            // 这个标签允许我们唯一地将其标识为React元素\n            $$typeof: REACT_ELEMENT_TYPE,\n            type,\n            key,\n            ref,\n            props,\n            \n        }\n    }\n\n\n    export function jsxDEV(type, config) {\n        // 提取保留名称\n        const props = {};\n        let key = null;\n        let ref = null;\n        if(hasValidKey(config)) {\n            key = config.key;\n        }\n\n        if(hasValidRef(config)) {\n            ref = config.ref;\n        }\n\n        for(const propName in config) {\n            if(hasOwnProperty.call(config, propName) &&\n            !RESERVED_PROPS.hasOwnProperty(propName)\n            ) {\n                props[propName] = config[propName];\n            }\n        }\n        return ReactElement(type, key, ref, props)\n    }\n\n```\n\n3. hasOwnProperty.js\n\n```jsx\n    const { hasOwnProperty } = Object.prototype;\n\n    export default hasOwnProperty;\n```\n\n4. ReactSymbols.js\n\n```jsx\n    // 用于标记类似 ReactElement 类型的符号。\n    export const REACT_ELEMENT_TYPE = Symbol.for('react.element');\n```\n\n### 根节点和根fiber\n\n- 需要给react提供一个根节点，之后每个节点都是渲染在根节点内部的。\n\n`const root = createRoot(document.getElementById('root'))`\n\n- 根fiber可以通俗理解为一个装着所有虚拟dom的容器，每个虚拟dom又单独对应一个fiber，\n- 渲染可以以单个fiber为单位暂停 / 恢复。\n- 需要创建两个根 `fiber` 去相互替换展示。\n\n#### 创建根节点\n\n更改main.jsx\n\n```jsx\n    import { createRoot } from \"react-dom/client\"\n\n    let element = (\n    <h1>hello<span style={{ color: 'red' }}>world</span></h1>\n    )\n\n    const root = createRoot(document.getElementById('root'));\n    console.log(root)\n\n```\n\n首先要建一个`FiberRootNode`根节点，也就是所有DOM的根，本质就是 `div#root`。\n\n根节点和`fiber`关系：\n\n![根节点和`fiber`关系](https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg)\n\n`FiberRootNode` 和 `HostRootFiber` 中间使用 `current` 相连；\n\n`HostRootFiber` 和 `FiberRootNode` 中间使用 `stateNode` 相连。\n\n#### 实现createRoot\n\n分这么多文件的主要是因为很多其他逻辑要处理，暂时都给省略了。虽然比较绕，但其实本质就是把`div#root`做了几层包装。\n\n1. client.js\n\n```js\n    export { createRoot } from \"./src/client/ReactDOMRoot\";\n```\n\n2. ReactDOMRoot.js\n\n```js\n    import { createContainer } from \"react-reconciler/src/ReactFiberReconciler\";\n    function ReactDOMRoot(internalRoot) {\n    this._internalRoot = internalRoot;\n    }\n    // 创建一个根 实际就是一个被包装过的真实DOM节点\n    // container: div#root\n    export function createRoot(container) {\n    // 1. 创建容器   6. 接收到有#root的容器\n    const root = createContainer(container);\n    // 7. 容器传给 ReactDOMRoot\n    return new ReactDOMRoot(root);\n    }\n```\n\n3. ReactFiberReconciler.js\n\n```js\n    import { createFiberRoot } from \"./ReactFiberRoot\";\n    // 创建容器 containerInfo: 容器信息\n    export function createContainer(containerInfo) {\n    // 2\n    return createFiberRoot(containerInfo);\n    }\n```\n\n4. ReactFiberRoot.js\n\n```js\n    function FiberRootNode(containerInfo) {\n    // 4. 把DOM节点放到容器\n    this.containerInfo = containerInfo\n    }\n    export function createFiberRoot(containerInfo) {\n    // 3. 创建根容器\n    const root = new FiberRootNode(containerInfo);\n    // 这个位置在下一步要创建 FiberRoot\n    // 5. 把容器返回出去\n    return root;\n    }\n```\n\n现在根节点`FiberRootNode`创建好了，最后`root`的打印结果：\n\n![FiberRootNode](https://pic.imgdb.cn/item/653b2e66c458853aef8a195c.jpg)\n\n#### fiber\n\n在创建根fiber之前先了解一下fiber\n\n#### 为什么需要有fiber？\n\n- react以前没有fiber整个计算过程不能暂停，会导致时间过长\n- 浏览器刷新频率为 60Hz,大概 16.6 毫秒渲染一次，而 JS 线程和渲染线程是互斥的，所以如果 JS 线程执行任务时间超过 16.6ms 的话，就会导致掉帧、卡顿，解决方案就是 React 利用空闲的时间进行更新，不影响渲染进行的渲染\n- 把一个耗时任务切分成一个个小任务，分布在每一帧里。这个的方式就叫时间切片\n\n我们需要把渲染变成一个可中断，可暂停，可恢复的过程。\n注：可以去搜一下 requestIdleCallback API ，react封装了一个类似的方法让每帧时间固定 5ms。\n\n#### 什么是fiber？\n\n- Fiber 是一个执行单元\n\n    Fiber 是一个执行单元,每次执行完一个执行单元，React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去。\n\n    react 中一帧的过程：\n\n    ![react 中一帧的过程](https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg)\n\n- Fiber 是一种数据结构\n    React 目前的做法是使用链表, 每个虚拟节点内部表示为一个Fiber\n    从顶点开始遍历\n    如果有第一个儿子，先遍历第一个儿子\n    如果没有第一个儿子，标志着此节点遍历完成\n    如果有弟弟遍历弟弟\n    如果有没有下一个弟弟，返回父节点标识完成父节点遍历，如果有叔叔遍历叔叔\n    没有父节点遍历结束\n\n    遍历结构：\n    ![遍历结构](https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg)\n\n    遍历过程：\n    ![遍历过程](https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg)\n\n#### 创建根fiber\n\n真实DOM需要一个根容器，`fiber`同样需要一个根`fiber`。\n\n相当于每个虚拟DOM都会创建一个对应的`Fiber`，再创建真实DOM\n\n虚拟DOM => Fiber => 真实DOM\n\n在刚刚创建FiberRootNode的函数里去创建`HostRootFiber`并互相指向对方。\n\n![根节点和`fiber`关系](https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg)\n\n1. ReactFiberRoot.js\n\n```js\n    import { createHostRootFiber } from \"./ReactFiber\";\n\n    function FiberRootNode(containerInfo) {\n    this.containerInfo = containerInfo;\n    }\n    export function createFiberRoot(containerInfo) {\n    // 之前创建的根节点容器\n    const root = new FiberRootNode(containerInfo);\n    // 1. 创建根fiber. hostRoot就是根节点dev#root\n    // 未初始化的fiber\n    const uninitializedFiber = createHostRootFiber();\n    // 当前渲染页面的fiber.\n    // 6. 根容器的current指向当前的根fiber\n    root.current = uninitializedFiber;\n    uninitializedFiber.stateNode = root;\n    return root;\n    }\n\n```\n\n2. ReactFiber.js\n\n```js\n    // 3. 工作标签\n    import { HostRoot } from \"./ReactWorkTags\";\n    // 5. 副作用标识\n    import { NoFlags } from \"./ReactFiberFlags\";\n\n    export function FiberNode(tag, pendingProps, key) {\n    this.tag = tag;\n    this.key = key;\n    this.type = null; // fiber类型, 来自于虚拟DOM节点的type   (span h1 p)\n    this.stateNode = null; // 此fiber对应的真实DOM节点\n\n    this.return = null; // 指向父节点\n    this.child = null; // 指向第一个子节点\n    this.sibling = null; // 指向弟弟\n\n    this.pendingProps = pendingProps; // 等待生效的属性\n    this.memoizedProps = null; // 已经生效的属性\n    // 虚拟DOM会提供pendingProps给创建fiber的属性，等处理完复制给memoizedProps\n\n    // 每个fiber还会有自己的状态，每一种fiber状态存的类型都不一样\n    // 比如：类组件对应的fiber存的就是实例的状态，HostRoot存的就是要渲染的元素\n    this.memoizedState = null;\n\n    // 每个fiber可能还有自己的更新队列\n    this.updateQueue = null;\n\n    // 5. \"./ReactFiberFlags\"\n    this.flags = NoFlags; // 副作用标识，表示对此fiber节点进行何种操作\n    this.subtreeFlags = NoFlags; // 子节点对应的副作用标识\n    this.alternate = null; // 轮替 (缓存了另一个fiber节点实例) diff时用\n    }\n\n    export function createFiberNode(tag, pendingProps, key) {\n    return new FiberNode(tag, pendingProps, key);\n    }\n\n    export function createHostRootFiber() {\n    return createFiberNode(HostRoot, null, null);\n    }\n\n```\n\n3. ReactWorkTags.js\n\n```js\n    // 每种虚拟DOM都会对应自己的fiber的类型\n    // 根Fiber的Tag\n    export const HostRoot = 3; // 根节点\n    export const HostComponent = 5; // 原生节点 span div p\n    export const HostText = 6; // 纯文本节点\n    // ...\n\n```\n\n4. ReactFiberFlags.js\n\n```js\n    // 没有任何操作\n    export const NoFlags = 0b000000000000000000000000000000;\n    // 插入\n    export const Placement = 0b000000000000000000000000000010;\n    // 更新\n    export const Update = 0b000000000000000000000000000100;\n\n```\n看最后root的打印结果：根fiber和节点容器互相指向\n\n![](https://pic.imgdb.cn/item/653b5beac458853aef1a1a12.jpg)","slug":"react/reactImplement","published":1,"updated":"2023-10-27T13:18:10.726Z","__permalink":"/react/implement.html","_id":"clo8dq7jq011p4tf3hnfi0oa7","layout":"post","photos":[],"link":"","content":"<div id=\"vip-container\"><h3 id=\"实现jsx\"><a href=\"#实现jsx\" class=\"headerlink\" title=\"实现jsx\"></a>实现jsx</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> element = (</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &quot;<span class=\"attr\">red</span>&quot; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译后\"><a href=\"#编译后\" class=\"headerlink\" title=\"编译后\"></a>编译后</h3><p><img src=\"https://pic.imgdb.cn/item/653b2718c458853aef75775a.jpg\" alt=\"jsx 编译之后\"></p>\n<h3 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h3><ol>\n<li>jsx-dev-runtime.js</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; jsxDEV &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./jsx/ReactJSXElement&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>ReactJSXElement.js</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hasOwnProperty <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../shared/hasOwnProperty&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dom 类型</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>  &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../shared/ReactSymbols&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RESERVED_PROPS</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">key</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">ref</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">__self</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">__source</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasValidKey</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config.<span class=\"property\">key</span> !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasValidRef</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config.<span class=\"property\">ref</span> !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ReactElement 创建</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReactElement</span>(<span class=\"params\">type, key, ref, props, owner</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个标签允许我们唯一地将其标识为React元素</span></span><br><span class=\"line\">        <span class=\"attr\">$$typeof</span>: <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>,</span><br><span class=\"line\">        type,</span><br><span class=\"line\">        key,</span><br><span class=\"line\">        ref,</span><br><span class=\"line\">        props,</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">jsxDEV</span>(<span class=\"params\">type, config</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提取保留名称</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> props = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ref = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">hasValidKey</span>(config)) &#123;</span><br><span class=\"line\">        key = config.<span class=\"property\">key</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">hasValidRef</span>(config)) &#123;</span><br><span class=\"line\">        ref = config.<span class=\"property\">ref</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> propName <span class=\"keyword\">in</span> config) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hasOwnProperty.<span class=\"title function_\">call</span>(config, propName) &amp;&amp;</span><br><span class=\"line\">        !<span class=\"variable constant_\">RESERVED_PROPS</span>.<span class=\"title function_\">hasOwnProperty</span>(propName)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            props[propName] = config[propName];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">ReactElement</span>(type, key, ref, props)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>hasOwnProperty.js</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; hasOwnProperty &#125; = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> hasOwnProperty;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>ReactSymbols.js</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于标记类似 ReactElement 类型的符号。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span> = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;react.element&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"根节点和根fiber\"><a href=\"#根节点和根fiber\" class=\"headerlink\" title=\"根节点和根fiber\"></a>根节点和根fiber</h3><ul>\n<li>需要给react提供一个根节点，之后每个节点都是渲染在根节点内部的。</li>\n</ul>\n<p><code>const root = createRoot(document.getElementById(&#39;root&#39;))</code></p>\n<ul>\n<li>根fiber可以通俗理解为一个装着所有虚拟dom的容器，每个虚拟dom又单独对应一个fiber，</li>\n<li>渲染可以以单个fiber为单位暂停 &#x2F; 恢复。</li>\n<li>需要创建两个根 <code>fiber</code> 去相互替换展示。</li>\n</ul>\n<h4 id=\"创建根节点\"><a href=\"#创建根节点\" class=\"headerlink\" title=\"创建根节点\"></a>创建根节点</h4><p>更改main.jsx</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom/client&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> element = (</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">red</span>&#x27; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(root)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>首先要建一个<code>FiberRootNode</code>根节点，也就是所有DOM的根，本质就是 <code>div#root</code>。</p>\n<p>根节点和<code>fiber</code>关系：</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"根节点和`fiber`关系\"></p>\n<p><code>FiberRootNode</code> 和 <code>HostRootFiber</code> 中间使用 <code>current</code> 相连；</p>\n<p><code>HostRootFiber</code> 和 <code>FiberRootNode</code> 中间使用 <code>stateNode</code> 相连。</p>\n<h4 id=\"实现createRoot\"><a href=\"#实现createRoot\" class=\"headerlink\" title=\"实现createRoot\"></a>实现createRoot</h4><p>分这么多文件的主要是因为很多其他逻辑要处理，暂时都给省略了。虽然比较绕，但其实本质就是把<code>div#root</code>做了几层包装。</p>\n<ol>\n<li>client.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./src/client/ReactDOMRoot&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>ReactDOMRoot.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-reconciler/src/ReactFiberReconciler&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReactDOMRoot</span>(<span class=\"params\">internalRoot</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">_internalRoot</span> = internalRoot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 创建一个根 实际就是一个被包装过的真实DOM节点</span></span><br><span class=\"line\"><span class=\"comment\">// container: div#root</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createRoot</span>(<span class=\"params\">container</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. 创建容器   6. 接收到有#root的容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createContainer</span>(container);</span><br><span class=\"line\"><span class=\"comment\">// 7. 容器传给 ReactDOMRoot</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReactDOMRoot</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>ReactFiberReconciler.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createFiberRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberRoot&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 创建容器 containerInfo: 容器信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createContainer</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">createFiberRoot</span>(containerInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>ReactFiberRoot.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberRootNode</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 4. 把DOM节点放到容器</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">containerInfo</span> = containerInfo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberRoot</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 3. 创建根容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">FiberRootNode</span>(containerInfo);</span><br><span class=\"line\"><span class=\"comment\">// 这个位置在下一步要创建 FiberRoot</span></span><br><span class=\"line\"><span class=\"comment\">// 5. 把容器返回出去</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在根节点<code>FiberRootNode</code>创建好了，最后<code>root</code>的打印结果：</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2e66c458853aef8a195c.jpg\" alt=\"FiberRootNode\"></p>\n<h4 id=\"fiber\"><a href=\"#fiber\" class=\"headerlink\" title=\"fiber\"></a>fiber</h4><p>在创建根fiber之前先了解一下fiber</p>\n<h4 id=\"为什么需要有fiber？\"><a href=\"#为什么需要有fiber？\" class=\"headerlink\" title=\"为什么需要有fiber？\"></a>为什么需要有fiber？</h4><ul>\n<li>react以前没有fiber整个计算过程不能暂停，会导致时间过长</li>\n<li>浏览器刷新频率为 60Hz,大概 16.6 毫秒渲染一次，而 JS 线程和渲染线程是互斥的，所以如果 JS 线程执行任务时间超过 16.6ms 的话，就会导致掉帧、卡顿，解决方案就是 React 利用空闲的时间进行更新，不影响渲染进行的渲染</li>\n<li>把一个耗时任务切分成一个个小任务，分布在每一帧里。这个的方式就叫时间切片</li>\n</ul>\n<p>我们需要把渲染变成一个可中断，可暂停，可恢复的过程。<br>注：可以去搜一下 requestIdleCallback API ，react封装了一个类似的方法让每帧时间固定 5ms。</p>\n<h4 id=\"什么是fiber？\"><a href=\"#什么是fiber？\" class=\"headerlink\" title=\"什么是fiber？\"></a>什么是fiber？</h4><ul>\n<li><p>Fiber 是一个执行单元</p>\n<p>  Fiber 是一个执行单元,每次执行完一个执行单元，React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去。</p>\n<p>  react 中一帧的过程：</p>\n<p>  <img src=\"https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg\" alt=\"react 中一帧的过程\"></p>\n</li>\n<li><p>Fiber 是一种数据结构<br>  React 目前的做法是使用链表, 每个虚拟节点内部表示为一个Fiber<br>  从顶点开始遍历<br>  如果有第一个儿子，先遍历第一个儿子<br>  如果没有第一个儿子，标志着此节点遍历完成<br>  如果有弟弟遍历弟弟<br>  如果有没有下一个弟弟，返回父节点标识完成父节点遍历，如果有叔叔遍历叔叔<br>  没有父节点遍历结束</p>\n<p>  遍历结构：<br>  <img src=\"https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg\" alt=\"遍历结构\"></p>\n<p>  遍历过程：<br>  <img src=\"https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg\" alt=\"遍历过程\"></p>\n</li>\n</ul>\n<h4 id=\"创建根fiber\"><a href=\"#创建根fiber\" class=\"headerlink\" title=\"创建根fiber\"></a>创建根fiber</h4><p>真实DOM需要一个根容器，<code>fiber</code>同样需要一个根<code>fiber</code>。</p>\n<p>相当于每个虚拟DOM都会创建一个对应的<code>Fiber</code>，再创建真实DOM</p>\n<p>虚拟DOM &#x3D;&gt; Fiber &#x3D;&gt; 真实DOM</p>\n<p>在刚刚创建FiberRootNode的函数里去创建<code>HostRootFiber</code>并互相指向对方。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"根节点和`fiber`关系\"></p>\n<ol>\n<li>ReactFiberRoot.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createHostRootFiber &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiber&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberRootNode</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">containerInfo</span> = containerInfo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberRoot</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 之前创建的根节点容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">FiberRootNode</span>(containerInfo);</span><br><span class=\"line\"><span class=\"comment\">// 1. 创建根fiber. hostRoot就是根节点dev#root</span></span><br><span class=\"line\"><span class=\"comment\">// 未初始化的fiber</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uninitializedFiber = <span class=\"title function_\">createHostRootFiber</span>();</span><br><span class=\"line\"><span class=\"comment\">// 当前渲染页面的fiber.</span></span><br><span class=\"line\"><span class=\"comment\">// 6. 根容器的current指向当前的根fiber</span></span><br><span class=\"line\">root.<span class=\"property\">current</span> = uninitializedFiber;</span><br><span class=\"line\">uninitializedFiber.<span class=\"property\">stateNode</span> = root;</span><br><span class=\"line\"><span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>ReactFiber.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. 工作标签</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HostRoot</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactWorkTags&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 5. 副作用标识</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NoFlags</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberFlags&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">FiberNode</span>(<span class=\"params\">tag, pendingProps, key</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// fiber类型, 来自于虚拟DOM节点的type   (span h1 p)</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">stateNode</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 此fiber对应的真实DOM节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">return</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向父节点</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">child</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向第一个子节点</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">sibling</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向弟弟</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">pendingProps</span> = pendingProps; <span class=\"comment\">// 等待生效的属性</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">memoizedProps</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 已经生效的属性</span></span><br><span class=\"line\"><span class=\"comment\">// 虚拟DOM会提供pendingProps给创建fiber的属性，等处理完复制给memoizedProps</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个fiber还会有自己的状态，每一种fiber状态存的类型都不一样</span></span><br><span class=\"line\"><span class=\"comment\">// 比如：类组件对应的fiber存的就是实例的状态，HostRoot存的就是要渲染的元素</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">memoizedState</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个fiber可能还有自己的更新队列</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">updateQueue</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5. &quot;./ReactFiberFlags&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">flags</span> = <span class=\"title class_\">NoFlags</span>; <span class=\"comment\">// 副作用标识，表示对此fiber节点进行何种操作</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">subtreeFlags</span> = <span class=\"title class_\">NoFlags</span>; <span class=\"comment\">// 子节点对应的副作用标识</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 轮替 (缓存了另一个fiber节点实例) diff时用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberNode</span>(<span class=\"params\">tag, pendingProps, key</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FiberNode</span>(tag, pendingProps, key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createHostRootFiber</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">createFiberNode</span>(<span class=\"title class_\">HostRoot</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>ReactWorkTags.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每种虚拟DOM都会对应自己的fiber的类型</span></span><br><span class=\"line\"><span class=\"comment\">// 根Fiber的Tag</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostRoot</span> = <span class=\"number\">3</span>; <span class=\"comment\">// 根节点</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostComponent</span> = <span class=\"number\">5</span>; <span class=\"comment\">// 原生节点 span div p</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostText</span> = <span class=\"number\">6</span>; <span class=\"comment\">// 纯文本节点</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>ReactFiberFlags.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没有任何操作</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">NoFlags</span> = <span class=\"number\">0b000000000000000000000000000000</span>;</span><br><span class=\"line\"><span class=\"comment\">// 插入</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Placement</span> = <span class=\"number\">0b000000000000000000000000000010</span>;</span><br><span class=\"line\"><span class=\"comment\">// 更新</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Update</span> = <span class=\"number\">0b000000000000000000000000000100</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>看最后root的打印结果：根fiber和节点容器互相指向</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b5beac458853aef1a1a12.jpg\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/fiber.html","/react/fiber/implement.html","/react/fiber/works.html","/react/synthetic/event.html","/react/fiber/node.html"],"length":5890,"excerpt":"","more":"<h3 id=\"实现jsx\"><a href=\"#实现jsx\" class=\"headerlink\" title=\"实现jsx\"></a>实现jsx</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> element = (</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &quot;<span class=\"attr\">red</span>&quot; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译后\"><a href=\"#编译后\" class=\"headerlink\" title=\"编译后\"></a>编译后</h3><p><img src=\"https://pic.imgdb.cn/item/653b2718c458853aef75775a.jpg\" alt=\"jsx 编译之后\"></p>\n<h3 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h3><ol>\n<li>jsx-dev-runtime.js</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; jsxDEV &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./jsx/ReactJSXElement&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>ReactJSXElement.js</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hasOwnProperty <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../shared/hasOwnProperty&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dom 类型</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>  &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../shared/ReactSymbols&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RESERVED_PROPS</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">key</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">ref</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">__self</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">__source</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasValidKey</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config.<span class=\"property\">key</span> !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasValidRef</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config.<span class=\"property\">ref</span> !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ReactElement 创建</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReactElement</span>(<span class=\"params\">type, key, ref, props, owner</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个标签允许我们唯一地将其标识为React元素</span></span><br><span class=\"line\">        <span class=\"attr\">$$typeof</span>: <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>,</span><br><span class=\"line\">        type,</span><br><span class=\"line\">        key,</span><br><span class=\"line\">        ref,</span><br><span class=\"line\">        props,</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">jsxDEV</span>(<span class=\"params\">type, config</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提取保留名称</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> props = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ref = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">hasValidKey</span>(config)) &#123;</span><br><span class=\"line\">        key = config.<span class=\"property\">key</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">hasValidRef</span>(config)) &#123;</span><br><span class=\"line\">        ref = config.<span class=\"property\">ref</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> propName <span class=\"keyword\">in</span> config) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hasOwnProperty.<span class=\"title function_\">call</span>(config, propName) &amp;&amp;</span><br><span class=\"line\">        !<span class=\"variable constant_\">RESERVED_PROPS</span>.<span class=\"title function_\">hasOwnProperty</span>(propName)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            props[propName] = config[propName];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">ReactElement</span>(type, key, ref, props)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>hasOwnProperty.js</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; hasOwnProperty &#125; = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> hasOwnProperty;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>ReactSymbols.js</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于标记类似 ReactElement 类型的符号。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span> = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;react.element&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"根节点和根fiber\"><a href=\"#根节点和根fiber\" class=\"headerlink\" title=\"根节点和根fiber\"></a>根节点和根fiber</h3><ul>\n<li>需要给react提供一个根节点，之后每个节点都是渲染在根节点内部的。</li>\n</ul>\n<p><code>const root = createRoot(document.getElementById(&#39;root&#39;))</code></p>\n<ul>\n<li>根fiber可以通俗理解为一个装着所有虚拟dom的容器，每个虚拟dom又单独对应一个fiber，</li>\n<li>渲染可以以单个fiber为单位暂停 &#x2F; 恢复。</li>\n<li>需要创建两个根 <code>fiber</code> 去相互替换展示。</li>\n</ul>\n<h4 id=\"创建根节点\"><a href=\"#创建根节点\" class=\"headerlink\" title=\"创建根节点\"></a>创建根节点</h4><p>更改main.jsx</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom/client&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> element = (</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">red</span>&#x27; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(root)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>首先要建一个<code>FiberRootNode</code>根节点，也就是所有DOM的根，本质就是 <code>div#root</code>。</p>\n<p>根节点和<code>fiber</code>关系：</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"根节点和`fiber`关系\"></p>\n<p><code>FiberRootNode</code> 和 <code>HostRootFiber</code> 中间使用 <code>current</code> 相连；</p>\n<p><code>HostRootFiber</code> 和 <code>FiberRootNode</code> 中间使用 <code>stateNode</code> 相连。</p>\n<h4 id=\"实现createRoot\"><a href=\"#实现createRoot\" class=\"headerlink\" title=\"实现createRoot\"></a>实现createRoot</h4><p>分这么多文件的主要是因为很多其他逻辑要处理，暂时都给省略了。虽然比较绕，但其实本质就是把<code>div#root</code>做了几层包装。</p>\n<ol>\n<li>client.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./src/client/ReactDOMRoot&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>ReactDOMRoot.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-reconciler/src/ReactFiberReconciler&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReactDOMRoot</span>(<span class=\"params\">internalRoot</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">_internalRoot</span> = internalRoot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 创建一个根 实际就是一个被包装过的真实DOM节点</span></span><br><span class=\"line\"><span class=\"comment\">// container: div#root</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createRoot</span>(<span class=\"params\">container</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. 创建容器   6. 接收到有#root的容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createContainer</span>(container);</span><br><span class=\"line\"><span class=\"comment\">// 7. 容器传给 ReactDOMRoot</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReactDOMRoot</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>ReactFiberReconciler.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createFiberRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberRoot&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 创建容器 containerInfo: 容器信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createContainer</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">createFiberRoot</span>(containerInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>ReactFiberRoot.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberRootNode</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 4. 把DOM节点放到容器</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">containerInfo</span> = containerInfo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberRoot</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 3. 创建根容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">FiberRootNode</span>(containerInfo);</span><br><span class=\"line\"><span class=\"comment\">// 这个位置在下一步要创建 FiberRoot</span></span><br><span class=\"line\"><span class=\"comment\">// 5. 把容器返回出去</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在根节点<code>FiberRootNode</code>创建好了，最后<code>root</code>的打印结果：</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2e66c458853aef8a195c.jpg\" alt=\"FiberRootNode\"></p>\n<h4 id=\"fiber\"><a href=\"#fiber\" class=\"headerlink\" title=\"fiber\"></a>fiber</h4><p>在创建根fiber之前先了解一下fiber</p>\n<h4 id=\"为什么需要有fiber？\"><a href=\"#为什么需要有fiber？\" class=\"headerlink\" title=\"为什么需要有fiber？\"></a>为什么需要有fiber？</h4><ul>\n<li>react以前没有fiber整个计算过程不能暂停，会导致时间过长</li>\n<li>浏览器刷新频率为 60Hz,大概 16.6 毫秒渲染一次，而 JS 线程和渲染线程是互斥的，所以如果 JS 线程执行任务时间超过 16.6ms 的话，就会导致掉帧、卡顿，解决方案就是 React 利用空闲的时间进行更新，不影响渲染进行的渲染</li>\n<li>把一个耗时任务切分成一个个小任务，分布在每一帧里。这个的方式就叫时间切片</li>\n</ul>\n<p>我们需要把渲染变成一个可中断，可暂停，可恢复的过程。<br>注：可以去搜一下 requestIdleCallback API ，react封装了一个类似的方法让每帧时间固定 5ms。</p>\n<h4 id=\"什么是fiber？\"><a href=\"#什么是fiber？\" class=\"headerlink\" title=\"什么是fiber？\"></a>什么是fiber？</h4><ul>\n<li><p>Fiber 是一个执行单元</p>\n<p>  Fiber 是一个执行单元,每次执行完一个执行单元，React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去。</p>\n<p>  react 中一帧的过程：</p>\n<p>  <img src=\"https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg\" alt=\"react 中一帧的过程\"></p>\n</li>\n<li><p>Fiber 是一种数据结构<br>  React 目前的做法是使用链表, 每个虚拟节点内部表示为一个Fiber<br>  从顶点开始遍历<br>  如果有第一个儿子，先遍历第一个儿子<br>  如果没有第一个儿子，标志着此节点遍历完成<br>  如果有弟弟遍历弟弟<br>  如果有没有下一个弟弟，返回父节点标识完成父节点遍历，如果有叔叔遍历叔叔<br>  没有父节点遍历结束</p>\n<p>  遍历结构：<br>  <img src=\"https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg\" alt=\"遍历结构\"></p>\n<p>  遍历过程：<br>  <img src=\"https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg\" alt=\"遍历过程\"></p>\n</li>\n</ul>\n<h4 id=\"创建根fiber\"><a href=\"#创建根fiber\" class=\"headerlink\" title=\"创建根fiber\"></a>创建根fiber</h4><p>真实DOM需要一个根容器，<code>fiber</code>同样需要一个根<code>fiber</code>。</p>\n<p>相当于每个虚拟DOM都会创建一个对应的<code>Fiber</code>，再创建真实DOM</p>\n<p>虚拟DOM &#x3D;&gt; Fiber &#x3D;&gt; 真实DOM</p>\n<p>在刚刚创建FiberRootNode的函数里去创建<code>HostRootFiber</code>并互相指向对方。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"根节点和`fiber`关系\"></p>\n<ol>\n<li>ReactFiberRoot.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createHostRootFiber &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiber&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberRootNode</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">containerInfo</span> = containerInfo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberRoot</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 之前创建的根节点容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">FiberRootNode</span>(containerInfo);</span><br><span class=\"line\"><span class=\"comment\">// 1. 创建根fiber. hostRoot就是根节点dev#root</span></span><br><span class=\"line\"><span class=\"comment\">// 未初始化的fiber</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uninitializedFiber = <span class=\"title function_\">createHostRootFiber</span>();</span><br><span class=\"line\"><span class=\"comment\">// 当前渲染页面的fiber.</span></span><br><span class=\"line\"><span class=\"comment\">// 6. 根容器的current指向当前的根fiber</span></span><br><span class=\"line\">root.<span class=\"property\">current</span> = uninitializedFiber;</span><br><span class=\"line\">uninitializedFiber.<span class=\"property\">stateNode</span> = root;</span><br><span class=\"line\"><span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>ReactFiber.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. 工作标签</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HostRoot</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactWorkTags&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 5. 副作用标识</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NoFlags</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberFlags&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">FiberNode</span>(<span class=\"params\">tag, pendingProps, key</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// fiber类型, 来自于虚拟DOM节点的type   (span h1 p)</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">stateNode</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 此fiber对应的真实DOM节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">return</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向父节点</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">child</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向第一个子节点</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">sibling</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向弟弟</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">pendingProps</span> = pendingProps; <span class=\"comment\">// 等待生效的属性</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">memoizedProps</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 已经生效的属性</span></span><br><span class=\"line\"><span class=\"comment\">// 虚拟DOM会提供pendingProps给创建fiber的属性，等处理完复制给memoizedProps</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个fiber还会有自己的状态，每一种fiber状态存的类型都不一样</span></span><br><span class=\"line\"><span class=\"comment\">// 比如：类组件对应的fiber存的就是实例的状态，HostRoot存的就是要渲染的元素</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">memoizedState</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个fiber可能还有自己的更新队列</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">updateQueue</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5. &quot;./ReactFiberFlags&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">flags</span> = <span class=\"title class_\">NoFlags</span>; <span class=\"comment\">// 副作用标识，表示对此fiber节点进行何种操作</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">subtreeFlags</span> = <span class=\"title class_\">NoFlags</span>; <span class=\"comment\">// 子节点对应的副作用标识</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 轮替 (缓存了另一个fiber节点实例) diff时用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberNode</span>(<span class=\"params\">tag, pendingProps, key</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FiberNode</span>(tag, pendingProps, key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createHostRootFiber</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">createFiberNode</span>(<span class=\"title class_\">HostRoot</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>ReactWorkTags.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每种虚拟DOM都会对应自己的fiber的类型</span></span><br><span class=\"line\"><span class=\"comment\">// 根Fiber的Tag</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostRoot</span> = <span class=\"number\">3</span>; <span class=\"comment\">// 根节点</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostComponent</span> = <span class=\"number\">5</span>; <span class=\"comment\">// 原生节点 span div p</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostText</span> = <span class=\"number\">6</span>; <span class=\"comment\">// 纯文本节点</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>ReactFiberFlags.js</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没有任何操作</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">NoFlags</span> = <span class=\"number\">0b000000000000000000000000000000</span>;</span><br><span class=\"line\"><span class=\"comment\">// 插入</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Placement</span> = <span class=\"number\">0b000000000000000000000000000010</span>;</span><br><span class=\"line\"><span class=\"comment\">// 更新</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Update</span> = <span class=\"number\">0b000000000000000000000000000100</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>看最后root的打印结果：根fiber和节点容器互相指向</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b5beac458853aef1a1a12.jpg\"></p>\n"},{"title":"网络劫持有哪几种，如何防范？","date":"2023-10-21T14:06:18.000Z","description":"网路劫持可以导致非常严重是信息泄露或者信息被恶意篡改等，DNS 劫持由于涉嫌违法，已经被监管起来。","comments":1,"_content":"\n##### ⽹络劫持\n1. DNS 劫持: (输⼊京东被强制跳转到淘宝这就属于dns 劫持)\n- DNS 强制解析: 通过修改运营商的本地 DNS 记录，来引导⽤户流量到缓存服务器\n- 302 跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302 跳转的回复，引导⽤户获取内容\n2. HTTP 劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的 http 响应内容(即加⼴告)\n\n##### 如何防范网络劫持？\nDNS 劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http 劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP 加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。\n\n网络劫持指的是网络中的某个节点对数据进行恶意篡改和篡改，以达到非法获取用户信息或者控制用户设备的目的。以下是预防网络劫持的几个方法：\n\n1. 使用HTTPS：HTTPS是一个安全的协议，对通信进行加密和身份验证，防止劫持者对数据进行篡改。使用HTTPS之前，可以使用SSL证书来验证服务器的身份。\n\n2. 使用VPN：VPN可以加密数据并建立一个虚拟私人网络，从而保护用户的数据和隐私。使用VPN可以防止网络劫持和嗅探攻击。\n\n3. 使用防火墙和反病毒软件：网络劫持者可能会通过恶意软件或病毒对用户设备进行攻击，使用防火墙和反病毒软件可以防止这种攻击。\n\n4. 更新操作系统和软件程序：最新版本的操作系统和软件程序通常包含了修复安全漏洞的补丁。不定期更新操作系统和软件程序可以减少遭受网络攻击的风险。\n\n5. 警惕钓鱼网站和不安全的链接：劫持者可能会伪造合法的网站或链接，引导用户向其提供个人信息或下载恶意软件。不要轻信不安全的链接，要时刻保持警惕。","source":"_posts/browser/networkHijack.md","raw":"---\ntitle: 网络劫持有哪几种，如何防范？\npermalink: /browser/network/hijack.html\ndate: 2023-10-21 22:06:18\ndescription: 网路劫持可以导致非常严重是信息泄露或者信息被恶意篡改等，DNS 劫持由于涉嫌违法，已经被监管起来。\ntag: [前端, 浏览器, 网路安全]\ncomments: true\ncategories: \n - 浏览器\n - 网路安全\n---\n\n##### ⽹络劫持\n1. DNS 劫持: (输⼊京东被强制跳转到淘宝这就属于dns 劫持)\n- DNS 强制解析: 通过修改运营商的本地 DNS 记录，来引导⽤户流量到缓存服务器\n- 302 跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302 跳转的回复，引导⽤户获取内容\n2. HTTP 劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的 http 响应内容(即加⼴告)\n\n##### 如何防范网络劫持？\nDNS 劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http 劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP 加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。\n\n网络劫持指的是网络中的某个节点对数据进行恶意篡改和篡改，以达到非法获取用户信息或者控制用户设备的目的。以下是预防网络劫持的几个方法：\n\n1. 使用HTTPS：HTTPS是一个安全的协议，对通信进行加密和身份验证，防止劫持者对数据进行篡改。使用HTTPS之前，可以使用SSL证书来验证服务器的身份。\n\n2. 使用VPN：VPN可以加密数据并建立一个虚拟私人网络，从而保护用户的数据和隐私。使用VPN可以防止网络劫持和嗅探攻击。\n\n3. 使用防火墙和反病毒软件：网络劫持者可能会通过恶意软件或病毒对用户设备进行攻击，使用防火墙和反病毒软件可以防止这种攻击。\n\n4. 更新操作系统和软件程序：最新版本的操作系统和软件程序通常包含了修复安全漏洞的补丁。不定期更新操作系统和软件程序可以减少遭受网络攻击的风险。\n\n5. 警惕钓鱼网站和不安全的链接：劫持者可能会伪造合法的网站或链接，引导用户向其提供个人信息或下载恶意软件。不要轻信不安全的链接，要时刻保持警惕。","slug":"browser/networkHijack","published":1,"updated":"2023-10-21T14:06:20.298Z","__permalink":"/browser/network/hijack.html","layout":"post","photos":[],"link":"","_id":"clo8nc4b40000g0uohtml5e5q","content":"<div id=\"vip-container\"><h5 id=\"⽹络劫持\"><a href=\"#⽹络劫持\" class=\"headerlink\" title=\"⽹络劫持\"></a>⽹络劫持</h5><ol>\n<li>DNS 劫持: (输⼊京东被强制跳转到淘宝这就属于dns 劫持)</li>\n</ol>\n<ul>\n<li>DNS 强制解析: 通过修改运营商的本地 DNS 记录，来引导⽤户流量到缓存服务器</li>\n<li>302 跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302 跳转的回复，引导⽤户获取内容</li>\n</ul>\n<ol start=\"2\">\n<li>HTTP 劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的 http 响应内容(即加⼴告)</li>\n</ol>\n<h5 id=\"如何防范网络劫持？\"><a href=\"#如何防范网络劫持？\" class=\"headerlink\" title=\"如何防范网络劫持？\"></a>如何防范网络劫持？</h5><p>DNS 劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http 劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP 加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。</p>\n<p>网络劫持指的是网络中的某个节点对数据进行恶意篡改和篡改，以达到非法获取用户信息或者控制用户设备的目的。以下是预防网络劫持的几个方法：</p>\n<ol>\n<li><p>使用HTTPS：HTTPS是一个安全的协议，对通信进行加密和身份验证，防止劫持者对数据进行篡改。使用HTTPS之前，可以使用SSL证书来验证服务器的身份。</p>\n</li>\n<li><p>使用VPN：VPN可以加密数据并建立一个虚拟私人网络，从而保护用户的数据和隐私。使用VPN可以防止网络劫持和嗅探攻击。</p>\n</li>\n<li><p>使用防火墙和反病毒软件：网络劫持者可能会通过恶意软件或病毒对用户设备进行攻击，使用防火墙和反病毒软件可以防止这种攻击。</p>\n</li>\n<li><p>更新操作系统和软件程序：最新版本的操作系统和软件程序通常包含了修复安全漏洞的补丁。不定期更新操作系统和软件程序可以减少遭受网络攻击的风险。</p>\n</li>\n<li><p>警惕钓鱼网站和不安全的链接：劫持者可能会伪造合法的网站或链接，引导用户向其提供个人信息或下载恶意软件。不要轻信不安全的链接，要时刻保持警惕。</p>\n</li>\n</ol>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":699,"excerpt":"","more":"<h5 id=\"⽹络劫持\"><a href=\"#⽹络劫持\" class=\"headerlink\" title=\"⽹络劫持\"></a>⽹络劫持</h5><ol>\n<li>DNS 劫持: (输⼊京东被强制跳转到淘宝这就属于dns 劫持)</li>\n</ol>\n<ul>\n<li>DNS 强制解析: 通过修改运营商的本地 DNS 记录，来引导⽤户流量到缓存服务器</li>\n<li>302 跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302 跳转的回复，引导⽤户获取内容</li>\n</ul>\n<ol start=\"2\">\n<li>HTTP 劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的 http 响应内容(即加⼴告)</li>\n</ol>\n<h5 id=\"如何防范网络劫持？\"><a href=\"#如何防范网络劫持？\" class=\"headerlink\" title=\"如何防范网络劫持？\"></a>如何防范网络劫持？</h5><p>DNS 劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http 劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP 加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。</p>\n<p>网络劫持指的是网络中的某个节点对数据进行恶意篡改和篡改，以达到非法获取用户信息或者控制用户设备的目的。以下是预防网络劫持的几个方法：</p>\n<ol>\n<li><p>使用HTTPS：HTTPS是一个安全的协议，对通信进行加密和身份验证，防止劫持者对数据进行篡改。使用HTTPS之前，可以使用SSL证书来验证服务器的身份。</p>\n</li>\n<li><p>使用VPN：VPN可以加密数据并建立一个虚拟私人网络，从而保护用户的数据和隐私。使用VPN可以防止网络劫持和嗅探攻击。</p>\n</li>\n<li><p>使用防火墙和反病毒软件：网络劫持者可能会通过恶意软件或病毒对用户设备进行攻击，使用防火墙和反病毒软件可以防止这种攻击。</p>\n</li>\n<li><p>更新操作系统和软件程序：最新版本的操作系统和软件程序通常包含了修复安全漏洞的补丁。不定期更新操作系统和软件程序可以减少遭受网络攻击的风险。</p>\n</li>\n<li><p>警惕钓鱼网站和不安全的链接：劫持者可能会伪造合法的网站或链接，引导用户向其提供个人信息或下载恶意软件。不要轻信不安全的链接，要时刻保持警惕。</p>\n</li>\n</ol>\n"},{"title":"RESTful和RPC的区别","date":"2023-10-21T06:31:03.000Z","description":"RESTful是一种基于HTTP协议，通过URL、HTTP方法和参数等方式来访问和操作资源的设计风格和架构方法。它是一种轻量级的、高效的、无状态的Web服务架构，可以用于设计和开发各种类型的Web应用程序和分布式系统。","comments":1,"_content":"\n#### RESTful  \n\nRESTful是一种基于HTTP协议，通过URL、HTTP方法和参数等方式来访问和操作资源的设计风格和架构方法。它是一种轻量级的、高效的、无状态的Web服务架构，可以用于设计和开发各种类型的Web应用程序和分布式系统。\n\nRESTful的核心思想是资源的定义和管理，将系统中的资源抽象为一组URI（统一资源标识符），通过HTTP方法来对资源进行访问和操作。常用的HTTP方法有GET、POST、PUT、DELETE等，它们分别对应着资源的查询、新增、更新和删除操作。\n\nRESTful的优势在于它简单、灵活、可伸缩、易于维护和扩展。它采用标准的HTTP协议和常见的数据格式（如JSON、XML等），使得开发人员可以快速地开发出高效、可靠的Web服务，并且可以方便地与其他系统进行集成和交互。\n\n#### RPC（Remote Procedure Call）\n\nRPC（Remote Procedure Call）即远程过程调用，是一种分布式系统中的通信协议。RPC允许一个程序在另一个计算机上运行的程序请求服务，而不需要了解底层网络细节，就像本地调用一样。\n\nRPC的原理是客户端发送请求给服务端，服务端执行相应的操作并返回结果给客户端。RPC框架隐藏了底层的网络细节和通信协议，使得开发者可以像使用本地函数一样方便地调用远程函数。\n\nRPC的优势在于它提供了高效、简单、可靠的远程调用机制，使得分布式系统开发更加便捷。同时，RPC框架支持多种编程语言和跨平台，使得开发者可以使用不同的编程语言和技术栈来实现分布式系统。一些常用的RPC框架有gRPC、Apache Thrift、Dubbo等。\n\n#### RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\n\n1. ##### 设计理念：\n\n    - RESTful：是基于HTTP协议设计的，着重于资源的定义和管理，通过URL、HTTP方法和参数等方式进行资源的访问和操作。\n\n    - RPC：是基于函数调用的，着重于接口的定义和数据传输格式的规范，通过序列化和反序列化来实现远程调用。\n\n2. ##### 通信协议：\n\n    - RESTful：使用HTTP协议进行通信，支持GET、POST、PUT、DELETE等HTTP方法。\n\n    - RPC：使用自定义的协议进行通信，可以使用TCP、UDP等网络协议，也可以使用HTTP作为传输协议。\n\n3. ##### 数据传输格式：\n\n    - RESTful：通常使用JSON、XML等文本格式进行数据传输。\n\n    - RPC：通常使用二进制格式进行数据传输，传输效率更高。\n\n4. ##### 调用方式：\n\n    - RESTful：通过HTTP方法进行资源的访问和操作，支持无状态的请求，可以使用缓存等机制提高性能和可伸缩性。\n\n    - RPC：通过函数调用进行接口的访问和操作，需要保持请求和响应之间的状态，不支持缓存等机制。\n\n综上所述，RESTful更加适用于Web应用程序和分布式系统的开发，而RPC更加适用于高性能和低延迟的系统调用。","source":"_posts/browser/restFulAndRPC.md","raw":"---\ntitle: RESTful和RPC的区别\npermalink: /browser/restful/and/rpc.html\ndate: 2023-10-21 14:31:03\ndescription: RESTful是一种基于HTTP协议，通过URL、HTTP方法和参数等方式来访问和操作资源的设计风格和架构方法。它是一种轻量级的、高效的、无状态的Web服务架构，可以用于设计和开发各种类型的Web应用程序和分布式系统。\ntag: [前端, 浏览器, RESTful, RPC, HTTP]\ncomments: true\ncategories: \n - 浏览器\n - 协议\n---\n\n#### RESTful  \n\nRESTful是一种基于HTTP协议，通过URL、HTTP方法和参数等方式来访问和操作资源的设计风格和架构方法。它是一种轻量级的、高效的、无状态的Web服务架构，可以用于设计和开发各种类型的Web应用程序和分布式系统。\n\nRESTful的核心思想是资源的定义和管理，将系统中的资源抽象为一组URI（统一资源标识符），通过HTTP方法来对资源进行访问和操作。常用的HTTP方法有GET、POST、PUT、DELETE等，它们分别对应着资源的查询、新增、更新和删除操作。\n\nRESTful的优势在于它简单、灵活、可伸缩、易于维护和扩展。它采用标准的HTTP协议和常见的数据格式（如JSON、XML等），使得开发人员可以快速地开发出高效、可靠的Web服务，并且可以方便地与其他系统进行集成和交互。\n\n#### RPC（Remote Procedure Call）\n\nRPC（Remote Procedure Call）即远程过程调用，是一种分布式系统中的通信协议。RPC允许一个程序在另一个计算机上运行的程序请求服务，而不需要了解底层网络细节，就像本地调用一样。\n\nRPC的原理是客户端发送请求给服务端，服务端执行相应的操作并返回结果给客户端。RPC框架隐藏了底层的网络细节和通信协议，使得开发者可以像使用本地函数一样方便地调用远程函数。\n\nRPC的优势在于它提供了高效、简单、可靠的远程调用机制，使得分布式系统开发更加便捷。同时，RPC框架支持多种编程语言和跨平台，使得开发者可以使用不同的编程语言和技术栈来实现分布式系统。一些常用的RPC框架有gRPC、Apache Thrift、Dubbo等。\n\n#### RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\n\n1. ##### 设计理念：\n\n    - RESTful：是基于HTTP协议设计的，着重于资源的定义和管理，通过URL、HTTP方法和参数等方式进行资源的访问和操作。\n\n    - RPC：是基于函数调用的，着重于接口的定义和数据传输格式的规范，通过序列化和反序列化来实现远程调用。\n\n2. ##### 通信协议：\n\n    - RESTful：使用HTTP协议进行通信，支持GET、POST、PUT、DELETE等HTTP方法。\n\n    - RPC：使用自定义的协议进行通信，可以使用TCP、UDP等网络协议，也可以使用HTTP作为传输协议。\n\n3. ##### 数据传输格式：\n\n    - RESTful：通常使用JSON、XML等文本格式进行数据传输。\n\n    - RPC：通常使用二进制格式进行数据传输，传输效率更高。\n\n4. ##### 调用方式：\n\n    - RESTful：通过HTTP方法进行资源的访问和操作，支持无状态的请求，可以使用缓存等机制提高性能和可伸缩性。\n\n    - RPC：通过函数调用进行接口的访问和操作，需要保持请求和响应之间的状态，不支持缓存等机制。\n\n综上所述，RESTful更加适用于Web应用程序和分布式系统的开发，而RPC更加适用于高性能和低延迟的系统调用。","slug":"browser/restFulAndRPC","published":1,"updated":"2023-10-21T13:55:16.858Z","__permalink":"/browser/restful/and/rpc.html","layout":"post","photos":[],"link":"","_id":"clo8nc4b70001g0uodqgtcugw","content":"<div id=\"vip-container\"><h4 id=\"RESTful\"><a href=\"#RESTful\" class=\"headerlink\" title=\"RESTful\"></a>RESTful</h4><p>RESTful是一种基于HTTP协议，通过URL、HTTP方法和参数等方式来访问和操作资源的设计风格和架构方法。它是一种轻量级的、高效的、无状态的Web服务架构，可以用于设计和开发各种类型的Web应用程序和分布式系统。</p>\n<p>RESTful的核心思想是资源的定义和管理，将系统中的资源抽象为一组URI（统一资源标识符），通过HTTP方法来对资源进行访问和操作。常用的HTTP方法有GET、POST、PUT、DELETE等，它们分别对应着资源的查询、新增、更新和删除操作。</p>\n<p>RESTful的优势在于它简单、灵活、可伸缩、易于维护和扩展。它采用标准的HTTP协议和常见的数据格式（如JSON、XML等），使得开发人员可以快速地开发出高效、可靠的Web服务，并且可以方便地与其他系统进行集成和交互。</p>\n<h4 id=\"RPC（Remote-Procedure-Call）\"><a href=\"#RPC（Remote-Procedure-Call）\" class=\"headerlink\" title=\"RPC（Remote Procedure Call）\"></a>RPC（Remote Procedure Call）</h4><p>RPC（Remote Procedure Call）即远程过程调用，是一种分布式系统中的通信协议。RPC允许一个程序在另一个计算机上运行的程序请求服务，而不需要了解底层网络细节，就像本地调用一样。</p>\n<p>RPC的原理是客户端发送请求给服务端，服务端执行相应的操作并返回结果给客户端。RPC框架隐藏了底层的网络细节和通信协议，使得开发者可以像使用本地函数一样方便地调用远程函数。</p>\n<p>RPC的优势在于它提供了高效、简单、可靠的远程调用机制，使得分布式系统开发更加便捷。同时，RPC框架支持多种编程语言和跨平台，使得开发者可以使用不同的编程语言和技术栈来实现分布式系统。一些常用的RPC框架有gRPC、Apache Thrift、Dubbo等。</p>\n<h4 id=\"RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\"><a href=\"#RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\" class=\"headerlink\" title=\"RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\"></a>RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：</h4><ol>\n<li><h5 id=\"设计理念：\"><a href=\"#设计理念：\" class=\"headerlink\" title=\"设计理念：\"></a>设计理念：</h5><ul>\n<li><p>RESTful：是基于HTTP协议设计的，着重于资源的定义和管理，通过URL、HTTP方法和参数等方式进行资源的访问和操作。</p>\n</li>\n<li><p>RPC：是基于函数调用的，着重于接口的定义和数据传输格式的规范，通过序列化和反序列化来实现远程调用。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"通信协议：\"><a href=\"#通信协议：\" class=\"headerlink\" title=\"通信协议：\"></a>通信协议：</h5><ul>\n<li><p>RESTful：使用HTTP协议进行通信，支持GET、POST、PUT、DELETE等HTTP方法。</p>\n</li>\n<li><p>RPC：使用自定义的协议进行通信，可以使用TCP、UDP等网络协议，也可以使用HTTP作为传输协议。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"数据传输格式：\"><a href=\"#数据传输格式：\" class=\"headerlink\" title=\"数据传输格式：\"></a>数据传输格式：</h5><ul>\n<li><p>RESTful：通常使用JSON、XML等文本格式进行数据传输。</p>\n</li>\n<li><p>RPC：通常使用二进制格式进行数据传输，传输效率更高。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"调用方式：\"><a href=\"#调用方式：\" class=\"headerlink\" title=\"调用方式：\"></a>调用方式：</h5><ul>\n<li><p>RESTful：通过HTTP方法进行资源的访问和操作，支持无状态的请求，可以使用缓存等机制提高性能和可伸缩性。</p>\n</li>\n<li><p>RPC：通过函数调用进行接口的访问和操作，需要保持请求和响应之间的状态，不支持缓存等机制。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>综上所述，RESTful更加适用于Web应用程序和分布式系统的开发，而RPC更加适用于高性能和低延迟的系统调用。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":1171,"excerpt":"","more":"<h4 id=\"RESTful\"><a href=\"#RESTful\" class=\"headerlink\" title=\"RESTful\"></a>RESTful</h4><p>RESTful是一种基于HTTP协议，通过URL、HTTP方法和参数等方式来访问和操作资源的设计风格和架构方法。它是一种轻量级的、高效的、无状态的Web服务架构，可以用于设计和开发各种类型的Web应用程序和分布式系统。</p>\n<p>RESTful的核心思想是资源的定义和管理，将系统中的资源抽象为一组URI（统一资源标识符），通过HTTP方法来对资源进行访问和操作。常用的HTTP方法有GET、POST、PUT、DELETE等，它们分别对应着资源的查询、新增、更新和删除操作。</p>\n<p>RESTful的优势在于它简单、灵活、可伸缩、易于维护和扩展。它采用标准的HTTP协议和常见的数据格式（如JSON、XML等），使得开发人员可以快速地开发出高效、可靠的Web服务，并且可以方便地与其他系统进行集成和交互。</p>\n<h4 id=\"RPC（Remote-Procedure-Call）\"><a href=\"#RPC（Remote-Procedure-Call）\" class=\"headerlink\" title=\"RPC（Remote Procedure Call）\"></a>RPC（Remote Procedure Call）</h4><p>RPC（Remote Procedure Call）即远程过程调用，是一种分布式系统中的通信协议。RPC允许一个程序在另一个计算机上运行的程序请求服务，而不需要了解底层网络细节，就像本地调用一样。</p>\n<p>RPC的原理是客户端发送请求给服务端，服务端执行相应的操作并返回结果给客户端。RPC框架隐藏了底层的网络细节和通信协议，使得开发者可以像使用本地函数一样方便地调用远程函数。</p>\n<p>RPC的优势在于它提供了高效、简单、可靠的远程调用机制，使得分布式系统开发更加便捷。同时，RPC框架支持多种编程语言和跨平台，使得开发者可以使用不同的编程语言和技术栈来实现分布式系统。一些常用的RPC框架有gRPC、Apache Thrift、Dubbo等。</p>\n<h4 id=\"RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\"><a href=\"#RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\" class=\"headerlink\" title=\"RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\"></a>RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：</h4><ol>\n<li><h5 id=\"设计理念：\"><a href=\"#设计理念：\" class=\"headerlink\" title=\"设计理念：\"></a>设计理念：</h5><ul>\n<li><p>RESTful：是基于HTTP协议设计的，着重于资源的定义和管理，通过URL、HTTP方法和参数等方式进行资源的访问和操作。</p>\n</li>\n<li><p>RPC：是基于函数调用的，着重于接口的定义和数据传输格式的规范，通过序列化和反序列化来实现远程调用。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"通信协议：\"><a href=\"#通信协议：\" class=\"headerlink\" title=\"通信协议：\"></a>通信协议：</h5><ul>\n<li><p>RESTful：使用HTTP协议进行通信，支持GET、POST、PUT、DELETE等HTTP方法。</p>\n</li>\n<li><p>RPC：使用自定义的协议进行通信，可以使用TCP、UDP等网络协议，也可以使用HTTP作为传输协议。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"数据传输格式：\"><a href=\"#数据传输格式：\" class=\"headerlink\" title=\"数据传输格式：\"></a>数据传输格式：</h5><ul>\n<li><p>RESTful：通常使用JSON、XML等文本格式进行数据传输。</p>\n</li>\n<li><p>RPC：通常使用二进制格式进行数据传输，传输效率更高。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"调用方式：\"><a href=\"#调用方式：\" class=\"headerlink\" title=\"调用方式：\"></a>调用方式：</h5><ul>\n<li><p>RESTful：通过HTTP方法进行资源的访问和操作，支持无状态的请求，可以使用缓存等机制提高性能和可伸缩性。</p>\n</li>\n<li><p>RPC：通过函数调用进行接口的访问和操作，需要保持请求和响应之间的状态，不支持缓存等机制。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>综上所述，RESTful更加适用于Web应用程序和分布式系统的开发，而RPC更加适用于高性能和低延迟的系统调用。</p>\n"},{"title":"async/await 的理解","date":"2023-10-20T13:20:45.000Z","description":"单一的 Promise 链并不能发现 async/await 的优势。","comments":1,"_content":"\n\n## async/await 的理解\nasync/await 其实是 Generator 的语法糖，它能实现的效果都能用then 链来实现，它是为优化 then 链而开发出来的。从字面上来看，async 是“异步”的简写，await 则为等待，所以很好理解async用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定 await 只能出现在asnyc 函数中，先来看看 async 函数返回了什么：\n```javascript\nasync function testAsy() {\n\treturn \"hello world;\";\n}\nlet result = testAsy();\nconsole.log(result);\nPromise {<fulfilled>: 'hello world;'}\n[[Prototype]]: Promise\n[[PromiseState]]: \"fulfilled\"\n[[PromiseResult]]: \"hello world;\"\n```\n所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个Promise对象，如果在函数中 return 一个直接量，async 会把这个直接量通过Promise.resolve() 封装成 Promise 对象。async 函数返回的是一个 Promise 对象，所以在最外层不能用await 获取其返回值的情况下，当然应该用原来的方式：then()链来处理这个 Promise 对象，就像这样：\n\n```javascript\nasync function testAsy() {\n\treturn \"hello world;\";\n}\nlet result = testAsy();\nconsole.log(result);\nresult.then(res => {\n\tconsole.log(res); // hello world;\n})\n```\n那如果 async 函数没有返回值，又该如何？很容易想到，他会返回\n```javascript\nPromise.resolve(undefined);\n```\n联想一下 Promise 的特点——无等待，所以在没有await 的情况下执行 async 函数，它会立即执行，返回一个Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回Promise 对象的函数并无二致。\n\n     注意：Promise.resolve(x) 可以看作是new Promise(resolve=>resolve(x)) 的简写\n     可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n\n## async/await 的优势\n单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。\n假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：\n\n```javascript\nfunction takeLongTime(n) {\n\treturn new Promise(resolve => {\n\t\tsetTimeout(() => resolve(n + 200), n)\n\t})\n};\n\nfunction step1(n) {\n\tconsole.log(`step1 with ${n}`);\n\treturn takeLongTime(n);\n}\nfunction step2(n) {\n\tconsole.log(`step2 with ${n}`);\n\treturn takeLongTime(n);\n}\nfunction step3(n) {\n\tconsole.log(`step3 with ${n}`);\n\treturn takeLongTime(n);\n}\n```\n现在用 Promise 方式来实现这三个步骤的处理：\n```javascript\nfunction doIt(n) {\n\tconsole.time('doIt');\n\tconst time1 = 300;\n\tstep1(time1)\n\t\t.then(time2 => step2(time2))\n\t\t.then(time3 => step3(time3))\n\t\t.then(result => {\n\t\t\tconsole.log(`result is ${result}`);\n\t\t\tconsole.timeEnd('doIt');\n\t\t});\t\n}\n\ndoIt();\nstep1 with 300\nstep2 with 500\nstep3 with 700\nresult is 900\ndoIt: 1.652s\n\n```\n\n输出结果 result 是 step3() 的参数 700 + 200 = 900。doIt()顺序执行了三个步骤，一共用了 300 + 500 + 700 = 1500 毫秒，和console.time()/console.timeEnd() 计算的结果一致。如果用 async/await 来实现呢，会是这样：\n```javascript\nasync function doIt() {\n\tconsole.time('doIt');\n\tconst time1 = 300;\n\tconst time2 = await step1(time1);\n\tconst time3 = await step2(time2);\n\tconst result = await step3(time3);\n\tconsole.log(`result is ${result}`);\n\tconsole.timeEnd('doIt');\n}\ndoIt();\nstep1 with 300\nstep2 with 500\nstep3 with 700\nresult is 900\ndoIt: 1.515s\n```\n\n结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样\n\n## async/await 对比 Promise 的优势\n代码读起来更加同步，Promise 虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担\n\nPromise 传递中间值⾮常麻烦，⽽async/await⼏乎是同步的写法，⾮常优雅\n\n错误处理友好，async/await 可以⽤成熟的try/catch，Promise的错误捕获⾮常冗余\n\n调试友好，Promise 的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then 代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。","source":"_posts/javaScript/async-await.md","raw":"---\ntitle: async/await 的理解\npermalink: /javascript/async/await.html\ndate: 2023-10-20 21:20:45\ndescription: 单一的 Promise 链并不能发现 async/await 的优势。\ntag: [前端, JavaScript, es6]\ncomments: true\ncategories: \n - 前端\n - es6\n---\n\n\n## async/await 的理解\nasync/await 其实是 Generator 的语法糖，它能实现的效果都能用then 链来实现，它是为优化 then 链而开发出来的。从字面上来看，async 是“异步”的简写，await 则为等待，所以很好理解async用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定 await 只能出现在asnyc 函数中，先来看看 async 函数返回了什么：\n```javascript\nasync function testAsy() {\n\treturn \"hello world;\";\n}\nlet result = testAsy();\nconsole.log(result);\nPromise {<fulfilled>: 'hello world;'}\n[[Prototype]]: Promise\n[[PromiseState]]: \"fulfilled\"\n[[PromiseResult]]: \"hello world;\"\n```\n所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个Promise对象，如果在函数中 return 一个直接量，async 会把这个直接量通过Promise.resolve() 封装成 Promise 对象。async 函数返回的是一个 Promise 对象，所以在最外层不能用await 获取其返回值的情况下，当然应该用原来的方式：then()链来处理这个 Promise 对象，就像这样：\n\n```javascript\nasync function testAsy() {\n\treturn \"hello world;\";\n}\nlet result = testAsy();\nconsole.log(result);\nresult.then(res => {\n\tconsole.log(res); // hello world;\n})\n```\n那如果 async 函数没有返回值，又该如何？很容易想到，他会返回\n```javascript\nPromise.resolve(undefined);\n```\n联想一下 Promise 的特点——无等待，所以在没有await 的情况下执行 async 函数，它会立即执行，返回一个Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回Promise 对象的函数并无二致。\n\n     注意：Promise.resolve(x) 可以看作是new Promise(resolve=>resolve(x)) 的简写\n     可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n\n## async/await 的优势\n单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。\n假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：\n\n```javascript\nfunction takeLongTime(n) {\n\treturn new Promise(resolve => {\n\t\tsetTimeout(() => resolve(n + 200), n)\n\t})\n};\n\nfunction step1(n) {\n\tconsole.log(`step1 with ${n}`);\n\treturn takeLongTime(n);\n}\nfunction step2(n) {\n\tconsole.log(`step2 with ${n}`);\n\treturn takeLongTime(n);\n}\nfunction step3(n) {\n\tconsole.log(`step3 with ${n}`);\n\treturn takeLongTime(n);\n}\n```\n现在用 Promise 方式来实现这三个步骤的处理：\n```javascript\nfunction doIt(n) {\n\tconsole.time('doIt');\n\tconst time1 = 300;\n\tstep1(time1)\n\t\t.then(time2 => step2(time2))\n\t\t.then(time3 => step3(time3))\n\t\t.then(result => {\n\t\t\tconsole.log(`result is ${result}`);\n\t\t\tconsole.timeEnd('doIt');\n\t\t});\t\n}\n\ndoIt();\nstep1 with 300\nstep2 with 500\nstep3 with 700\nresult is 900\ndoIt: 1.652s\n\n```\n\n输出结果 result 是 step3() 的参数 700 + 200 = 900。doIt()顺序执行了三个步骤，一共用了 300 + 500 + 700 = 1500 毫秒，和console.time()/console.timeEnd() 计算的结果一致。如果用 async/await 来实现呢，会是这样：\n```javascript\nasync function doIt() {\n\tconsole.time('doIt');\n\tconst time1 = 300;\n\tconst time2 = await step1(time1);\n\tconst time3 = await step2(time2);\n\tconst result = await step3(time3);\n\tconsole.log(`result is ${result}`);\n\tconsole.timeEnd('doIt');\n}\ndoIt();\nstep1 with 300\nstep2 with 500\nstep3 with 700\nresult is 900\ndoIt: 1.515s\n```\n\n结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样\n\n## async/await 对比 Promise 的优势\n代码读起来更加同步，Promise 虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担\n\nPromise 传递中间值⾮常麻烦，⽽async/await⼏乎是同步的写法，⾮常优雅\n\n错误处理友好，async/await 可以⽤成熟的try/catch，Promise的错误捕获⾮常冗余\n\n调试友好，Promise 的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then 代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。","slug":"javaScript/async-await","published":1,"updated":"2023-10-21T14:00:11.279Z","__permalink":"/javascript/async/await.html","layout":"post","photos":[],"link":"","_id":"clo8nc4b90003g0uo6imdf88g","content":"<div id=\"vip-container\"><h2 id=\"async-await-的理解\"><a href=\"#async-await-的理解\" class=\"headerlink\" title=\"async&#x2F;await 的理解\"></a>async&#x2F;await 的理解</h2><p>async&#x2F;await 其实是 Generator 的语法糖，它能实现的效果都能用then 链来实现，它是为优化 then 链而开发出来的。从字面上来看，async 是“异步”的简写，await 则为等待，所以很好理解async用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定 await 只能出现在asnyc 函数中，先来看看 async 函数返回了什么：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">testAsy</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\"><span class=\"title class_\">Promise</span> &#123;&lt;fulfilled&gt;: <span class=\"string\">&#x27;hello world;&#x27;</span>&#125;</span><br><span class=\"line\">[[<span class=\"title class_\">Prototype</span>]]: <span class=\"title class_\">Promise</span></span><br><span class=\"line\">[[<span class=\"title class_\">PromiseState</span>]]: <span class=\"string\">&quot;fulfilled&quot;</span></span><br><span class=\"line\">[[<span class=\"title class_\">PromiseResult</span>]]: <span class=\"string\">&quot;hello world;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个Promise对象，如果在函数中 return 一个直接量，async 会把这个直接量通过Promise.resolve() 封装成 Promise 对象。async 函数返回的是一个 Promise 对象，所以在最外层不能用await 获取其返回值的情况下，当然应该用原来的方式：then()链来处理这个 Promise 对象，就像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">testAsy</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">result.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res); <span class=\"comment\">// hello world;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>那如果 async 函数没有返回值，又该如何？很容易想到，他会返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"literal\">undefined</span>);</span><br></pre></td></tr></table></figure>\n<p>联想一下 Promise 的特点——无等待，所以在没有await 的情况下执行 async 函数，它会立即执行，返回一个Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回Promise 对象的函数并无二致。</p>\n<pre><code> 注意：Promise.resolve(x) 可以看作是new Promise(resolve=&gt;resolve(x)) 的简写\n 可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n</code></pre>\n<h2 id=\"async-await-的优势\"><a href=\"#async-await-的优势\" class=\"headerlink\" title=\"async&#x2F;await 的优势\"></a>async&#x2F;await 的优势</h2><p>单一的 Promise 链并不能发现 async&#x2F;await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async&#x2F;await 来进一步优化它）。<br>假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">takeLongTime</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(n + <span class=\"number\">200</span>), n)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step1 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step2</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step2 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step3</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step3 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在用 Promise 方式来实现这三个步骤的处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doIt</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">step1</span>(time1)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">time2</span> =&gt;</span> <span class=\"title function_\">step2</span>(time2))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">time3</span> =&gt;</span> <span class=\"title function_\">step3</span>(time3))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t\t&#125;);\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">doIt</span>();</span><br><span class=\"line\">step1 <span class=\"keyword\">with</span> <span class=\"number\">300</span></span><br><span class=\"line\">step2 <span class=\"keyword\">with</span> <span class=\"number\">500</span></span><br><span class=\"line\">step3 <span class=\"keyword\">with</span> <span class=\"number\">700</span></span><br><span class=\"line\">result is <span class=\"number\">900</span></span><br><span class=\"line\"><span class=\"attr\">doIt</span>: <span class=\"number\">1.</span>652s</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出结果 result 是 step3() 的参数 700 + 200 &#x3D; 900。doIt()顺序执行了三个步骤，一共用了 300 + 500 + 700 &#x3D; 1500 毫秒，和console.time()&#x2F;console.timeEnd() 计算的结果一致。如果用 async&#x2F;await 来实现呢，会是这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">doIt</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time2 = <span class=\"keyword\">await</span> <span class=\"title function_\">step1</span>(time1);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time3 = <span class=\"keyword\">await</span> <span class=\"title function_\">step2</span>(time2);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">step3</span>(time3);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">doIt</span>();</span><br><span class=\"line\">step1 <span class=\"keyword\">with</span> <span class=\"number\">300</span></span><br><span class=\"line\">step2 <span class=\"keyword\">with</span> <span class=\"number\">500</span></span><br><span class=\"line\">step3 <span class=\"keyword\">with</span> <span class=\"number\">700</span></span><br><span class=\"line\">result is <span class=\"number\">900</span></span><br><span class=\"line\"><span class=\"attr\">doIt</span>: <span class=\"number\">1.</span>515s</span><br></pre></td></tr></table></figure>\n\n<p>结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样</p>\n<h2 id=\"async-await-对比-Promise-的优势\"><a href=\"#async-await-对比-Promise-的优势\" class=\"headerlink\" title=\"async&#x2F;await 对比 Promise 的优势\"></a>async&#x2F;await 对比 Promise 的优势</h2><p>代码读起来更加同步，Promise 虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担</p>\n<p>Promise 传递中间值⾮常麻烦，⽽async&#x2F;await⼏乎是同步的写法，⾮常优雅</p>\n<p>错误处理友好，async&#x2F;await 可以⽤成熟的try&#x2F;catch，Promise的错误捕获⾮常冗余</p>\n<p>调试友好，Promise 的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then 代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/javascript/promise.html","/hexo/config/rss.html"],"length":2970,"excerpt":"","more":"<h2 id=\"async-await-的理解\"><a href=\"#async-await-的理解\" class=\"headerlink\" title=\"async&#x2F;await 的理解\"></a>async&#x2F;await 的理解</h2><p>async&#x2F;await 其实是 Generator 的语法糖，它能实现的效果都能用then 链来实现，它是为优化 then 链而开发出来的。从字面上来看，async 是“异步”的简写，await 则为等待，所以很好理解async用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定 await 只能出现在asnyc 函数中，先来看看 async 函数返回了什么：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">testAsy</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\"><span class=\"title class_\">Promise</span> &#123;&lt;fulfilled&gt;: <span class=\"string\">&#x27;hello world;&#x27;</span>&#125;</span><br><span class=\"line\">[[<span class=\"title class_\">Prototype</span>]]: <span class=\"title class_\">Promise</span></span><br><span class=\"line\">[[<span class=\"title class_\">PromiseState</span>]]: <span class=\"string\">&quot;fulfilled&quot;</span></span><br><span class=\"line\">[[<span class=\"title class_\">PromiseResult</span>]]: <span class=\"string\">&quot;hello world;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个Promise对象，如果在函数中 return 一个直接量，async 会把这个直接量通过Promise.resolve() 封装成 Promise 对象。async 函数返回的是一个 Promise 对象，所以在最外层不能用await 获取其返回值的情况下，当然应该用原来的方式：then()链来处理这个 Promise 对象，就像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">testAsy</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">result.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res); <span class=\"comment\">// hello world;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>那如果 async 函数没有返回值，又该如何？很容易想到，他会返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"literal\">undefined</span>);</span><br></pre></td></tr></table></figure>\n<p>联想一下 Promise 的特点——无等待，所以在没有await 的情况下执行 async 函数，它会立即执行，返回一个Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回Promise 对象的函数并无二致。</p>\n<pre><code> 注意：Promise.resolve(x) 可以看作是new Promise(resolve=&gt;resolve(x)) 的简写\n 可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n</code></pre>\n<h2 id=\"async-await-的优势\"><a href=\"#async-await-的优势\" class=\"headerlink\" title=\"async&#x2F;await 的优势\"></a>async&#x2F;await 的优势</h2><p>单一的 Promise 链并不能发现 async&#x2F;await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async&#x2F;await 来进一步优化它）。<br>假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">takeLongTime</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(n + <span class=\"number\">200</span>), n)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step1 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step2</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step2 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step3</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step3 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在用 Promise 方式来实现这三个步骤的处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doIt</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">step1</span>(time1)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">time2</span> =&gt;</span> <span class=\"title function_\">step2</span>(time2))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">time3</span> =&gt;</span> <span class=\"title function_\">step3</span>(time3))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t\t&#125;);\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">doIt</span>();</span><br><span class=\"line\">step1 <span class=\"keyword\">with</span> <span class=\"number\">300</span></span><br><span class=\"line\">step2 <span class=\"keyword\">with</span> <span class=\"number\">500</span></span><br><span class=\"line\">step3 <span class=\"keyword\">with</span> <span class=\"number\">700</span></span><br><span class=\"line\">result is <span class=\"number\">900</span></span><br><span class=\"line\"><span class=\"attr\">doIt</span>: <span class=\"number\">1.</span>652s</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出结果 result 是 step3() 的参数 700 + 200 &#x3D; 900。doIt()顺序执行了三个步骤，一共用了 300 + 500 + 700 &#x3D; 1500 毫秒，和console.time()&#x2F;console.timeEnd() 计算的结果一致。如果用 async&#x2F;await 来实现呢，会是这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">doIt</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time2 = <span class=\"keyword\">await</span> <span class=\"title function_\">step1</span>(time1);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time3 = <span class=\"keyword\">await</span> <span class=\"title function_\">step2</span>(time2);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">step3</span>(time3);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">doIt</span>();</span><br><span class=\"line\">step1 <span class=\"keyword\">with</span> <span class=\"number\">300</span></span><br><span class=\"line\">step2 <span class=\"keyword\">with</span> <span class=\"number\">500</span></span><br><span class=\"line\">step3 <span class=\"keyword\">with</span> <span class=\"number\">700</span></span><br><span class=\"line\">result is <span class=\"number\">900</span></span><br><span class=\"line\"><span class=\"attr\">doIt</span>: <span class=\"number\">1.</span>515s</span><br></pre></td></tr></table></figure>\n\n<p>结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样</p>\n<h2 id=\"async-await-对比-Promise-的优势\"><a href=\"#async-await-对比-Promise-的优势\" class=\"headerlink\" title=\"async&#x2F;await 对比 Promise 的优势\"></a>async&#x2F;await 对比 Promise 的优势</h2><p>代码读起来更加同步，Promise 虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担</p>\n<p>Promise 传递中间值⾮常麻烦，⽽async&#x2F;await⼏乎是同步的写法，⾮常优雅</p>\n<p>错误处理友好，async&#x2F;await 可以⽤成熟的try&#x2F;catch，Promise的错误捕获⾮常冗余</p>\n<p>调试友好，Promise 的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then 代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。</p>\n"},{"title":"编写 Promise 方法","date":"2023-10-19T14:14:04.000Z","description":"Promise 是异步编程的一种解决方案，它是一个对象，可以获取异步 操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调， 它比传统的解决方案回调函数和事件更合理和更强大。","comments":1,"_content":"\n##### Promise 是什么？\n\nPromise 是异步编程的一种解决方案，它是一个对象，可以获取异步 操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调， 它比传统的解决方案回调函数和事件更合理和更强大。\n<!-- more -->\n所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束 的事件(通常是一个异步操作)的结果。从语法上说，Promise 是一 个对象，从它可以获取异步操作的消息。Promise 提供统一的 API， 各种异步操作都可以用同样的方法进行处理。\n\n1. Promise 的实例有三个状态:\n\n- Pending(进行中)\n\n- Resolved(已完成)\n\n- Rejected(已拒绝)\n\n当把一件事情交给 promise 时，它的状态就是 Pending，任务完成了 状态就变成了 Resolved、没有完成失败了就变成了 Rejected。\n\n2. Promise 的实例有两个过程:\n    pending -> fulfilled: Resolved(已完成)\n    pending -> rejected: Rejected(已拒绝)\n\n    注意:一旦从进行状态变成为其他状态就永远不能更改状态了。\n\n##### Promise 的特点\n\n对象的状态不受外界影响。promise 对象代表一个异步操作，有三种 状态，pending(进行中)、fulfilled(已成功)、rejected(已失 败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他 操作都无法改变这个状态，这也是 promise 这个名字的由来——“承 诺”;\n\n一旦状态改变就不会再变，任何时候都可以得到这个结果。promise 对象的状态改变，只有两种可能:从 pending 变为 fulfilled，从 pending 变为 rejected。这时就称为 resolved(已定型)。如果改 变已经发生了，你再对 promise 对象添加回调函数，也会立即得到这 个结果。这与事件(event)完全不同，事件的特点是:如果你错过 了它，再去监听是得不到结果的。\n\n##### Promise 实现\n\nPromise 实现是通过js class编写，主要包括status、value、error、resolve、reject、then、catch、all、race、allSettled、any等组成。\n\n1. 状态\n\n```ts\n  const PROMISE_STATUE_PENDING = \"pending\"; // 进行中\n  const PROMISE_STATUE_FULFILLED = \"fulfilled\"; // 已完成\n  const PROMISE_STATUE_REJECTED = \"rejected\"; // 已拒绝\n```\n\n2. resolve 创建一个已解决的Promise对象，将给定的值作为其参数。\n\n```js\n  resolve = (value) => {\n      if (this.statue === PROMISE_STATUE_PENDING) {\n        queueMicrotask(() => {\n          if (this.statue !== PROMISE_STATUE_PENDING) return;\n          this.statue = PROMISE_STATUE_FULFILLED;\n          this.value = value;\n          this.resFns?.forEach((fn) => {\n            fn(this.value);\n          });\n        });\n      }\n    };\n```\n\n   \n\n3. reject 创建一个已拒绝的Promise对象，将给定的原因作为其参数\n\n```js\n  reject = (error) => {\n    if (this.statue === PROMISE_STATUE_PENDING) {\n      queueMicrotask(() => {\n        if (this.statue !== PROMISE_STATUE_PENDING) return;\n        this.statue = PROMISE_STATUE_REJECTED;\n        this.error = error;\n        this.errFns.forEach((en) => {\n          en(this.error);\n        });\n      });\n    }\n  };\n```\n\n   \n\n4. then 添加对Promise对象解决或拒绝时的处理程序\n\n  - 单个方法调用\n\n   ```js\n    constructor(executer) {\n      this.statue = PROMISE_STATUE_PENDING;\n      this.value = void 0;\n      this.error = void 0;\n      this.resFn;\n      this.errFn;\n   \t\tconst resolve = ((value) => {\n        if (this.status === PROMISE_STATUS_PENDING) {\n          this.status = PROMISE_STATUS_FULFILLED\n          \n          queueMicrotask(() => { //queueMicrotask:  主线程执行完毕之后立马执行\n              this.resfn(value)\n          })\n        }\n      })\n \n      const reject = ((error) => {\n        if (this.status === PROMISE_STATUS_PENDING) {\n          this.status = PROMISE_STATUS_REJECTED\n          queueMicrotask(() => {\n              this.errfn(error)\n          })\n        }\n      })\n       executer(this.resolve, this.reject);\n    }\n\n    then(resFn, errFn) {\n   \t  this.resFn = resFn;\n      this.errFn = errFn;\n    }\n   ```\n  - 执行结果\n  ```js\n  const p1 = new myPromise((resolve, reject) => {\n    resolve(111)\n    reject(333333)\n  })\n  p1.then(res => {        //最终打印 1111\n      console.log(res);\n  }, err => {\n      console.log(err);\n\n  })\n\n  ```\n  - 优化then 方法\n\n官方给与的then 方法是可以进行数组传值和链式调用的，而目前我们写的是不支持。\n```js\n  this.resFns = [] //1.多次调用then 时用数组 保存\n  this.errFns = []\n  \n  // 将then 方法修改为 \n  then(resFn, errFn) {\n    this.resfns.push(resFn);\n    this.errFns.push(errFn);\n  }\n\n  // resolve修改为\n  resolve = (value) => {\n    if (this.statue === PROMISE_STATUE_PENDING) {\n      queueMicrotask(() => {\n        if (this.statue !== PROMISE_STATUE_PENDING) return;\n        this.statue = PROMISE_STATUE_FULFILLED;\n        this.value = value;\n        this.resFns?.forEach((fn) => {\n          fn(this.value);\n        });\n      });\n    }\n  };\n  // reject 修改为\n  reject = (error) => {\n    if (this.statue === PROMISE_STATUE_PENDING) {\n      queueMicrotask(() => {\n        if (this.statue !== PROMISE_STATUE_PENDING) return;\n        this.statue = PROMISE_STATUE_REJECTED;\n        this.error = error;\n        this.errFns.forEach((en) => {\n          en(this.error);\n        });\n      });\n    }\n  };\n\n```\n  优化后then的运行结果\n  ```js\n  p1.then(res => {\n    console.log(\"res1:\", res) \n  }, err => {\n      console.log(\"err1:\", err)\n  })\n  // 调用then方法多次调用\n  p1.then(res => {\n      console.log(\"res2:\", res)\n  }, err => {\n      console.log(\"err2:\", err)\n  })\n\n  ```\n运行结果：res2: 111  因为后面的.then 把前面的覆盖掉了 并不会执行res1 所在的代码块\n*由此可见 then 方法调用时应该是个数组然后依次调用\n下面改造我们的代码then,还需要优化执行resolve 时调用reject\n   ```js\n   then(resFn, errFn) {\n       const defaultOnRejected = (err) => {\n         throw err;\n       };\n       errFn = errFn || defaultOnRejected;\n   \n       const defaultOnFulFilled = (value) => {\n         return value;\n       };\n       resFn = resFn || defaultOnFulFilled;\n   \n       return new MyPromise((resolve, reject) => {\n         if (this.statue === PROMISE_STATUE_FULFILLED && !!resFn) {\n           try {\n             const value = resFn(this.value);\n             resolve(value);\n           } catch (error) {\n             reject(error);\n           }\n         }\n         if (this.statue === PROMISE_STATUE_REJECTED && !!errFn) {\n           try {\n             resolve(value);\n           } catch (error) {\n             reject(error);\n           }\n         }\n         if (this.statue === PROMISE_STATUE_PENDING) {\n           if (!!resFn) {\n             this.resFns.push(() => {\n               try {\n                 const value = resFn(this.value);\n                 resolve(value);\n               } catch (error) {\n                 reject(error);\n               }\n             });\n           }\n   \n           if (!!errFn) {\n             this.errFns.push(() => {\n               try {\n                 const value = errFn(this.error);\n                 resolve(value);\n               } catch (error) {\n                 reject(error);\n               }\n             });\n           }\n         }\n       });\n     }\n   ```\n然后执行：\n  ```js\n    const p1 = new myPromise((resolve, reject) => {\n        resolve(111);\n        reject(333333);\n    })\n    p1.then(res => {\n        console.log(\"res1:\", res);\n    }, err => {\n        console.log(\"err1:\", err);\n    })\n    // 调用then方法多次调用\n    p1.then(res => {\n        console.log(\"res2:\", res);\n    }, err => {\n        console.log(\"err2:\", err);\n    })\n    执行结果：\n    res1: 111\n    res2: 111\n  ```\n\n5. catch 添加对Promise对象拒绝时的处理程序\n```js\n  // 添加对Promise对象拒绝时的处理程序。\n  catch(errFn) {\n    return this.then(undefined, errFn);\n  }\n```\n\n6. finally 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。\n```js\n  finally(fn) {\n    setTimeout(() => {\n      fn();\n    }, 0);\n  }\n```\n6. all 接收一个可迭代对象（如数组），并返回一个新的Promise对象。当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。\n```js\n  // 通过类型判断当前数组中的方法或者对象是否为Promise 对象\n  const isPromise = function(promise) {\n    return (\n      !!promise &&\n      (typeof promise === \"object\" || typeof promise === \"function\") &&\n      typeof promise.then === \"function\"\n    );\n  };\n\n  /**\n   * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。\n   * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。\n   * @param {any[]} iterable\n   * @desc 实际上多个对象同步执行时，就相当于把所有的方法重新进行Promise一次。\n   * 当遍历到最后一个时，resolve 所有结果。\n   * \n   */\n  \n  MyPromise.all = function(iterable) {\n    if (!(iterable instanceof Array)) {\n      return console.log(\"传入参数必须是一个数组\");\n    }\n    return new MyPromise((resolve, reject) => {\n      let len = iterable.length;\n      let count = 0;\n      let results = new Array(len);\n      for (let i = 0; i < len; i++) {\n        let promise = iterable[i];\n        count++;\n        if (isPromise(promise)) {\n          promise\n            .then((res) => {\n              results[i] = res;\n              if (count === len) {\n                resolve(results);\n              }\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        } else if (typeof promise === \"function\") {\n          results[i] = promise();\n        } else {\n          results[i] = promise;\n        }\n      }\n      // 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve\n      if (count === len) {\n        resolve(results);\n      }\n    });\n  };\n```\nall 运行示例\n```js\n  (async function() {\n    const res = MyPromise.all([\n      new MyPromise((resolve) => {\n        resolve(1);\n      }),\n      new MyPromise((resolve) => {\n        resolve(2);\n      }),\n      () => {\n        return 123;\n      },\n      88888,\n    ]);\n    res.then((res) => {\n      console.log(res);\n    });\n  })();\n  运行结果: [1, 2, 123,  88888]\n```\n\n7. race Promise.race(iterable) 传入多个对象,当任何一个执行完成后 resolve 结果\n\n```js\nMyPromise.race = function(iterable) {\n  if (!(iterable instanceof Array)) {\n    return console.log(\"传入参数必须是一个数组\");\n  }\n  return new MyPromise((resolve, reject) => {\n    iterable.forEach((p) => {\n      if (isPromise(p)) {\n        p.then((value) => {\n          resolve(value);\n        }).catch((err) => {\n          reject(err);\n        });\n      } else if (typeof p === \"function\") {\n        resolve(p());\n      } else {\n        resolve(p);\n      }\n    });\n  });\n};\n```\nrace 运行示例\n```js\n  (async function() {\n    const res = MyPromise.race([\n      new MyPromise((resolve) => {\n        resolve(1);\n      }),\n      new MyPromise((resolve) => {\n        resolve(2);\n      }),\n    ]);\n    res.then((res) => {\n      console.log(res);\n    });\n  })();\n  运行结果： 1\n```\n\n完整代码\n```js\n  // status\n  const PROMISE_STATUE_PENDING = \"pending\"; // 进行中\n  const PROMISE_STATUE_FULFILLED = \"fulfilled\"; // 已完成\n  const PROMISE_STATUE_REJECTED = \"rejected\"; // 已拒绝\n\n  class MyPromise {\n    constructor(executer) {\n      this.statue = PROMISE_STATUE_PENDING;\n      this.value = void 0;\n      this.error = void 0;\n      this.resFns = [];\n      this.errFns = [];\n\n      executer(this.resolve, this.reject);\n    }\n    //    创建一个已解决的Promise对象，将给定的值作为其参数。\n    resolve = (value) => {\n      if (this.statue === PROMISE_STATUE_PENDING) {\n        queueMicrotask(() => {\n          if (this.statue !== PROMISE_STATUE_PENDING) return;\n          this.statue = PROMISE_STATUE_FULFILLED;\n          this.value = value;\n          this.resFns?.forEach((fn) => {\n            fn(this.value);\n          });\n        });\n      }\n    };\n    // 创建一个已拒绝的Promise对象，将给定的原因作为其参数。\n    reject = (error) => {\n      if (this.statue === PROMISE_STATUE_PENDING) {\n        queueMicrotask(() => {\n          if (this.statue !== PROMISE_STATUE_PENDING) return;\n          this.statue = PROMISE_STATUE_REJECTED;\n          this.error = error;\n          this.errFns.forEach((en) => {\n            en(this.error);\n          });\n        });\n      }\n    };\n    //   添加对Promise对象解决或拒绝时的处理程序。\n    then(resFn, errFn) {\n      const defaultOnRejected = (err) => {\n        throw err;\n      };\n      errFn = errFn || defaultOnRejected;\n\n      const defaultOnFulFilled = (value) => {\n        return value;\n      };\n      resFn = resFn || defaultOnFulFilled;\n\n      return new MyPromise((resolve, reject) => {\n        if (this.statue === PROMISE_STATUE_FULFILLED && !!resFn) {\n          try {\n            const value = resFn(this.value);\n            resolve(value);\n          } catch (error) {\n            reject(error);\n          }\n        }\n        if (this.statue === PROMISE_STATUE_REJECTED && !!errFn) {\n          try {\n            resolve(value);\n          } catch (error) {\n            reject(error);\n          }\n        }\n        if (this.statue === PROMISE_STATUE_PENDING) {\n          if (!!resFn) {\n            this.resFns.push(() => {\n              try {\n                const value = resFn(this.value);\n                resolve(value);\n              } catch (error) {\n                reject(error);\n              }\n            });\n          }\n\n          if (!!errFn) {\n            this.errFns.push(() => {\n              try {\n                const value = errFn(this.error);\n                resolve(value);\n              } catch (error) {\n                reject(error);\n              }\n            });\n          }\n        }\n      });\n    }\n    // 添加对Promise对象拒绝时的处理程序。\n    catch(errFn) {\n      return this.then(undefined, errFn);\n    }\n    // 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。\n    finally(fn) {\n      setTimeout(() => {\n        fn();\n      }, 0);\n    }\n  }\n\n  const isPromise = function(promise) {\n    return (\n      !!promise &&\n      (typeof promise === \"object\" || typeof promise === \"function\") &&\n      typeof promise.then === \"function\"\n    );\n  };\n\n  /**\n   * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。\n   * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。\n   * @param {any[]} iterable\n   */\n  MyPromise.all = function(iterable) {\n    if (!(iterable instanceof Array)) {\n      return console.log(\"传入参数必须是一个数组\");\n    }\n    return new MyPromise((resolve, reject) => {\n      let len = iterable.length;\n      let count = 0;\n      let results = new Array(len);\n      for (let i = 0; i < len; i++) {\n        let promise = iterable[i];\n        count++;\n        if (isPromise(promise)) {\n          promise\n            .then((res) => {\n              results[i] = res;\n              if (count === len) {\n                resolve(results);\n              }\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        } else if (typeof promise === \"function\") {\n          results[i] = promise();\n        } else {\n          results[i] = promise;\n        }\n      }\n      // 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve\n      if (count === len) {\n        resolve(results);\n      }\n    });\n  };\n\n  MyPromise.race = function(iterable) {\n    if (!(iterable instanceof Array)) {\n      return console.log(\"传入参数必须是一个数组\");\n    }\n    return new MyPromise((resolve, reject) => {\n      iterable.forEach((p) => {\n        if (isPromise(p)) {\n          p.then((value) => {\n            resolve(value);\n          }).catch((err) => {\n            reject(err);\n          });\n        } else if (typeof p === \"function\") {\n          resolve(p());\n        } else {\n          resolve(p);\n        }\n      });\n    });\n  };\n  // const p1 = new MyPromise((resolve, reject) => {\n  //   console.log(\"状态pending\");\n  //   resolve(\"22222\");\n  //   reject(\"3333333\");\n  // });\n\n  // p1.then((res) => {\n  //   console.log(\"res1:\", res);\n  //   return \"第二次的成功回调\";\n  // })\n  //   .catch((error) => {\n  //     console.log(\"err1:\", error);\n  //     throw new Error(\"第二次的失败回调\");\n  //   })\n  //   .finally(() => {\n  //     console.log(\"finally\");\n  //   });\n  // (async function() {\n  //   const res = MyPromise.all([\n  //     new MyPromise((resolve) => {\n  //       resolve(1);\n  //     }),\n  //     new MyPromise((resolve) => {\n  //       resolve(2);\n  //     }),\n  //     () => {\n  //       return 123;\n  //     },\n  //     88888,\n  //   ]);\n  //   res.then((res) => {\n  //     console.log(res);\n  //   });\n  // })();\n\n  // (async function() {\n  //   const res = MyPromise.race([\n  //     new MyPromise((resolve) => {\n  //       resolve(1);\n  //     }),\n  //     new MyPromise((resolve) => {\n  //       resolve(2);\n  //     }),\n  //   ]);\n  //   res.then((res) => {\n  //     console.log(res);\n  //   });\n  // })();\n\n```\n\n##### Promise 的缺点\n\n无法取消 Promise，一旦新建它就会立即执行，无法中途取消。\n\n如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。\n\n当处于 pending 状态时，无法得知目前进展到哪一个阶段(刚刚开始 还是即将完成)。\n\n##### 总结:\n\nPromise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。 一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变， 就凝固了，无法再被改变了。\n\n状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在 异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原 型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的 改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的 末尾执行。\n\n注意:在构造 Promise 的时候，构造函数内部的代码是立即执行的。\n","source":"_posts/javaScript/promise.md","raw":"---\ntitle: 编写 Promise 方法\npermalink: /javascript/promise.html\ndate: 2023-10-19 22:14:04\ndescription: Promise 是异步编程的一种解决方案，它是一个对象，可以获取异步 操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调， 它比传统的解决方案回调函数和事件更合理和更强大。\ntag: [前端, JavaScript, es6]\ncomments: true\ncategories: \n - 前端\n - es6\n---\n\n##### Promise 是什么？\n\nPromise 是异步编程的一种解决方案，它是一个对象，可以获取异步 操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调， 它比传统的解决方案回调函数和事件更合理和更强大。\n<!-- more -->\n所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束 的事件(通常是一个异步操作)的结果。从语法上说，Promise 是一 个对象，从它可以获取异步操作的消息。Promise 提供统一的 API， 各种异步操作都可以用同样的方法进行处理。\n\n1. Promise 的实例有三个状态:\n\n- Pending(进行中)\n\n- Resolved(已完成)\n\n- Rejected(已拒绝)\n\n当把一件事情交给 promise 时，它的状态就是 Pending，任务完成了 状态就变成了 Resolved、没有完成失败了就变成了 Rejected。\n\n2. Promise 的实例有两个过程:\n    pending -> fulfilled: Resolved(已完成)\n    pending -> rejected: Rejected(已拒绝)\n\n    注意:一旦从进行状态变成为其他状态就永远不能更改状态了。\n\n##### Promise 的特点\n\n对象的状态不受外界影响。promise 对象代表一个异步操作，有三种 状态，pending(进行中)、fulfilled(已成功)、rejected(已失 败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他 操作都无法改变这个状态，这也是 promise 这个名字的由来——“承 诺”;\n\n一旦状态改变就不会再变，任何时候都可以得到这个结果。promise 对象的状态改变，只有两种可能:从 pending 变为 fulfilled，从 pending 变为 rejected。这时就称为 resolved(已定型)。如果改 变已经发生了，你再对 promise 对象添加回调函数，也会立即得到这 个结果。这与事件(event)完全不同，事件的特点是:如果你错过 了它，再去监听是得不到结果的。\n\n##### Promise 实现\n\nPromise 实现是通过js class编写，主要包括status、value、error、resolve、reject、then、catch、all、race、allSettled、any等组成。\n\n1. 状态\n\n```ts\n  const PROMISE_STATUE_PENDING = \"pending\"; // 进行中\n  const PROMISE_STATUE_FULFILLED = \"fulfilled\"; // 已完成\n  const PROMISE_STATUE_REJECTED = \"rejected\"; // 已拒绝\n```\n\n2. resolve 创建一个已解决的Promise对象，将给定的值作为其参数。\n\n```js\n  resolve = (value) => {\n      if (this.statue === PROMISE_STATUE_PENDING) {\n        queueMicrotask(() => {\n          if (this.statue !== PROMISE_STATUE_PENDING) return;\n          this.statue = PROMISE_STATUE_FULFILLED;\n          this.value = value;\n          this.resFns?.forEach((fn) => {\n            fn(this.value);\n          });\n        });\n      }\n    };\n```\n\n   \n\n3. reject 创建一个已拒绝的Promise对象，将给定的原因作为其参数\n\n```js\n  reject = (error) => {\n    if (this.statue === PROMISE_STATUE_PENDING) {\n      queueMicrotask(() => {\n        if (this.statue !== PROMISE_STATUE_PENDING) return;\n        this.statue = PROMISE_STATUE_REJECTED;\n        this.error = error;\n        this.errFns.forEach((en) => {\n          en(this.error);\n        });\n      });\n    }\n  };\n```\n\n   \n\n4. then 添加对Promise对象解决或拒绝时的处理程序\n\n  - 单个方法调用\n\n   ```js\n    constructor(executer) {\n      this.statue = PROMISE_STATUE_PENDING;\n      this.value = void 0;\n      this.error = void 0;\n      this.resFn;\n      this.errFn;\n   \t\tconst resolve = ((value) => {\n        if (this.status === PROMISE_STATUS_PENDING) {\n          this.status = PROMISE_STATUS_FULFILLED\n          \n          queueMicrotask(() => { //queueMicrotask:  主线程执行完毕之后立马执行\n              this.resfn(value)\n          })\n        }\n      })\n \n      const reject = ((error) => {\n        if (this.status === PROMISE_STATUS_PENDING) {\n          this.status = PROMISE_STATUS_REJECTED\n          queueMicrotask(() => {\n              this.errfn(error)\n          })\n        }\n      })\n       executer(this.resolve, this.reject);\n    }\n\n    then(resFn, errFn) {\n   \t  this.resFn = resFn;\n      this.errFn = errFn;\n    }\n   ```\n  - 执行结果\n  ```js\n  const p1 = new myPromise((resolve, reject) => {\n    resolve(111)\n    reject(333333)\n  })\n  p1.then(res => {        //最终打印 1111\n      console.log(res);\n  }, err => {\n      console.log(err);\n\n  })\n\n  ```\n  - 优化then 方法\n\n官方给与的then 方法是可以进行数组传值和链式调用的，而目前我们写的是不支持。\n```js\n  this.resFns = [] //1.多次调用then 时用数组 保存\n  this.errFns = []\n  \n  // 将then 方法修改为 \n  then(resFn, errFn) {\n    this.resfns.push(resFn);\n    this.errFns.push(errFn);\n  }\n\n  // resolve修改为\n  resolve = (value) => {\n    if (this.statue === PROMISE_STATUE_PENDING) {\n      queueMicrotask(() => {\n        if (this.statue !== PROMISE_STATUE_PENDING) return;\n        this.statue = PROMISE_STATUE_FULFILLED;\n        this.value = value;\n        this.resFns?.forEach((fn) => {\n          fn(this.value);\n        });\n      });\n    }\n  };\n  // reject 修改为\n  reject = (error) => {\n    if (this.statue === PROMISE_STATUE_PENDING) {\n      queueMicrotask(() => {\n        if (this.statue !== PROMISE_STATUE_PENDING) return;\n        this.statue = PROMISE_STATUE_REJECTED;\n        this.error = error;\n        this.errFns.forEach((en) => {\n          en(this.error);\n        });\n      });\n    }\n  };\n\n```\n  优化后then的运行结果\n  ```js\n  p1.then(res => {\n    console.log(\"res1:\", res) \n  }, err => {\n      console.log(\"err1:\", err)\n  })\n  // 调用then方法多次调用\n  p1.then(res => {\n      console.log(\"res2:\", res)\n  }, err => {\n      console.log(\"err2:\", err)\n  })\n\n  ```\n运行结果：res2: 111  因为后面的.then 把前面的覆盖掉了 并不会执行res1 所在的代码块\n*由此可见 then 方法调用时应该是个数组然后依次调用\n下面改造我们的代码then,还需要优化执行resolve 时调用reject\n   ```js\n   then(resFn, errFn) {\n       const defaultOnRejected = (err) => {\n         throw err;\n       };\n       errFn = errFn || defaultOnRejected;\n   \n       const defaultOnFulFilled = (value) => {\n         return value;\n       };\n       resFn = resFn || defaultOnFulFilled;\n   \n       return new MyPromise((resolve, reject) => {\n         if (this.statue === PROMISE_STATUE_FULFILLED && !!resFn) {\n           try {\n             const value = resFn(this.value);\n             resolve(value);\n           } catch (error) {\n             reject(error);\n           }\n         }\n         if (this.statue === PROMISE_STATUE_REJECTED && !!errFn) {\n           try {\n             resolve(value);\n           } catch (error) {\n             reject(error);\n           }\n         }\n         if (this.statue === PROMISE_STATUE_PENDING) {\n           if (!!resFn) {\n             this.resFns.push(() => {\n               try {\n                 const value = resFn(this.value);\n                 resolve(value);\n               } catch (error) {\n                 reject(error);\n               }\n             });\n           }\n   \n           if (!!errFn) {\n             this.errFns.push(() => {\n               try {\n                 const value = errFn(this.error);\n                 resolve(value);\n               } catch (error) {\n                 reject(error);\n               }\n             });\n           }\n         }\n       });\n     }\n   ```\n然后执行：\n  ```js\n    const p1 = new myPromise((resolve, reject) => {\n        resolve(111);\n        reject(333333);\n    })\n    p1.then(res => {\n        console.log(\"res1:\", res);\n    }, err => {\n        console.log(\"err1:\", err);\n    })\n    // 调用then方法多次调用\n    p1.then(res => {\n        console.log(\"res2:\", res);\n    }, err => {\n        console.log(\"err2:\", err);\n    })\n    执行结果：\n    res1: 111\n    res2: 111\n  ```\n\n5. catch 添加对Promise对象拒绝时的处理程序\n```js\n  // 添加对Promise对象拒绝时的处理程序。\n  catch(errFn) {\n    return this.then(undefined, errFn);\n  }\n```\n\n6. finally 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。\n```js\n  finally(fn) {\n    setTimeout(() => {\n      fn();\n    }, 0);\n  }\n```\n6. all 接收一个可迭代对象（如数组），并返回一个新的Promise对象。当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。\n```js\n  // 通过类型判断当前数组中的方法或者对象是否为Promise 对象\n  const isPromise = function(promise) {\n    return (\n      !!promise &&\n      (typeof promise === \"object\" || typeof promise === \"function\") &&\n      typeof promise.then === \"function\"\n    );\n  };\n\n  /**\n   * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。\n   * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。\n   * @param {any[]} iterable\n   * @desc 实际上多个对象同步执行时，就相当于把所有的方法重新进行Promise一次。\n   * 当遍历到最后一个时，resolve 所有结果。\n   * \n   */\n  \n  MyPromise.all = function(iterable) {\n    if (!(iterable instanceof Array)) {\n      return console.log(\"传入参数必须是一个数组\");\n    }\n    return new MyPromise((resolve, reject) => {\n      let len = iterable.length;\n      let count = 0;\n      let results = new Array(len);\n      for (let i = 0; i < len; i++) {\n        let promise = iterable[i];\n        count++;\n        if (isPromise(promise)) {\n          promise\n            .then((res) => {\n              results[i] = res;\n              if (count === len) {\n                resolve(results);\n              }\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        } else if (typeof promise === \"function\") {\n          results[i] = promise();\n        } else {\n          results[i] = promise;\n        }\n      }\n      // 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve\n      if (count === len) {\n        resolve(results);\n      }\n    });\n  };\n```\nall 运行示例\n```js\n  (async function() {\n    const res = MyPromise.all([\n      new MyPromise((resolve) => {\n        resolve(1);\n      }),\n      new MyPromise((resolve) => {\n        resolve(2);\n      }),\n      () => {\n        return 123;\n      },\n      88888,\n    ]);\n    res.then((res) => {\n      console.log(res);\n    });\n  })();\n  运行结果: [1, 2, 123,  88888]\n```\n\n7. race Promise.race(iterable) 传入多个对象,当任何一个执行完成后 resolve 结果\n\n```js\nMyPromise.race = function(iterable) {\n  if (!(iterable instanceof Array)) {\n    return console.log(\"传入参数必须是一个数组\");\n  }\n  return new MyPromise((resolve, reject) => {\n    iterable.forEach((p) => {\n      if (isPromise(p)) {\n        p.then((value) => {\n          resolve(value);\n        }).catch((err) => {\n          reject(err);\n        });\n      } else if (typeof p === \"function\") {\n        resolve(p());\n      } else {\n        resolve(p);\n      }\n    });\n  });\n};\n```\nrace 运行示例\n```js\n  (async function() {\n    const res = MyPromise.race([\n      new MyPromise((resolve) => {\n        resolve(1);\n      }),\n      new MyPromise((resolve) => {\n        resolve(2);\n      }),\n    ]);\n    res.then((res) => {\n      console.log(res);\n    });\n  })();\n  运行结果： 1\n```\n\n完整代码\n```js\n  // status\n  const PROMISE_STATUE_PENDING = \"pending\"; // 进行中\n  const PROMISE_STATUE_FULFILLED = \"fulfilled\"; // 已完成\n  const PROMISE_STATUE_REJECTED = \"rejected\"; // 已拒绝\n\n  class MyPromise {\n    constructor(executer) {\n      this.statue = PROMISE_STATUE_PENDING;\n      this.value = void 0;\n      this.error = void 0;\n      this.resFns = [];\n      this.errFns = [];\n\n      executer(this.resolve, this.reject);\n    }\n    //    创建一个已解决的Promise对象，将给定的值作为其参数。\n    resolve = (value) => {\n      if (this.statue === PROMISE_STATUE_PENDING) {\n        queueMicrotask(() => {\n          if (this.statue !== PROMISE_STATUE_PENDING) return;\n          this.statue = PROMISE_STATUE_FULFILLED;\n          this.value = value;\n          this.resFns?.forEach((fn) => {\n            fn(this.value);\n          });\n        });\n      }\n    };\n    // 创建一个已拒绝的Promise对象，将给定的原因作为其参数。\n    reject = (error) => {\n      if (this.statue === PROMISE_STATUE_PENDING) {\n        queueMicrotask(() => {\n          if (this.statue !== PROMISE_STATUE_PENDING) return;\n          this.statue = PROMISE_STATUE_REJECTED;\n          this.error = error;\n          this.errFns.forEach((en) => {\n            en(this.error);\n          });\n        });\n      }\n    };\n    //   添加对Promise对象解决或拒绝时的处理程序。\n    then(resFn, errFn) {\n      const defaultOnRejected = (err) => {\n        throw err;\n      };\n      errFn = errFn || defaultOnRejected;\n\n      const defaultOnFulFilled = (value) => {\n        return value;\n      };\n      resFn = resFn || defaultOnFulFilled;\n\n      return new MyPromise((resolve, reject) => {\n        if (this.statue === PROMISE_STATUE_FULFILLED && !!resFn) {\n          try {\n            const value = resFn(this.value);\n            resolve(value);\n          } catch (error) {\n            reject(error);\n          }\n        }\n        if (this.statue === PROMISE_STATUE_REJECTED && !!errFn) {\n          try {\n            resolve(value);\n          } catch (error) {\n            reject(error);\n          }\n        }\n        if (this.statue === PROMISE_STATUE_PENDING) {\n          if (!!resFn) {\n            this.resFns.push(() => {\n              try {\n                const value = resFn(this.value);\n                resolve(value);\n              } catch (error) {\n                reject(error);\n              }\n            });\n          }\n\n          if (!!errFn) {\n            this.errFns.push(() => {\n              try {\n                const value = errFn(this.error);\n                resolve(value);\n              } catch (error) {\n                reject(error);\n              }\n            });\n          }\n        }\n      });\n    }\n    // 添加对Promise对象拒绝时的处理程序。\n    catch(errFn) {\n      return this.then(undefined, errFn);\n    }\n    // 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。\n    finally(fn) {\n      setTimeout(() => {\n        fn();\n      }, 0);\n    }\n  }\n\n  const isPromise = function(promise) {\n    return (\n      !!promise &&\n      (typeof promise === \"object\" || typeof promise === \"function\") &&\n      typeof promise.then === \"function\"\n    );\n  };\n\n  /**\n   * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。\n   * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。\n   * @param {any[]} iterable\n   */\n  MyPromise.all = function(iterable) {\n    if (!(iterable instanceof Array)) {\n      return console.log(\"传入参数必须是一个数组\");\n    }\n    return new MyPromise((resolve, reject) => {\n      let len = iterable.length;\n      let count = 0;\n      let results = new Array(len);\n      for (let i = 0; i < len; i++) {\n        let promise = iterable[i];\n        count++;\n        if (isPromise(promise)) {\n          promise\n            .then((res) => {\n              results[i] = res;\n              if (count === len) {\n                resolve(results);\n              }\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        } else if (typeof promise === \"function\") {\n          results[i] = promise();\n        } else {\n          results[i] = promise;\n        }\n      }\n      // 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve\n      if (count === len) {\n        resolve(results);\n      }\n    });\n  };\n\n  MyPromise.race = function(iterable) {\n    if (!(iterable instanceof Array)) {\n      return console.log(\"传入参数必须是一个数组\");\n    }\n    return new MyPromise((resolve, reject) => {\n      iterable.forEach((p) => {\n        if (isPromise(p)) {\n          p.then((value) => {\n            resolve(value);\n          }).catch((err) => {\n            reject(err);\n          });\n        } else if (typeof p === \"function\") {\n          resolve(p());\n        } else {\n          resolve(p);\n        }\n      });\n    });\n  };\n  // const p1 = new MyPromise((resolve, reject) => {\n  //   console.log(\"状态pending\");\n  //   resolve(\"22222\");\n  //   reject(\"3333333\");\n  // });\n\n  // p1.then((res) => {\n  //   console.log(\"res1:\", res);\n  //   return \"第二次的成功回调\";\n  // })\n  //   .catch((error) => {\n  //     console.log(\"err1:\", error);\n  //     throw new Error(\"第二次的失败回调\");\n  //   })\n  //   .finally(() => {\n  //     console.log(\"finally\");\n  //   });\n  // (async function() {\n  //   const res = MyPromise.all([\n  //     new MyPromise((resolve) => {\n  //       resolve(1);\n  //     }),\n  //     new MyPromise((resolve) => {\n  //       resolve(2);\n  //     }),\n  //     () => {\n  //       return 123;\n  //     },\n  //     88888,\n  //   ]);\n  //   res.then((res) => {\n  //     console.log(res);\n  //   });\n  // })();\n\n  // (async function() {\n  //   const res = MyPromise.race([\n  //     new MyPromise((resolve) => {\n  //       resolve(1);\n  //     }),\n  //     new MyPromise((resolve) => {\n  //       resolve(2);\n  //     }),\n  //   ]);\n  //   res.then((res) => {\n  //     console.log(res);\n  //   });\n  // })();\n\n```\n\n##### Promise 的缺点\n\n无法取消 Promise，一旦新建它就会立即执行，无法中途取消。\n\n如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。\n\n当处于 pending 状态时，无法得知目前进展到哪一个阶段(刚刚开始 还是即将完成)。\n\n##### 总结:\n\nPromise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。 一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变， 就凝固了，无法再被改变了。\n\n状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在 异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原 型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的 改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的 末尾执行。\n\n注意:在构造 Promise 的时候，构造函数内部的代码是立即执行的。\n","slug":"javaScript/promise","published":1,"updated":"2023-10-21T13:56:03.979Z","__permalink":"/javascript/promise.html","layout":"post","photos":[],"link":"","_id":"clo8nc4dk000kg0uo11z3bokr","content":"<div id=\"vip-container\"><h5 id=\"Promise-是什么？\"><a href=\"#Promise-是什么？\" class=\"headerlink\" title=\"Promise 是什么？\"></a>Promise 是什么？</h5><p>Promise 是异步编程的一种解决方案，它是一个对象，可以获取异步 操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调， 它比传统的解决方案回调函数和事件更合理和更强大。</p>\n<span id=\"more\"></span>\n<p>所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束 的事件(通常是一个异步操作)的结果。从语法上说，Promise 是一 个对象，从它可以获取异步操作的消息。Promise 提供统一的 API， 各种异步操作都可以用同样的方法进行处理。</p>\n<ol>\n<li>Promise 的实例有三个状态:</li>\n</ol>\n<ul>\n<li><p>Pending(进行中)</p>\n</li>\n<li><p>Resolved(已完成)</p>\n</li>\n<li><p>Rejected(已拒绝)</p>\n</li>\n</ul>\n<p>当把一件事情交给 promise 时，它的状态就是 Pending，任务完成了 状态就变成了 Resolved、没有完成失败了就变成了 Rejected。</p>\n<ol start=\"2\">\n<li><p>Promise 的实例有两个过程:<br> pending -&gt; fulfilled: Resolved(已完成)<br> pending -&gt; rejected: Rejected(已拒绝)</p>\n<p> 注意:一旦从进行状态变成为其他状态就永远不能更改状态了。</p>\n</li>\n</ol>\n<h5 id=\"Promise-的特点\"><a href=\"#Promise-的特点\" class=\"headerlink\" title=\"Promise 的特点\"></a>Promise 的特点</h5><p>对象的状态不受外界影响。promise 对象代表一个异步操作，有三种 状态，pending(进行中)、fulfilled(已成功)、rejected(已失 败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他 操作都无法改变这个状态，这也是 promise 这个名字的由来——“承 诺”;</p>\n<p>一旦状态改变就不会再变，任何时候都可以得到这个结果。promise 对象的状态改变，只有两种可能:从 pending 变为 fulfilled，从 pending 变为 rejected。这时就称为 resolved(已定型)。如果改 变已经发生了，你再对 promise 对象添加回调函数，也会立即得到这 个结果。这与事件(event)完全不同，事件的特点是:如果你错过 了它，再去监听是得不到结果的。</p>\n<h5 id=\"Promise-实现\"><a href=\"#Promise-实现\" class=\"headerlink\" title=\"Promise 实现\"></a>Promise 实现</h5><p>Promise 实现是通过js class编写，主要包括status、value、error、resolve、reject、then、catch、all、race、allSettled、any等组成。</p>\n<ol>\n<li>状态</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span> = <span class=\"string\">&quot;pending&quot;</span>; <span class=\"comment\">// 进行中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> = <span class=\"string\">&quot;fulfilled&quot;</span>; <span class=\"comment\">// 已完成</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> = <span class=\"string\">&quot;rejected&quot;</span>; <span class=\"comment\">// 已拒绝</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>resolve 创建一个已解决的Promise对象，将给定的值作为其参数。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>reject 创建一个已拒绝的Promise对象，将给定的原因作为其参数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>then 添加对Promise对象解决或拒绝时的处理程序</li>\n</ol>\n<ul>\n<li>单个方法调用</li>\n</ul>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">executer</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resFn</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFn</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> resolve = (<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PROMISE_STATUS_FULFILLED</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">//queueMicrotask:  主线程执行完毕之后立马执行</span></span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">resfn</span>(value)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">const</span> reject = (<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PROMISE_STATUS_REJECTED</span></span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">errfn</span>(error)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">   <span class=\"title function_\">executer</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resFn</span> = resFn;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFn</span> = errFn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行结果  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"number\">333333</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;        <span class=\"comment\">//最终打印 1111</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>优化then 方法</li>\n</ul>\n<p>官方给与的then 方法是可以进行数组传值和链式调用的，而目前我们写的是不支持。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span> = [] <span class=\"comment\">//1.多次调用then 时用数组 保存</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span> = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将then 方法修改为 </span></span><br><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resfns</span>.<span class=\"title function_\">push</span>(resFn);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(errFn);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// resolve修改为</span></span><br><span class=\"line\">resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// reject 修改为</span></span><br><span class=\"line\">reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  优化后then的运行结果<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res1:&quot;</span>, res) </span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err1:&quot;</span>, err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 调用then方法多次调用</span></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res2:&quot;</span>, res)</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err2:&quot;</span>, err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>运行结果：res2: 111  因为后面的.then 把前面的覆盖掉了 并不会执行res1 所在的代码块<br>*由此可见 then 方法调用时应该是个数组然后依次调用<br>下面改造我们的代码then,还需要优化执行resolve 时调用reject<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnRejected</span> = (<span class=\"params\">err</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    errFn = errFn || defaultOnRejected;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnFulFilled</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    resFn = resFn || defaultOnFulFilled;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> &amp;&amp; !!resFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> &amp;&amp; !!errFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!resFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!errFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">errFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><br>然后执行：<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"number\">333333</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res1:&quot;</span>, res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err1:&quot;</span>, err);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 调用then方法多次调用</span></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res2:&quot;</span>, res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err2:&quot;</span>, err);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">执行结果：</span><br><span class=\"line\"><span class=\"attr\">res1</span>: <span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"attr\">res2</span>: <span class=\"number\">111</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li><p>catch 添加对Promise对象拒绝时的处理程序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加对Promise对象拒绝时的处理程序。</span></span><br><span class=\"line\"><span class=\"keyword\">catch</span>(errFn) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">undefined</span>, errFn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>finally 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">finally</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>all 接收一个可迭代对象（如数组），并返回一个新的Promise对象。当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过类型判断当前数组中的方法或者对象是否为Promise 对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isPromise = <span class=\"keyword\">function</span>(<span class=\"params\">promise</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    !!promise &amp;&amp;</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> promise.<span class=\"property\">then</span> === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any[]</span>&#125; <span class=\"variable\">iterable</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 实际上多个对象同步执行时，就相当于把所有的方法重新进行Promise一次。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当遍历到最后一个时，resolve 所有结果。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = iterable.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> results = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> promise = iterable[i];</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(promise)) &#123;</span><br><span class=\"line\">        promise</span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            results[i] = res;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        results[i] = <span class=\"title function_\">promise</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        results[i] = promise;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>all 运行示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">88888</span>,</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  res.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">运行结果: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">123</span>,  <span class=\"number\">88888</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>race Promise.race(iterable) 传入多个对象,当任何一个执行完成后 resolve 结果</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    iterable.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(p)) &#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> p === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"title function_\">p</span>());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>race 运行示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">race</span>([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  res.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">运行结果： <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>完整代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// status</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span> = <span class=\"string\">&quot;pending&quot;</span>; <span class=\"comment\">// 进行中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> = <span class=\"string\">&quot;fulfilled&quot;</span>; <span class=\"comment\">// 已完成</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> = <span class=\"string\">&quot;rejected&quot;</span>; <span class=\"comment\">// 已拒绝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executer</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executer</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//    创建一个已解决的Promise对象，将给定的值作为其参数。</span></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个已拒绝的Promise对象，将给定的原因作为其参数。</span></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//   添加对Promise对象解决或拒绝时的处理程序。</span></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnRejected</span> = (<span class=\"params\">err</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    errFn = errFn || defaultOnRejected;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnFulFilled</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    resFn = resFn || defaultOnFulFilled;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> &amp;&amp; !!resFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> &amp;&amp; !!errFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!resFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!errFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">errFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加对Promise对象拒绝时的处理程序。</span></span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(errFn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">undefined</span>, errFn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。</span></span><br><span class=\"line\">  <span class=\"title function_\">finally</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isPromise = <span class=\"keyword\">function</span>(<span class=\"params\">promise</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    !!promise &amp;&amp;</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> promise.<span class=\"property\">then</span> === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any[]</span>&#125; <span class=\"variable\">iterable</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = iterable.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> results = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> promise = iterable[i];</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(promise)) &#123;</span><br><span class=\"line\">        promise</span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            results[i] = res;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        results[i] = <span class=\"title function_\">promise</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        results[i] = promise;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    iterable.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(p)) &#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> p === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"title function_\">p</span>());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// const p1 = new MyPromise((resolve, reject) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(&quot;状态pending&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   resolve(&quot;22222&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   reject(&quot;3333333&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p1.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(&quot;res1:&quot;, res);</span></span><br><span class=\"line\"><span class=\"comment\">//   return &quot;第二次的成功回调&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   .catch((error) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;err1:&quot;, error);</span></span><br><span class=\"line\"><span class=\"comment\">//     throw new Error(&quot;第二次的失败回调&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   .finally(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;finally&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// (async function() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   const res = MyPromise.all([</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(1);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(2);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       return 123;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     88888,</span></span><br><span class=\"line\"><span class=\"comment\">//   ]);</span></span><br><span class=\"line\"><span class=\"comment\">//   res.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (async function() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   const res = MyPromise.race([</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(1);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(2);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//   ]);</span></span><br><span class=\"line\"><span class=\"comment\">//   res.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)();</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Promise-的缺点\"><a href=\"#Promise-的缺点\" class=\"headerlink\" title=\"Promise 的缺点\"></a>Promise 的缺点</h5><p>无法取消 Promise，一旦新建它就会立即执行，无法中途取消。</p>\n<p>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。</p>\n<p>当处于 pending 状态时，无法得知目前进展到哪一个阶段(刚刚开始 还是即将完成)。</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h5><p>Promise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。 一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变， 就凝固了，无法再被改变了。</p>\n<p>状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在 异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原 型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的 改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的 末尾执行。</p>\n<p>注意:在构造 Promise 的时候，构造函数内部的代码是立即执行的。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/javascript/async/await.html"],"length":13405,"excerpt":"<h5 id=\"Promise-是什么？\"><a href=\"#Promise-是什么？\" class=\"headerlink\" title=\"Promise 是什么？\"></a>Promise 是什么？</h5><p>Promise 是异步编程的一种解决方案，它是一个对象，可以获取异步 操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调， 它比传统的解决方案回调函数和事件更合理和更强大。</p>","more":"<p>所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束 的事件(通常是一个异步操作)的结果。从语法上说，Promise 是一 个对象，从它可以获取异步操作的消息。Promise 提供统一的 API， 各种异步操作都可以用同样的方法进行处理。</p>\n<ol>\n<li>Promise 的实例有三个状态:</li>\n</ol>\n<ul>\n<li><p>Pending(进行中)</p>\n</li>\n<li><p>Resolved(已完成)</p>\n</li>\n<li><p>Rejected(已拒绝)</p>\n</li>\n</ul>\n<p>当把一件事情交给 promise 时，它的状态就是 Pending，任务完成了 状态就变成了 Resolved、没有完成失败了就变成了 Rejected。</p>\n<ol start=\"2\">\n<li><p>Promise 的实例有两个过程:<br> pending -&gt; fulfilled: Resolved(已完成)<br> pending -&gt; rejected: Rejected(已拒绝)</p>\n<p> 注意:一旦从进行状态变成为其他状态就永远不能更改状态了。</p>\n</li>\n</ol>\n<h5 id=\"Promise-的特点\"><a href=\"#Promise-的特点\" class=\"headerlink\" title=\"Promise 的特点\"></a>Promise 的特点</h5><p>对象的状态不受外界影响。promise 对象代表一个异步操作，有三种 状态，pending(进行中)、fulfilled(已成功)、rejected(已失 败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他 操作都无法改变这个状态，这也是 promise 这个名字的由来——“承 诺”;</p>\n<p>一旦状态改变就不会再变，任何时候都可以得到这个结果。promise 对象的状态改变，只有两种可能:从 pending 变为 fulfilled，从 pending 变为 rejected。这时就称为 resolved(已定型)。如果改 变已经发生了，你再对 promise 对象添加回调函数，也会立即得到这 个结果。这与事件(event)完全不同，事件的特点是:如果你错过 了它，再去监听是得不到结果的。</p>\n<h5 id=\"Promise-实现\"><a href=\"#Promise-实现\" class=\"headerlink\" title=\"Promise 实现\"></a>Promise 实现</h5><p>Promise 实现是通过js class编写，主要包括status、value、error、resolve、reject、then、catch、all、race、allSettled、any等组成。</p>\n<ol>\n<li>状态</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span> = <span class=\"string\">&quot;pending&quot;</span>; <span class=\"comment\">// 进行中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> = <span class=\"string\">&quot;fulfilled&quot;</span>; <span class=\"comment\">// 已完成</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> = <span class=\"string\">&quot;rejected&quot;</span>; <span class=\"comment\">// 已拒绝</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>resolve 创建一个已解决的Promise对象，将给定的值作为其参数。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>reject 创建一个已拒绝的Promise对象，将给定的原因作为其参数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>then 添加对Promise对象解决或拒绝时的处理程序</li>\n</ol>\n<ul>\n<li>单个方法调用</li>\n</ul>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">executer</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resFn</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFn</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> resolve = (<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PROMISE_STATUS_FULFILLED</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">//queueMicrotask:  主线程执行完毕之后立马执行</span></span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">resfn</span>(value)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">const</span> reject = (<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PROMISE_STATUS_REJECTED</span></span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">errfn</span>(error)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">   <span class=\"title function_\">executer</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resFn</span> = resFn;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFn</span> = errFn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行结果  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"number\">333333</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;        <span class=\"comment\">//最终打印 1111</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>优化then 方法</li>\n</ul>\n<p>官方给与的then 方法是可以进行数组传值和链式调用的，而目前我们写的是不支持。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span> = [] <span class=\"comment\">//1.多次调用then 时用数组 保存</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span> = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将then 方法修改为 </span></span><br><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resfns</span>.<span class=\"title function_\">push</span>(resFn);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(errFn);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// resolve修改为</span></span><br><span class=\"line\">resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// reject 修改为</span></span><br><span class=\"line\">reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  优化后then的运行结果<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res1:&quot;</span>, res) </span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err1:&quot;</span>, err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 调用then方法多次调用</span></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res2:&quot;</span>, res)</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err2:&quot;</span>, err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>运行结果：res2: 111  因为后面的.then 把前面的覆盖掉了 并不会执行res1 所在的代码块<br>*由此可见 then 方法调用时应该是个数组然后依次调用<br>下面改造我们的代码then,还需要优化执行resolve 时调用reject<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnRejected</span> = (<span class=\"params\">err</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    errFn = errFn || defaultOnRejected;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnFulFilled</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    resFn = resFn || defaultOnFulFilled;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> &amp;&amp; !!resFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> &amp;&amp; !!errFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!resFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!errFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">errFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><br>然后执行：<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"number\">333333</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res1:&quot;</span>, res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err1:&quot;</span>, err);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 调用then方法多次调用</span></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res2:&quot;</span>, res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err2:&quot;</span>, err);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">执行结果：</span><br><span class=\"line\"><span class=\"attr\">res1</span>: <span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"attr\">res2</span>: <span class=\"number\">111</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li><p>catch 添加对Promise对象拒绝时的处理程序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加对Promise对象拒绝时的处理程序。</span></span><br><span class=\"line\"><span class=\"keyword\">catch</span>(errFn) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">undefined</span>, errFn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>finally 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">finally</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>all 接收一个可迭代对象（如数组），并返回一个新的Promise对象。当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过类型判断当前数组中的方法或者对象是否为Promise 对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isPromise = <span class=\"keyword\">function</span>(<span class=\"params\">promise</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    !!promise &amp;&amp;</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> promise.<span class=\"property\">then</span> === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any[]</span>&#125; <span class=\"variable\">iterable</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 实际上多个对象同步执行时，就相当于把所有的方法重新进行Promise一次。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当遍历到最后一个时，resolve 所有结果。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = iterable.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> results = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> promise = iterable[i];</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(promise)) &#123;</span><br><span class=\"line\">        promise</span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            results[i] = res;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        results[i] = <span class=\"title function_\">promise</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        results[i] = promise;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>all 运行示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">88888</span>,</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  res.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">运行结果: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">123</span>,  <span class=\"number\">88888</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>race Promise.race(iterable) 传入多个对象,当任何一个执行完成后 resolve 结果</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    iterable.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(p)) &#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> p === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"title function_\">p</span>());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>race 运行示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">race</span>([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  res.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">运行结果： <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>完整代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// status</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span> = <span class=\"string\">&quot;pending&quot;</span>; <span class=\"comment\">// 进行中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> = <span class=\"string\">&quot;fulfilled&quot;</span>; <span class=\"comment\">// 已完成</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> = <span class=\"string\">&quot;rejected&quot;</span>; <span class=\"comment\">// 已拒绝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executer</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executer</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//    创建一个已解决的Promise对象，将给定的值作为其参数。</span></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个已拒绝的Promise对象，将给定的原因作为其参数。</span></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//   添加对Promise对象解决或拒绝时的处理程序。</span></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnRejected</span> = (<span class=\"params\">err</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    errFn = errFn || defaultOnRejected;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnFulFilled</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    resFn = resFn || defaultOnFulFilled;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> &amp;&amp; !!resFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> &amp;&amp; !!errFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!resFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!errFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">errFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加对Promise对象拒绝时的处理程序。</span></span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(errFn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">undefined</span>, errFn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。</span></span><br><span class=\"line\">  <span class=\"title function_\">finally</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isPromise = <span class=\"keyword\">function</span>(<span class=\"params\">promise</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    !!promise &amp;&amp;</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> promise.<span class=\"property\">then</span> === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any[]</span>&#125; <span class=\"variable\">iterable</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = iterable.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> results = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> promise = iterable[i];</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(promise)) &#123;</span><br><span class=\"line\">        promise</span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            results[i] = res;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        results[i] = <span class=\"title function_\">promise</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        results[i] = promise;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    iterable.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(p)) &#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> p === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"title function_\">p</span>());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// const p1 = new MyPromise((resolve, reject) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(&quot;状态pending&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   resolve(&quot;22222&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   reject(&quot;3333333&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p1.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(&quot;res1:&quot;, res);</span></span><br><span class=\"line\"><span class=\"comment\">//   return &quot;第二次的成功回调&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   .catch((error) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;err1:&quot;, error);</span></span><br><span class=\"line\"><span class=\"comment\">//     throw new Error(&quot;第二次的失败回调&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   .finally(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;finally&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// (async function() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   const res = MyPromise.all([</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(1);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(2);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       return 123;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     88888,</span></span><br><span class=\"line\"><span class=\"comment\">//   ]);</span></span><br><span class=\"line\"><span class=\"comment\">//   res.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (async function() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   const res = MyPromise.race([</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(1);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(2);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//   ]);</span></span><br><span class=\"line\"><span class=\"comment\">//   res.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)();</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Promise-的缺点\"><a href=\"#Promise-的缺点\" class=\"headerlink\" title=\"Promise 的缺点\"></a>Promise 的缺点</h5><p>无法取消 Promise，一旦新建它就会立即执行，无法中途取消。</p>\n<p>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。</p>\n<p>当处于 pending 状态时，无法得知目前进展到哪一个阶段(刚刚开始 还是即将完成)。</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h5><p>Promise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。 一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变， 就凝固了，无法再被改变了。</p>\n<p>状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在 异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原 型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的 改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的 末尾执行。</p>\n<p>注意:在构造 Promise 的时候，构造函数内部的代码是立即执行的。</p>"},{"title":"对原型、原型链的理解","date":"2023-10-23T12:37:51.000Z","description":"JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。","comments":1,"_content":"\n在 JavaScript 中是使用构造两数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造西数的所有实例共享的属性和方法。\n当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造两数的prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在 浏览器中都实现了_proto_ 属性来访问这个属性，但是最好不要 使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法米获取对象的原型。 \n\n当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象义会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 0bject.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。 \n\n特点：JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。\n![原型链图解](https://pic.imgdb.cn/item/65366accc458853aefbfcd92.jpg)\n那么原型链的终点是什么？如何打印出原型链的终点？\n\n由于 Object 是构造函数，原型链终点 Ob ject.prototype._proto_，而 Object.prototype._proto_ === null // true，所以，原型链的终点是 null。原型链上的所有原型都是对象，所有的对象最终都是由 0bject 构造的，而 Object.prototype 的下一级是Object. prototype._proto_。\n\n![在这里插入图片描述](https://pic.imgdb.cn/item/653668e4c458853aefb94875.jpg)\n","source":"_posts/javaScript/prototype.md","raw":"---\ntitle: 对原型、原型链的理解\npermalink: /javascript/prototype.html\ndate: 2023-10-23 20:37:51\ndescription: JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。\ntag: [前端, JavaScript, es6]\ncomments: true\ncategories: \n - 前端\n - es6\n---\n\n在 JavaScript 中是使用构造两数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造西数的所有实例共享的属性和方法。\n当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造两数的prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在 浏览器中都实现了_proto_ 属性来访问这个属性，但是最好不要 使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法米获取对象的原型。 \n\n当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象义会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 0bject.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。 \n\n特点：JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。\n![原型链图解](https://pic.imgdb.cn/item/65366accc458853aefbfcd92.jpg)\n那么原型链的终点是什么？如何打印出原型链的终点？\n\n由于 Object 是构造函数，原型链终点 Ob ject.prototype._proto_，而 Object.prototype._proto_ === null // true，所以，原型链的终点是 null。原型链上的所有原型都是对象，所有的对象最终都是由 0bject 构造的，而 Object.prototype 的下一级是Object. prototype._proto_。\n\n![在这里插入图片描述](https://pic.imgdb.cn/item/653668e4c458853aefb94875.jpg)\n","slug":"javaScript/prototype","published":1,"updated":"2023-10-23T12:45:14.869Z","__permalink":"/javascript/prototype.html","layout":"post","photos":[],"link":"","_id":"clo8nc4du000qg0uo8ntd1i3h","content":"<div id=\"vip-container\"><p>在 JavaScript 中是使用构造两数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造西数的所有实例共享的属性和方法。<br>当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造两数的prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在 浏览器中都实现了_proto_ 属性来访问这个属性，但是最好不要 使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法米获取对象的原型。 </p>\n<p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象义会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 0bject.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。 </p>\n<p>特点：JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。<br><img src=\"https://pic.imgdb.cn/item/65366accc458853aefbfcd92.jpg\" alt=\"原型链图解\"><br>那么原型链的终点是什么？如何打印出原型链的终点？</p>\n<p>由于 Object 是构造函数，原型链终点 Ob ject.prototype._proto_，而 Object.prototype.<em>proto</em> &#x3D;&#x3D;&#x3D; null &#x2F;&#x2F; true，所以，原型链的终点是 null。原型链上的所有原型都是对象，所有的对象最终都是由 0bject 构造的，而 Object.prototype 的下一级是Object. prototype._proto_。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653668e4c458853aefb94875.jpg\" alt=\"在这里插入图片描述\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/browser/render/process.html"],"length":738,"excerpt":"","more":"<p>在 JavaScript 中是使用构造两数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造西数的所有实例共享的属性和方法。<br>当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造两数的prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在 浏览器中都实现了_proto_ 属性来访问这个属性，但是最好不要 使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法米获取对象的原型。 </p>\n<p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象义会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 0bject.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。 </p>\n<p>特点：JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。<br><img src=\"https://pic.imgdb.cn/item/65366accc458853aefbfcd92.jpg\" alt=\"原型链图解\"><br>那么原型链的终点是什么？如何打印出原型链的终点？</p>\n<p>由于 Object 是构造函数，原型链终点 Ob ject.prototype._proto_，而 Object.prototype.<em>proto</em> &#x3D;&#x3D;&#x3D; null &#x2F;&#x2F; true，所以，原型链的终点是 null。原型链上的所有原型都是对象，所有的对象最终都是由 0bject 构造的，而 Object.prototype 的下一级是Object. prototype._proto_。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653668e4c458853aefb94875.jpg\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"var、let、const的区别","date":"2023-10-23T12:34:19.000Z","description":"var、let、const三大基础类型使用非常广泛，所以需要切实熟练使用他们，更需要了解他们的所有属性。","comments":1,"_content":"\n##### var 关键词\n1. var声明作用域\nvar定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问\n\n```javascript\nfunction test() {\n    var message = \"hello world\";   // 局部变量\n}\ntest();\nconsole.log(message);  // 报错\n```\n\n函数test()调用时会创建变量message并给它赋值，调用之后变量随即被销毁。因此，在函数test()之外调用变量message会报错\n\n在函数内定义变量时省略var操作符，可以创建一个全局变量\n\n```javascript\nfunction test() {\n    message = \"hello world\";   // 局部变量\n}\ntest();\nconsole.log(message);  // hello world\n```\n\n省略掉var操作符之后，message就变成了全局变量。只要调用一次函数test()，就会定义这个变量，并且可以在函数外部访问到。在局部作用域中定义的全局变量很难维护，不推荐这么做。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出ReferenceError。\n\n2. var声明提升\nvar在js中是支持预解析的，如下代码不会报错。这是因为使用var声明的变量会自动提升到函数作用域顶部：\n\n```javascript\nfunction foo() {\n    console.log(age);\n    var age = 26;\n}\nfoo(); // undefined\n```\n\njavaScript引擎，在代码预编译时，javaScript引擎会自动将所有代码里面的var关键字声明的语句都会提升到当前作用域的顶端,如下代码：\n\n```javascript\nfunction foo() {\n    var age;\n    console.log(age);\n    age = 26;\n}\nfoo(); // undefined\n```\n\n##### let声明\n1. let声明作用域\nlet定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问，而var可以跨块访问\n\n```javascript\n// var定义的变量\nif (true) {\n    var name = 'Matt';\n    console.log(name); // Matt\n}\nconsole.log(name); // Matt\n\n// let定义的变量\nif (true) {\n    let age = 26;\n    console.log(age); // 26\n}\nconsole.log(age); // ReferenceError: age没有定义\n```\n\nlet也不允许同一个块作用域中出现冗余声明（重复声明）\n\n```javascript\nvar name;\nvar name;\n\nlet age;\nlet age; // SyntaxError；标识符age已经声明过了\n```\n\n2. 暂时性死区\nlet、const与var的另一个重要的区别，let、const声明的变量不会在作用域中被提升。ES6新增的let、const关键字声明的变量会产生块级作用域，如果变量在当前作用域中被创建出来，由于此时还未完成语法绑定，所以是不能被访问的，如果访问就会抛出错误ReferenceError。因此，在这运行流程进入作用域创建变量，到变量可以被访问之间的这一段时间，就称之为暂时死区。\n\n```javascript\n// name会被提升\nconsole.log(name); // undefined\nvar name = 'Matt';\n\n// age不会被提升\nconsole.log(age); // ReferenceError：age没有定义\nlet age = 26;\n```\n\n3. 全局声明\n与var关键字不同，var定义的全局变量会挂载到window对象上，使用window可以访问，而let在全局作用域中声明的变量不会成为window对象的属性\n\n```javascript\nvar name = 'Matt';\nconsole.log(window.name); // 'Matt'\n\nlet age = 26;\nconsole.log(window.age); // undefined\n```\n\n4. for循环中的var、let声明\nfor循环中var定义的迭代变量会渗透到循环体外部：\n\n```javascript\nfor (var i = 0; i < 5; ++i) {\n    // 循环逻辑\n}\nconsole.log(i); // 5\n```\n\n改成使用let之后，这个问题就消失了，因为迭代变量的作用域仅限于for循环块内部：\n\n```javascript\nfor (let i = 0; i < 5; ++i) {\n    // 循环逻辑\n}\nconsole.log(i); // ReferenceError: i没有定义\n```\n\n使用var和let定义for循环中的变量，循环里使用定时器setTimeout后循环结果如下代码：\n\n```javascript\nfor (var i = 0; i < 5; ++i) {\n    setTimeout(() => console.log(i), 0)\n}\n// 输出5、5、5、5、5\n\nfor (let i = 0; i < 5; ++i) {\n    setTimeout(() => console.log(i), 0)\n}\n// 输出0、1、2、3、4\n```\n\nlet 是在代码块内有效，var 是在全局范围内有效。let 只能声明一次 ，var 可以声明多次。\n\n当同步代码执行完毕后，开始执行异步的setTimeout代码，执行setTimeout时需要从当前作用域内寻找一个变量 i，for循环执行完毕，当前 i=5，执行setTimeout时输出为5，任务队列中的剩余4个setTimeout也依次执行，输出为5。\n\n变量 j 是用 let 声明的，当前的 i 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出0-4。\n\n##### const声明\nconst的行为与let基本相同，唯一一个重要的区别是：\n\nconst是用来定义常量的，而且定义的时候必须赋值，不赋值会报错，定义之后是不允许被修改的，修改const声明的变量会导致运行时错误。\n\n```javascript\nconst age = 26;\nage = 36; // TypeError: 给常量赋值\n\n// const也不允许重复声明\nconst name = 'Matt';\nconst name = 'Nicholas'; // SyntaxError\n\n// const声明的作用域也是块\nconst name = 'Matt';\nif (true) {\n    const name = 'Nicholas';\n}\nconsole.log(name); // Matt\n```\n\n而const声明的变量是一个对象时，修改这个对象内部的属性并不会报错。\n\n这是因为const声明的是栈区里的内容不能修改，基本数据类型的值直接在栈内存中存储，而引用数据类型在栈区保存的是对象在堆区的地址，修改对象的属性，不会修改对象在栈区的地址，如果重新给对象person赋值，则会报错。\n\n```javascript\nconst person = {\n    name: 'Lili'\n};\nperson.name = 'Matt'; // ok\n```\n\nJavaScript引擎会为for循环中的let声明分别创建独立的变量实例，虽然const变量跟let变量很相似，但是不能用const来声明迭代变量（因为迭代变量会自增）：\n\n```javascript\nfor (const i = 0; i < 10; ++i) {} // TypeError：给常量赋值\n```\n\n不过，如果你只想用const声明一个不会被修改的for循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对for-of和for-in循环特别有意义：\n\n\n```javascript\nlet i = 0;\nfor (const j = 7; i < 5; ++i) {\n    console.log(j);\n}\n// 7, 7, 7, 7, 7\nfor (const key in {a: 1, b: 2}) {\n    console.log(key);\n}\n// a, b\nfor (const value of [1,2,3,4,5]) {\n    console.log(value);\n}\n// 1, 2, 3, 4, 5\n```\n","source":"_posts/javaScript/varLetConst.md","raw":"---\ntitle: var、let、const的区别\npermalink: /javascript/var/let/const.html\ndate: 2023-10-23 20:34:19\ndescription: var、let、const三大基础类型使用非常广泛，所以需要切实熟练使用他们，更需要了解他们的所有属性。\ntag: [前端, JavaScript, es6]\ncomments: true\ncategories: \n - 前端\n - es6\n---\n\n##### var 关键词\n1. var声明作用域\nvar定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问\n\n```javascript\nfunction test() {\n    var message = \"hello world\";   // 局部变量\n}\ntest();\nconsole.log(message);  // 报错\n```\n\n函数test()调用时会创建变量message并给它赋值，调用之后变量随即被销毁。因此，在函数test()之外调用变量message会报错\n\n在函数内定义变量时省略var操作符，可以创建一个全局变量\n\n```javascript\nfunction test() {\n    message = \"hello world\";   // 局部变量\n}\ntest();\nconsole.log(message);  // hello world\n```\n\n省略掉var操作符之后，message就变成了全局变量。只要调用一次函数test()，就会定义这个变量，并且可以在函数外部访问到。在局部作用域中定义的全局变量很难维护，不推荐这么做。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出ReferenceError。\n\n2. var声明提升\nvar在js中是支持预解析的，如下代码不会报错。这是因为使用var声明的变量会自动提升到函数作用域顶部：\n\n```javascript\nfunction foo() {\n    console.log(age);\n    var age = 26;\n}\nfoo(); // undefined\n```\n\njavaScript引擎，在代码预编译时，javaScript引擎会自动将所有代码里面的var关键字声明的语句都会提升到当前作用域的顶端,如下代码：\n\n```javascript\nfunction foo() {\n    var age;\n    console.log(age);\n    age = 26;\n}\nfoo(); // undefined\n```\n\n##### let声明\n1. let声明作用域\nlet定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问，而var可以跨块访问\n\n```javascript\n// var定义的变量\nif (true) {\n    var name = 'Matt';\n    console.log(name); // Matt\n}\nconsole.log(name); // Matt\n\n// let定义的变量\nif (true) {\n    let age = 26;\n    console.log(age); // 26\n}\nconsole.log(age); // ReferenceError: age没有定义\n```\n\nlet也不允许同一个块作用域中出现冗余声明（重复声明）\n\n```javascript\nvar name;\nvar name;\n\nlet age;\nlet age; // SyntaxError；标识符age已经声明过了\n```\n\n2. 暂时性死区\nlet、const与var的另一个重要的区别，let、const声明的变量不会在作用域中被提升。ES6新增的let、const关键字声明的变量会产生块级作用域，如果变量在当前作用域中被创建出来，由于此时还未完成语法绑定，所以是不能被访问的，如果访问就会抛出错误ReferenceError。因此，在这运行流程进入作用域创建变量，到变量可以被访问之间的这一段时间，就称之为暂时死区。\n\n```javascript\n// name会被提升\nconsole.log(name); // undefined\nvar name = 'Matt';\n\n// age不会被提升\nconsole.log(age); // ReferenceError：age没有定义\nlet age = 26;\n```\n\n3. 全局声明\n与var关键字不同，var定义的全局变量会挂载到window对象上，使用window可以访问，而let在全局作用域中声明的变量不会成为window对象的属性\n\n```javascript\nvar name = 'Matt';\nconsole.log(window.name); // 'Matt'\n\nlet age = 26;\nconsole.log(window.age); // undefined\n```\n\n4. for循环中的var、let声明\nfor循环中var定义的迭代变量会渗透到循环体外部：\n\n```javascript\nfor (var i = 0; i < 5; ++i) {\n    // 循环逻辑\n}\nconsole.log(i); // 5\n```\n\n改成使用let之后，这个问题就消失了，因为迭代变量的作用域仅限于for循环块内部：\n\n```javascript\nfor (let i = 0; i < 5; ++i) {\n    // 循环逻辑\n}\nconsole.log(i); // ReferenceError: i没有定义\n```\n\n使用var和let定义for循环中的变量，循环里使用定时器setTimeout后循环结果如下代码：\n\n```javascript\nfor (var i = 0; i < 5; ++i) {\n    setTimeout(() => console.log(i), 0)\n}\n// 输出5、5、5、5、5\n\nfor (let i = 0; i < 5; ++i) {\n    setTimeout(() => console.log(i), 0)\n}\n// 输出0、1、2、3、4\n```\n\nlet 是在代码块内有效，var 是在全局范围内有效。let 只能声明一次 ，var 可以声明多次。\n\n当同步代码执行完毕后，开始执行异步的setTimeout代码，执行setTimeout时需要从当前作用域内寻找一个变量 i，for循环执行完毕，当前 i=5，执行setTimeout时输出为5，任务队列中的剩余4个setTimeout也依次执行，输出为5。\n\n变量 j 是用 let 声明的，当前的 i 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出0-4。\n\n##### const声明\nconst的行为与let基本相同，唯一一个重要的区别是：\n\nconst是用来定义常量的，而且定义的时候必须赋值，不赋值会报错，定义之后是不允许被修改的，修改const声明的变量会导致运行时错误。\n\n```javascript\nconst age = 26;\nage = 36; // TypeError: 给常量赋值\n\n// const也不允许重复声明\nconst name = 'Matt';\nconst name = 'Nicholas'; // SyntaxError\n\n// const声明的作用域也是块\nconst name = 'Matt';\nif (true) {\n    const name = 'Nicholas';\n}\nconsole.log(name); // Matt\n```\n\n而const声明的变量是一个对象时，修改这个对象内部的属性并不会报错。\n\n这是因为const声明的是栈区里的内容不能修改，基本数据类型的值直接在栈内存中存储，而引用数据类型在栈区保存的是对象在堆区的地址，修改对象的属性，不会修改对象在栈区的地址，如果重新给对象person赋值，则会报错。\n\n```javascript\nconst person = {\n    name: 'Lili'\n};\nperson.name = 'Matt'; // ok\n```\n\nJavaScript引擎会为for循环中的let声明分别创建独立的变量实例，虽然const变量跟let变量很相似，但是不能用const来声明迭代变量（因为迭代变量会自增）：\n\n```javascript\nfor (const i = 0; i < 10; ++i) {} // TypeError：给常量赋值\n```\n\n不过，如果你只想用const声明一个不会被修改的for循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对for-of和for-in循环特别有意义：\n\n\n```javascript\nlet i = 0;\nfor (const j = 7; i < 5; ++i) {\n    console.log(j);\n}\n// 7, 7, 7, 7, 7\nfor (const key in {a: 1, b: 2}) {\n    console.log(key);\n}\n// a, b\nfor (const value of [1,2,3,4,5]) {\n    console.log(value);\n}\n// 1, 2, 3, 4, 5\n```\n","slug":"javaScript/varLetConst","published":1,"updated":"2023-10-23T12:35:56.937Z","__permalink":"/javascript/var/let/const.html","layout":"post","photos":[],"link":"","_id":"clo8nc4du000rg0uoc2obh0m0","content":"<div id=\"vip-container\"><h5 id=\"var-关键词\"><a href=\"#var-关键词\" class=\"headerlink\" title=\"var 关键词\"></a>var 关键词</h5><ol>\n<li>var声明作用域<br>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = <span class=\"string\">&quot;hello world&quot;</span>;   <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message);  <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p>函数test()调用时会创建变量message并给它赋值，调用之后变量随即被销毁。因此，在函数test()之外调用变量message会报错</p>\n<p>在函数内定义变量时省略var操作符，可以创建一个全局变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    message = <span class=\"string\">&quot;hello world&quot;</span>;   <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message);  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n<p>省略掉var操作符之后，message就变成了全局变量。只要调用一次函数test()，就会定义这个变量，并且可以在函数外部访问到。在局部作用域中定义的全局变量很难维护，不推荐这么做。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出ReferenceError。</p>\n<ol start=\"2\">\n<li>var声明提升<br>var在js中是支持预解析的，如下代码不会报错。这是因为使用var声明的变量会自动提升到函数作用域顶部：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>javaScript引擎，在代码预编译时，javaScript引擎会自动将所有代码里面的var关键字声明的语句都会提升到当前作用域的顶端,如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">    age = <span class=\"number\">26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"let声明\"><a href=\"#let声明\" class=\"headerlink\" title=\"let声明\"></a>let声明</h5><ol>\n<li>let声明作用域<br>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问，而var可以跨块访问</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var定义的变量</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let定义的变量</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// 26</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// ReferenceError: age没有定义</span></span><br></pre></td></tr></table></figure>\n\n<p>let也不允许同一个块作用域中出现冗余声明（重复声明）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age; <span class=\"comment\">// SyntaxError；标识符age已经声明过了</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>暂时性死区<br>let、const与var的另一个重要的区别，let、const声明的变量不会在作用域中被提升。ES6新增的let、const关键字声明的变量会产生块级作用域，如果变量在当前作用域中被创建出来，由于此时还未完成语法绑定，所以是不能被访问的，如果访问就会抛出错误ReferenceError。因此，在这运行流程进入作用域创建变量，到变量可以被访问之间的这一段时间，就称之为暂时死区。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// name会被提升</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// age不会被提升</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// ReferenceError：age没有定义</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>全局声明<br>与var关键字不同，var定义的全局变量会挂载到window对象上，使用window可以访问，而let在全局作用域中声明的变量不会成为window对象的属性</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">name</span>); <span class=\"comment\">// &#x27;Matt&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">age</span>); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>for循环中的var、let声明<br>for循环中var定义的迭代变量会渗透到循环体外部：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>改成使用let之后，这个问题就消失了，因为迭代变量的作用域仅限于for循环块内部：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// ReferenceError: i没有定义</span></span><br></pre></td></tr></table></figure>\n\n<p>使用var和let定义for循环中的变量，循环里使用定时器setTimeout后循环结果如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出5、5、5、5、5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出0、1、2、3、4</span></span><br></pre></td></tr></table></figure>\n\n<p>let 是在代码块内有效，var 是在全局范围内有效。let 只能声明一次 ，var 可以声明多次。</p>\n<p>当同步代码执行完毕后，开始执行异步的setTimeout代码，执行setTimeout时需要从当前作用域内寻找一个变量 i，for循环执行完毕，当前 i&#x3D;5，执行setTimeout时输出为5，任务队列中的剩余4个setTimeout也依次执行，输出为5。</p>\n<p>变量 j 是用 let 声明的，当前的 i 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出0-4。</p>\n<h5 id=\"const声明\"><a href=\"#const声明\" class=\"headerlink\" title=\"const声明\"></a>const声明</h5><p>const的行为与let基本相同，唯一一个重要的区别是：</p>\n<p>const是用来定义常量的，而且定义的时候必须赋值，不赋值会报错，定义之后是不允许被修改的，修改const声明的变量会导致运行时错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">age = <span class=\"number\">36</span>; <span class=\"comment\">// TypeError: 给常量赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const也不允许重复声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Nicholas&#x27;</span>; <span class=\"comment\">// SyntaxError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const声明的作用域也是块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Nicholas&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br></pre></td></tr></table></figure>\n\n<p>而const声明的变量是一个对象时，修改这个对象内部的属性并不会报错。</p>\n<p>这是因为const声明的是栈区里的内容不能修改，基本数据类型的值直接在栈内存中存储，而引用数据类型在栈区保存的是对象在堆区的地址，修改对象的属性，不会修改对象在栈区的地址，如果重新给对象person赋值，则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Lili&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Matt&#x27;</span>; <span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript引擎会为for循环中的let声明分别创建独立的变量实例，虽然const变量跟let变量很相似，但是不能用const来声明迭代变量（因为迭代变量会自增）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;&#125; <span class=\"comment\">// TypeError：给常量赋值</span></span><br></pre></td></tr></table></figure>\n\n<p>不过，如果你只想用const声明一个不会被修改的for循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对for-of和for-in循环特别有意义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> j = <span class=\"number\">7</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 7, 7, 7, 7, 7</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a, b</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":3402,"excerpt":"","more":"<h5 id=\"var-关键词\"><a href=\"#var-关键词\" class=\"headerlink\" title=\"var 关键词\"></a>var 关键词</h5><ol>\n<li>var声明作用域<br>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = <span class=\"string\">&quot;hello world&quot;</span>;   <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message);  <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p>函数test()调用时会创建变量message并给它赋值，调用之后变量随即被销毁。因此，在函数test()之外调用变量message会报错</p>\n<p>在函数内定义变量时省略var操作符，可以创建一个全局变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    message = <span class=\"string\">&quot;hello world&quot;</span>;   <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message);  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n<p>省略掉var操作符之后，message就变成了全局变量。只要调用一次函数test()，就会定义这个变量，并且可以在函数外部访问到。在局部作用域中定义的全局变量很难维护，不推荐这么做。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出ReferenceError。</p>\n<ol start=\"2\">\n<li>var声明提升<br>var在js中是支持预解析的，如下代码不会报错。这是因为使用var声明的变量会自动提升到函数作用域顶部：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>javaScript引擎，在代码预编译时，javaScript引擎会自动将所有代码里面的var关键字声明的语句都会提升到当前作用域的顶端,如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">    age = <span class=\"number\">26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"let声明\"><a href=\"#let声明\" class=\"headerlink\" title=\"let声明\"></a>let声明</h5><ol>\n<li>let声明作用域<br>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问，而var可以跨块访问</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var定义的变量</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let定义的变量</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// 26</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// ReferenceError: age没有定义</span></span><br></pre></td></tr></table></figure>\n\n<p>let也不允许同一个块作用域中出现冗余声明（重复声明）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age; <span class=\"comment\">// SyntaxError；标识符age已经声明过了</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>暂时性死区<br>let、const与var的另一个重要的区别，let、const声明的变量不会在作用域中被提升。ES6新增的let、const关键字声明的变量会产生块级作用域，如果变量在当前作用域中被创建出来，由于此时还未完成语法绑定，所以是不能被访问的，如果访问就会抛出错误ReferenceError。因此，在这运行流程进入作用域创建变量，到变量可以被访问之间的这一段时间，就称之为暂时死区。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// name会被提升</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// age不会被提升</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// ReferenceError：age没有定义</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>全局声明<br>与var关键字不同，var定义的全局变量会挂载到window对象上，使用window可以访问，而let在全局作用域中声明的变量不会成为window对象的属性</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">name</span>); <span class=\"comment\">// &#x27;Matt&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">age</span>); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>for循环中的var、let声明<br>for循环中var定义的迭代变量会渗透到循环体外部：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>改成使用let之后，这个问题就消失了，因为迭代变量的作用域仅限于for循环块内部：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// ReferenceError: i没有定义</span></span><br></pre></td></tr></table></figure>\n\n<p>使用var和let定义for循环中的变量，循环里使用定时器setTimeout后循环结果如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出5、5、5、5、5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出0、1、2、3、4</span></span><br></pre></td></tr></table></figure>\n\n<p>let 是在代码块内有效，var 是在全局范围内有效。let 只能声明一次 ，var 可以声明多次。</p>\n<p>当同步代码执行完毕后，开始执行异步的setTimeout代码，执行setTimeout时需要从当前作用域内寻找一个变量 i，for循环执行完毕，当前 i&#x3D;5，执行setTimeout时输出为5，任务队列中的剩余4个setTimeout也依次执行，输出为5。</p>\n<p>变量 j 是用 let 声明的，当前的 i 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出0-4。</p>\n<h5 id=\"const声明\"><a href=\"#const声明\" class=\"headerlink\" title=\"const声明\"></a>const声明</h5><p>const的行为与let基本相同，唯一一个重要的区别是：</p>\n<p>const是用来定义常量的，而且定义的时候必须赋值，不赋值会报错，定义之后是不允许被修改的，修改const声明的变量会导致运行时错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">age = <span class=\"number\">36</span>; <span class=\"comment\">// TypeError: 给常量赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const也不允许重复声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Nicholas&#x27;</span>; <span class=\"comment\">// SyntaxError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const声明的作用域也是块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Nicholas&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br></pre></td></tr></table></figure>\n\n<p>而const声明的变量是一个对象时，修改这个对象内部的属性并不会报错。</p>\n<p>这是因为const声明的是栈区里的内容不能修改，基本数据类型的值直接在栈内存中存储，而引用数据类型在栈区保存的是对象在堆区的地址，修改对象的属性，不会修改对象在栈区的地址，如果重新给对象person赋值，则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Lili&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Matt&#x27;</span>; <span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript引擎会为for循环中的let声明分别创建独立的变量实例，虽然const变量跟let变量很相似，但是不能用const来声明迭代变量（因为迭代变量会自增）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;&#125; <span class=\"comment\">// TypeError：给常量赋值</span></span><br></pre></td></tr></table></figure>\n\n<p>不过，如果你只想用const声明一个不会被修改的for循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对for-of和for-in循环特别有意义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> j = <span class=\"number\">7</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 7, 7, 7, 7, 7</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a, b</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clo6whxcr0009dif386ndbd9x","category_id":"clo6whxco0004dif30ksm66ww","_id":"clo6whxd4000xdif3enmsdmmk"},{"post_id":"clo6whxcr0009dif386ndbd9x","category_id":"clo6whxcy000mdif3hs7ce1kj","_id":"clo6whxd50011dif3bf844ok4"},{"post_id":"clo6whxcs000bdif357v4fknv","category_id":"clo6whxco0004dif30ksm66ww","_id":"clo6whxd70019dif3cpbx3kie"},{"post_id":"clo6whxcs000bdif357v4fknv","category_id":"clo6whxd4000ydif3b309bit0","_id":"clo6whxd8001ddif350be0cie"},{"post_id":"clo6whxcv000fdif3cdvs8jup","category_id":"clo6whxco0004dif30ksm66ww","_id":"clo6whxd9001gdif3f2nt6c0c"},{"post_id":"clo6whxcv000fdif3cdvs8jup","category_id":"clo6whxd60014dif34ell5h0w","_id":"clo6whxda001kdif33kgyctna"},{"post_id":"clo6whxcq0007dif3g3tqgqy7","category_id":"clo6whxco0004dif30ksm66ww","_id":"clo6whxdi0029dif3dytger8b"},{"post_id":"clo6whxcq0007dif3g3tqgqy7","category_id":"clo6whxde001xdif37i4vgi1d","_id":"clo6whxdj002cdif3al7vctr3"},{"post_id":"clo6whxd70018dif3ea53bhr4","category_id":"clo6whxdm002pdif34p7o9kq9","_id":"clo6whxdp0037dif326mkcokh"},{"post_id":"clo6whxd7001adif304hjdhd1","category_id":"clo6whxdm002pdif34p7o9kq9","_id":"clo6whxdq003cdif38g25e3ca"},{"post_id":"clo6whxda001jdif3em0l2a8m","category_id":"clo6whxco0004dif30ksm66ww","_id":"clo6whxdr003odif372tv62zc"},{"post_id":"clo6whxda001jdif3em0l2a8m","category_id":"clo6whxdq003gdif3h5ro2iw6","_id":"clo6whxdr003rdif3caxg6p3x"},{"post_id":"clo6whxda001mdif3e7e4cjdr","category_id":"clo6whxco0004dif30ksm66ww","_id":"clo6whxds0041dif3aupqetg3"},{"post_id":"clo6whxda001mdif3e7e4cjdr","category_id":"clo6whxdq003gdif3h5ro2iw6","_id":"clo6whxds0043dif35tw36jfb"},{"post_id":"clo6whxdc001rdif32tq5468l","category_id":"clo6whxco0004dif30ksm66ww","_id":"clo6whxdt0047dif34pgz4lfb"},{"post_id":"clo6whxdc001rdif32tq5468l","category_id":"clo6whxdq003gdif3h5ro2iw6","_id":"clo6whxdt0048dif36zo8amo1"},{"post_id":"clo6whxdd001udif3cl651nvn","category_id":"clo6whxco0004dif30ksm66ww","_id":"clo6whxdu004idif38an1396w"},{"post_id":"clo6whxdd001udif3cl651nvn","category_id":"clo6whxdt0046dif38s5o3k3x","_id":"clo6whxdu004jdif372imd4hi"},{"post_id":"clo6whxde001ydif31r7o5gqu","category_id":"clo6whxco0004dif30ksm66ww","_id":"clo6whxdu004mdif3anzg6cs0"},{"post_id":"clo6whxde001ydif31r7o5gqu","category_id":"clo6whxdt0046dif38s5o3k3x","_id":"clo6whxdv004odif390sy9fsj"},{"post_id":"clo6whxdf0020dif36k6ocacp","category_id":"clo6whxco0004dif30ksm66ww","_id":"clo6whxdw004sdif39g23dn51"},{"post_id":"clo6whxdf0020dif36k6ocacp","category_id":"clo6whxdt0046dif38s5o3k3x","_id":"clo6whxdw004udif39o6sa6rv"},{"post_id":"clo6whxdg0024dif3huzfcjsj","category_id":"clo6whxco0004dif30ksm66ww","_id":"clo6whxdx004xdif3gkke2f3s"},{"post_id":"clo6whxdg0024dif3huzfcjsj","category_id":"clo6whxdt0046dif38s5o3k3x","_id":"clo6whxdx004zdif38l5h95ss"},{"post_id":"clo6whxdh0026dif3462h52fa","category_id":"clo6whxco0004dif30ksm66ww","_id":"clo6whxdz0057dif33hkue3a3"},{"post_id":"clo6whxdh0026dif3462h52fa","category_id":"clo6whxdt0046dif38s5o3k3x","_id":"clo6whxdz0059dif3h6wddfbb"},{"post_id":"clo6whxdi002adif33y8o63yk","category_id":"clo6whxd9001hdif35y1v1bcj","_id":"clo6whxdz005cdif3gm8a1o6y"},{"post_id":"clo6whxdi002adif33y8o63yk","category_id":"clo6whxdx0052dif3amvy5bdx","_id":"clo6whxe0005edif3cgoiamwv"},{"post_id":"clo6whxdj002ddif338ar0se6","category_id":"clo6whxd9001hdif35y1v1bcj","_id":"clo6whxe0005odif3adwx25y7"},{"post_id":"clo6whxdj002ddif338ar0se6","category_id":"clo6whxdx0052dif3amvy5bdx","_id":"clo6whxe1005pdif36t2j3vg9"},{"post_id":"clo6whxdk002jdif3a2gs92fp","category_id":"clo6whxd9001hdif35y1v1bcj","_id":"clo6whxe20060dif38j7vgki8"},{"post_id":"clo6whxdk002jdif3a2gs92fp","category_id":"clo6whxe1005rdif38nc1bcna","_id":"clo6whxe20061dif3fm0f04vg"},{"post_id":"clo6whxd50010dif3f5yog2wu","category_id":"clo6whxdm002pdif34p7o9kq9","_id":"clo6whxe4006hdif36y5z3855"},{"post_id":"clo6whxd50010dif3f5yog2wu","category_id":"clo6whxe30067dif3cvylggjq","_id":"clo6whxe4006idif36fe715fy"},{"post_id":"clo6whxd60012dif35y7c1wx8","category_id":"clo6whxdm002pdif34p7o9kq9","_id":"clo6whxe4006mdif31digddad"},{"post_id":"clo6whxd60012dif35y7c1wx8","category_id":"clo6whxe30067dif3cvylggjq","_id":"clo6whxe5006odif31r1bdkxb"},{"post_id":"clo6whxd60016dif3797phg6x","category_id":"clo6whxdm002pdif34p7o9kq9","_id":"clo6whxe5006sdif3dzzcdv1v"},{"post_id":"clo6whxd60016dif3797phg6x","category_id":"clo6whxe30067dif3cvylggjq","_id":"clo6whxe5006tdif3f81l8hde"},{"post_id":"clo6whxd8001edif30xac1c0s","category_id":"clo6whxdm002pdif34p7o9kq9","_id":"clo6whxe5006vdif3dw8i2tor"},{"post_id":"clo6whxd8001edif30xac1c0s","category_id":"clo6whxe30067dif3cvylggjq","_id":"clo6whxe6006xdif3297o9vja"},{"post_id":"clo6whxd9001fdif33vx2ck35","category_id":"clo6whxd9001hdif35y1v1bcj","_id":"clo6whxe60070dif325h34odr"},{"post_id":"clo6whxd9001fdif33vx2ck35","category_id":"clo6whxe5006rdif3a6dd2b10","_id":"clo6whxe60074dif3ffxa7xur"},{"post_id":"clo6whxd1000qdif37clu4w4l","category_id":"clo6whxd9001hdif35y1v1bcj","_id":"clo6whxe7007bdif31ys4cxum"},{"post_id":"clo6whxd1000qdif37clu4w4l","category_id":"clo6whxe0005ndif39o80ek7t","_id":"clo6whxe7007edif31ayf3535"},{"post_id":"clo6whxd1000qdif37clu4w4l","category_id":"clo6whxe60071dif35w4982tj","_id":"clo6whxe7007hdif37ft0cq29"},{"post_id":"clo6whxd2000udif3bpz2asux","category_id":"clo6whxd9001hdif35y1v1bcj","_id":"clo6whxe8007mdif3dfbqcd29"},{"post_id":"clo6whxd2000udif3bpz2asux","category_id":"clo6whxe0005ndif39o80ek7t","_id":"clo6whxe8007odif3bwc97fex"},{"post_id":"clo6whxd2000udif3bpz2asux","category_id":"clo6whxe60071dif35w4982tj","_id":"clo6whxe8007rdif3d4ro8kfz"},{"post_id":"clo6whxd3000wdif3ccoc834r","category_id":"clo6whxd9001hdif35y1v1bcj","_id":"clo6whxe9007udif3e2jlhs5y"},{"post_id":"clo6whxd3000wdif3ccoc834r","category_id":"clo6whxe0005ndif39o80ek7t","_id":"clo6whxe9007xdif3c4wxa578"},{"post_id":"clo6whxd3000wdif3ccoc834r","category_id":"clo6whxe60071dif35w4982tj","_id":"clo6whxe9007zdif31cl3eiga"},{"post_id":"clo6whxdk002hdif3colo0rlc","category_id":"clo6whxdm002pdif34p7o9kq9","_id":"clo6whxea0082dif35olta9uf"},{"post_id":"clo6whxdk002hdif3colo0rlc","category_id":"clo6whxe5006wdif3023y9pe1","_id":"clo6whxea0084dif3900v9fhc"},{"post_id":"clo6whxdk002hdif3colo0rlc","category_id":"clo6whxe8007ldif3d94r9gw0","_id":"clo6whxea0087dif3bofe5ptn"},{"post_id":"clo6whxdl002mdif34oxg0ao2","category_id":"clo6whxdm002pdif34p7o9kq9","_id":"clo6whxea0089dif302yn4l44"},{"post_id":"clo6whxdl002mdif34oxg0ao2","category_id":"clo6whxe5006wdif3023y9pe1","_id":"clo6whxea008cdif3c668dudl"},{"post_id":"clo6whxdl002mdif34oxg0ao2","category_id":"clo6whxe8007ldif3d94r9gw0","_id":"clo6whxea008edif30qrudeld"},{"post_id":"clo8dq7jq011p4tf3hnfi0oa7","category_id":"clo6whxdm002pdif34p7o9kq9","_id":"clo8dq7k2011u4tf3ax9jedki"},{"post_id":"clo8nc4b40000g0uohtml5e5q","category_id":"clo6whxco0004dif30ksm66ww","_id":"clo8nc4bc0005g0uo505lf1ru"},{"post_id":"clo8nc4b40000g0uohtml5e5q","category_id":"clo6whxd1000rdif34v6n8kf7","_id":"clo8nc4be0007g0uobdb47txi"},{"post_id":"clo8nc4b70001g0uodqgtcugw","category_id":"clo6whxco0004dif30ksm66ww","_id":"clo8nc4bg0009g0uo2tm12eh7"},{"post_id":"clo8nc4b70001g0uodqgtcugw","category_id":"clo6whxd8001bdif3hkt9el1e","_id":"clo8nc4bh000bg0uo66fgf2ki"},{"post_id":"clo8nc4b90003g0uo6imdf88g","category_id":"clo6whxd9001hdif35y1v1bcj","_id":"clo8nc4bi000dg0uodh388et0"},{"post_id":"clo8nc4b90003g0uo6imdf88g","category_id":"clo6whxdr003kdif3e097budo","_id":"clo8nc4bk000fg0uo33rrf8s6"},{"post_id":"clo8nc4dk000kg0uo11z3bokr","category_id":"clo6whxd9001hdif35y1v1bcj","_id":"clo8nc4dp000ng0uobhym062l"},{"post_id":"clo8nc4dk000kg0uo11z3bokr","category_id":"clo6whxdr003kdif3e097budo","_id":"clo8nc4ds000pg0uofki4e06x"},{"post_id":"clo8nc4du000qg0uo8ntd1i3h","category_id":"clo6whxd9001hdif35y1v1bcj","_id":"clo8nc4dw000ug0uo98vrdpyz"},{"post_id":"clo8nc4du000qg0uo8ntd1i3h","category_id":"clo6whxdr003kdif3e097budo","_id":"clo8nc4dw000wg0uo55pj96du"},{"post_id":"clo8nc4du000rg0uoc2obh0m0","category_id":"clo6whxd9001hdif35y1v1bcj","_id":"clo8nc4dw000yg0uo585z31g3"},{"post_id":"clo8nc4du000rg0uoc2obh0m0","category_id":"clo6whxdr003kdif3e097budo","_id":"clo8nc4dw0010g0uofob2d4sy"}],"PostTag":[{"post_id":"clo6whxcq0007dif3g3tqgqy7","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxdg0021dif356dx1374"},{"post_id":"clo6whxcq0007dif3g3tqgqy7","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo6whxdh0025dif37n6894no"},{"post_id":"clo6whxcr0009dif386ndbd9x","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxdj002bdif3h0s8ctr6"},{"post_id":"clo6whxcr0009dif386ndbd9x","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo6whxdj002edif3gmbe7sfq"},{"post_id":"clo6whxcr0009dif386ndbd9x","tag_id":"clo6whxdg0022dif37ll46b7e","_id":"clo6whxdk002idif3cx6o4hzc"},{"post_id":"clo6whxcs000bdif357v4fknv","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxdn002tdif38cm1fkcx"},{"post_id":"clo6whxcs000bdif357v4fknv","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo6whxdo002vdif3ae8f4zae"},{"post_id":"clo6whxcs000bdif357v4fknv","tag_id":"clo6whxdj002fdif350rdh579","_id":"clo6whxdo002xdif3a1f33f6x"},{"post_id":"clo6whxcs000bdif357v4fknv","tag_id":"clo6whxdl002ldif3aqet5lt9","_id":"clo6whxdo002zdif30e4nd00b"},{"post_id":"clo6whxcs000bdif357v4fknv","tag_id":"clo6whxdm002odif34ymjb1ha","_id":"clo6whxdo0031dif3f6zv5mph"},{"post_id":"clo6whxcs000bdif357v4fknv","tag_id":"clo6whxdm002qdif3esazaqz1","_id":"clo6whxdp0033dif34pls4hpw"},{"post_id":"clo6whxcv000fdif3cdvs8jup","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxdp0035dif34odc7tvm"},{"post_id":"clo6whxcv000fdif3cdvs8jup","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo6whxdp0038dif3broagy6q"},{"post_id":"clo6whxcv000fdif3cdvs8jup","tag_id":"clo6whxdn002sdif3hif23u3x","_id":"clo6whxdp003adif39y9la8bt"},{"post_id":"clo6whxd1000qdif37clu4w4l","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxdt004bdif3b6d1da6b"},{"post_id":"clo6whxd1000qdif37clu4w4l","tag_id":"clo6whxds003xdif3giug96zy","_id":"clo6whxdu004edif33qnr2199"},{"post_id":"clo6whxd1000qdif37clu4w4l","tag_id":"clo6whxdt0044dif3ec0q0yjx","_id":"clo6whxdu004gdif3fq6xdzb7"},{"post_id":"clo6whxd2000udif3bpz2asux","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxdu004ndif31ldcf0mm"},{"post_id":"clo6whxd2000udif3bpz2asux","tag_id":"clo6whxds003xdif3giug96zy","_id":"clo6whxdv004pdif38in73679"},{"post_id":"clo6whxd2000udif3bpz2asux","tag_id":"clo6whxdu004fdif3ansl5l3c","_id":"clo6whxdw004tdif3caue5te4"},{"post_id":"clo6whxd3000wdif3ccoc834r","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxdx004ydif3aq936tc2"},{"post_id":"clo6whxd3000wdif3ccoc834r","tag_id":"clo6whxds003xdif3giug96zy","_id":"clo6whxdx0050dif3dknof8oo"},{"post_id":"clo6whxd3000wdif3ccoc834r","tag_id":"clo6whxdv004qdif3ceh6hktt","_id":"clo6whxdy0054dif3apgaensn"},{"post_id":"clo6whxd50010dif3f5yog2wu","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxdz005ddif354oedlw4"},{"post_id":"clo6whxd50010dif3f5yog2wu","tag_id":"clo6whxdw004vdif3bsoag3fw","_id":"clo6whxe0005fdif3efly2az6"},{"post_id":"clo6whxd50010dif3f5yog2wu","tag_id":"clo6whxdo002wdif3fdqh1ag9","_id":"clo6whxe0005jdif3br6zh7ru"},{"post_id":"clo6whxd50010dif3f5yog2wu","tag_id":"clo6whxdy0056dif304r6bado","_id":"clo6whxe0005ldif3a2ulbq31"},{"post_id":"clo6whxd60012dif35y7c1wx8","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxe1005sdif33g625p9i"},{"post_id":"clo6whxd60012dif35y7c1wx8","tag_id":"clo6whxdw004vdif3bsoag3fw","_id":"clo6whxe1005tdif35jy9frgv"},{"post_id":"clo6whxd60012dif35y7c1wx8","tag_id":"clo6whxdo002wdif3fdqh1ag9","_id":"clo6whxe1005wdif37rra3rew"},{"post_id":"clo6whxd60012dif35y7c1wx8","tag_id":"clo6whxdy0056dif304r6bado","_id":"clo6whxe2005xdif3c7gdcolt"},{"post_id":"clo6whxd60016dif3797phg6x","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxe30064dif3979phm56"},{"post_id":"clo6whxd60016dif3797phg6x","tag_id":"clo6whxdw004vdif3bsoag3fw","_id":"clo6whxe30065dif37n9hd1sg"},{"post_id":"clo6whxd60016dif3797phg6x","tag_id":"clo6whxdo002wdif3fdqh1ag9","_id":"clo6whxe30068dif3crxag2e1"},{"post_id":"clo6whxd60016dif3797phg6x","tag_id":"clo6whxdy0056dif304r6bado","_id":"clo6whxe30069dif3gtqu57ig"},{"post_id":"clo6whxd70018dif3ea53bhr4","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxe3006bdif3dhitfjm3"},{"post_id":"clo6whxd70018dif3ea53bhr4","tag_id":"clo6whxdw004vdif3bsoag3fw","_id":"clo6whxe4006ddif355bqd85o"},{"post_id":"clo6whxd70018dif3ea53bhr4","tag_id":"clo6whxdo002wdif3fdqh1ag9","_id":"clo6whxe4006fdif34syie0pu"},{"post_id":"clo6whxd7001adif304hjdhd1","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxe4006kdif388coglyw"},{"post_id":"clo6whxd7001adif304hjdhd1","tag_id":"clo6whxdw004vdif3bsoag3fw","_id":"clo6whxe5006ndif3e37oaqbx"},{"post_id":"clo6whxd7001adif304hjdhd1","tag_id":"clo6whxdo002wdif3fdqh1ag9","_id":"clo6whxe5006qdif3apf071c8"},{"post_id":"clo6whxd8001edif30xac1c0s","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxe6006zdif3axhfeax5"},{"post_id":"clo6whxd8001edif30xac1c0s","tag_id":"clo6whxdw004vdif3bsoag3fw","_id":"clo6whxe60072dif3fuum68bm"},{"post_id":"clo6whxd8001edif30xac1c0s","tag_id":"clo6whxdo002wdif3fdqh1ag9","_id":"clo6whxe60075dif38l891fxv"},{"post_id":"clo6whxd8001edif30xac1c0s","tag_id":"clo6whxdy0056dif304r6bado","_id":"clo6whxe60077dif36tsscoxk"},{"post_id":"clo6whxd9001fdif33vx2ck35","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxe70079dif32z2n6bg6"},{"post_id":"clo6whxd9001fdif33vx2ck35","tag_id":"clo6whxdm002qdif3esazaqz1","_id":"clo6whxe7007cdif320ol2tot"},{"post_id":"clo6whxda001jdif3em0l2a8m","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxe7007fdif3hm8f5ykf"},{"post_id":"clo6whxda001jdif3em0l2a8m","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo6whxe8007idif3em8p90iw"},{"post_id":"clo6whxda001jdif3em0l2a8m","tag_id":"clo6whxe60073dif3456734tj","_id":"clo6whxe8007kdif32yrk7wai"},{"post_id":"clo6whxda001jdif3em0l2a8m","tag_id":"clo6whxe70078dif3ev6j2hex","_id":"clo6whxe8007ndif34hfqgczq"},{"post_id":"clo6whxda001mdif3e7e4cjdr","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxe8007qdif3ap5bh05a"},{"post_id":"clo6whxda001mdif3e7e4cjdr","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo6whxe9007tdif32fci3erg"},{"post_id":"clo6whxda001mdif3e7e4cjdr","tag_id":"clo6whxe60073dif3456734tj","_id":"clo6whxe9007wdif31jbl7iut"},{"post_id":"clo6whxda001mdif3e7e4cjdr","tag_id":"clo6whxe8007jdif3dn91eyhs","_id":"clo6whxe9007ydif30d467muj"},{"post_id":"clo6whxdc001rdif32tq5468l","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxea0081dif3hsvj1dzf"},{"post_id":"clo6whxdc001rdif32tq5468l","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo6whxea0083dif3aox00w3m"},{"post_id":"clo6whxdc001rdif32tq5468l","tag_id":"clo6whxe60073dif3456734tj","_id":"clo6whxea0086dif3c8tlgqie"},{"post_id":"clo6whxdd001udif3cl651nvn","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxea0088dif36a519to6"},{"post_id":"clo6whxdd001udif3cl651nvn","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo6whxea008bdif3dll69ur8"},{"post_id":"clo6whxdd001udif3cl651nvn","tag_id":"clo6whxdn002sdif3hif23u3x","_id":"clo6whxea008ddif3goev3wbl"},{"post_id":"clo6whxde001ydif31r7o5gqu","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxeb008gdif3eb7y6ifb"},{"post_id":"clo6whxde001ydif31r7o5gqu","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo6whxeb008hdif391oi2g36"},{"post_id":"clo6whxde001ydif31r7o5gqu","tag_id":"clo6whxdn002sdif3hif23u3x","_id":"clo6whxeb008jdif34o5bafbm"},{"post_id":"clo6whxde001ydif31r7o5gqu","tag_id":"clo6whxea0085dif34fvuf597","_id":"clo6whxeb008kdif3fcqiez8s"},{"post_id":"clo6whxde001ydif31r7o5gqu","tag_id":"clo6whxea008adif30cbcaq0g","_id":"clo6whxeb008mdif36vvr07oo"},{"post_id":"clo6whxdf0020dif36k6ocacp","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxeb008ndif35rul85k2"},{"post_id":"clo6whxdf0020dif36k6ocacp","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo6whxec008pdif3215og47c"},{"post_id":"clo6whxdf0020dif36k6ocacp","tag_id":"clo6whxdn002sdif3hif23u3x","_id":"clo6whxec008qdif3ghp5hz5r"},{"post_id":"clo6whxdg0024dif3huzfcjsj","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxec008sdif3h70k3bz3"},{"post_id":"clo6whxdg0024dif3huzfcjsj","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo6whxec008tdif3c9v21wcj"},{"post_id":"clo6whxdg0024dif3huzfcjsj","tag_id":"clo6whxdn002sdif3hif23u3x","_id":"clo6whxec008vdif38sqi24k6"},{"post_id":"clo6whxdg0024dif3huzfcjsj","tag_id":"clo6whxea0085dif34fvuf597","_id":"clo6whxec008wdif31hv9b65t"},{"post_id":"clo6whxdg0024dif3huzfcjsj","tag_id":"clo6whxeb008odif3asmrfby6","_id":"clo6whxec008ydif3ebm09hn2"},{"post_id":"clo6whxdh0026dif3462h52fa","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxec008zdif31ti2hhx4"},{"post_id":"clo6whxdh0026dif3462h52fa","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo6whxed0091dif31pae6h9w"},{"post_id":"clo6whxdh0026dif3462h52fa","tag_id":"clo6whxdn002sdif3hif23u3x","_id":"clo6whxed0092dif3em1ganw2"},{"post_id":"clo6whxdi002adif33y8o63yk","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxed0094dif3evt505qr"},{"post_id":"clo6whxdi002adif33y8o63yk","tag_id":"clo6whxec008udif34ew2gzid","_id":"clo6whxed0095dif3exx59kok"},{"post_id":"clo6whxdi002adif33y8o63yk","tag_id":"clo6whxec008xdif3hbz43nkk","_id":"clo6whxed0097dif347w7f6vi"},{"post_id":"clo6whxdj002ddif338ar0se6","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxed0098dif3hb4w1k8f"},{"post_id":"clo6whxdj002ddif338ar0se6","tag_id":"clo6whxec008udif34ew2gzid","_id":"clo6whxed009adif38znb3cg2"},{"post_id":"clo6whxdj002ddif338ar0se6","tag_id":"clo6whxed0093dif3cjnxeplt","_id":"clo6whxed009bdif3egrf4352"},{"post_id":"clo6whxdk002hdif3colo0rlc","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxee009edif3ajvbhkl2"},{"post_id":"clo6whxdk002hdif3colo0rlc","tag_id":"clo6whxdw004vdif3bsoag3fw","_id":"clo6whxee009fdif3bowwdk7o"},{"post_id":"clo6whxdk002hdif3colo0rlc","tag_id":"clo6whxdm002qdif3esazaqz1","_id":"clo6whxee009hdif34xa78lyj"},{"post_id":"clo6whxdk002hdif3colo0rlc","tag_id":"clo6whxed009cdif37ln7diz4","_id":"clo6whxee009idif33wv7cpxy"},{"post_id":"clo6whxdk002jdif3a2gs92fp","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxee009kdif3atq59liv"},{"post_id":"clo6whxdk002jdif3a2gs92fp","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo6whxee009ldif36u9o7cky"},{"post_id":"clo6whxdk002jdif3a2gs92fp","tag_id":"clo6whxee009ddif3dxf2cf5b","_id":"clo6whxef009ndif337sn0s0y"},{"post_id":"clo6whxdl002mdif34oxg0ao2","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo6whxef009odif393erbxyo"},{"post_id":"clo6whxdl002mdif34oxg0ao2","tag_id":"clo6whxdw004vdif3bsoag3fw","_id":"clo6whxef009pdif37j7o51u1"},{"post_id":"clo6whxdl002mdif34oxg0ao2","tag_id":"clo6whxdm002qdif3esazaqz1","_id":"clo6whxef009qdif3fiuu6j6y"},{"post_id":"clo6whxdl002mdif34oxg0ao2","tag_id":"clo6whxed009cdif37ln7diz4","_id":"clo6whxef009rdif3c44g0t6z"},{"post_id":"clo8dq7jq011p4tf3hnfi0oa7","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo8dq7k3011w4tf3gr0n2e0s"},{"post_id":"clo8dq7jq011p4tf3hnfi0oa7","tag_id":"clo6whxdw004vdif3bsoag3fw","_id":"clo8dq7k3011y4tf3djdiazfo"},{"post_id":"clo8dq7jq011p4tf3hnfi0oa7","tag_id":"clo6whxdo002wdif3fdqh1ag9","_id":"clo8dq7k401204tf3e04x5rrw"},{"post_id":"clo8dq7jq011p4tf3hnfi0oa7","tag_id":"clo8dq7js011r4tf31dy3ac20","_id":"clo8dq7k401224tf33yw2455x"},{"post_id":"clo8nc4b40000g0uohtml5e5q","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo8nc4b90002g0uofwzwglzb"},{"post_id":"clo8nc4b40000g0uohtml5e5q","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo8nc4bb0004g0uo3fkea6gh"},{"post_id":"clo8nc4b40000g0uohtml5e5q","tag_id":"clo6whxcx000jdif3crb1a3kh","_id":"clo8nc4bd0006g0uoh9kahcvc"},{"post_id":"clo8nc4b70001g0uodqgtcugw","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo8nc4be0008g0uo08upfgam"},{"post_id":"clo8nc4b70001g0uodqgtcugw","tag_id":"clo6whxct000ddif31mle0kf8","_id":"clo8nc4bg000ag0uogoxwax48"},{"post_id":"clo8nc4b70001g0uodqgtcugw","tag_id":"clo6whxd5000zdif38wnx57v4","_id":"clo8nc4bi000cg0uocp74bd4m"},{"post_id":"clo8nc4b70001g0uodqgtcugw","tag_id":"clo6whxd60015dif30de67oaa","_id":"clo8nc4bj000eg0uo8nrm7f41"},{"post_id":"clo8nc4b70001g0uodqgtcugw","tag_id":"clo6whxd8001cdif385po4w90","_id":"clo8nc4bk000gg0uo1ml19wrg"},{"post_id":"clo8nc4b90003g0uo6imdf88g","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo8nc4bl000hg0uoddbp3x5d"},{"post_id":"clo8nc4b90003g0uo6imdf88g","tag_id":"clo6whxdo002wdif3fdqh1ag9","_id":"clo8nc4bm000ig0uodxr02x66"},{"post_id":"clo8nc4b90003g0uo6imdf88g","tag_id":"clo6whxdo0030dif35obtepfs","_id":"clo8nc4bn000jg0uo976x9oih"},{"post_id":"clo8nc4dk000kg0uo11z3bokr","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo8nc4do000lg0uo80t8gpok"},{"post_id":"clo8nc4dk000kg0uo11z3bokr","tag_id":"clo6whxdo002wdif3fdqh1ag9","_id":"clo8nc4do000mg0uodp2z9j6t"},{"post_id":"clo8nc4dk000kg0uo11z3bokr","tag_id":"clo6whxdo0030dif35obtepfs","_id":"clo8nc4ds000og0uocx058uif"},{"post_id":"clo8nc4du000qg0uo8ntd1i3h","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo8nc4dv000sg0uo81xa68qg"},{"post_id":"clo8nc4du000qg0uo8ntd1i3h","tag_id":"clo6whxdo002wdif3fdqh1ag9","_id":"clo8nc4dw000tg0uo8r421p1o"},{"post_id":"clo8nc4du000qg0uo8ntd1i3h","tag_id":"clo6whxdo0030dif35obtepfs","_id":"clo8nc4dw000vg0uoexqtamsi"},{"post_id":"clo8nc4du000rg0uoc2obh0m0","tag_id":"clo6whxcp0005dif31b3n9447","_id":"clo8nc4dw000xg0uohjac7dh2"},{"post_id":"clo8nc4du000rg0uoc2obh0m0","tag_id":"clo6whxdo002wdif3fdqh1ag9","_id":"clo8nc4dw000zg0uob0hweig3"},{"post_id":"clo8nc4du000rg0uoc2obh0m0","tag_id":"clo6whxdo0030dif35obtepfs","_id":"clo8nc4dw0011g0uofmyx26qy"}],"Tag":[{"name":"前端","_id":"clo6whxcp0005dif31b3n9447"},{"name":"浏览器","_id":"clo6whxct000ddif31mle0kf8"},{"name":"网路安全","_id":"clo6whxcx000jdif3crb1a3kh"},{"name":"RESTful","_id":"clo6whxd5000zdif38wnx57v4"},{"name":"RPC","_id":"clo6whxd60015dif30de67oaa"},{"name":"HTTP","_id":"clo6whxd8001cdif385po4w90"},{"name":"GUI","_id":"clo6whxdg0022dif37ll46b7e"},{"name":"cookies","_id":"clo6whxdj002fdif350rdh579"},{"name":"localStorage","_id":"clo6whxdl002ldif3aqet5lt9"},{"name":"sessionStorage","_id":"clo6whxdm002odif34ymjb1ha"},{"name":"TypeScript","_id":"clo6whxdm002qdif3esazaqz1"},{"name":"性能优化","_id":"clo6whxdn002sdif3hif23u3x"},{"name":"JavaScript","_id":"clo6whxdo002wdif3fdqh1ag9"},{"name":"es6","_id":"clo6whxdo0030dif35obtepfs"},{"name":"Hexo","_id":"clo6whxds003xdif3giug96zy"},{"name":"Pagination","_id":"clo6whxdt0044dif3ec0q0yjx"},{"name":"ReadMore","_id":"clo6whxdu004fdif3ansl5l3c"},{"name":"RSS","_id":"clo6whxdv004qdif3ceh6hktt"},{"name":"react","_id":"clo6whxdw004vdif3bsoag3fw"},{"name":"Fiber","_id":"clo6whxdy0056dif304r6bado"},{"name":"网络安全","_id":"clo6whxe60073dif3456734tj"},{"name":"CSRF","_id":"clo6whxe70078dif3ev6j2hex"},{"name":"XSS","_id":"clo6whxe8007jdif3dn91eyhs"},{"name":"Webpack","_id":"clo6whxea0085dif34fvuf597"},{"name":"图片","_id":"clo6whxea008adif30cbcaq0g"},{"name":"插件","_id":"clo6whxeb008odif3asmrfby6"},{"name":"npm","_id":"clo6whxec008udif34ew2gzid"},{"name":"nrm","_id":"clo6whxec008xdif3hbz43nkk"},{"name":"nvm","_id":"clo6whxed0093dif3cjnxeplt"},{"name":"unstate-next","_id":"clo6whxed009cdif37ln7diz4"},{"name":"WebPack","_id":"clo6whxee009ddif3dxf2cf5b"},{"name":"JSX","_id":"clo8dq7js011r4tf31dy3ac20"}]}}