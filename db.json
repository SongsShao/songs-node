{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/alipay.png","path":"images/alipay.png","modified":1,"renderable":0},{"_id":"source/images/wechat.png","path":"images/wechat.png","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/archives/index.md","hash":"e63c23a0226c3002f32f399a5b3cf19b4b641752","modified":1698065672289},{"_id":"source/categories/index.md","hash":"ffc022418310656814b0206206b01814f0e60ca1","modified":1697637120514},{"_id":"source/docs/index.md","hash":"ec5baed81099718554bd8d27d857b6a853a7a10c","modified":1697716819495},{"_id":"source/404/index.md","hash":"e77c83bbdff405cbf6b14a62dc79719f28b612fb","modified":1697716819495},{"_id":"source/schedule/index.md","hash":"07fa856837db976496b9ceae93296a9218696856","modified":1697637014804},{"_id":"source/tags/index.md","hash":"40933bc5b996788d4bb00a662a74dce1b4879d8d","modified":1697896050419},{"_id":"source/about/me.md","hash":"94f0f7483c3a48a1270f785c0ab0c13993111262","modified":1697899764216},{"_id":"source/_posts/browser/mechanismCache.md","hash":"dc56461cf176bcb665fa0b209f92b982989fcab1","modified":1697896478597},{"_id":"source/_posts/browser/renderProcess.md","hash":"47abe2ff2d4fd94341d90020026d701e3ee0f647","modified":1697896487996},{"_id":"source/_posts/browser/networkHijack.md","hash":"145bb7b16ddd6f97587255f9832deb422bae3648","modified":1697897180298},{"_id":"source/_posts/hexo/pagination.md","hash":"5fc54efb4473ca9a5ec76f199b16f37d3f6d876d","modified":1698067644363},{"_id":"source/_posts/browser/restFulAndRPC.md","hash":"94440e70ed0e3f2fb7ae4154e43198e9836fa9dc","modified":1697896516858},{"_id":"source/_posts/hexo/readmore.md","hash":"6e0c01e5463a2c14ea8ac6a9a91a7723965a9768","modified":1698064382357},{"_id":"source/_posts/hexo/rss.md","hash":"2f13176689c353b701dcac1368ec89689cd3b2cc","modified":1697896446202},{"_id":"source/_posts/browser/tabToTab.md","hash":"a7fc7f146f3fc078a22da17e72b934fcff069ce3","modified":1697896527490},{"_id":"source/_posts/browser/sessionCookies.md","hash":"2596304b8cf24e3deca0786669ee5ab48242a247","modified":1697969303922},{"_id":"source/_posts/javaScript/promise.md","hash":"d59e5e8f648f1b17a9af7af71be43b303a247091","modified":1697896563979},{"_id":"source/_posts/javaScript/async-await.md","hash":"a3f7c3fe8437a07b8296208ecb80c0033bdaa017","modified":1697896811279},{"_id":"source/_posts/javaScript/prototype.md","hash":"b24a38e1f5a71274add9653d982dfe122dca02b3","modified":1698065114869},{"_id":"source/_posts/react/fiber.md","hash":"5f91430c1af26440f1d0c5ac3b3900998704f3cd","modified":1698412690710},{"_id":"source/_posts/react/fiberImplement.md","hash":"886344727afc8eede98849ac11a708f823a9fb8d","modified":1698414578257},{"_id":"source/_posts/javaScript/varLetConst.md","hash":"4129169264049133b87bcc79211dcdf56779cd59","modified":1698064556937},{"_id":"source/_posts/react/fiberNode.md","hash":"88db9efced946ffb686eeeae584e85551e70c562","modified":1697896609549},{"_id":"source/_posts/react/reactImplement.md","hash":"8381092b671431b219dae2214c8a6229f0dbafad","modified":1698848654295},{"_id":"source/_posts/react/fiberWorksHow.md","hash":"b3e2e24e00ac4b30923247951cded72207064d38","modified":1698412690726},{"_id":"source/_posts/react/getServiceTime.md","hash":"4ed7456acc5065ff91d34d9404748c3aea3083f5","modified":1697896642379},{"_id":"source/_posts/web/CrossSiteRequestForgeries.md","hash":"b3fbdf34bd0045771f2788610fa7f94653b1d54b","modified":1697897964690},{"_id":"source/_posts/typeScript/useType.md","hash":"5ddff659cacec884de571dca183cd76bad3138e6","modified":1698064382357},{"_id":"source/_posts/react/react-synthetic-event.md","hash":"3a0feda388c8f59e9ee5ffd4c6bf3cca7ee82923","modified":1697896634266},{"_id":"source/_posts/web/CrossSiteScript.md","hash":"d52ab059e3f5ff263cc6c503abd11e5723e26c6b","modified":1697897732698},{"_id":"source/_posts/web/imagePerform.md","hash":"0a14e056a1f5c256a80bf69dafbe81a78a0f5737","modified":1697896658086},{"_id":"source/_posts/web/WebSecurityQuestion.md","hash":"29ace8f4bcf6025471553eccff32c56aa6bbdaae","modified":1697897962875},{"_id":"source/_posts/web/lazyLoad.md","hash":"bb9d481d751433949b2a07b44c6942348f77c7c0","modified":1697896665049},{"_id":"source/_posts/web/lodashDebounce.md","hash":"488ae2656fd7c5977aa79be1b79da91f1804435f","modified":1697896669996},{"_id":"source/css/_variables/index.styl","hash":"eeeeca335df536ba5b283887d3dcbb430767d26c","modified":1697805563715},{"_id":"source/_posts/web/refluxAndRedrawing.md","hash":"3c8cd5cacc1fedf406c99c01ac0c81a769ea10e8","modified":1697896675821},{"_id":"source/layout/_custom/sidebar.njk","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1697869566867},{"_id":"source/layout/_partials/head.njk","hash":"2ce71e4e4c79557a31172d1d071cd348800c61e6","modified":1697872240225},{"_id":"source/css/_custom/index.styl","hash":"dddc646bfdbcedd30e57227bbe2465f9677d2a51","modified":1697869219900},{"_id":"source/layout/_custom/archive.njk","hash":"6a0b1b65995eef94ee8414bd4fab4057760105d2","modified":1698064382357},{"_id":"source/_posts/web/webpackPerform.md","hash":"7704f9684e4b30758efd601405212047ebb81ee4","modified":1697896680346},{"_id":"source/_posts/web/webpack/hotModuleReplacement.md","hash":"119452a85853d31f8a4933752f1ea78b7081c57a","modified":1698065075814},{"_id":"source/_posts/web/npm/nrm.md","hash":"b110079d8a6d59ec3a2efd6786f3784a913c8bc4","modified":1698324644436},{"_id":"source/_posts/web/npm/nvm.md","hash":"515ca6328e69ab1c1d912ea22aca8e6cbcd4e769","modified":1698324644451},{"_id":"source/_posts/react/components/unstate-next/unstated-next-implement.md","hash":"2abbeb166eb8351949c5bc7a20dd60c68d1fb167","modified":1698324644436},{"_id":"source/_posts/react/components/unstate-next/unstated-next-use.md","hash":"d619b37189b59217f5a88e07228f9dcfcfd41769","modified":1698324644436},{"_id":"source/_posts/react/components/unstate-next/unstated-next.tsx","hash":"afea17a1781435bdad21853071547d95e623942a","modified":1698324644436},{"_id":"source/images/wechat.png","hash":"da793db4762f2168f250202fb51f0c4150ccfb71","modified":1697634253368},{"_id":"source/images/alipay.png","hash":"0bb1d75a9b5d54e8b15cf9fe2e350c2b2fdbde8f","modified":1697634281223},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"bf0142e3cdb4c8da06e9aa971bc0bdf230f5db45","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/package.json","hash":"282d6226513c39ad97793596922da638475a5f66","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"447db39d17775b2bd18d8af9c9d65b7b8449f751","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"ead37e9167b682f1fa34b5401c3050e18c7ee4a3","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"957241c28796ff352de7f4cffba7bb289b043586","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/README.md","hash":"d6820f46d03a93bd6dc8b10f49f58aec82ad2b06","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"dae3faa04648aeb0fd91961843a15122dcc73299","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"6853e5433e3eaa19ea43fa20b08d956ba4cec4ac","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"464db1e7182e5b9cdbd32e8b5368d5e683b1d9c7","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"29c89a41b371f893e56c87ea61adabc444ec58cc","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"abda600685ee972e1f6b7a2dcc56f13e2daa6263","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"65e9112fb7eb26d2880db624554a99aca028140b","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"12a3e96581964a22b474cc739675d52ef93ff932","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"6fca18ed4234cf54146c2b3b97b0a6a3606ab33d","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"82cda756f5b7092df2eee6641b9786df71623bdb","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"bbbc40b03cb299d2a6a568f329b2ce98e1cdc430","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"7369928305330c73ae0b3f063a681a8384d8fde4","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1697630746885},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1697630746885},{"_id":"public/atom.xml","hash":"ee23734ec5bc7a778c6583688dfb18fb37ecfc25","modified":1698851377870},{"_id":"public/search.json","hash":"8600c0678bd23565bda16cb216cb91a00716c375","modified":1698851377870},{"_id":"public/sitemap.xml","hash":"dcfdac18c51d0baa831ecb7940bf0fb2bffcd0cc","modified":1698851377870},{"_id":"public/sitemap.txt","hash":"234b6fa22a62b880602ec0fd6595f54c0167f0c2","modified":1698851377870},{"_id":"public/404.html","hash":"6ff66a41f96d9f027b34b1c21d59059bdc19ec53","modified":1698851377870},{"_id":"public/about/me.html","hash":"65041aa18ff349769649dfc813acc847f844845d","modified":1698851377870},{"_id":"public/archives/index.html","hash":"d78cc8e3e185395851a0139c6fb6f73d11e5833c","modified":1698851377870},{"_id":"public/categories/index.html","hash":"d2fef080e8b5215efa6fa2545f770b1f77016ec3","modified":1698851377870},{"_id":"public/docs/index.html","hash":"5314e7f1d922b9e74c398eeae324e910267fe456","modified":1698851377870},{"_id":"public/schedule/index.html","hash":"88be5639d0658762f0165c6b447a89f99c3756d5","modified":1698851377870},{"_id":"public/tags/index.html","hash":"d2604984e557e234575d4e317ce4064ecc899b1c","modified":1698851377870},{"_id":"public/react/implement.html","hash":"688e182bc541fab0311fa9a1b8c13492223a8dd7","modified":1698851377870},{"_id":"public/react/components/unstate-next-implement.html","hash":"e42dec6d662fb56279ecf1d8ecfe24ea9bf46d21","modified":1698851377870},{"_id":"public/react/fiber/works.html","hash":"0fbf65c64f11ef96f2aedc32f948eea7c2a0126d","modified":1698851377870},{"_id":"public/react/components/unstate-next-use.html","hash":"b32d45239ea3c3dbf6c2bec325342db9bd7fad3a","modified":1698851377870},{"_id":"public/web/npm/nvm.html","hash":"14bb545b7e9033ca7ac1db51d7a4ea540a3a2847","modified":1698851377870},{"_id":"public/web/npm/nrm.html","hash":"6161f5199a6e1b971bdd12a85adf2d1e5831c31c","modified":1698851377870},{"_id":"public/hexo/config/pagination.html","hash":"1e7fdd5bf03838fec99ca4e7138f7fbb88341649","modified":1698851377870},{"_id":"public/web/webpack/hot/module/replacement.html","hash":"17762cd60f08d46e77ad92977c55f4aa64b4244d","modified":1698851377870},{"_id":"public/javascript/prototype.html","hash":"39a132af60501473d8a86211b401ef147a701174","modified":1698851377870},{"_id":"public/javascript/var/let/const.html","hash":"60825656503140345aeca6f36c4c5cf6ffc5f71f","modified":1698851377870},{"_id":"public/hexo/config/readmore.html","hash":"d0c086b28f9bb02ecfebc790828311a233da63ee","modified":1698851377870},{"_id":"public/typescript/use/type.html","hash":"f1dbcfdfa27e2b0be9d6d5b1f46d00db6330adc8","modified":1698851377870},{"_id":"public/browser/session/cookies.html","hash":"a11726508cd3d393ef9e784ccf904067812347f7","modified":1698851377870},{"_id":"public/browser/network/hijack.html","hash":"56c85a2314468fe522caca3a2b86c3330e422516","modified":1698851377870},{"_id":"public/hexo/config/rss.html","hash":"f37c571b55bb8e9fa0884ed569694f2956805f58","modified":1698851377870},{"_id":"public/web/cross/site/request/forgeries.html","hash":"e41cfac322d193208d2e8aeb7f95fd69c344a8e8","modified":1698851377870},{"_id":"public/web/cross/site/script.html","hash":"906fc494a4265bd9c1d5fad5727c90848f0d2a87","modified":1698851377870},{"_id":"public/web/security/question.html","hash":"a81c57e706f9d913a9b3c7bd0f8a9953b1cd2753","modified":1698851377870},{"_id":"public/web/lazy/loading.html","hash":"87b7ad76628fa4ac6263bb3e95c003a5902bb1e4","modified":1698851377870},{"_id":"public/web/reflux/and/redrawing.html","hash":"b3f46912061757e9c847adcccbf2a0329c4adbdb","modified":1698851377870},{"_id":"public/web/lodash/dubounce.html","hash":"564c187ba37425dc5ad4bec2711953fb0dc4b0bf","modified":1698851377870},{"_id":"public/web/image/perform.html","hash":"3a89480f53c1374d461f38e66f1b6af6ebcf3f9d","modified":1698851377870},{"_id":"public/web/webpack/perform.html","hash":"24f86001c11d5cea114a8b426bd2f5db0c539dbf","modified":1698851377870},{"_id":"public/browser/restful/and/rpc.html","hash":"118b20c9941faacc1a0eac1cb298d9a869c314e9","modified":1698851377870},{"_id":"public/browser/render/process.html","hash":"147a9f96ce26f88ee1963b4911f23d35a08987e6","modified":1698851377870},{"_id":"public/javascript/async/await.html","hash":"2fe6e8e195987ef7b66480a8020f3ae602a1ba92","modified":1698851377870},{"_id":"public/browser/tab/to/tab.html","hash":"86fe01a14ef61a8cc505e6987027cf0fdac1eab4","modified":1698851377870},{"_id":"public/react/fiber/implement.html","hash":"4e44053c172d92d05f5815a5f226215d91c4bd1a","modified":1698851377870},{"_id":"public/browser/mechanism/cache.html","hash":"2b17ee7b008de7edc439cec6cdcbb7ec87fd4602","modified":1698851377870},{"_id":"public/javascript/promise.html","hash":"601646eaf3d28a3076becde857c040bde0b9883c","modified":1698851377870},{"_id":"public/react/fiber.html","hash":"a959f4e84b3ea3a4156b358d57522a7a3c45f827","modified":1698851377870},{"_id":"public/react/fiber/node.html","hash":"f52906e73990381b279ec9abd0d4514f6d9c03ed","modified":1698851377870},{"_id":"public/react/service/time.html","hash":"c8b8893e54ddb9d27bacca0c4229104829d4f4ec","modified":1698851377870},{"_id":"public/react/synthetic/event.html","hash":"53c4907264674b7ada54925a1434aba9b5cbcdd5","modified":1698851377870},{"_id":"public/archives/page/2/index.html","hash":"78d2def097892e1869d98bf716814ec4254a315b","modified":1698851377870},{"_id":"public/archives/2023/index.html","hash":"e33915eff2c8874b83d6f09f5262bfc68a4fbaf3","modified":1698851377870},{"_id":"public/archives/2023/page/2/index.html","hash":"267beeefcc99a1e1ebb258da1fd4644626b96edc","modified":1698851377870},{"_id":"public/archives/2023/10/index.html","hash":"72ac923995351d1808092f7745a5696dcf1c1e86","modified":1698851377870},{"_id":"public/archives/2023/10/page/2/index.html","hash":"4dd3f95e285a1122287598a38f83eb7812bfa8df","modified":1698851377870},{"_id":"public/categories/浏览器/index.html","hash":"a5602ffc945aa2c49d92129e0a9a80e2f2d15c6c","modified":1698851377870},{"_id":"public/categories/浏览器/协议/index.html","hash":"99ed6c4345c628c4d151139576f4080eb44e5486","modified":1698851377870},{"_id":"public/categories/浏览器/缓存/index.html","hash":"f94ab2d0aacbc201044ad0cf91f9ba30ef0fda29","modified":1698851377870},{"_id":"public/categories/浏览器/Cache/index.html","hash":"2943c5b1030fd09557afcc0e4202417e5df6c7f1","modified":1698851377870},{"_id":"public/categories/浏览器/通讯/index.html","hash":"64245d504c3fb46ec11823806ec725202fb68ac0","modified":1698851377870},{"_id":"public/categories/浏览器/网路安全/index.html","hash":"c8b70edf4983458ea9353bc85c41fd44567708c8","modified":1698851377870},{"_id":"public/categories/前端/index.html","hash":"be5c291b8fef031cebff1d2361d2f32eb2369e87","modified":1698851377870},{"_id":"public/categories/浏览器/渲染/index.html","hash":"6a1971ac4aa59467d339748c10570e9d3d8a4bf6","modified":1698851377870},{"_id":"public/categories/React/index.html","hash":"27cfd20dbf2e811d2c3569200d3454fcd32c05eb","modified":1698851377870},{"_id":"public/categories/前端/TypeScript/index.html","hash":"63728cb14012621809526f17df667d9f556a0f27","modified":1698851377870},{"_id":"public/categories/前端/框架/index.html","hash":"a3b9bfeddf21e29af095a83757a15f80275ad034","modified":1698851377870},{"_id":"public/categories/浏览器/网络安全/index.html","hash":"a051389cfa79e113e1f2d703788a9c0015e36b5d","modified":1698851377870},{"_id":"public/categories/浏览器/性能优化/index.html","hash":"0891692edfc12ca964697ed455e8d29d6a1b9752","modified":1698851377870},{"_id":"public/categories/前端/es6/index.html","hash":"ad5172180a13a336706e3e3e7ac597589fc30889","modified":1698851377870},{"_id":"public/categories/前端/npm/index.html","hash":"b5825f8d93497d5226560838dcb99537b76c54ac","modified":1698851377870},{"_id":"public/categories/前端/WebPack/index.html","hash":"8637e49931ba712ffc590153d71b62db7d96b3bb","modified":1698851377870},{"_id":"public/categories/React/Fiber/index.html","hash":"85dce8401f4198e71e8e4325a39f7b8a81daa134","modified":1698851377870},{"_id":"public/categories/前端/框架/Hexo/index.html","hash":"ffc208d59b117720272853bbe5824be51a154089","modified":1698851377870},{"_id":"public/categories/React/components/index.html","hash":"0e86fae68d6473efa22ee9b2527d6a7d401bc417","modified":1698851377870},{"_id":"public/categories/React/components/unstate-next/index.html","hash":"a3058a67d27830e54efe9c30c22fbee41fdebc3b","modified":1698851377870},{"_id":"public/index.html","hash":"8417ac6bb58397f1de52891e5242288a539fd7e3","modified":1698851377870},{"_id":"public/page/2/index.html","hash":"bae78ab7d367c64a3542c6282b68a797244398ff","modified":1698851377870},{"_id":"public/page/3/index.html","hash":"dbdcc7d3dbc76970094e1f75f5477b00de7b8060","modified":1698851377870},{"_id":"public/page/4/index.html","hash":"ee4445ed0cb68b9c542ef8b25747b107fe74fe14","modified":1698851377870},{"_id":"public/tags/前端/index.html","hash":"34b96f38b111b900e747b9ff934f9d2abe187ac2","modified":1698851377870},{"_id":"public/tags/前端/page/2/index.html","hash":"253b468f5b84577aeee018de9b6d5bcbfcd646ae","modified":1698851377870},{"_id":"public/tags/浏览器/index.html","hash":"9493c9bb86de7fa97620825a2e93a5508191177d","modified":1698851377870},{"_id":"public/tags/网路安全/index.html","hash":"146599973fd8ff15a4c7e766c61891f816cf3c54","modified":1698851377870},{"_id":"public/tags/GUI/index.html","hash":"034466e11dc1dc51ee4e23bee97605846d916bea","modified":1698851377870},{"_id":"public/tags/RESTful/index.html","hash":"0134a1a35c4991e6c9530d0ac4f49f4c60c8f5e8","modified":1698851377870},{"_id":"public/tags/RPC/index.html","hash":"927758bbecaf13c1da1932c8e5ef68fa6a037771","modified":1698851377870},{"_id":"public/tags/HTTP/index.html","hash":"a74755fc69b88433833f096c00c982f0675438ee","modified":1698851377870},{"_id":"public/tags/cookies/index.html","hash":"fef5a4477d40bfbfe44293ceafca62f9e0c5097c","modified":1698851377870},{"_id":"public/tags/localStorage/index.html","hash":"1b10c585a0e525d4ce0b8fdd9ae3e20a7b152500","modified":1698851377870},{"_id":"public/tags/sessionStorage/index.html","hash":"48f7ee3f0b70411199c20f810b5687d615c2b372","modified":1698851377870},{"_id":"public/tags/TypeScript/index.html","hash":"101ebe51bcdc322ea7d68879ec8104e072762ee5","modified":1698851377870},{"_id":"public/tags/性能优化/index.html","hash":"ee187578082d3ea3fa8e1df1e7579a43cabd475f","modified":1698851377870},{"_id":"public/tags/Hexo/index.html","hash":"7277d85969b057ff019e831cf1c9fafa8a835a63","modified":1698851377870},{"_id":"public/tags/Pagination/index.html","hash":"897b5288951f61adec8baaed98030ff6f5aaf7bf","modified":1698851377870},{"_id":"public/tags/ReadMore/index.html","hash":"b07f914507abab455a2fde3756cf758daeee8d51","modified":1698851377870},{"_id":"public/tags/RSS/index.html","hash":"76dcdc5bc2b90dfe5d45dbfc5a62a6e86beefebe","modified":1698851377870},{"_id":"public/tags/JavaScript/index.html","hash":"3f8c3bcc2ab7acba3fb5b2bc98a1c3470cb612b1","modified":1698851377870},{"_id":"public/tags/es6/index.html","hash":"fac5e2a56d1b68dcb885158f39be62b3cf132b71","modified":1698851377870},{"_id":"public/tags/react/index.html","hash":"f0b5672e04b434c65d628db1f0dc943a8a48d311","modified":1698851377870},{"_id":"public/tags/Fiber/index.html","hash":"b3042007f8ea8fd8c18ea7aca2cd717fd666349d","modified":1698851377870},{"_id":"public/tags/JSX/index.html","hash":"e5cdbaac405ab92a7e4fa22773960d501c3a5671","modified":1698851377870},{"_id":"public/tags/网络安全/index.html","hash":"887d570747ae7b552cecd97e0857c5939e026da8","modified":1698851377870},{"_id":"public/tags/CSRF/index.html","hash":"c936e71ac1e3e162f1299d2150fc411b27d0bf4e","modified":1698851377870},{"_id":"public/tags/XSS/index.html","hash":"44c0028edf0d5bace598805c96ea966b50af2eab","modified":1698851377870},{"_id":"public/tags/Webpack/index.html","hash":"ac966af73c77e43c2551380fba8e48b814935735","modified":1698851377870},{"_id":"public/tags/图片/index.html","hash":"4e529efa8df883589a2354af3920502546b3f696","modified":1698851377870},{"_id":"public/tags/插件/index.html","hash":"c7cfec116b52ebfff5614dca6e7923ed247079c1","modified":1698851377870},{"_id":"public/tags/npm/index.html","hash":"54ba08f8d69dfe380bc4423c08f9c7e8d2c8647a","modified":1698851377870},{"_id":"public/tags/nrm/index.html","hash":"02f14ac6cb098793fa2403a8f41f36e06bab236a","modified":1698851377870},{"_id":"public/tags/nvm/index.html","hash":"7aaeb09f6ebb075ace352d9978ae237e6600268c","modified":1698851377870},{"_id":"public/tags/WebPack/index.html","hash":"4f0f8c958166dae5a609ed384015c0e1ff1010a3","modified":1698851377870},{"_id":"public/tags/unstate-next/index.html","hash":"2c257a8d6ad1ddc7087f1a65ba5ef8cccbdce82f","modified":1698851377870},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1698851377870},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1698851377870},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1698851377870},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1698851377870},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1698851377870},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1698851377870},{"_id":"public/images/wechat.png","hash":"da793db4762f2168f250202fb51f0c4150ccfb71","modified":1698851377870},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1698851377870},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1698851377870},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1698851377870},{"_id":"public/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1698851377870},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1698851377870},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1698851377870},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1698851377870},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1698851377870},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1698851377870},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1698851377870},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1698851377870},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1698851377870},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1698851377870},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1698851377870},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1698851377870},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1698851377870},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1698851377870},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1698851377870},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1698851377870},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1698851377870},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1698851377870},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1698851377870},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1698851377870},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1698851377870},{"_id":"public/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1698851377870},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1698851377870},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1698851377870},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1698851377870},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1698851377870},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1698851377870},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1698851377870},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1698851377870},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1698851377870},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1698851377870},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1698851377870},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1698851377870},{"_id":"public/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1698851377870},{"_id":"public/css/main.css","hash":"e4bbf78ae5804cc5e3dd5d25e5be9cb10d0fd004","modified":1698851377870},{"_id":"public/images/alipay.png","hash":"0bb1d75a9b5d54e8b15cf9fe2e350c2b2fdbde8f","modified":1698851377870}],"Category":[{"name":"浏览器","_id":"clofw8ycl0004m0uobskg514v"},{"name":"协议","parent":"clofw8ycl0004m0uobskg514v","_id":"clofw8yd3000nm0uod1lc0rnp"},{"name":"缓存","parent":"clofw8ycl0004m0uobskg514v","_id":"clofw8yd7000sm0uobmjhdhj2"},{"name":"Cache","parent":"clofw8ycl0004m0uobskg514v","_id":"clofw8yda000xm0uo88q649hn"},{"name":"通讯","parent":"clofw8ycl0004m0uobskg514v","_id":"clofw8ydd0016m0uo8m1b753f"},{"name":"网路安全","parent":"clofw8ycl0004m0uobskg514v","_id":"clofw8ydg001em0uo1888303b"},{"name":"前端","_id":"clofw8ydj001km0uo5s8t14p8"},{"name":"渲染","parent":"clofw8ycl0004m0uobskg514v","_id":"clofw8ydr001ym0uo0gbu4ghz"},{"name":"React","_id":"clofw8ye5002qm0uohdidas0z"},{"name":"TypeScript","parent":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yeb003gm0uo09qxa7q0"},{"name":"框架","parent":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yed003mm0uo96ol9vqg"},{"name":"网络安全","parent":"clofw8ycl0004m0uobskg514v","_id":"clofw8yeg003rm0uob9vaao60"},{"name":"性能优化","parent":"clofw8ycl0004m0uobskg514v","_id":"clofw8yen004am0uo9bu5co5h"},{"name":"es6","parent":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yev0053m0uo4upeczm0"},{"name":"npm","parent":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yew0058m0uo2er0dqa9"},{"name":"WebPack","parent":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yez005nm0uo6clk7v5b"},{"name":"Fiber","parent":"clofw8ye5002qm0uohdidas0z","_id":"clofw8yf5006bm0uo77at5ly7"},{"name":"Hexo","parent":"clofw8yed003mm0uo96ol9vqg","_id":"clofw8yfa006ym0uo58etenxl"},{"name":"components","parent":"clofw8ye5002qm0uohdidas0z","_id":"clofw8yfd007dm0uoaobb6jcp"},{"name":"unstate-next","parent":"clofw8yfd007dm0uoaobb6jcp","_id":"clofw8yfm007pm0uo5v5zgz95"}],"Data":[],"Page":[{"title":"404","description":"404 – Page not found.","comments":0,"sitemap":false,"_content":"\n```\n  ██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗\n  ██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝\n  ███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║\n  ╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║\n       ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║\n       ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝\n\n      ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗\n      ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗\n      █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║\n      ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║\n      ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝\n      ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝\n```\n","source":"404/index.md","raw":"---\npermalink: /404.html\ntitle: 404\ndescription: 404 – Page not found.\ncomments: false\nsitemap: false\n---\n\n```\n  ██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗\n  ██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝\n  ███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║\n  ╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║\n       ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║\n       ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝\n\n      ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗\n      ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗\n      █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║\n      ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║\n      ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝\n      ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝\n```\n","date":"2023-10-19T12:00:19.495Z","updated":"2023-10-19T12:00:19.495Z","path":"/404.html","layout":"page","_id":"clofw8ybp0000m0uo523heg9a","content":"<div id=\"vip-container\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗</span><br><span class=\"line\">██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝</span><br><span class=\"line\">███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║</span><br><span class=\"line\">╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║</span><br><span class=\"line\">     ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║</span><br><span class=\"line\">     ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">    ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗</span><br><span class=\"line\">    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗</span><br><span class=\"line\">    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║</span><br><span class=\"line\">    ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║</span><br><span class=\"line\">    ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝</span><br><span class=\"line\">    ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝</span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":0,"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗</span><br><span class=\"line\">██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝</span><br><span class=\"line\">███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║</span><br><span class=\"line\">╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║</span><br><span class=\"line\">     ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║</span><br><span class=\"line\">     ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">    ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗</span><br><span class=\"line\">    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗</span><br><span class=\"line\">    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║</span><br><span class=\"line\">    ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║</span><br><span class=\"line\">    ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝</span><br><span class=\"line\">    ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝</span><br></pre></td></tr></table></figure>\n"},{"title":"有关于我","date":"2023-10-21T06:17:15.000Z","_content":"\n------\n\n#### 个人信息\n\n- 性 别：男 \t\t\t\t\t\t\t\t\t\t\t  年 龄：27\n- 手 机：15594555052                           邮 箱：songsshao@foxmail.com\n- 专 业：计算机科学与技术                    岗 位：研发工程师\n\n------\n\n#### 工作及教育经历\n\n- 博彦科技：前端开发⼯程师 \t\t\t\t\t          2021.08.16 ~ 至今\n- 神玥软件：软件开发⼯程师部⻔技术负责⼈\t2019.07.03 ~  2021.08.13\n- 安康学院 \t\t\t\t\t \t\t\t\t\t                    2015.09.01 ~ 2019.06.24\n\n------\n\n#### 专业技能\n\n- 熟练使用：React、JavaScript、HTML、CSS、TypeScript、Java\n- 前端框架：Taro-UI、JQuery、Echarts、Antd、ThreeJS\n- 前端服务层：Mobx、Redux\n- 前端请求服务：Axios、Ajax、fetch\n- 前端资源加载/打包⼯具：Webpack 、UmiJS、Vite\n- 后端微服务框架：SpringBoot\n- 后端服务框架：SpringMVC、Struct2\n- 后端Jdbc层：MyBatis、Hibernate\n- 框架：Django、Pillow、requests、urllib3、bs4、Selemiun、lxml\n- 数据库：MySQL、Oracle、Redis、SqLite、memcache\n- 服务器：Tomcat、Nginx\n- 算法：快速排序、深度优先策略、贪心算法\n\n------\n\n#### 项目经历\n\n1. 博彦科技 - 某某云开发平台 - 2020年9⽉⾄今\n   - 职 责：主要负责项⽬开发、框架服务维护、⾃动化部署、处理程序紧急问题等职责\n   - 内 容：在项⽬期间负责前端⻚⾯设计、开发、维护等。主要通过该项⽬对⾃⼰的个⼈技能有了⼀个较强的提升，对于⾃⼰的知识⾯有了⼀个更⾼层次的认知，使⽤第三⽅⼯具进⾏快速开发，采⽤React技术栈和其周边⼯具开发，项⽬架构采⽤umiJs + vite 协同开发模式。技术难度是项目系统结构复杂，系统代码老旧，改造升级难度大大增加。\n\n\n\n2. 神玥软件 - ⼴东动态监管平台 - 2020年6⽉⾄2021年7⽉\n\n   - 职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责\n\n   - 内 容：在该项⽬中同样采⽤全后端分离架构，该项⽬中不同之处在于使⽤架构发⽣改变，增加使⽤接⼝获取数据、动态切换数据源等。\n\n   - 项⽬架构：\n\n     前端+展示服务后台+数据抓取服务端+定时器数据处理服务端+接⼝获取数据端+第三⽅数据获取服务端组成。\n\n     在前端开发中，项⽬使⽤4层架构进程⻚⾯处理，临时数据存储使⽤session进⾏，使⽤有效⻚⾯数据传输保证⻚⾯独⽴性、依赖性降低、项⽬可扩展性增加、便与开发进⾏。\n\n     在定时器数据处理服务端不同之处，在于其需要兼容多中不同数据源，主要包oracle、db2(及其as400版本)、MySQL等，兼容其不同语法进⾏处理，连接⼯具类处理，初始化连接等问题，后台数据报⽂传输使⽤某某加密⽅式实现。\n\n     第三⽅接⼝程序实现主要是提供于第三⽅进⾏对接数据，汇总返回数据，进⾏数据统计，完成展示。\n\n   - 技 术：React、antd、Spring、SpringBoot、mybatis、SpringSecurity、oauth2、Sqlite、MySQL、redis等。\n\n\n\n3. 神玥软件 - 公积⾦监督管理云平台 - 2019年8⽉⾄2020年5⽉\n\n   - 职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责\n\n   - 内 容：在公积⾦监督管理云平台开发中，使⽤前后端分离架构。\n\n   - 项⽬架构： 前端+展示服务后台+数据抓取服务端+定时器数据处理服务端组成。在前端开发中，使⽤React开发框架辅助antd、amap、echarts、mobx、Axios等，借助webpack打包压缩⽂件等技术实现前端开发任务。\n\n     在后端技术⽀撑⽅⾯使⽤SpringBoot微服务框架，进⾏数据展示层⾯服务服务端程序编写。\n\n     在数据获取⽅⾯，数据均来⾃于各现场数据库，编写定时器服务端程序，使⽤频率为5 分钟到1⼩时不等等⽅法策略实现，适⽤于各种不同的核⼼版本库，通过sqlite轻量级数据库进⾏数据暂存，等待公司客户端服务器抓取数据，该技术由于公司限制使⽤该⽅法策略实现，在程序实现⽅⾯使⽤mybatis解析SQL⽅式编写，xml配置⽂件进⾏SQL配置，通过dao4j进⾏xml解析获取对应sql，使⽤XMLScriptBuilder进⾏获取SQL处理⽣成sqlSource资源，根据sqlSource获取boundSql对象获取编译后带有占位符资源对象，获取占位符信息数据，替换对应参数完成可执⾏sql。\n\n     在数据抓取客户端使⽤5分钟频率去更新数据，实时抓取数据与数据可进⾏⽐较并且进⾏更新。\n\n     对接使⽤微型前端服务框架，加载第三⽅服务程序。\n\n   - 技 术：React、antd、Spring、SpringBoot、mybatis、Sqlite、MySQL、redis等。\n\n\n\n4. 个人项目 - 微信⼩程序API+停⻋场客户端编写 - 2018年11⽉⾄-2019年1⽉\n   - 职 责：项⽬设计、需求、开发、部署等\n   - 内 容：该项⽬主要使⽤微信⼩程序、Django框架、H5前端完成。后端基于Django框架，主要是在Django框架中进⾏setting.py 配置，url编写，数据库模型创建、映射⽂件，view视图编写，服务代码编写。Api返回数据序列化处理、json数据处理。进⾏停⻋场实时数据监控数据处理。并且使⽤window 2008 server R2 进⾏环境部署，服务器搭建使⽤ nginx+fastCGI+Django进⾏配置，使⽤https进⾏数据访问。\n   - 职 责：负责编写model、admin、view、API编写、⽀付接⼝编写；\n   - 开发⼯具、语⾔及框架：JetBrains PyCharm、MySQL、Dreamweaver、Photoshop、Python、Django、HTML、CSS、JavaScript、Ajax、jQuery、Bootstrap以及Python开源框架。\n5. 个人项目 - 爬取wikipedia深度为3的超链接\n   - 内 容：Wikipedia 深度为3的所有URL资源链接的获取（1000万条记录），采取进程的⽅法进⾏访问Wikipedia，根据深度优先策略进⾏URL第⼆层资源遍历获取第三层URL资源。在数据处理过程中，使⽤request2技术获取源码、解析拦截⽆⽤⽂件，使⽤lxml技术进⾏分离出需要数据，并且检测出可⽤链接， 后进⾏URL保存到本地资源。\n   - 难 点：在获取Wikipedia 网站数据的时候需要处理反爬虫、过滤网站数据、获取需要的资源进行解析。\n\n------\n\n#### 获奖经历\n\n- 博彦科技 - 技术之星\n- 信息安全一级证书\n\n------\n\n#### ⾃我评价\n\n- 爱 好：骑⾏、登⼭、旅游、⽻⽑球、篮球、乒乓球。\n- 评 价：在我的从事计算机⾏业学习到⼯作也有6年之久，从刚开始对计算机的感兴趣到现在的⼯作，以及它成为了我⽣活不可或缺的⼀部分，都是⼀个变化和不多学习的过程，在这个过程中，经历了太多太多的苦难，从刚开始的⼀窍不通到现在的应⽤⾃如以及更深层次的了解，都是在不断⾃学中成⻓起来。需要这般⾃学就必须要有⾃学的动⼒和持之以恒的坚持都是不可缺少的。学习过程中不断的纠正⾃⼰学的⽅向，处理存在的问题以及快速处理问题的解决⽅法，都是⼀个能⼒的提升。 后还有就是对这个⾏业的热爱。","source":"about/me.md","raw":"---\ntitle: 有关于我\npermalink: /about/me.html\ndate: 2023-10-21 14:17:15\n---\n\n------\n\n#### 个人信息\n\n- 性 别：男 \t\t\t\t\t\t\t\t\t\t\t  年 龄：27\n- 手 机：15594555052                           邮 箱：songsshao@foxmail.com\n- 专 业：计算机科学与技术                    岗 位：研发工程师\n\n------\n\n#### 工作及教育经历\n\n- 博彦科技：前端开发⼯程师 \t\t\t\t\t          2021.08.16 ~ 至今\n- 神玥软件：软件开发⼯程师部⻔技术负责⼈\t2019.07.03 ~  2021.08.13\n- 安康学院 \t\t\t\t\t \t\t\t\t\t                    2015.09.01 ~ 2019.06.24\n\n------\n\n#### 专业技能\n\n- 熟练使用：React、JavaScript、HTML、CSS、TypeScript、Java\n- 前端框架：Taro-UI、JQuery、Echarts、Antd、ThreeJS\n- 前端服务层：Mobx、Redux\n- 前端请求服务：Axios、Ajax、fetch\n- 前端资源加载/打包⼯具：Webpack 、UmiJS、Vite\n- 后端微服务框架：SpringBoot\n- 后端服务框架：SpringMVC、Struct2\n- 后端Jdbc层：MyBatis、Hibernate\n- 框架：Django、Pillow、requests、urllib3、bs4、Selemiun、lxml\n- 数据库：MySQL、Oracle、Redis、SqLite、memcache\n- 服务器：Tomcat、Nginx\n- 算法：快速排序、深度优先策略、贪心算法\n\n------\n\n#### 项目经历\n\n1. 博彦科技 - 某某云开发平台 - 2020年9⽉⾄今\n   - 职 责：主要负责项⽬开发、框架服务维护、⾃动化部署、处理程序紧急问题等职责\n   - 内 容：在项⽬期间负责前端⻚⾯设计、开发、维护等。主要通过该项⽬对⾃⼰的个⼈技能有了⼀个较强的提升，对于⾃⼰的知识⾯有了⼀个更⾼层次的认知，使⽤第三⽅⼯具进⾏快速开发，采⽤React技术栈和其周边⼯具开发，项⽬架构采⽤umiJs + vite 协同开发模式。技术难度是项目系统结构复杂，系统代码老旧，改造升级难度大大增加。\n\n\n\n2. 神玥软件 - ⼴东动态监管平台 - 2020年6⽉⾄2021年7⽉\n\n   - 职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责\n\n   - 内 容：在该项⽬中同样采⽤全后端分离架构，该项⽬中不同之处在于使⽤架构发⽣改变，增加使⽤接⼝获取数据、动态切换数据源等。\n\n   - 项⽬架构：\n\n     前端+展示服务后台+数据抓取服务端+定时器数据处理服务端+接⼝获取数据端+第三⽅数据获取服务端组成。\n\n     在前端开发中，项⽬使⽤4层架构进程⻚⾯处理，临时数据存储使⽤session进⾏，使⽤有效⻚⾯数据传输保证⻚⾯独⽴性、依赖性降低、项⽬可扩展性增加、便与开发进⾏。\n\n     在定时器数据处理服务端不同之处，在于其需要兼容多中不同数据源，主要包oracle、db2(及其as400版本)、MySQL等，兼容其不同语法进⾏处理，连接⼯具类处理，初始化连接等问题，后台数据报⽂传输使⽤某某加密⽅式实现。\n\n     第三⽅接⼝程序实现主要是提供于第三⽅进⾏对接数据，汇总返回数据，进⾏数据统计，完成展示。\n\n   - 技 术：React、antd、Spring、SpringBoot、mybatis、SpringSecurity、oauth2、Sqlite、MySQL、redis等。\n\n\n\n3. 神玥软件 - 公积⾦监督管理云平台 - 2019年8⽉⾄2020年5⽉\n\n   - 职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责\n\n   - 内 容：在公积⾦监督管理云平台开发中，使⽤前后端分离架构。\n\n   - 项⽬架构： 前端+展示服务后台+数据抓取服务端+定时器数据处理服务端组成。在前端开发中，使⽤React开发框架辅助antd、amap、echarts、mobx、Axios等，借助webpack打包压缩⽂件等技术实现前端开发任务。\n\n     在后端技术⽀撑⽅⾯使⽤SpringBoot微服务框架，进⾏数据展示层⾯服务服务端程序编写。\n\n     在数据获取⽅⾯，数据均来⾃于各现场数据库，编写定时器服务端程序，使⽤频率为5 分钟到1⼩时不等等⽅法策略实现，适⽤于各种不同的核⼼版本库，通过sqlite轻量级数据库进⾏数据暂存，等待公司客户端服务器抓取数据，该技术由于公司限制使⽤该⽅法策略实现，在程序实现⽅⾯使⽤mybatis解析SQL⽅式编写，xml配置⽂件进⾏SQL配置，通过dao4j进⾏xml解析获取对应sql，使⽤XMLScriptBuilder进⾏获取SQL处理⽣成sqlSource资源，根据sqlSource获取boundSql对象获取编译后带有占位符资源对象，获取占位符信息数据，替换对应参数完成可执⾏sql。\n\n     在数据抓取客户端使⽤5分钟频率去更新数据，实时抓取数据与数据可进⾏⽐较并且进⾏更新。\n\n     对接使⽤微型前端服务框架，加载第三⽅服务程序。\n\n   - 技 术：React、antd、Spring、SpringBoot、mybatis、Sqlite、MySQL、redis等。\n\n\n\n4. 个人项目 - 微信⼩程序API+停⻋场客户端编写 - 2018年11⽉⾄-2019年1⽉\n   - 职 责：项⽬设计、需求、开发、部署等\n   - 内 容：该项⽬主要使⽤微信⼩程序、Django框架、H5前端完成。后端基于Django框架，主要是在Django框架中进⾏setting.py 配置，url编写，数据库模型创建、映射⽂件，view视图编写，服务代码编写。Api返回数据序列化处理、json数据处理。进⾏停⻋场实时数据监控数据处理。并且使⽤window 2008 server R2 进⾏环境部署，服务器搭建使⽤ nginx+fastCGI+Django进⾏配置，使⽤https进⾏数据访问。\n   - 职 责：负责编写model、admin、view、API编写、⽀付接⼝编写；\n   - 开发⼯具、语⾔及框架：JetBrains PyCharm、MySQL、Dreamweaver、Photoshop、Python、Django、HTML、CSS、JavaScript、Ajax、jQuery、Bootstrap以及Python开源框架。\n5. 个人项目 - 爬取wikipedia深度为3的超链接\n   - 内 容：Wikipedia 深度为3的所有URL资源链接的获取（1000万条记录），采取进程的⽅法进⾏访问Wikipedia，根据深度优先策略进⾏URL第⼆层资源遍历获取第三层URL资源。在数据处理过程中，使⽤request2技术获取源码、解析拦截⽆⽤⽂件，使⽤lxml技术进⾏分离出需要数据，并且检测出可⽤链接， 后进⾏URL保存到本地资源。\n   - 难 点：在获取Wikipedia 网站数据的时候需要处理反爬虫、过滤网站数据、获取需要的资源进行解析。\n\n------\n\n#### 获奖经历\n\n- 博彦科技 - 技术之星\n- 信息安全一级证书\n\n------\n\n#### ⾃我评价\n\n- 爱 好：骑⾏、登⼭、旅游、⽻⽑球、篮球、乒乓球。\n- 评 价：在我的从事计算机⾏业学习到⼯作也有6年之久，从刚开始对计算机的感兴趣到现在的⼯作，以及它成为了我⽣活不可或缺的⼀部分，都是⼀个变化和不多学习的过程，在这个过程中，经历了太多太多的苦难，从刚开始的⼀窍不通到现在的应⽤⾃如以及更深层次的了解，都是在不断⾃学中成⻓起来。需要这般⾃学就必须要有⾃学的动⼒和持之以恒的坚持都是不可缺少的。学习过程中不断的纠正⾃⼰学的⽅向，处理存在的问题以及快速处理问题的解决⽅法，都是⼀个能⼒的提升。 后还有就是对这个⾏业的热爱。","updated":"2023-10-21T14:49:24.216Z","path":"/about/me.html","comments":1,"layout":"page","_id":"clofw8ycj0002m0uo5clhfoi1","content":"<div id=\"vip-container\"><hr>\n<h4 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h4><ul>\n<li>性 别：男 \t\t\t\t\t\t\t\t\t\t\t  年 龄：27</li>\n<li>手 机：15594555052                           邮 箱：<a href=\"mailto:&#115;&#x6f;&#x6e;&#103;&#x73;&#115;&#x68;&#x61;&#111;&#x40;&#102;&#x6f;&#120;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;\">&#115;&#x6f;&#x6e;&#103;&#x73;&#115;&#x68;&#x61;&#111;&#x40;&#102;&#x6f;&#120;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a></li>\n<li>专 业：计算机科学与技术                    岗 位：研发工程师</li>\n</ul>\n<hr>\n<h4 id=\"工作及教育经历\"><a href=\"#工作及教育经历\" class=\"headerlink\" title=\"工作及教育经历\"></a>工作及教育经历</h4><ul>\n<li>博彦科技：前端开发⼯程师 \t\t\t\t\t          2021.08.16 ~ 至今</li>\n<li>神玥软件：软件开发⼯程师部⻔技术负责⼈\t2019.07.03 ~  2021.08.13</li>\n<li>安康学院 \t\t\t\t\t \t\t\t\t\t                    2015.09.01 ~ 2019.06.24</li>\n</ul>\n<hr>\n<h4 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h4><ul>\n<li>熟练使用：React、JavaScript、HTML、CSS、TypeScript、Java</li>\n<li>前端框架：Taro-UI、JQuery、Echarts、Antd、ThreeJS</li>\n<li>前端服务层：Mobx、Redux</li>\n<li>前端请求服务：Axios、Ajax、fetch</li>\n<li>前端资源加载&#x2F;打包⼯具：Webpack 、UmiJS、Vite</li>\n<li>后端微服务框架：SpringBoot</li>\n<li>后端服务框架：SpringMVC、Struct2</li>\n<li>后端Jdbc层：MyBatis、Hibernate</li>\n<li>框架：Django、Pillow、requests、urllib3、bs4、Selemiun、lxml</li>\n<li>数据库：MySQL、Oracle、Redis、SqLite、memcache</li>\n<li>服务器：Tomcat、Nginx</li>\n<li>算法：快速排序、深度优先策略、贪心算法</li>\n</ul>\n<hr>\n<h4 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h4><ol>\n<li><p>博彦科技 - 某某云开发平台 - 2020年9⽉⾄今</p>\n<ul>\n<li>职 责：主要负责项⽬开发、框架服务维护、⾃动化部署、处理程序紧急问题等职责</li>\n<li>内 容：在项⽬期间负责前端⻚⾯设计、开发、维护等。主要通过该项⽬对⾃⼰的个⼈技能有了⼀个较强的提升，对于⾃⼰的知识⾯有了⼀个更⾼层次的认知，使⽤第三⽅⼯具进⾏快速开发，采⽤React技术栈和其周边⼯具开发，项⽬架构采⽤umiJs + vite 协同开发模式。技术难度是项目系统结构复杂，系统代码老旧，改造升级难度大大增加。</li>\n</ul>\n</li>\n<li><p>神玥软件 - ⼴东动态监管平台 - 2020年6⽉⾄2021年7⽉</p>\n<ul>\n<li><p>职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责</p>\n</li>\n<li><p>内 容：在该项⽬中同样采⽤全后端分离架构，该项⽬中不同之处在于使⽤架构发⽣改变，增加使⽤接⼝获取数据、动态切换数据源等。</p>\n</li>\n<li><p>项⽬架构：</p>\n<p>前端+展示服务后台+数据抓取服务端+定时器数据处理服务端+接⼝获取数据端+第三⽅数据获取服务端组成。</p>\n<p>在前端开发中，项⽬使⽤4层架构进程⻚⾯处理，临时数据存储使⽤session进⾏，使⽤有效⻚⾯数据传输保证⻚⾯独⽴性、依赖性降低、项⽬可扩展性增加、便与开发进⾏。</p>\n<p>在定时器数据处理服务端不同之处，在于其需要兼容多中不同数据源，主要包oracle、db2(及其as400版本)、MySQL等，兼容其不同语法进⾏处理，连接⼯具类处理，初始化连接等问题，后台数据报⽂传输使⽤某某加密⽅式实现。</p>\n<p>第三⽅接⼝程序实现主要是提供于第三⽅进⾏对接数据，汇总返回数据，进⾏数据统计，完成展示。</p>\n</li>\n<li><p>技 术：React、antd、Spring、SpringBoot、mybatis、SpringSecurity、oauth2、Sqlite、MySQL、redis等。</p>\n</li>\n</ul>\n</li>\n<li><p>神玥软件 - 公积⾦监督管理云平台 - 2019年8⽉⾄2020年5⽉</p>\n<ul>\n<li><p>职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责</p>\n</li>\n<li><p>内 容：在公积⾦监督管理云平台开发中，使⽤前后端分离架构。</p>\n</li>\n<li><p>项⽬架构： 前端+展示服务后台+数据抓取服务端+定时器数据处理服务端组成。在前端开发中，使⽤React开发框架辅助antd、amap、echarts、mobx、Axios等，借助webpack打包压缩⽂件等技术实现前端开发任务。</p>\n<p>在后端技术⽀撑⽅⾯使⽤SpringBoot微服务框架，进⾏数据展示层⾯服务服务端程序编写。</p>\n<p>在数据获取⽅⾯，数据均来⾃于各现场数据库，编写定时器服务端程序，使⽤频率为5 分钟到1⼩时不等等⽅法策略实现，适⽤于各种不同的核⼼版本库，通过sqlite轻量级数据库进⾏数据暂存，等待公司客户端服务器抓取数据，该技术由于公司限制使⽤该⽅法策略实现，在程序实现⽅⾯使⽤mybatis解析SQL⽅式编写，xml配置⽂件进⾏SQL配置，通过dao4j进⾏xml解析获取对应sql，使⽤XMLScriptBuilder进⾏获取SQL处理⽣成sqlSource资源，根据sqlSource获取boundSql对象获取编译后带有占位符资源对象，获取占位符信息数据，替换对应参数完成可执⾏sql。</p>\n<p>在数据抓取客户端使⽤5分钟频率去更新数据，实时抓取数据与数据可进⾏⽐较并且进⾏更新。</p>\n<p>对接使⽤微型前端服务框架，加载第三⽅服务程序。</p>\n</li>\n<li><p>技 术：React、antd、Spring、SpringBoot、mybatis、Sqlite、MySQL、redis等。</p>\n</li>\n</ul>\n</li>\n<li><p>个人项目 - 微信⼩程序API+停⻋场客户端编写 - 2018年11⽉⾄-2019年1⽉</p>\n<ul>\n<li>职 责：项⽬设计、需求、开发、部署等</li>\n<li>内 容：该项⽬主要使⽤微信⼩程序、Django框架、H5前端完成。后端基于Django框架，主要是在Django框架中进⾏setting.py 配置，url编写，数据库模型创建、映射⽂件，view视图编写，服务代码编写。Api返回数据序列化处理、json数据处理。进⾏停⻋场实时数据监控数据处理。并且使⽤window 2008 server R2 进⾏环境部署，服务器搭建使⽤ nginx+fastCGI+Django进⾏配置，使⽤https进⾏数据访问。</li>\n<li>职 责：负责编写model、admin、view、API编写、⽀付接⼝编写；</li>\n<li>开发⼯具、语⾔及框架：JetBrains PyCharm、MySQL、Dreamweaver、Photoshop、Python、Django、HTML、CSS、JavaScript、Ajax、jQuery、Bootstrap以及Python开源框架。</li>\n</ul>\n</li>\n<li><p>个人项目 - 爬取wikipedia深度为3的超链接</p>\n<ul>\n<li>内 容：Wikipedia 深度为3的所有URL资源链接的获取（1000万条记录），采取进程的⽅法进⾏访问Wikipedia，根据深度优先策略进⾏URL第⼆层资源遍历获取第三层URL资源。在数据处理过程中，使⽤request2技术获取源码、解析拦截⽆⽤⽂件，使⽤lxml技术进⾏分离出需要数据，并且检测出可⽤链接， 后进⾏URL保存到本地资源。</li>\n<li>难 点：在获取Wikipedia 网站数据的时候需要处理反爬虫、过滤网站数据、获取需要的资源进行解析。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"获奖经历\"><a href=\"#获奖经历\" class=\"headerlink\" title=\"获奖经历\"></a>获奖经历</h4><ul>\n<li>博彦科技 - 技术之星</li>\n<li>信息安全一级证书</li>\n</ul>\n<hr>\n<h4 id=\"⾃我评价\"><a href=\"#⾃我评价\" class=\"headerlink\" title=\"⾃我评价\"></a>⾃我评价</h4><ul>\n<li>爱 好：骑⾏、登⼭、旅游、⽻⽑球、篮球、乒乓球。</li>\n<li>评 价：在我的从事计算机⾏业学习到⼯作也有6年之久，从刚开始对计算机的感兴趣到现在的⼯作，以及它成为了我⽣活不可或缺的⼀部分，都是⼀个变化和不多学习的过程，在这个过程中，经历了太多太多的苦难，从刚开始的⼀窍不通到现在的应⽤⾃如以及更深层次的了解，都是在不断⾃学中成⻓起来。需要这般⾃学就必须要有⾃学的动⼒和持之以恒的坚持都是不可缺少的。学习过程中不断的纠正⾃⼰学的⽅向，处理存在的问题以及快速处理问题的解决⽅法，都是⼀个能⼒的提升。 后还有就是对这个⾏业的热爱。</li>\n</ul>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":1687,"excerpt":"","more":"<hr>\n<h4 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h4><ul>\n<li>性 别：男 \t\t\t\t\t\t\t\t\t\t\t  年 龄：27</li>\n<li>手 机：15594555052                           邮 箱：<a href=\"mailto:&#115;&#x6f;&#x6e;&#103;&#x73;&#115;&#x68;&#x61;&#111;&#x40;&#102;&#x6f;&#120;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;\">&#115;&#x6f;&#x6e;&#103;&#x73;&#115;&#x68;&#x61;&#111;&#x40;&#102;&#x6f;&#120;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a></li>\n<li>专 业：计算机科学与技术                    岗 位：研发工程师</li>\n</ul>\n<hr>\n<h4 id=\"工作及教育经历\"><a href=\"#工作及教育经历\" class=\"headerlink\" title=\"工作及教育经历\"></a>工作及教育经历</h4><ul>\n<li>博彦科技：前端开发⼯程师 \t\t\t\t\t          2021.08.16 ~ 至今</li>\n<li>神玥软件：软件开发⼯程师部⻔技术负责⼈\t2019.07.03 ~  2021.08.13</li>\n<li>安康学院 \t\t\t\t\t \t\t\t\t\t                    2015.09.01 ~ 2019.06.24</li>\n</ul>\n<hr>\n<h4 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h4><ul>\n<li>熟练使用：React、JavaScript、HTML、CSS、TypeScript、Java</li>\n<li>前端框架：Taro-UI、JQuery、Echarts、Antd、ThreeJS</li>\n<li>前端服务层：Mobx、Redux</li>\n<li>前端请求服务：Axios、Ajax、fetch</li>\n<li>前端资源加载&#x2F;打包⼯具：Webpack 、UmiJS、Vite</li>\n<li>后端微服务框架：SpringBoot</li>\n<li>后端服务框架：SpringMVC、Struct2</li>\n<li>后端Jdbc层：MyBatis、Hibernate</li>\n<li>框架：Django、Pillow、requests、urllib3、bs4、Selemiun、lxml</li>\n<li>数据库：MySQL、Oracle、Redis、SqLite、memcache</li>\n<li>服务器：Tomcat、Nginx</li>\n<li>算法：快速排序、深度优先策略、贪心算法</li>\n</ul>\n<hr>\n<h4 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h4><ol>\n<li><p>博彦科技 - 某某云开发平台 - 2020年9⽉⾄今</p>\n<ul>\n<li>职 责：主要负责项⽬开发、框架服务维护、⾃动化部署、处理程序紧急问题等职责</li>\n<li>内 容：在项⽬期间负责前端⻚⾯设计、开发、维护等。主要通过该项⽬对⾃⼰的个⼈技能有了⼀个较强的提升，对于⾃⼰的知识⾯有了⼀个更⾼层次的认知，使⽤第三⽅⼯具进⾏快速开发，采⽤React技术栈和其周边⼯具开发，项⽬架构采⽤umiJs + vite 协同开发模式。技术难度是项目系统结构复杂，系统代码老旧，改造升级难度大大增加。</li>\n</ul>\n</li>\n<li><p>神玥软件 - ⼴东动态监管平台 - 2020年6⽉⾄2021年7⽉</p>\n<ul>\n<li><p>职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责</p>\n</li>\n<li><p>内 容：在该项⽬中同样采⽤全后端分离架构，该项⽬中不同之处在于使⽤架构发⽣改变，增加使⽤接⼝获取数据、动态切换数据源等。</p>\n</li>\n<li><p>项⽬架构：</p>\n<p>前端+展示服务后台+数据抓取服务端+定时器数据处理服务端+接⼝获取数据端+第三⽅数据获取服务端组成。</p>\n<p>在前端开发中，项⽬使⽤4层架构进程⻚⾯处理，临时数据存储使⽤session进⾏，使⽤有效⻚⾯数据传输保证⻚⾯独⽴性、依赖性降低、项⽬可扩展性增加、便与开发进⾏。</p>\n<p>在定时器数据处理服务端不同之处，在于其需要兼容多中不同数据源，主要包oracle、db2(及其as400版本)、MySQL等，兼容其不同语法进⾏处理，连接⼯具类处理，初始化连接等问题，后台数据报⽂传输使⽤某某加密⽅式实现。</p>\n<p>第三⽅接⼝程序实现主要是提供于第三⽅进⾏对接数据，汇总返回数据，进⾏数据统计，完成展示。</p>\n</li>\n<li><p>技 术：React、antd、Spring、SpringBoot、mybatis、SpringSecurity、oauth2、Sqlite、MySQL、redis等。</p>\n</li>\n</ul>\n</li>\n<li><p>神玥软件 - 公积⾦监督管理云平台 - 2019年8⽉⾄2020年5⽉</p>\n<ul>\n<li><p>职 责：主要负责项⽬的开发、开发技术⽀持、框架服务、部署、处理程序紧急问题等职责</p>\n</li>\n<li><p>内 容：在公积⾦监督管理云平台开发中，使⽤前后端分离架构。</p>\n</li>\n<li><p>项⽬架构： 前端+展示服务后台+数据抓取服务端+定时器数据处理服务端组成。在前端开发中，使⽤React开发框架辅助antd、amap、echarts、mobx、Axios等，借助webpack打包压缩⽂件等技术实现前端开发任务。</p>\n<p>在后端技术⽀撑⽅⾯使⽤SpringBoot微服务框架，进⾏数据展示层⾯服务服务端程序编写。</p>\n<p>在数据获取⽅⾯，数据均来⾃于各现场数据库，编写定时器服务端程序，使⽤频率为5 分钟到1⼩时不等等⽅法策略实现，适⽤于各种不同的核⼼版本库，通过sqlite轻量级数据库进⾏数据暂存，等待公司客户端服务器抓取数据，该技术由于公司限制使⽤该⽅法策略实现，在程序实现⽅⾯使⽤mybatis解析SQL⽅式编写，xml配置⽂件进⾏SQL配置，通过dao4j进⾏xml解析获取对应sql，使⽤XMLScriptBuilder进⾏获取SQL处理⽣成sqlSource资源，根据sqlSource获取boundSql对象获取编译后带有占位符资源对象，获取占位符信息数据，替换对应参数完成可执⾏sql。</p>\n<p>在数据抓取客户端使⽤5分钟频率去更新数据，实时抓取数据与数据可进⾏⽐较并且进⾏更新。</p>\n<p>对接使⽤微型前端服务框架，加载第三⽅服务程序。</p>\n</li>\n<li><p>技 术：React、antd、Spring、SpringBoot、mybatis、Sqlite、MySQL、redis等。</p>\n</li>\n</ul>\n</li>\n<li><p>个人项目 - 微信⼩程序API+停⻋场客户端编写 - 2018年11⽉⾄-2019年1⽉</p>\n<ul>\n<li>职 责：项⽬设计、需求、开发、部署等</li>\n<li>内 容：该项⽬主要使⽤微信⼩程序、Django框架、H5前端完成。后端基于Django框架，主要是在Django框架中进⾏setting.py 配置，url编写，数据库模型创建、映射⽂件，view视图编写，服务代码编写。Api返回数据序列化处理、json数据处理。进⾏停⻋场实时数据监控数据处理。并且使⽤window 2008 server R2 进⾏环境部署，服务器搭建使⽤ nginx+fastCGI+Django进⾏配置，使⽤https进⾏数据访问。</li>\n<li>职 责：负责编写model、admin、view、API编写、⽀付接⼝编写；</li>\n<li>开发⼯具、语⾔及框架：JetBrains PyCharm、MySQL、Dreamweaver、Photoshop、Python、Django、HTML、CSS、JavaScript、Ajax、jQuery、Bootstrap以及Python开源框架。</li>\n</ul>\n</li>\n<li><p>个人项目 - 爬取wikipedia深度为3的超链接</p>\n<ul>\n<li>内 容：Wikipedia 深度为3的所有URL资源链接的获取（1000万条记录），采取进程的⽅法进⾏访问Wikipedia，根据深度优先策略进⾏URL第⼆层资源遍历获取第三层URL资源。在数据处理过程中，使⽤request2技术获取源码、解析拦截⽆⽤⽂件，使⽤lxml技术进⾏分离出需要数据，并且检测出可⽤链接， 后进⾏URL保存到本地资源。</li>\n<li>难 点：在获取Wikipedia 网站数据的时候需要处理反爬虫、过滤网站数据、获取需要的资源进行解析。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"获奖经历\"><a href=\"#获奖经历\" class=\"headerlink\" title=\"获奖经历\"></a>获奖经历</h4><ul>\n<li>博彦科技 - 技术之星</li>\n<li>信息安全一级证书</li>\n</ul>\n<hr>\n<h4 id=\"⾃我评价\"><a href=\"#⾃我评价\" class=\"headerlink\" title=\"⾃我评价\"></a>⾃我评价</h4><ul>\n<li>爱 好：骑⾏、登⼭、旅游、⽻⽑球、篮球、乒乓球。</li>\n<li>评 价：在我的从事计算机⾏业学习到⼯作也有6年之久，从刚开始对计算机的感兴趣到现在的⼯作，以及它成为了我⽣活不可或缺的⼀部分，都是⼀个变化和不多学习的过程，在这个过程中，经历了太多太多的苦难，从刚开始的⼀窍不通到现在的应⽤⾃如以及更深层次的了解，都是在不断⾃学中成⻓起来。需要这般⾃学就必须要有⾃学的动⼒和持之以恒的坚持都是不可缺少的。学习过程中不断的纠正⾃⼰学的⽅向，处理存在的问题以及快速处理问题的解决⽅法，都是⼀个能⼒的提升。 后还有就是对这个⾏业的热爱。</li>\n</ul>\n"},{"title":"archives","date":"2023-10-18T13:51:12.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2023-10-18 21:51:12\ntype: archives\n---\n","updated":"2023-10-23T12:54:32.289Z","path":"archives/index.html","comments":1,"layout":"page","_id":"clofw8ycp0006m0uo9e4y41rg","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":0,"excerpt":"","more":""},{"title":"categories","date":"2023-10-18T13:35:55.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-10-18 21:35:55\ntype: categories\n---\n","updated":"2023-10-18T13:52:00.514Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clofw8ycs0008m0uod5fc9j34","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":0,"excerpt":"","more":""},{"title":"docs","date":"2023-10-19T09:39:06.000Z","_content":"","source":"docs/index.md","raw":"---\ntitle: docs\ndate: 2023-10-19 17:39:06\n---\n","updated":"2023-10-19T12:00:19.495Z","path":"docs/index.html","comments":1,"layout":"page","_id":"clofw8yct000am0uocrm0fasc","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":0,"excerpt":"","more":""},{"title":"schedule","date":"2023-10-18T13:50:02.000Z","type":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2023-10-18 21:50:02\ntype: schedule\n---\n","updated":"2023-10-18T13:50:14.804Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"clofw8ycx000em0uo89uub8uw","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":0,"excerpt":"","more":""},{"title":"Tags","date":"2023-10-18T13:33:27.000Z","type":"tags","comments":1,"toc":{"enable":true,"number":false,"max_depth":3},"reward_settings":{"enable":true,"comment":"Buy me a coffee"},"quicklink":{"enable":true,"delay":true,"timeout":3000,"priority":true},"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2023-10-18 21:33:27\ntype: tags\ncomments: true\ntoc:\n  enable: true\n  number: false\n  max_depth: 3\nreward_settings:\n  enable: true\n  comment: Buy me a coffee\nquicklink:\n  enable: true\n  delay: true\n  timeout: 3000\n  priority: true\n---\n","updated":"2023-10-21T13:47:30.419Z","path":"tags/index.html","layout":"page","_id":"clofw8ycz000gm0uo0qfr38ol","content":"<div id=\"vip-container\"></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":0,"excerpt":"","more":""}],"Post":[{"title":"浏览器缓存的全过程","date":"2023-10-20T08:29:38.000Z","description":"浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用","comments":1,"_content":"\n### 浏览器缓存的全过程\n\n![浏览器缓存的全过程](https://pic.imgdb.cn/item/65323b8ec458853aef72a6ad.png)\n\n浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；\n\n下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上次返回 200 的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取数据资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；\n\n如果资源已过期，则标明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；\n\n服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；\n\n如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间作对比，一致则命中协商缓存，返回 304；\n\n不一致则返回新的 last-modified 和文件并返回200；\n","source":"_posts/browser/mechanismCache.md","raw":"---\ntitle: 浏览器缓存的全过程\npermalink: /browser/mechanism/cache.html\ndate: 2023-10-20 16:29:38\ndescription: 浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用\ntag: [前端, 浏览器]\ncomments: true\ncategories: \n - 浏览器\n - 缓存\n---\n\n### 浏览器缓存的全过程\n\n![浏览器缓存的全过程](https://pic.imgdb.cn/item/65323b8ec458853aef72a6ad.png)\n\n浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；\n\n下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上次返回 200 的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取数据资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；\n\n如果资源已过期，则标明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；\n\n服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；\n\n如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间作对比，一致则命中协商缓存，返回 304；\n\n不一致则返回新的 last-modified 和文件并返回200；\n","slug":"browser/mechanismCache","published":1,"updated":"2023-10-21T13:54:38.597Z","__permalink":"/browser/mechanism/cache.html","layout":"post","photos":[],"link":"","_id":"clofw8ycg0001m0uogxty33by","content":"<div id=\"vip-container\"><h3 id=\"浏览器缓存的全过程\"><a href=\"#浏览器缓存的全过程\" class=\"headerlink\" title=\"浏览器缓存的全过程\"></a>浏览器缓存的全过程</h3><p><img src=\"https://pic.imgdb.cn/item/65323b8ec458853aef72a6ad.png\" alt=\"浏览器缓存的全过程\"></p>\n<p>浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；</p>\n<p>下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上次返回 200 的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取数据资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；</p>\n<p>如果资源已过期，则标明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；</p>\n<p>服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；</p>\n<p>如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间作对比，一致则命中协商缓存，返回 304；</p>\n<p>不一致则返回新的 last-modified 和文件并返回200；</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":343,"excerpt":"","more":"<h3 id=\"浏览器缓存的全过程\"><a href=\"#浏览器缓存的全过程\" class=\"headerlink\" title=\"浏览器缓存的全过程\"></a>浏览器缓存的全过程</h3><p><img src=\"https://pic.imgdb.cn/item/65323b8ec458853aef72a6ad.png\" alt=\"浏览器缓存的全过程\"></p>\n<p>浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；</p>\n<p>下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上次返回 200 的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取数据资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；</p>\n<p>如果资源已过期，则标明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；</p>\n<p>服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；</p>\n<p>如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间作对比，一致则命中协商缓存，返回 304；</p>\n<p>不一致则返回新的 last-modified 和文件并返回200；</p>\n"},{"title":"网络劫持有哪几种，如何防范？","date":"2023-10-21T14:06:18.000Z","description":"网路劫持可以导致非常严重是信息泄露或者信息被恶意篡改等，DNS 劫持由于涉嫌违法，已经被监管起来。","comments":1,"_content":"\n##### ⽹络劫持\n1. DNS 劫持: (输⼊京东被强制跳转到淘宝这就属于dns 劫持)\n- DNS 强制解析: 通过修改运营商的本地 DNS 记录，来引导⽤户流量到缓存服务器\n- 302 跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302 跳转的回复，引导⽤户获取内容\n2. HTTP 劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的 http 响应内容(即加⼴告)\n\n##### 如何防范网络劫持？\nDNS 劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http 劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP 加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。\n\n网络劫持指的是网络中的某个节点对数据进行恶意篡改和篡改，以达到非法获取用户信息或者控制用户设备的目的。以下是预防网络劫持的几个方法：\n\n1. 使用HTTPS：HTTPS是一个安全的协议，对通信进行加密和身份验证，防止劫持者对数据进行篡改。使用HTTPS之前，可以使用SSL证书来验证服务器的身份。\n\n2. 使用VPN：VPN可以加密数据并建立一个虚拟私人网络，从而保护用户的数据和隐私。使用VPN可以防止网络劫持和嗅探攻击。\n\n3. 使用防火墙和反病毒软件：网络劫持者可能会通过恶意软件或病毒对用户设备进行攻击，使用防火墙和反病毒软件可以防止这种攻击。\n\n4. 更新操作系统和软件程序：最新版本的操作系统和软件程序通常包含了修复安全漏洞的补丁。不定期更新操作系统和软件程序可以减少遭受网络攻击的风险。\n\n5. 警惕钓鱼网站和不安全的链接：劫持者可能会伪造合法的网站或链接，引导用户向其提供个人信息或下载恶意软件。不要轻信不安全的链接，要时刻保持警惕。","source":"_posts/browser/networkHijack.md","raw":"---\ntitle: 网络劫持有哪几种，如何防范？\npermalink: /browser/network/hijack.html\ndate: 2023-10-21 22:06:18\ndescription: 网路劫持可以导致非常严重是信息泄露或者信息被恶意篡改等，DNS 劫持由于涉嫌违法，已经被监管起来。\ntag: [前端, 浏览器, 网路安全]\ncomments: true\ncategories: \n - 浏览器\n - 网路安全\n---\n\n##### ⽹络劫持\n1. DNS 劫持: (输⼊京东被强制跳转到淘宝这就属于dns 劫持)\n- DNS 强制解析: 通过修改运营商的本地 DNS 记录，来引导⽤户流量到缓存服务器\n- 302 跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302 跳转的回复，引导⽤户获取内容\n2. HTTP 劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的 http 响应内容(即加⼴告)\n\n##### 如何防范网络劫持？\nDNS 劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http 劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP 加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。\n\n网络劫持指的是网络中的某个节点对数据进行恶意篡改和篡改，以达到非法获取用户信息或者控制用户设备的目的。以下是预防网络劫持的几个方法：\n\n1. 使用HTTPS：HTTPS是一个安全的协议，对通信进行加密和身份验证，防止劫持者对数据进行篡改。使用HTTPS之前，可以使用SSL证书来验证服务器的身份。\n\n2. 使用VPN：VPN可以加密数据并建立一个虚拟私人网络，从而保护用户的数据和隐私。使用VPN可以防止网络劫持和嗅探攻击。\n\n3. 使用防火墙和反病毒软件：网络劫持者可能会通过恶意软件或病毒对用户设备进行攻击，使用防火墙和反病毒软件可以防止这种攻击。\n\n4. 更新操作系统和软件程序：最新版本的操作系统和软件程序通常包含了修复安全漏洞的补丁。不定期更新操作系统和软件程序可以减少遭受网络攻击的风险。\n\n5. 警惕钓鱼网站和不安全的链接：劫持者可能会伪造合法的网站或链接，引导用户向其提供个人信息或下载恶意软件。不要轻信不安全的链接，要时刻保持警惕。","slug":"browser/networkHijack","published":1,"updated":"2023-10-21T14:06:20.298Z","__permalink":"/browser/network/hijack.html","layout":"post","photos":[],"link":"","_id":"clofw8ycj0003m0uo7yhmapas","content":"<div id=\"vip-container\"><h5 id=\"⽹络劫持\"><a href=\"#⽹络劫持\" class=\"headerlink\" title=\"⽹络劫持\"></a>⽹络劫持</h5><ol>\n<li>DNS 劫持: (输⼊京东被强制跳转到淘宝这就属于dns 劫持)</li>\n</ol>\n<ul>\n<li>DNS 强制解析: 通过修改运营商的本地 DNS 记录，来引导⽤户流量到缓存服务器</li>\n<li>302 跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302 跳转的回复，引导⽤户获取内容</li>\n</ul>\n<ol start=\"2\">\n<li>HTTP 劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的 http 响应内容(即加⼴告)</li>\n</ol>\n<h5 id=\"如何防范网络劫持？\"><a href=\"#如何防范网络劫持？\" class=\"headerlink\" title=\"如何防范网络劫持？\"></a>如何防范网络劫持？</h5><p>DNS 劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http 劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP 加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。</p>\n<p>网络劫持指的是网络中的某个节点对数据进行恶意篡改和篡改，以达到非法获取用户信息或者控制用户设备的目的。以下是预防网络劫持的几个方法：</p>\n<ol>\n<li><p>使用HTTPS：HTTPS是一个安全的协议，对通信进行加密和身份验证，防止劫持者对数据进行篡改。使用HTTPS之前，可以使用SSL证书来验证服务器的身份。</p>\n</li>\n<li><p>使用VPN：VPN可以加密数据并建立一个虚拟私人网络，从而保护用户的数据和隐私。使用VPN可以防止网络劫持和嗅探攻击。</p>\n</li>\n<li><p>使用防火墙和反病毒软件：网络劫持者可能会通过恶意软件或病毒对用户设备进行攻击，使用防火墙和反病毒软件可以防止这种攻击。</p>\n</li>\n<li><p>更新操作系统和软件程序：最新版本的操作系统和软件程序通常包含了修复安全漏洞的补丁。不定期更新操作系统和软件程序可以减少遭受网络攻击的风险。</p>\n</li>\n<li><p>警惕钓鱼网站和不安全的链接：劫持者可能会伪造合法的网站或链接，引导用户向其提供个人信息或下载恶意软件。不要轻信不安全的链接，要时刻保持警惕。</p>\n</li>\n</ol>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":580,"excerpt":"","more":"<h5 id=\"⽹络劫持\"><a href=\"#⽹络劫持\" class=\"headerlink\" title=\"⽹络劫持\"></a>⽹络劫持</h5><ol>\n<li>DNS 劫持: (输⼊京东被强制跳转到淘宝这就属于dns 劫持)</li>\n</ol>\n<ul>\n<li>DNS 强制解析: 通过修改运营商的本地 DNS 记录，来引导⽤户流量到缓存服务器</li>\n<li>302 跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302 跳转的回复，引导⽤户获取内容</li>\n</ul>\n<ol start=\"2\">\n<li>HTTP 劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的 http 响应内容(即加⼴告)</li>\n</ol>\n<h5 id=\"如何防范网络劫持？\"><a href=\"#如何防范网络劫持？\" class=\"headerlink\" title=\"如何防范网络劫持？\"></a>如何防范网络劫持？</h5><p>DNS 劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http 劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP 加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。</p>\n<p>网络劫持指的是网络中的某个节点对数据进行恶意篡改和篡改，以达到非法获取用户信息或者控制用户设备的目的。以下是预防网络劫持的几个方法：</p>\n<ol>\n<li><p>使用HTTPS：HTTPS是一个安全的协议，对通信进行加密和身份验证，防止劫持者对数据进行篡改。使用HTTPS之前，可以使用SSL证书来验证服务器的身份。</p>\n</li>\n<li><p>使用VPN：VPN可以加密数据并建立一个虚拟私人网络，从而保护用户的数据和隐私。使用VPN可以防止网络劫持和嗅探攻击。</p>\n</li>\n<li><p>使用防火墙和反病毒软件：网络劫持者可能会通过恶意软件或病毒对用户设备进行攻击，使用防火墙和反病毒软件可以防止这种攻击。</p>\n</li>\n<li><p>更新操作系统和软件程序：最新版本的操作系统和软件程序通常包含了修复安全漏洞的补丁。不定期更新操作系统和软件程序可以减少遭受网络攻击的风险。</p>\n</li>\n<li><p>警惕钓鱼网站和不安全的链接：劫持者可能会伪造合法的网站或链接，引导用户向其提供个人信息或下载恶意软件。不要轻信不安全的链接，要时刻保持警惕。</p>\n</li>\n</ol>\n"},{"title":"浏览器的渲染进程的线程","date":"2023-10-20T13:23:26.000Z","description":"GUI 渲染线程是在 GUI 应用程序中负责界面渲染的线程。","comments":1,"_content":"\n#### 浏览器的渲染进程的线程\n![在这里插入图片描述](https://pic.imgdb.cn/item/6532800ac458853aef6782e0.png)\n##### GUI 渲染线程\nGUI 渲染线程是在 GUI 应用程序中负责界面渲染的线程。负责渲染浏览器页面，解析 HTML、CSS，构建DOM 树、构建CSSOM树、构建渲染树和绘制页面；当界面需要重绘或由于某种操作引发回流时，该线程就会执行。\n\n在许多 GUI 应用程序中，渲染线程通常会在主线程中运行，这可能会导致界面卡顿或响应时间过长。为了避免这种情况，一些框架和库已经实现了将 GUI 渲染线程与主线程分离的机制，例如 Android 中的 UI 线程和渲染线程分离机制。\n\n当渲染线程与主线程分离时，它可以专注于绘制和更新屏幕上的内容，而主线程则可以处理用户输入和其他逻辑。这样可以提高应用程序的响应速度和用户体验。\n\n**注意**：GUI 渲染线程和 JS 引擎线程是互斥的，当JS 引擎执行时GUI线程会被挂起，GUI 更新会被保存在一个队列中等到JS 引擎空闲时立即被执行。\n\n##### JS 引擎线程\nJS 引擎线程也称为 JS 内核，负责处理Javascript 脚本程序，解析Javascript 脚本，运行代码；JS 引擎线程一直等待着任务队列中任务的到来，然后加以处理，一个 Tab 页中无论什么时候都只有一个JS 引擎线程在运行 JS 程序。\n\n在浏览器环境中，JavaScript 引擎线程负责解释和执行 JavaScript 代码，并将执行结果返回给主线程。JavaScript 引擎线程通常是单线程的，这意味着它只能同时执行一个任务。这就是为什么一些耗时的 JavaScript 代码可以阻止页面的渲染和响应。\n\n为了解决这个问题，浏览器引入了 Web Workers，使得可以使用多个 JavaScript 引擎线程来执行 JavaScript 代码。这些工作线程可以并行地执行 JavaScript 代码，并在完成任务后将结果返回给主线程，从而防止 JavaScript 代码阻塞页面的渲染和响应。\n\n**注意**：GUI 渲染线程与 JS 引擎线程的互斥关系，所以如果JS 执行的时间过长，会造成页面的渲染不连贯，导致页面渲染加载阻塞。\n##### 时间触发线程\n时间触发线程属于浏览器而不是 JS 引擎，用来控制事件循环；当JS引擎执行代码块如 setTimeOut 时（也可是来自浏览器内核的其他线程,如鼠标点击、AJAX 异步请求等），会将对应任务添加到事件触发线程中；当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理。\n\n时间触发线程在浏览器中起着非常重要的作用，因为它们可以帮助网站实现许多不同的功能，包括：\n\n- 启动定时器：当网页需要执行一些定时任务时，可以使用时间触发线程来启动定时器。\n\n- 处理事件：当用户与网页交互时，例如点击按钮或提交表单，时间触发线程将负责处理这些事件并执行相应的回调函数。\n\n- 处理异步请求：当网页需要从服务器获取数据时，可以使用时间触发线程来处理异步请求并执行回调函数。\n\n**注意**：由于 JS 的单线程关系，所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）。\n\n##### 定时器触发进程\n浏览器定时器触发进程是指浏览器中用来触发定时器的进程。在浏览器中，定时器可以使用 JavaScript 的 setTimeout() 和 setInterval() 方法来创建。当设置的时间到达后，浏览器会触发定时器，并执行对应的函数。\n\n定时器触发进程通常由内核管理，它会在特定时间间隔内不断运行，并检查是否有定时器需要触发。当定时器触发时，该进程会将需要执行的任务推入待执行队列中，然后通知主线程执行。主线程会不断检查待执行队列，如果有任务待执行，则将其取出并执行。\n\n需要**注意**的是，如果执行的任务需要较长时间才能完成，会导致主线程阻塞，影响页面的响应速度。因此，应该尽可能避免在定时器中执行复杂的任务，或者使用 Web Worker 在后台执行任务，以避免阻塞主线程。\n\n**注意**：W3C 在 HTML 标准中规定，定时器的定时时间不能小于4ms，如果是小于 4ms，则默认为 4ms。\n\n##### 异步 http 请求线程\n在浏览器中，异步 HTTP 请求线程通常由浏览器内部的 JavaScript 引擎处理。当 JavaScript 代码发起一个异步 HTTP 请求时，浏览器会创建一个新的线程来处理该请求，该线程通常是浏览器的网络线程。在该线程中，浏览器会向服务器发送 HTTP 请求，并等待服务器返回响应。\n\n在等待服务器响应的同时，JavaScript 引擎会继续执行其他代码，不会被阻塞。当服务器返回响应后，浏览器会将响应数据传递给 JavaScript 引擎，在 JavaScript 线程中执行相应的回调函数，用来处理响应数据。\n\n需要注意的是，由于浏览器对跨域请求进行了限制，在异步 HTTP 请求线程中发起的跨域请求需要经过浏览器的安全机制进行处理，一般需要设置相关的请求头或者使用 JSONP 等技术来解决。","source":"_posts/browser/renderProcess.md","raw":"---\ntitle: 浏览器的渲染进程的线程\npermalink: /browser/render/process.html\ndate: 2023-10-20 21:23:26\ndescription: GUI 渲染线程是在 GUI 应用程序中负责界面渲染的线程。\ntag: [前端, 浏览器, GUI]\ncomments: true\ncategories: \n - 浏览器\n - 渲染\n---\n\n#### 浏览器的渲染进程的线程\n![在这里插入图片描述](https://pic.imgdb.cn/item/6532800ac458853aef6782e0.png)\n##### GUI 渲染线程\nGUI 渲染线程是在 GUI 应用程序中负责界面渲染的线程。负责渲染浏览器页面，解析 HTML、CSS，构建DOM 树、构建CSSOM树、构建渲染树和绘制页面；当界面需要重绘或由于某种操作引发回流时，该线程就会执行。\n\n在许多 GUI 应用程序中，渲染线程通常会在主线程中运行，这可能会导致界面卡顿或响应时间过长。为了避免这种情况，一些框架和库已经实现了将 GUI 渲染线程与主线程分离的机制，例如 Android 中的 UI 线程和渲染线程分离机制。\n\n当渲染线程与主线程分离时，它可以专注于绘制和更新屏幕上的内容，而主线程则可以处理用户输入和其他逻辑。这样可以提高应用程序的响应速度和用户体验。\n\n**注意**：GUI 渲染线程和 JS 引擎线程是互斥的，当JS 引擎执行时GUI线程会被挂起，GUI 更新会被保存在一个队列中等到JS 引擎空闲时立即被执行。\n\n##### JS 引擎线程\nJS 引擎线程也称为 JS 内核，负责处理Javascript 脚本程序，解析Javascript 脚本，运行代码；JS 引擎线程一直等待着任务队列中任务的到来，然后加以处理，一个 Tab 页中无论什么时候都只有一个JS 引擎线程在运行 JS 程序。\n\n在浏览器环境中，JavaScript 引擎线程负责解释和执行 JavaScript 代码，并将执行结果返回给主线程。JavaScript 引擎线程通常是单线程的，这意味着它只能同时执行一个任务。这就是为什么一些耗时的 JavaScript 代码可以阻止页面的渲染和响应。\n\n为了解决这个问题，浏览器引入了 Web Workers，使得可以使用多个 JavaScript 引擎线程来执行 JavaScript 代码。这些工作线程可以并行地执行 JavaScript 代码，并在完成任务后将结果返回给主线程，从而防止 JavaScript 代码阻塞页面的渲染和响应。\n\n**注意**：GUI 渲染线程与 JS 引擎线程的互斥关系，所以如果JS 执行的时间过长，会造成页面的渲染不连贯，导致页面渲染加载阻塞。\n##### 时间触发线程\n时间触发线程属于浏览器而不是 JS 引擎，用来控制事件循环；当JS引擎执行代码块如 setTimeOut 时（也可是来自浏览器内核的其他线程,如鼠标点击、AJAX 异步请求等），会将对应任务添加到事件触发线程中；当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理。\n\n时间触发线程在浏览器中起着非常重要的作用，因为它们可以帮助网站实现许多不同的功能，包括：\n\n- 启动定时器：当网页需要执行一些定时任务时，可以使用时间触发线程来启动定时器。\n\n- 处理事件：当用户与网页交互时，例如点击按钮或提交表单，时间触发线程将负责处理这些事件并执行相应的回调函数。\n\n- 处理异步请求：当网页需要从服务器获取数据时，可以使用时间触发线程来处理异步请求并执行回调函数。\n\n**注意**：由于 JS 的单线程关系，所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）。\n\n##### 定时器触发进程\n浏览器定时器触发进程是指浏览器中用来触发定时器的进程。在浏览器中，定时器可以使用 JavaScript 的 setTimeout() 和 setInterval() 方法来创建。当设置的时间到达后，浏览器会触发定时器，并执行对应的函数。\n\n定时器触发进程通常由内核管理，它会在特定时间间隔内不断运行，并检查是否有定时器需要触发。当定时器触发时，该进程会将需要执行的任务推入待执行队列中，然后通知主线程执行。主线程会不断检查待执行队列，如果有任务待执行，则将其取出并执行。\n\n需要**注意**的是，如果执行的任务需要较长时间才能完成，会导致主线程阻塞，影响页面的响应速度。因此，应该尽可能避免在定时器中执行复杂的任务，或者使用 Web Worker 在后台执行任务，以避免阻塞主线程。\n\n**注意**：W3C 在 HTML 标准中规定，定时器的定时时间不能小于4ms，如果是小于 4ms，则默认为 4ms。\n\n##### 异步 http 请求线程\n在浏览器中，异步 HTTP 请求线程通常由浏览器内部的 JavaScript 引擎处理。当 JavaScript 代码发起一个异步 HTTP 请求时，浏览器会创建一个新的线程来处理该请求，该线程通常是浏览器的网络线程。在该线程中，浏览器会向服务器发送 HTTP 请求，并等待服务器返回响应。\n\n在等待服务器响应的同时，JavaScript 引擎会继续执行其他代码，不会被阻塞。当服务器返回响应后，浏览器会将响应数据传递给 JavaScript 引擎，在 JavaScript 线程中执行相应的回调函数，用来处理响应数据。\n\n需要注意的是，由于浏览器对跨域请求进行了限制，在异步 HTTP 请求线程中发起的跨域请求需要经过浏览器的安全机制进行处理，一般需要设置相关的请求头或者使用 JSONP 等技术来解决。","slug":"browser/renderProcess","published":1,"updated":"2023-10-21T13:54:47.996Z","__permalink":"/browser/render/process.html","layout":"post","photos":[],"link":"","_id":"clofw8ycq0007m0uo61vp42md","content":"<div id=\"vip-container\"><h4 id=\"浏览器的渲染进程的线程\"><a href=\"#浏览器的渲染进程的线程\" class=\"headerlink\" title=\"浏览器的渲染进程的线程\"></a>浏览器的渲染进程的线程</h4><p><img src=\"https://pic.imgdb.cn/item/6532800ac458853aef6782e0.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"GUI-渲染线程\"><a href=\"#GUI-渲染线程\" class=\"headerlink\" title=\"GUI 渲染线程\"></a>GUI 渲染线程</h5><p>GUI 渲染线程是在 GUI 应用程序中负责界面渲染的线程。负责渲染浏览器页面，解析 HTML、CSS，构建DOM 树、构建CSSOM树、构建渲染树和绘制页面；当界面需要重绘或由于某种操作引发回流时，该线程就会执行。</p>\n<p>在许多 GUI 应用程序中，渲染线程通常会在主线程中运行，这可能会导致界面卡顿或响应时间过长。为了避免这种情况，一些框架和库已经实现了将 GUI 渲染线程与主线程分离的机制，例如 Android 中的 UI 线程和渲染线程分离机制。</p>\n<p>当渲染线程与主线程分离时，它可以专注于绘制和更新屏幕上的内容，而主线程则可以处理用户输入和其他逻辑。这样可以提高应用程序的响应速度和用户体验。</p>\n<p><strong>注意</strong>：GUI 渲染线程和 JS 引擎线程是互斥的，当JS 引擎执行时GUI线程会被挂起，GUI 更新会被保存在一个队列中等到JS 引擎空闲时立即被执行。</p>\n<h5 id=\"JS-引擎线程\"><a href=\"#JS-引擎线程\" class=\"headerlink\" title=\"JS 引擎线程\"></a>JS 引擎线程</h5><p>JS 引擎线程也称为 JS 内核，负责处理Javascript 脚本程序，解析Javascript 脚本，运行代码；JS 引擎线程一直等待着任务队列中任务的到来，然后加以处理，一个 Tab 页中无论什么时候都只有一个JS 引擎线程在运行 JS 程序。</p>\n<p>在浏览器环境中，JavaScript 引擎线程负责解释和执行 JavaScript 代码，并将执行结果返回给主线程。JavaScript 引擎线程通常是单线程的，这意味着它只能同时执行一个任务。这就是为什么一些耗时的 JavaScript 代码可以阻止页面的渲染和响应。</p>\n<p>为了解决这个问题，浏览器引入了 Web Workers，使得可以使用多个 JavaScript 引擎线程来执行 JavaScript 代码。这些工作线程可以并行地执行 JavaScript 代码，并在完成任务后将结果返回给主线程，从而防止 JavaScript 代码阻塞页面的渲染和响应。</p>\n<p><strong>注意</strong>：GUI 渲染线程与 JS 引擎线程的互斥关系，所以如果JS 执行的时间过长，会造成页面的渲染不连贯，导致页面渲染加载阻塞。</p>\n<h5 id=\"时间触发线程\"><a href=\"#时间触发线程\" class=\"headerlink\" title=\"时间触发线程\"></a>时间触发线程</h5><p>时间触发线程属于浏览器而不是 JS 引擎，用来控制事件循环；当JS引擎执行代码块如 setTimeOut 时（也可是来自浏览器内核的其他线程,如鼠标点击、AJAX 异步请求等），会将对应任务添加到事件触发线程中；当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理。</p>\n<p>时间触发线程在浏览器中起着非常重要的作用，因为它们可以帮助网站实现许多不同的功能，包括：</p>\n<ul>\n<li><p>启动定时器：当网页需要执行一些定时任务时，可以使用时间触发线程来启动定时器。</p>\n</li>\n<li><p>处理事件：当用户与网页交互时，例如点击按钮或提交表单，时间触发线程将负责处理这些事件并执行相应的回调函数。</p>\n</li>\n<li><p>处理异步请求：当网页需要从服务器获取数据时，可以使用时间触发线程来处理异步请求并执行回调函数。</p>\n</li>\n</ul>\n<p><strong>注意</strong>：由于 JS 的单线程关系，所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）。</p>\n<h5 id=\"定时器触发进程\"><a href=\"#定时器触发进程\" class=\"headerlink\" title=\"定时器触发进程\"></a>定时器触发进程</h5><p>浏览器定时器触发进程是指浏览器中用来触发定时器的进程。在浏览器中，定时器可以使用 JavaScript 的 setTimeout() 和 setInterval() 方法来创建。当设置的时间到达后，浏览器会触发定时器，并执行对应的函数。</p>\n<p>定时器触发进程通常由内核管理，它会在特定时间间隔内不断运行，并检查是否有定时器需要触发。当定时器触发时，该进程会将需要执行的任务推入待执行队列中，然后通知主线程执行。主线程会不断检查待执行队列，如果有任务待执行，则将其取出并执行。</p>\n<p>需要<strong>注意</strong>的是，如果执行的任务需要较长时间才能完成，会导致主线程阻塞，影响页面的响应速度。因此，应该尽可能避免在定时器中执行复杂的任务，或者使用 Web Worker 在后台执行任务，以避免阻塞主线程。</p>\n<p><strong>注意</strong>：W3C 在 HTML 标准中规定，定时器的定时时间不能小于4ms，如果是小于 4ms，则默认为 4ms。</p>\n<h5 id=\"异步-http-请求线程\"><a href=\"#异步-http-请求线程\" class=\"headerlink\" title=\"异步 http 请求线程\"></a>异步 http 请求线程</h5><p>在浏览器中，异步 HTTP 请求线程通常由浏览器内部的 JavaScript 引擎处理。当 JavaScript 代码发起一个异步 HTTP 请求时，浏览器会创建一个新的线程来处理该请求，该线程通常是浏览器的网络线程。在该线程中，浏览器会向服务器发送 HTTP 请求，并等待服务器返回响应。</p>\n<p>在等待服务器响应的同时，JavaScript 引擎会继续执行其他代码，不会被阻塞。当服务器返回响应后，浏览器会将响应数据传递给 JavaScript 引擎，在 JavaScript 线程中执行相应的回调函数，用来处理响应数据。</p>\n<p>需要注意的是，由于浏览器对跨域请求进行了限制，在异步 HTTP 请求线程中发起的跨域请求需要经过浏览器的安全机制进行处理，一般需要设置相关的请求头或者使用 JSONP 等技术来解决。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/web/security/question.html","/javascript/prototype.html"],"length":1531,"excerpt":"","more":"<h4 id=\"浏览器的渲染进程的线程\"><a href=\"#浏览器的渲染进程的线程\" class=\"headerlink\" title=\"浏览器的渲染进程的线程\"></a>浏览器的渲染进程的线程</h4><p><img src=\"https://pic.imgdb.cn/item/6532800ac458853aef6782e0.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"GUI-渲染线程\"><a href=\"#GUI-渲染线程\" class=\"headerlink\" title=\"GUI 渲染线程\"></a>GUI 渲染线程</h5><p>GUI 渲染线程是在 GUI 应用程序中负责界面渲染的线程。负责渲染浏览器页面，解析 HTML、CSS，构建DOM 树、构建CSSOM树、构建渲染树和绘制页面；当界面需要重绘或由于某种操作引发回流时，该线程就会执行。</p>\n<p>在许多 GUI 应用程序中，渲染线程通常会在主线程中运行，这可能会导致界面卡顿或响应时间过长。为了避免这种情况，一些框架和库已经实现了将 GUI 渲染线程与主线程分离的机制，例如 Android 中的 UI 线程和渲染线程分离机制。</p>\n<p>当渲染线程与主线程分离时，它可以专注于绘制和更新屏幕上的内容，而主线程则可以处理用户输入和其他逻辑。这样可以提高应用程序的响应速度和用户体验。</p>\n<p><strong>注意</strong>：GUI 渲染线程和 JS 引擎线程是互斥的，当JS 引擎执行时GUI线程会被挂起，GUI 更新会被保存在一个队列中等到JS 引擎空闲时立即被执行。</p>\n<h5 id=\"JS-引擎线程\"><a href=\"#JS-引擎线程\" class=\"headerlink\" title=\"JS 引擎线程\"></a>JS 引擎线程</h5><p>JS 引擎线程也称为 JS 内核，负责处理Javascript 脚本程序，解析Javascript 脚本，运行代码；JS 引擎线程一直等待着任务队列中任务的到来，然后加以处理，一个 Tab 页中无论什么时候都只有一个JS 引擎线程在运行 JS 程序。</p>\n<p>在浏览器环境中，JavaScript 引擎线程负责解释和执行 JavaScript 代码，并将执行结果返回给主线程。JavaScript 引擎线程通常是单线程的，这意味着它只能同时执行一个任务。这就是为什么一些耗时的 JavaScript 代码可以阻止页面的渲染和响应。</p>\n<p>为了解决这个问题，浏览器引入了 Web Workers，使得可以使用多个 JavaScript 引擎线程来执行 JavaScript 代码。这些工作线程可以并行地执行 JavaScript 代码，并在完成任务后将结果返回给主线程，从而防止 JavaScript 代码阻塞页面的渲染和响应。</p>\n<p><strong>注意</strong>：GUI 渲染线程与 JS 引擎线程的互斥关系，所以如果JS 执行的时间过长，会造成页面的渲染不连贯，导致页面渲染加载阻塞。</p>\n<h5 id=\"时间触发线程\"><a href=\"#时间触发线程\" class=\"headerlink\" title=\"时间触发线程\"></a>时间触发线程</h5><p>时间触发线程属于浏览器而不是 JS 引擎，用来控制事件循环；当JS引擎执行代码块如 setTimeOut 时（也可是来自浏览器内核的其他线程,如鼠标点击、AJAX 异步请求等），会将对应任务添加到事件触发线程中；当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理。</p>\n<p>时间触发线程在浏览器中起着非常重要的作用，因为它们可以帮助网站实现许多不同的功能，包括：</p>\n<ul>\n<li><p>启动定时器：当网页需要执行一些定时任务时，可以使用时间触发线程来启动定时器。</p>\n</li>\n<li><p>处理事件：当用户与网页交互时，例如点击按钮或提交表单，时间触发线程将负责处理这些事件并执行相应的回调函数。</p>\n</li>\n<li><p>处理异步请求：当网页需要从服务器获取数据时，可以使用时间触发线程来处理异步请求并执行回调函数。</p>\n</li>\n</ul>\n<p><strong>注意</strong>：由于 JS 的单线程关系，所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）。</p>\n<h5 id=\"定时器触发进程\"><a href=\"#定时器触发进程\" class=\"headerlink\" title=\"定时器触发进程\"></a>定时器触发进程</h5><p>浏览器定时器触发进程是指浏览器中用来触发定时器的进程。在浏览器中，定时器可以使用 JavaScript 的 setTimeout() 和 setInterval() 方法来创建。当设置的时间到达后，浏览器会触发定时器，并执行对应的函数。</p>\n<p>定时器触发进程通常由内核管理，它会在特定时间间隔内不断运行，并检查是否有定时器需要触发。当定时器触发时，该进程会将需要执行的任务推入待执行队列中，然后通知主线程执行。主线程会不断检查待执行队列，如果有任务待执行，则将其取出并执行。</p>\n<p>需要<strong>注意</strong>的是，如果执行的任务需要较长时间才能完成，会导致主线程阻塞，影响页面的响应速度。因此，应该尽可能避免在定时器中执行复杂的任务，或者使用 Web Worker 在后台执行任务，以避免阻塞主线程。</p>\n<p><strong>注意</strong>：W3C 在 HTML 标准中规定，定时器的定时时间不能小于4ms，如果是小于 4ms，则默认为 4ms。</p>\n<h5 id=\"异步-http-请求线程\"><a href=\"#异步-http-请求线程\" class=\"headerlink\" title=\"异步 http 请求线程\"></a>异步 http 请求线程</h5><p>在浏览器中，异步 HTTP 请求线程通常由浏览器内部的 JavaScript 引擎处理。当 JavaScript 代码发起一个异步 HTTP 请求时，浏览器会创建一个新的线程来处理该请求，该线程通常是浏览器的网络线程。在该线程中，浏览器会向服务器发送 HTTP 请求，并等待服务器返回响应。</p>\n<p>在等待服务器响应的同时，JavaScript 引擎会继续执行其他代码，不会被阻塞。当服务器返回响应后，浏览器会将响应数据传递给 JavaScript 引擎，在 JavaScript 线程中执行相应的回调函数，用来处理响应数据。</p>\n<p>需要注意的是，由于浏览器对跨域请求进行了限制，在异步 HTTP 请求线程中发起的跨域请求需要经过浏览器的安全机制进行处理，一般需要设置相关的请求头或者使用 JSONP 等技术来解决。</p>\n"},{"title":"RESTful和RPC的区别","date":"2023-10-21T06:31:03.000Z","description":"RESTful是一种基于HTTP协议，通过URL、HTTP方法和参数等方式来访问和操作资源的设计风格和架构方法。它是一种轻量级的、高效的、无状态的Web服务架构，可以用于设计和开发各种类型的Web应用程序和分布式系统。","comments":1,"_content":"\n#### RESTful  \n\nRESTful是一种基于HTTP协议，通过URL、HTTP方法和参数等方式来访问和操作资源的设计风格和架构方法。它是一种轻量级的、高效的、无状态的Web服务架构，可以用于设计和开发各种类型的Web应用程序和分布式系统。\n\nRESTful的核心思想是资源的定义和管理，将系统中的资源抽象为一组URI（统一资源标识符），通过HTTP方法来对资源进行访问和操作。常用的HTTP方法有GET、POST、PUT、DELETE等，它们分别对应着资源的查询、新增、更新和删除操作。\n\nRESTful的优势在于它简单、灵活、可伸缩、易于维护和扩展。它采用标准的HTTP协议和常见的数据格式（如JSON、XML等），使得开发人员可以快速地开发出高效、可靠的Web服务，并且可以方便地与其他系统进行集成和交互。\n\n#### RPC（Remote Procedure Call）\n\nRPC（Remote Procedure Call）即远程过程调用，是一种分布式系统中的通信协议。RPC允许一个程序在另一个计算机上运行的程序请求服务，而不需要了解底层网络细节，就像本地调用一样。\n\nRPC的原理是客户端发送请求给服务端，服务端执行相应的操作并返回结果给客户端。RPC框架隐藏了底层的网络细节和通信协议，使得开发者可以像使用本地函数一样方便地调用远程函数。\n\nRPC的优势在于它提供了高效、简单、可靠的远程调用机制，使得分布式系统开发更加便捷。同时，RPC框架支持多种编程语言和跨平台，使得开发者可以使用不同的编程语言和技术栈来实现分布式系统。一些常用的RPC框架有gRPC、Apache Thrift、Dubbo等。\n\n#### RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\n\n1. ##### 设计理念：\n\n    - RESTful：是基于HTTP协议设计的，着重于资源的定义和管理，通过URL、HTTP方法和参数等方式进行资源的访问和操作。\n\n    - RPC：是基于函数调用的，着重于接口的定义和数据传输格式的规范，通过序列化和反序列化来实现远程调用。\n\n2. ##### 通信协议：\n\n    - RESTful：使用HTTP协议进行通信，支持GET、POST、PUT、DELETE等HTTP方法。\n\n    - RPC：使用自定义的协议进行通信，可以使用TCP、UDP等网络协议，也可以使用HTTP作为传输协议。\n\n3. ##### 数据传输格式：\n\n    - RESTful：通常使用JSON、XML等文本格式进行数据传输。\n\n    - RPC：通常使用二进制格式进行数据传输，传输效率更高。\n\n4. ##### 调用方式：\n\n    - RESTful：通过HTTP方法进行资源的访问和操作，支持无状态的请求，可以使用缓存等机制提高性能和可伸缩性。\n\n    - RPC：通过函数调用进行接口的访问和操作，需要保持请求和响应之间的状态，不支持缓存等机制。\n\n综上所述，RESTful更加适用于Web应用程序和分布式系统的开发，而RPC更加适用于高性能和低延迟的系统调用。","source":"_posts/browser/restFulAndRPC.md","raw":"---\ntitle: RESTful和RPC的区别\npermalink: /browser/restful/and/rpc.html\ndate: 2023-10-21 14:31:03\ndescription: RESTful是一种基于HTTP协议，通过URL、HTTP方法和参数等方式来访问和操作资源的设计风格和架构方法。它是一种轻量级的、高效的、无状态的Web服务架构，可以用于设计和开发各种类型的Web应用程序和分布式系统。\ntag: [前端, 浏览器, RESTful, RPC, HTTP]\ncomments: true\ncategories: \n - 浏览器\n - 协议\n---\n\n#### RESTful  \n\nRESTful是一种基于HTTP协议，通过URL、HTTP方法和参数等方式来访问和操作资源的设计风格和架构方法。它是一种轻量级的、高效的、无状态的Web服务架构，可以用于设计和开发各种类型的Web应用程序和分布式系统。\n\nRESTful的核心思想是资源的定义和管理，将系统中的资源抽象为一组URI（统一资源标识符），通过HTTP方法来对资源进行访问和操作。常用的HTTP方法有GET、POST、PUT、DELETE等，它们分别对应着资源的查询、新增、更新和删除操作。\n\nRESTful的优势在于它简单、灵活、可伸缩、易于维护和扩展。它采用标准的HTTP协议和常见的数据格式（如JSON、XML等），使得开发人员可以快速地开发出高效、可靠的Web服务，并且可以方便地与其他系统进行集成和交互。\n\n#### RPC（Remote Procedure Call）\n\nRPC（Remote Procedure Call）即远程过程调用，是一种分布式系统中的通信协议。RPC允许一个程序在另一个计算机上运行的程序请求服务，而不需要了解底层网络细节，就像本地调用一样。\n\nRPC的原理是客户端发送请求给服务端，服务端执行相应的操作并返回结果给客户端。RPC框架隐藏了底层的网络细节和通信协议，使得开发者可以像使用本地函数一样方便地调用远程函数。\n\nRPC的优势在于它提供了高效、简单、可靠的远程调用机制，使得分布式系统开发更加便捷。同时，RPC框架支持多种编程语言和跨平台，使得开发者可以使用不同的编程语言和技术栈来实现分布式系统。一些常用的RPC框架有gRPC、Apache Thrift、Dubbo等。\n\n#### RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\n\n1. ##### 设计理念：\n\n    - RESTful：是基于HTTP协议设计的，着重于资源的定义和管理，通过URL、HTTP方法和参数等方式进行资源的访问和操作。\n\n    - RPC：是基于函数调用的，着重于接口的定义和数据传输格式的规范，通过序列化和反序列化来实现远程调用。\n\n2. ##### 通信协议：\n\n    - RESTful：使用HTTP协议进行通信，支持GET、POST、PUT、DELETE等HTTP方法。\n\n    - RPC：使用自定义的协议进行通信，可以使用TCP、UDP等网络协议，也可以使用HTTP作为传输协议。\n\n3. ##### 数据传输格式：\n\n    - RESTful：通常使用JSON、XML等文本格式进行数据传输。\n\n    - RPC：通常使用二进制格式进行数据传输，传输效率更高。\n\n4. ##### 调用方式：\n\n    - RESTful：通过HTTP方法进行资源的访问和操作，支持无状态的请求，可以使用缓存等机制提高性能和可伸缩性。\n\n    - RPC：通过函数调用进行接口的访问和操作，需要保持请求和响应之间的状态，不支持缓存等机制。\n\n综上所述，RESTful更加适用于Web应用程序和分布式系统的开发，而RPC更加适用于高性能和低延迟的系统调用。","slug":"browser/restFulAndRPC","published":1,"updated":"2023-10-21T13:55:16.858Z","__permalink":"/browser/restful/and/rpc.html","layout":"post","photos":[],"link":"","_id":"clofw8ycs0009m0uo4o0p9jhe","content":"<div id=\"vip-container\"><h4 id=\"RESTful\"><a href=\"#RESTful\" class=\"headerlink\" title=\"RESTful\"></a>RESTful</h4><p>RESTful是一种基于HTTP协议，通过URL、HTTP方法和参数等方式来访问和操作资源的设计风格和架构方法。它是一种轻量级的、高效的、无状态的Web服务架构，可以用于设计和开发各种类型的Web应用程序和分布式系统。</p>\n<p>RESTful的核心思想是资源的定义和管理，将系统中的资源抽象为一组URI（统一资源标识符），通过HTTP方法来对资源进行访问和操作。常用的HTTP方法有GET、POST、PUT、DELETE等，它们分别对应着资源的查询、新增、更新和删除操作。</p>\n<p>RESTful的优势在于它简单、灵活、可伸缩、易于维护和扩展。它采用标准的HTTP协议和常见的数据格式（如JSON、XML等），使得开发人员可以快速地开发出高效、可靠的Web服务，并且可以方便地与其他系统进行集成和交互。</p>\n<h4 id=\"RPC（Remote-Procedure-Call）\"><a href=\"#RPC（Remote-Procedure-Call）\" class=\"headerlink\" title=\"RPC（Remote Procedure Call）\"></a>RPC（Remote Procedure Call）</h4><p>RPC（Remote Procedure Call）即远程过程调用，是一种分布式系统中的通信协议。RPC允许一个程序在另一个计算机上运行的程序请求服务，而不需要了解底层网络细节，就像本地调用一样。</p>\n<p>RPC的原理是客户端发送请求给服务端，服务端执行相应的操作并返回结果给客户端。RPC框架隐藏了底层的网络细节和通信协议，使得开发者可以像使用本地函数一样方便地调用远程函数。</p>\n<p>RPC的优势在于它提供了高效、简单、可靠的远程调用机制，使得分布式系统开发更加便捷。同时，RPC框架支持多种编程语言和跨平台，使得开发者可以使用不同的编程语言和技术栈来实现分布式系统。一些常用的RPC框架有gRPC、Apache Thrift、Dubbo等。</p>\n<h4 id=\"RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\"><a href=\"#RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\" class=\"headerlink\" title=\"RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\"></a>RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：</h4><ol>\n<li><h5 id=\"设计理念：\"><a href=\"#设计理念：\" class=\"headerlink\" title=\"设计理念：\"></a>设计理念：</h5><ul>\n<li><p>RESTful：是基于HTTP协议设计的，着重于资源的定义和管理，通过URL、HTTP方法和参数等方式进行资源的访问和操作。</p>\n</li>\n<li><p>RPC：是基于函数调用的，着重于接口的定义和数据传输格式的规范，通过序列化和反序列化来实现远程调用。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"通信协议：\"><a href=\"#通信协议：\" class=\"headerlink\" title=\"通信协议：\"></a>通信协议：</h5><ul>\n<li><p>RESTful：使用HTTP协议进行通信，支持GET、POST、PUT、DELETE等HTTP方法。</p>\n</li>\n<li><p>RPC：使用自定义的协议进行通信，可以使用TCP、UDP等网络协议，也可以使用HTTP作为传输协议。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"数据传输格式：\"><a href=\"#数据传输格式：\" class=\"headerlink\" title=\"数据传输格式：\"></a>数据传输格式：</h5><ul>\n<li><p>RESTful：通常使用JSON、XML等文本格式进行数据传输。</p>\n</li>\n<li><p>RPC：通常使用二进制格式进行数据传输，传输效率更高。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"调用方式：\"><a href=\"#调用方式：\" class=\"headerlink\" title=\"调用方式：\"></a>调用方式：</h5><ul>\n<li><p>RESTful：通过HTTP方法进行资源的访问和操作，支持无状态的请求，可以使用缓存等机制提高性能和可伸缩性。</p>\n</li>\n<li><p>RPC：通过函数调用进行接口的访问和操作，需要保持请求和响应之间的状态，不支持缓存等机制。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>综上所述，RESTful更加适用于Web应用程序和分布式系统的开发，而RPC更加适用于高性能和低延迟的系统调用。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":857,"excerpt":"","more":"<h4 id=\"RESTful\"><a href=\"#RESTful\" class=\"headerlink\" title=\"RESTful\"></a>RESTful</h4><p>RESTful是一种基于HTTP协议，通过URL、HTTP方法和参数等方式来访问和操作资源的设计风格和架构方法。它是一种轻量级的、高效的、无状态的Web服务架构，可以用于设计和开发各种类型的Web应用程序和分布式系统。</p>\n<p>RESTful的核心思想是资源的定义和管理，将系统中的资源抽象为一组URI（统一资源标识符），通过HTTP方法来对资源进行访问和操作。常用的HTTP方法有GET、POST、PUT、DELETE等，它们分别对应着资源的查询、新增、更新和删除操作。</p>\n<p>RESTful的优势在于它简单、灵活、可伸缩、易于维护和扩展。它采用标准的HTTP协议和常见的数据格式（如JSON、XML等），使得开发人员可以快速地开发出高效、可靠的Web服务，并且可以方便地与其他系统进行集成和交互。</p>\n<h4 id=\"RPC（Remote-Procedure-Call）\"><a href=\"#RPC（Remote-Procedure-Call）\" class=\"headerlink\" title=\"RPC（Remote Procedure Call）\"></a>RPC（Remote Procedure Call）</h4><p>RPC（Remote Procedure Call）即远程过程调用，是一种分布式系统中的通信协议。RPC允许一个程序在另一个计算机上运行的程序请求服务，而不需要了解底层网络细节，就像本地调用一样。</p>\n<p>RPC的原理是客户端发送请求给服务端，服务端执行相应的操作并返回结果给客户端。RPC框架隐藏了底层的网络细节和通信协议，使得开发者可以像使用本地函数一样方便地调用远程函数。</p>\n<p>RPC的优势在于它提供了高效、简单、可靠的远程调用机制，使得分布式系统开发更加便捷。同时，RPC框架支持多种编程语言和跨平台，使得开发者可以使用不同的编程语言和技术栈来实现分布式系统。一些常用的RPC框架有gRPC、Apache Thrift、Dubbo等。</p>\n<h4 id=\"RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\"><a href=\"#RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\" class=\"headerlink\" title=\"RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：\"></a>RESTful和RPC是两种不同的远程调用方式，它们的区别主要包括以下几个方面：</h4><ol>\n<li><h5 id=\"设计理念：\"><a href=\"#设计理念：\" class=\"headerlink\" title=\"设计理念：\"></a>设计理念：</h5><ul>\n<li><p>RESTful：是基于HTTP协议设计的，着重于资源的定义和管理，通过URL、HTTP方法和参数等方式进行资源的访问和操作。</p>\n</li>\n<li><p>RPC：是基于函数调用的，着重于接口的定义和数据传输格式的规范，通过序列化和反序列化来实现远程调用。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"通信协议：\"><a href=\"#通信协议：\" class=\"headerlink\" title=\"通信协议：\"></a>通信协议：</h5><ul>\n<li><p>RESTful：使用HTTP协议进行通信，支持GET、POST、PUT、DELETE等HTTP方法。</p>\n</li>\n<li><p>RPC：使用自定义的协议进行通信，可以使用TCP、UDP等网络协议，也可以使用HTTP作为传输协议。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"数据传输格式：\"><a href=\"#数据传输格式：\" class=\"headerlink\" title=\"数据传输格式：\"></a>数据传输格式：</h5><ul>\n<li><p>RESTful：通常使用JSON、XML等文本格式进行数据传输。</p>\n</li>\n<li><p>RPC：通常使用二进制格式进行数据传输，传输效率更高。</p>\n</li>\n</ul>\n</li>\n<li><h5 id=\"调用方式：\"><a href=\"#调用方式：\" class=\"headerlink\" title=\"调用方式：\"></a>调用方式：</h5><ul>\n<li><p>RESTful：通过HTTP方法进行资源的访问和操作，支持无状态的请求，可以使用缓存等机制提高性能和可伸缩性。</p>\n</li>\n<li><p>RPC：通过函数调用进行接口的访问和操作，需要保持请求和响应之间的状态，不支持缓存等机制。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>综上所述，RESTful更加适用于Web应用程序和分布式系统的开发，而RPC更加适用于高性能和低延迟的系统调用。</p>\n"},{"title":"session-cookies 三个缓存 localStorage、sessionStorage、Cookies。","date":"2023-10-22T10:06:18.000Z","description":"session-cookies This plugin is used to summarize the browser’s three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.","comments":1,"_content":"\n\n# session-cookies\n\n    session-cookies is localStorage、sessionStorage、Cookies。\n\n\n <a href=\"https://badge.fury.io/js/session-cookies\"><img src=\"https://badge.fury.io/js/session-cookies.svg\" /></a>\n\n\nsession-cookies This plugin is used to summarize the browser's three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.\n\nsession-cookies 这个插件是用来汇总浏览器的三个缓存 localStorage、sessionStorage、Cookies。该插件注重使用方便快捷下面是一些API汇总说明。\n\n#### API \n\n|  名称   |       获取所有       |     获取单个      |     设置单个      |       移除单个       |      清除所有       |\n| :-----: | :------------------: | :---------------: | :---------------: | :------------------: | :-----------------: |\n| cookies |    getCookieList     |     getCookie     |     setCookie     |     removeCookie     |     clearCookie     |\n| session | getAllSessionStorage | getSessionStorage | setSessionStorage | removeSessionStorage | clearSessionStorage |\n|  local  |  getAllLocalStorage  |  getLocalStorage  |  setLocalStorage  |  removeLocalStorage  |  clearLocalStorage  |\n\n\n\n#### 使用案例\n\n```shell\nnpm i session-cookies\n```\n\n##### 获取所有Cookies\n\n```ts\nimport { cookies } from 'session-cookies'\n\ncookies.getCookieList(); // 返回JSON结果数据\ncookies.getCookie('test'); // 返回属性值\n```\n\n##### 设置单个\n\n```ts\ncookies.setCookie('test', '1234567'); // 设置属性为字符串需要JSON.stringify\n```\n\n##### 移除单个\n\n```tsx\ncookies.removeCookie('test');\n```\n\n##### 清除所有\n\n```tsx\ncookies.clearCookie();\n```\n\n#### 附加API\n\n| 根据index下标获取key值        | 参数      | 结果    |\n| ----------------------------- | --------- | ------- |\n| getLocalStorageKeyFindIndex   | index下标 | 返回key |\n| getSessionStorageKeyFindIndex | index下标 | 返回key |\n\n##### 使用\n\n```ts\nimport { local } from 'session-cookies';\n\nlocal.setLocalStorage('test', '123456');\nlocal.setLocalStorage('usename', 'songshao');\nlocal.getLocalStorageKeyFindIndex(0); // test\nlocal.getLocalStorageKeyFindIndex(1); // username\n```\n\n### Browsers\n\n```html\n\n<!-- 只能使用0.1.5 以后版本 -->\n<script src='https://unpkg.com/session-cookies/lib/sessionCookies.js' ></script>\n\n<script>\n    // 其他接口同上面使用只需要增加 sessionCookies 全局配置。\n    sessionCookies.local.setLocalStorage('test', '123456');\n</script>\n\n```\n","source":"_posts/browser/sessionCookies.md","raw":"---\ntitle: session-cookies 三个缓存 localStorage、sessionStorage、Cookies。\npermalink: /browser/session/cookies.html\ndate: 2023-10-22 18:06:18\ndescription: session-cookies This plugin is used to summarize the browser’s three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.\ntag: [前端, 浏览器, cookies, localStorage, sessionStorage, TypeScript]\ncomments: true\ncategories: \n - 浏览器\n - Cache\n---\n\n\n# session-cookies\n\n    session-cookies is localStorage、sessionStorage、Cookies。\n\n\n <a href=\"https://badge.fury.io/js/session-cookies\"><img src=\"https://badge.fury.io/js/session-cookies.svg\" /></a>\n\n\nsession-cookies This plugin is used to summarize the browser's three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.\n\nsession-cookies 这个插件是用来汇总浏览器的三个缓存 localStorage、sessionStorage、Cookies。该插件注重使用方便快捷下面是一些API汇总说明。\n\n#### API \n\n|  名称   |       获取所有       |     获取单个      |     设置单个      |       移除单个       |      清除所有       |\n| :-----: | :------------------: | :---------------: | :---------------: | :------------------: | :-----------------: |\n| cookies |    getCookieList     |     getCookie     |     setCookie     |     removeCookie     |     clearCookie     |\n| session | getAllSessionStorage | getSessionStorage | setSessionStorage | removeSessionStorage | clearSessionStorage |\n|  local  |  getAllLocalStorage  |  getLocalStorage  |  setLocalStorage  |  removeLocalStorage  |  clearLocalStorage  |\n\n\n\n#### 使用案例\n\n```shell\nnpm i session-cookies\n```\n\n##### 获取所有Cookies\n\n```ts\nimport { cookies } from 'session-cookies'\n\ncookies.getCookieList(); // 返回JSON结果数据\ncookies.getCookie('test'); // 返回属性值\n```\n\n##### 设置单个\n\n```ts\ncookies.setCookie('test', '1234567'); // 设置属性为字符串需要JSON.stringify\n```\n\n##### 移除单个\n\n```tsx\ncookies.removeCookie('test');\n```\n\n##### 清除所有\n\n```tsx\ncookies.clearCookie();\n```\n\n#### 附加API\n\n| 根据index下标获取key值        | 参数      | 结果    |\n| ----------------------------- | --------- | ------- |\n| getLocalStorageKeyFindIndex   | index下标 | 返回key |\n| getSessionStorageKeyFindIndex | index下标 | 返回key |\n\n##### 使用\n\n```ts\nimport { local } from 'session-cookies';\n\nlocal.setLocalStorage('test', '123456');\nlocal.setLocalStorage('usename', 'songshao');\nlocal.getLocalStorageKeyFindIndex(0); // test\nlocal.getLocalStorageKeyFindIndex(1); // username\n```\n\n### Browsers\n\n```html\n\n<!-- 只能使用0.1.5 以后版本 -->\n<script src='https://unpkg.com/session-cookies/lib/sessionCookies.js' ></script>\n\n<script>\n    // 其他接口同上面使用只需要增加 sessionCookies 全局配置。\n    sessionCookies.local.setLocalStorage('test', '123456');\n</script>\n\n```\n","slug":"browser/sessionCookies","published":1,"updated":"2023-10-22T10:08:23.922Z","__permalink":"/browser/session/cookies.html","layout":"post","photos":[],"link":"","_id":"clofw8ycu000bm0uoe3ht9que","content":"<div id=\"vip-container\"><h1 id=\"session-cookies\"><a href=\"#session-cookies\" class=\"headerlink\" title=\"session-cookies\"></a>session-cookies</h1><pre><code>session-cookies is localStorage、sessionStorage、Cookies。\n</code></pre>\n<p> <a href=\"https://badge.fury.io/js/session-cookies\"><img src=\"https://badge.fury.io/js/session-cookies.svg\" /></a></p>\n<p>session-cookies This plugin is used to summarize the browser’s three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.</p>\n<p>session-cookies 这个插件是用来汇总浏览器的三个缓存 localStorage、sessionStorage、Cookies。该插件注重使用方便快捷下面是一些API汇总说明。</p>\n<h4 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h4><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">获取所有</th>\n<th align=\"center\">获取单个</th>\n<th align=\"center\">设置单个</th>\n<th align=\"center\">移除单个</th>\n<th align=\"center\">清除所有</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">cookies</td>\n<td align=\"center\">getCookieList</td>\n<td align=\"center\">getCookie</td>\n<td align=\"center\">setCookie</td>\n<td align=\"center\">removeCookie</td>\n<td align=\"center\">clearCookie</td>\n</tr>\n<tr>\n<td align=\"center\">session</td>\n<td align=\"center\">getAllSessionStorage</td>\n<td align=\"center\">getSessionStorage</td>\n<td align=\"center\">setSessionStorage</td>\n<td align=\"center\">removeSessionStorage</td>\n<td align=\"center\">clearSessionStorage</td>\n</tr>\n<tr>\n<td align=\"center\">local</td>\n<td align=\"center\">getAllLocalStorage</td>\n<td align=\"center\">getLocalStorage</td>\n<td align=\"center\">setLocalStorage</td>\n<td align=\"center\">removeLocalStorage</td>\n<td align=\"center\">clearLocalStorage</td>\n</tr>\n</tbody></table>\n<h4 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i session-cookies</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"获取所有Cookies\"><a href=\"#获取所有Cookies\" class=\"headerlink\" title=\"获取所有Cookies\"></a>获取所有Cookies</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; cookies &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;session-cookies&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cookies.<span class=\"title function_\">getCookieList</span>(); <span class=\"comment\">// 返回JSON结果数据</span></span><br><span class=\"line\">cookies.<span class=\"title function_\">getCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>); <span class=\"comment\">// 返回属性值</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设置单个\"><a href=\"#设置单个\" class=\"headerlink\" title=\"设置单个\"></a>设置单个</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">setCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;1234567&#x27;</span>); <span class=\"comment\">// 设置属性为字符串需要JSON.stringify</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"移除单个\"><a href=\"#移除单个\" class=\"headerlink\" title=\"移除单个\"></a>移除单个</h5><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">removeCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"清除所有\"><a href=\"#清除所有\" class=\"headerlink\" title=\"清除所有\"></a>清除所有</h5><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">clearCookie</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"附加API\"><a href=\"#附加API\" class=\"headerlink\" title=\"附加API\"></a>附加API</h4><table>\n<thead>\n<tr>\n<th>根据index下标获取key值</th>\n<th>参数</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getLocalStorageKeyFindIndex</td>\n<td>index下标</td>\n<td>返回key</td>\n</tr>\n<tr>\n<td>getSessionStorageKeyFindIndex</td>\n<td>index下标</td>\n<td>返回key</td>\n</tr>\n</tbody></table>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; local &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;session-cookies&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">local.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>);</span><br><span class=\"line\">local.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;usename&#x27;</span>, <span class=\"string\">&#x27;songshao&#x27;</span>);</span><br><span class=\"line\">local.<span class=\"title function_\">getLocalStorageKeyFindIndex</span>(<span class=\"number\">0</span>); <span class=\"comment\">// test</span></span><br><span class=\"line\">local.<span class=\"title function_\">getLocalStorageKeyFindIndex</span>(<span class=\"number\">1</span>); <span class=\"comment\">// username</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Browsers\"><a href=\"#Browsers\" class=\"headerlink\" title=\"Browsers\"></a>Browsers</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只能使用0.1.5 以后版本 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;https://unpkg.com/session-cookies/lib/sessionCookies.js&#x27;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 其他接口同上面使用只需要增加 sessionCookies 全局配置。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    sessionCookies.<span class=\"property\">local</span>.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/web/cross/site/request/forgeries.html","/web/cross/site/script.html","/hexo/config/readmore.html"],"length":300,"excerpt":"","more":"<h1 id=\"session-cookies\"><a href=\"#session-cookies\" class=\"headerlink\" title=\"session-cookies\"></a>session-cookies</h1><pre><code>session-cookies is localStorage、sessionStorage、Cookies。\n</code></pre>\n<p> <a href=\"https://badge.fury.io/js/session-cookies\"><img src=\"https://badge.fury.io/js/session-cookies.svg\" /></a></p>\n<p>session-cookies This plugin is used to summarize the browser’s three caches localStorage, sessionStorage, Cookies.The plugin is designed to be quick and easy to use. Below is a summary of some apis.</p>\n<p>session-cookies 这个插件是用来汇总浏览器的三个缓存 localStorage、sessionStorage、Cookies。该插件注重使用方便快捷下面是一些API汇总说明。</p>\n<h4 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h4><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">获取所有</th>\n<th align=\"center\">获取单个</th>\n<th align=\"center\">设置单个</th>\n<th align=\"center\">移除单个</th>\n<th align=\"center\">清除所有</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">cookies</td>\n<td align=\"center\">getCookieList</td>\n<td align=\"center\">getCookie</td>\n<td align=\"center\">setCookie</td>\n<td align=\"center\">removeCookie</td>\n<td align=\"center\">clearCookie</td>\n</tr>\n<tr>\n<td align=\"center\">session</td>\n<td align=\"center\">getAllSessionStorage</td>\n<td align=\"center\">getSessionStorage</td>\n<td align=\"center\">setSessionStorage</td>\n<td align=\"center\">removeSessionStorage</td>\n<td align=\"center\">clearSessionStorage</td>\n</tr>\n<tr>\n<td align=\"center\">local</td>\n<td align=\"center\">getAllLocalStorage</td>\n<td align=\"center\">getLocalStorage</td>\n<td align=\"center\">setLocalStorage</td>\n<td align=\"center\">removeLocalStorage</td>\n<td align=\"center\">clearLocalStorage</td>\n</tr>\n</tbody></table>\n<h4 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i session-cookies</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"获取所有Cookies\"><a href=\"#获取所有Cookies\" class=\"headerlink\" title=\"获取所有Cookies\"></a>获取所有Cookies</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; cookies &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;session-cookies&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cookies.<span class=\"title function_\">getCookieList</span>(); <span class=\"comment\">// 返回JSON结果数据</span></span><br><span class=\"line\">cookies.<span class=\"title function_\">getCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>); <span class=\"comment\">// 返回属性值</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设置单个\"><a href=\"#设置单个\" class=\"headerlink\" title=\"设置单个\"></a>设置单个</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">setCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;1234567&#x27;</span>); <span class=\"comment\">// 设置属性为字符串需要JSON.stringify</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"移除单个\"><a href=\"#移除单个\" class=\"headerlink\" title=\"移除单个\"></a>移除单个</h5><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">removeCookie</span>(<span class=\"string\">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"清除所有\"><a href=\"#清除所有\" class=\"headerlink\" title=\"清除所有\"></a>清除所有</h5><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies.<span class=\"title function_\">clearCookie</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"附加API\"><a href=\"#附加API\" class=\"headerlink\" title=\"附加API\"></a>附加API</h4><table>\n<thead>\n<tr>\n<th>根据index下标获取key值</th>\n<th>参数</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getLocalStorageKeyFindIndex</td>\n<td>index下标</td>\n<td>返回key</td>\n</tr>\n<tr>\n<td>getSessionStorageKeyFindIndex</td>\n<td>index下标</td>\n<td>返回key</td>\n</tr>\n</tbody></table>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; local &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;session-cookies&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">local.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>);</span><br><span class=\"line\">local.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;usename&#x27;</span>, <span class=\"string\">&#x27;songshao&#x27;</span>);</span><br><span class=\"line\">local.<span class=\"title function_\">getLocalStorageKeyFindIndex</span>(<span class=\"number\">0</span>); <span class=\"comment\">// test</span></span><br><span class=\"line\">local.<span class=\"title function_\">getLocalStorageKeyFindIndex</span>(<span class=\"number\">1</span>); <span class=\"comment\">// username</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Browsers\"><a href=\"#Browsers\" class=\"headerlink\" title=\"Browsers\"></a>Browsers</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只能使用0.1.5 以后版本 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;https://unpkg.com/session-cookies/lib/sessionCookies.js&#x27;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 其他接口同上面使用只需要增加 sessionCookies 全局配置。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    sessionCookies.<span class=\"property\">local</span>.<span class=\"title function_\">setLocalStorage</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"如何实现浏览器内多个标签页之间的通信?","date":"2023-10-20T13:20:37.000Z","description":"实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。","comments":1,"_content":"\n实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。通信方法如下：\n\n- 使用 websocket 协议，因为 websocket 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。\n- 使用 ShareWorker 的方式，shareWorker 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。\n- 使用localStorage 的方式，我们可以在一个标签页对localStorage的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候localStorage对象就是充当的中介者的角色。\n- 使用 postMessage 方法，如果我们能够获得对应标签页的引用，就可以使用 postMessage 方法，进行通信。","source":"_posts/browser/tabToTab.md","raw":"---\ntitle: 如何实现浏览器内多个标签页之间的通信?\npermalink: /browser/tab/to/tab.html\ndate: 2023-10-20 21:20:37\ndescription: 实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。\ntag: [前端, 浏览器, 性能优化]\ncomments: true\ncategories: \n - 浏览器\n - 通讯\n---\n\n实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。通信方法如下：\n\n- 使用 websocket 协议，因为 websocket 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。\n- 使用 ShareWorker 的方式，shareWorker 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。\n- 使用localStorage 的方式，我们可以在一个标签页对localStorage的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候localStorage对象就是充当的中介者的角色。\n- 使用 postMessage 方法，如果我们能够获得对应标签页的引用，就可以使用 postMessage 方法，进行通信。","slug":"browser/tabToTab","published":1,"updated":"2023-10-21T13:55:27.490Z","__permalink":"/browser/tab/to/tab.html","layout":"post","photos":[],"link":"","_id":"clofw8ycy000fm0uodbhddmol","content":"<div id=\"vip-container\"><p>实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。通信方法如下：</p>\n<ul>\n<li>使用 websocket 协议，因为 websocket 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。</li>\n<li>使用 ShareWorker 的方式，shareWorker 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。</li>\n<li>使用localStorage 的方式，我们可以在一个标签页对localStorage的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候localStorage对象就是充当的中介者的角色。</li>\n<li>使用 postMessage 方法，如果我们能够获得对应标签页的引用，就可以使用 postMessage 方法，进行通信。</li>\n</ul>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":363,"excerpt":"","more":"<p>实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。通信方法如下：</p>\n<ul>\n<li>使用 websocket 协议，因为 websocket 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。</li>\n<li>使用 ShareWorker 的方式，shareWorker 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。</li>\n<li>使用localStorage 的方式，我们可以在一个标签页对localStorage的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候localStorage对象就是充当的中介者的角色。</li>\n<li>使用 postMessage 方法，如果我们能够获得对应标签页的引用，就可以使用 postMessage 方法，进行通信。</li>\n</ul>\n"},{"title":"Hexo 内容分页配置","date":"2023-10-23T13:27:22.000Z","description":"Hexo 内容分页配置Pagination，有助于阅读能力的提升。","comments":1,"_content":"\n\n#### per_page _config.yml\n\n```yml\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 20 # 分页条数\npagination_dir: page # 自定义分页路径\n```\n\n","source":"_posts/hexo/pagination.md","raw":"---\ntitle: Hexo 内容分页配置\npermalink: /hexo/config/pagination.html\ndate: 2023-10-23 21:27:22\ndescription: Hexo 内容分页配置Pagination，有助于阅读能力的提升。\ntag: [前端, Hexo, Pagination]\ncomments: true\ncategories: \n - 前端\n - 框架\n - Hexo\n---\n\n\n#### per_page _config.yml\n\n```yml\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 20 # 分页条数\npagination_dir: page # 自定义分页路径\n```\n\n","slug":"hexo/pagination","published":1,"updated":"2023-10-23T13:27:24.363Z","__permalink":"/hexo/config/pagination.html","layout":"post","photos":[],"link":"","_id":"clofw8ycz000hm0uof9f6dum7","content":"<div id=\"vip-container\"><h4 id=\"per-page-config-yml\"><a href=\"#per-page-config-yml\" class=\"headerlink\" title=\"per_page _config.yml\"></a>per_page _config.yml</h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Pagination</span></span><br><span class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></span><br><span class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">20</span> <span class=\"comment\"># 分页条数</span></span><br><span class=\"line\"><span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span> <span class=\"comment\"># 自定义分页路径</span></span><br></pre></td></tr></table></figure>\n\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/hexo/config/rss.html","/hexo/config/readmore.html"],"length":26,"excerpt":"","more":"<h4 id=\"per-page-config-yml\"><a href=\"#per-page-config-yml\" class=\"headerlink\" title=\"per_page _config.yml\"></a>per_page _config.yml</h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Pagination</span></span><br><span class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></span><br><span class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">20</span> <span class=\"comment\"># 分页条数</span></span><br><span class=\"line\"><span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span> <span class=\"comment\"># 自定义分页路径</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Hexo 开启公众号引流工具","date":"2023-10-23T02:31:24.000Z","description":"Hexo 开启公众号引流工具，可以通过阅读更多引流至微信公众平台。","comments":1,"_content":"\n###  配置博客信息\n\n![](https://pic.imgdb.cn/item/6535dc4dc458853aef3ec866.jpg)\n\n### hexo _config.yml 配置\n\n```yml\nplugins:\n  readmore:\n    blogId: 31652-1697970027416-119\n    name: BaType\n    qrcode: https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\n    keyword: 666\n```\n\n其中,配置参数含义如下:\n\n- blogId : [必选]OpenWrite 后台申请的博客唯一标识,例如:31652-1697970027416-119\n- name : [必选]OpenWrite 后台申请的博客名称,例如:BaType\n- qrcode : [必选]OpenWrite 后台申请的微信公众号二维码,例如:https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\n- keyword : [必选]OpenWrite 后台申请的微信公众号后台回复关键字,例如:666\n\n### 安装插件\n\n`npm install hexo-plugin-readmore --save`\n\n### 展示\n\n![](https://pic.imgdb.cn/item/6535dddec458853aef428ef6.jpg)","source":"_posts/hexo/readmore.md","raw":"---\ntitle: Hexo 开启公众号引流工具\npermalink: /hexo/config/readmore.html\ndate: 2023-10-23 10:31:24\ndescription: Hexo 开启公众号引流工具，可以通过阅读更多引流至微信公众平台。\ntag: [前端, Hexo, ReadMore]\ncomments: true\ncategories: \n - 前端\n - 框架\n - Hexo\n---\n\n###  配置博客信息\n\n![](https://pic.imgdb.cn/item/6535dc4dc458853aef3ec866.jpg)\n\n### hexo _config.yml 配置\n\n```yml\nplugins:\n  readmore:\n    blogId: 31652-1697970027416-119\n    name: BaType\n    qrcode: https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\n    keyword: 666\n```\n\n其中,配置参数含义如下:\n\n- blogId : [必选]OpenWrite 后台申请的博客唯一标识,例如:31652-1697970027416-119\n- name : [必选]OpenWrite 后台申请的博客名称,例如:BaType\n- qrcode : [必选]OpenWrite 后台申请的微信公众号二维码,例如:https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\n- keyword : [必选]OpenWrite 后台申请的微信公众号后台回复关键字,例如:666\n\n### 安装插件\n\n`npm install hexo-plugin-readmore --save`\n\n### 展示\n\n![](https://pic.imgdb.cn/item/6535dddec458853aef428ef6.jpg)","slug":"hexo/readmore","published":1,"updated":"2023-10-23T12:33:02.357Z","__permalink":"/hexo/config/readmore.html","layout":"post","photos":[],"link":"","_id":"clofw8yd1000km0uo4fehe43y","content":"<div id=\"vip-container\"><h3 id=\"配置博客信息\"><a href=\"#配置博客信息\" class=\"headerlink\" title=\"配置博客信息\"></a>配置博客信息</h3><p><img src=\"https://pic.imgdb.cn/item/6535dc4dc458853aef3ec866.jpg\"></p>\n<h3 id=\"hexo-config-yml-配置\"><a href=\"#hexo-config-yml-配置\" class=\"headerlink\" title=\"hexo _config.yml 配置\"></a>hexo _config.yml 配置</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\">  <span class=\"attr\">readmore:</span></span><br><span class=\"line\">    <span class=\"attr\">blogId:</span> <span class=\"number\">31652</span><span class=\"number\">-1697970027416</span><span class=\"number\">-119</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">BaType</span></span><br><span class=\"line\">    <span class=\"attr\">qrcode:</span> <span class=\"string\">https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg</span></span><br><span class=\"line\">    <span class=\"attr\">keyword:</span> <span class=\"number\">666</span></span><br></pre></td></tr></table></figure>\n\n<p>其中,配置参数含义如下:</p>\n<ul>\n<li>blogId : [必选]OpenWrite 后台申请的博客唯一标识,例如:31652-1697970027416-119</li>\n<li>name : [必选]OpenWrite 后台申请的博客名称,例如:BaType</li>\n<li>qrcode : [必选]OpenWrite 后台申请的微信公众号二维码,例如:<a href=\"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\">https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg</a></li>\n<li>keyword : [必选]OpenWrite 后台申请的微信公众号后台回复关键字,例如:666</li>\n</ul>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p><code>npm install hexo-plugin-readmore --save</code></p>\n<h3 id=\"展示\"><a href=\"#展示\" class=\"headerlink\" title=\"展示\"></a>展示</h3><p><img src=\"https://pic.imgdb.cn/item/6535dddec458853aef428ef6.jpg\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/hexo/config/pagination.html","/web/npm/nrm.html","/hexo/config/rss.html","/react/components/unstate-next-use.html","/browser/session/cookies.html"],"length":141,"excerpt":"","more":"<h3 id=\"配置博客信息\"><a href=\"#配置博客信息\" class=\"headerlink\" title=\"配置博客信息\"></a>配置博客信息</h3><p><img src=\"https://pic.imgdb.cn/item/6535dc4dc458853aef3ec866.jpg\"></p>\n<h3 id=\"hexo-config-yml-配置\"><a href=\"#hexo-config-yml-配置\" class=\"headerlink\" title=\"hexo _config.yml 配置\"></a>hexo _config.yml 配置</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\">  <span class=\"attr\">readmore:</span></span><br><span class=\"line\">    <span class=\"attr\">blogId:</span> <span class=\"number\">31652</span><span class=\"number\">-1697970027416</span><span class=\"number\">-119</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">BaType</span></span><br><span class=\"line\">    <span class=\"attr\">qrcode:</span> <span class=\"string\">https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg</span></span><br><span class=\"line\">    <span class=\"attr\">keyword:</span> <span class=\"number\">666</span></span><br></pre></td></tr></table></figure>\n\n<p>其中,配置参数含义如下:</p>\n<ul>\n<li>blogId : [必选]OpenWrite 后台申请的博客唯一标识,例如:31652-1697970027416-119</li>\n<li>name : [必选]OpenWrite 后台申请的博客名称,例如:BaType</li>\n<li>qrcode : [必选]OpenWrite 后台申请的微信公众号二维码,例如:<a href=\"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\">https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg</a></li>\n<li>keyword : [必选]OpenWrite 后台申请的微信公众号后台回复关键字,例如:666</li>\n</ul>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p><code>npm install hexo-plugin-readmore --save</code></p>\n<h3 id=\"展示\"><a href=\"#展示\" class=\"headerlink\" title=\"展示\"></a>展示</h3><p><img src=\"https://pic.imgdb.cn/item/6535dddec458853aef428ef6.jpg\"></p>\n"},{"title":"Hexo 开启 RSS","date":"2023-10-21T13:32:38.000Z","description":"Hexo 开启RSS，可以查看RSS版本的note 数据，也可以导入到其他blog环境。","comments":1,"_content":"\n##### 安装hexo-generator-feed 插件\n\n###### npm\n`npm install hexo-generator-feed -d`\n###### yarn\n`yarn add hexo-generator-feed`\n\n##### 配置_config.[themes].yml\n\n###### 增加导航栏菜单\n```yml\n    RSS: /atom.xml || fa fa-rss\n```\n\n###### 参数配置\n\n```yml\n    feed:\n        type: atom  # 类型为atom\n        path: atom.xml # 访问路径\n        limit: 20 # 分页\n\n```\n##### 清除重启\n\n`hexo clean && hexo generate`\n\n##### 页面效果\n\n![atom.xml](https://pic.imgdb.cn/item/6533d473c458853aefb79c42.png)","source":"_posts/hexo/rss.md","raw":"---\ntitle: Hexo 开启 RSS\npermalink: /hexo/config/rss.html\ndate: 2023-10-21 21:32:38\ndescription: Hexo 开启RSS，可以查看RSS版本的note 数据，也可以导入到其他blog环境。\ntag: [前端, Hexo, RSS]\ncomments: true\ncategories: \n - 前端\n - 框架\n - Hexo\n---\n\n##### 安装hexo-generator-feed 插件\n\n###### npm\n`npm install hexo-generator-feed -d`\n###### yarn\n`yarn add hexo-generator-feed`\n\n##### 配置_config.[themes].yml\n\n###### 增加导航栏菜单\n```yml\n    RSS: /atom.xml || fa fa-rss\n```\n\n###### 参数配置\n\n```yml\n    feed:\n        type: atom  # 类型为atom\n        path: atom.xml # 访问路径\n        limit: 20 # 分页\n\n```\n##### 清除重启\n\n`hexo clean && hexo generate`\n\n##### 页面效果\n\n![atom.xml](https://pic.imgdb.cn/item/6533d473c458853aefb79c42.png)","slug":"hexo/rss","published":1,"updated":"2023-10-21T13:54:06.202Z","__permalink":"/hexo/config/rss.html","layout":"post","photos":[],"link":"","_id":"clofw8yd2000mm0uofcuz481s","content":"<div id=\"vip-container\"><h5 id=\"安装hexo-generator-feed-插件\"><a href=\"#安装hexo-generator-feed-插件\" class=\"headerlink\" title=\"安装hexo-generator-feed 插件\"></a>安装hexo-generator-feed 插件</h5><h6 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h6><p><code>npm install hexo-generator-feed -d</code></p>\n<h6 id=\"yarn\"><a href=\"#yarn\" class=\"headerlink\" title=\"yarn\"></a>yarn</h6><p><code>yarn add hexo-generator-feed</code></p>\n<h5 id=\"配置-config-themes-yml\"><a href=\"#配置-config-themes-yml\" class=\"headerlink\" title=\"配置_config.[themes].yml\"></a>配置_config.[themes].yml</h5><h6 id=\"增加导航栏菜单\"><a href=\"#增加导航栏菜单\" class=\"headerlink\" title=\"增加导航栏菜单\"></a>增加导航栏菜单</h6><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">RSS:</span> <span class=\"string\">/atom.xml</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-rss</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"参数配置\"><a href=\"#参数配置\" class=\"headerlink\" title=\"参数配置\"></a>参数配置</h6><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">atom</span>  <span class=\"comment\"># 类型为atom</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">atom.xml</span> <span class=\"comment\"># 访问路径</span></span><br><span class=\"line\">    <span class=\"attr\">limit:</span> <span class=\"number\">20</span> <span class=\"comment\"># 分页</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"清除重启\"><a href=\"#清除重启\" class=\"headerlink\" title=\"清除重启\"></a>清除重启</h5><p><code>hexo clean &amp;&amp; hexo generate</code></p>\n<h5 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h5><p><img src=\"https://pic.imgdb.cn/item/6533d473c458853aefb79c42.png\" alt=\"atom.xml\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/hexo/config/pagination.html","/web/npm/nrm.html","/hexo/config/readmore.html","/react/components/unstate-next-use.html","/javascript/async/await.html"],"length":73,"excerpt":"","more":"<h5 id=\"安装hexo-generator-feed-插件\"><a href=\"#安装hexo-generator-feed-插件\" class=\"headerlink\" title=\"安装hexo-generator-feed 插件\"></a>安装hexo-generator-feed 插件</h5><h6 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h6><p><code>npm install hexo-generator-feed -d</code></p>\n<h6 id=\"yarn\"><a href=\"#yarn\" class=\"headerlink\" title=\"yarn\"></a>yarn</h6><p><code>yarn add hexo-generator-feed</code></p>\n<h5 id=\"配置-config-themes-yml\"><a href=\"#配置-config-themes-yml\" class=\"headerlink\" title=\"配置_config.[themes].yml\"></a>配置_config.[themes].yml</h5><h6 id=\"增加导航栏菜单\"><a href=\"#增加导航栏菜单\" class=\"headerlink\" title=\"增加导航栏菜单\"></a>增加导航栏菜单</h6><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">RSS:</span> <span class=\"string\">/atom.xml</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-rss</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"参数配置\"><a href=\"#参数配置\" class=\"headerlink\" title=\"参数配置\"></a>参数配置</h6><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">atom</span>  <span class=\"comment\"># 类型为atom</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">atom.xml</span> <span class=\"comment\"># 访问路径</span></span><br><span class=\"line\">    <span class=\"attr\">limit:</span> <span class=\"number\">20</span> <span class=\"comment\"># 分页</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"清除重启\"><a href=\"#清除重启\" class=\"headerlink\" title=\"清除重启\"></a>清除重启</h5><p><code>hexo clean &amp;&amp; hexo generate</code></p>\n<h5 id=\"页面效果\"><a href=\"#页面效果\" class=\"headerlink\" title=\"页面效果\"></a>页面效果</h5><p><img src=\"https://pic.imgdb.cn/item/6533d473c458853aefb79c42.png\" alt=\"atom.xml\"></p>\n"},{"title":"async/await 的理解","date":"2023-10-20T13:20:45.000Z","description":"单一的 Promise 链并不能发现 async/await 的优势。","comments":1,"_content":"\n\n## async/await 的理解\nasync/await 其实是 Generator 的语法糖，它能实现的效果都能用then 链来实现，它是为优化 then 链而开发出来的。从字面上来看，async 是“异步”的简写，await 则为等待，所以很好理解async用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定 await 只能出现在asnyc 函数中，先来看看 async 函数返回了什么：\n```javascript\nasync function testAsy() {\n\treturn \"hello world;\";\n}\nlet result = testAsy();\nconsole.log(result);\nPromise {<fulfilled>: 'hello world;'}\n[[Prototype]]: Promise\n[[PromiseState]]: \"fulfilled\"\n[[PromiseResult]]: \"hello world;\"\n```\n所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个Promise对象，如果在函数中 return 一个直接量，async 会把这个直接量通过Promise.resolve() 封装成 Promise 对象。async 函数返回的是一个 Promise 对象，所以在最外层不能用await 获取其返回值的情况下，当然应该用原来的方式：then()链来处理这个 Promise 对象，就像这样：\n\n```javascript\nasync function testAsy() {\n\treturn \"hello world;\";\n}\nlet result = testAsy();\nconsole.log(result);\nresult.then(res => {\n\tconsole.log(res); // hello world;\n})\n```\n那如果 async 函数没有返回值，又该如何？很容易想到，他会返回\n```javascript\nPromise.resolve(undefined);\n```\n联想一下 Promise 的特点——无等待，所以在没有await 的情况下执行 async 函数，它会立即执行，返回一个Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回Promise 对象的函数并无二致。\n\n     注意：Promise.resolve(x) 可以看作是new Promise(resolve=>resolve(x)) 的简写\n     可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n\n## async/await 的优势\n单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。\n假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：\n\n```javascript\nfunction takeLongTime(n) {\n\treturn new Promise(resolve => {\n\t\tsetTimeout(() => resolve(n + 200), n)\n\t})\n};\n\nfunction step1(n) {\n\tconsole.log(`step1 with ${n}`);\n\treturn takeLongTime(n);\n}\nfunction step2(n) {\n\tconsole.log(`step2 with ${n}`);\n\treturn takeLongTime(n);\n}\nfunction step3(n) {\n\tconsole.log(`step3 with ${n}`);\n\treturn takeLongTime(n);\n}\n```\n现在用 Promise 方式来实现这三个步骤的处理：\n```javascript\nfunction doIt(n) {\n\tconsole.time('doIt');\n\tconst time1 = 300;\n\tstep1(time1)\n\t\t.then(time2 => step2(time2))\n\t\t.then(time3 => step3(time3))\n\t\t.then(result => {\n\t\t\tconsole.log(`result is ${result}`);\n\t\t\tconsole.timeEnd('doIt');\n\t\t});\t\n}\n\ndoIt();\nstep1 with 300\nstep2 with 500\nstep3 with 700\nresult is 900\ndoIt: 1.652s\n\n```\n\n输出结果 result 是 step3() 的参数 700 + 200 = 900。doIt()顺序执行了三个步骤，一共用了 300 + 500 + 700 = 1500 毫秒，和console.time()/console.timeEnd() 计算的结果一致。如果用 async/await 来实现呢，会是这样：\n```javascript\nasync function doIt() {\n\tconsole.time('doIt');\n\tconst time1 = 300;\n\tconst time2 = await step1(time1);\n\tconst time3 = await step2(time2);\n\tconst result = await step3(time3);\n\tconsole.log(`result is ${result}`);\n\tconsole.timeEnd('doIt');\n}\ndoIt();\nstep1 with 300\nstep2 with 500\nstep3 with 700\nresult is 900\ndoIt: 1.515s\n```\n\n结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样\n\n## async/await 对比 Promise 的优势\n代码读起来更加同步，Promise 虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担\n\nPromise 传递中间值⾮常麻烦，⽽async/await⼏乎是同步的写法，⾮常优雅\n\n错误处理友好，async/await 可以⽤成熟的try/catch，Promise的错误捕获⾮常冗余\n\n调试友好，Promise 的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then 代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。","source":"_posts/javaScript/async-await.md","raw":"---\ntitle: async/await 的理解\npermalink: /javascript/async/await.html\ndate: 2023-10-20 21:20:45\ndescription: 单一的 Promise 链并不能发现 async/await 的优势。\ntag: [前端, JavaScript, es6]\ncomments: true\ncategories: \n - 前端\n - es6\n---\n\n\n## async/await 的理解\nasync/await 其实是 Generator 的语法糖，它能实现的效果都能用then 链来实现，它是为优化 then 链而开发出来的。从字面上来看，async 是“异步”的简写，await 则为等待，所以很好理解async用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定 await 只能出现在asnyc 函数中，先来看看 async 函数返回了什么：\n```javascript\nasync function testAsy() {\n\treturn \"hello world;\";\n}\nlet result = testAsy();\nconsole.log(result);\nPromise {<fulfilled>: 'hello world;'}\n[[Prototype]]: Promise\n[[PromiseState]]: \"fulfilled\"\n[[PromiseResult]]: \"hello world;\"\n```\n所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个Promise对象，如果在函数中 return 一个直接量，async 会把这个直接量通过Promise.resolve() 封装成 Promise 对象。async 函数返回的是一个 Promise 对象，所以在最外层不能用await 获取其返回值的情况下，当然应该用原来的方式：then()链来处理这个 Promise 对象，就像这样：\n\n```javascript\nasync function testAsy() {\n\treturn \"hello world;\";\n}\nlet result = testAsy();\nconsole.log(result);\nresult.then(res => {\n\tconsole.log(res); // hello world;\n})\n```\n那如果 async 函数没有返回值，又该如何？很容易想到，他会返回\n```javascript\nPromise.resolve(undefined);\n```\n联想一下 Promise 的特点——无等待，所以在没有await 的情况下执行 async 函数，它会立即执行，返回一个Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回Promise 对象的函数并无二致。\n\n     注意：Promise.resolve(x) 可以看作是new Promise(resolve=>resolve(x)) 的简写\n     可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n\n## async/await 的优势\n单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。\n假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：\n\n```javascript\nfunction takeLongTime(n) {\n\treturn new Promise(resolve => {\n\t\tsetTimeout(() => resolve(n + 200), n)\n\t})\n};\n\nfunction step1(n) {\n\tconsole.log(`step1 with ${n}`);\n\treturn takeLongTime(n);\n}\nfunction step2(n) {\n\tconsole.log(`step2 with ${n}`);\n\treturn takeLongTime(n);\n}\nfunction step3(n) {\n\tconsole.log(`step3 with ${n}`);\n\treturn takeLongTime(n);\n}\n```\n现在用 Promise 方式来实现这三个步骤的处理：\n```javascript\nfunction doIt(n) {\n\tconsole.time('doIt');\n\tconst time1 = 300;\n\tstep1(time1)\n\t\t.then(time2 => step2(time2))\n\t\t.then(time3 => step3(time3))\n\t\t.then(result => {\n\t\t\tconsole.log(`result is ${result}`);\n\t\t\tconsole.timeEnd('doIt');\n\t\t});\t\n}\n\ndoIt();\nstep1 with 300\nstep2 with 500\nstep3 with 700\nresult is 900\ndoIt: 1.652s\n\n```\n\n输出结果 result 是 step3() 的参数 700 + 200 = 900。doIt()顺序执行了三个步骤，一共用了 300 + 500 + 700 = 1500 毫秒，和console.time()/console.timeEnd() 计算的结果一致。如果用 async/await 来实现呢，会是这样：\n```javascript\nasync function doIt() {\n\tconsole.time('doIt');\n\tconst time1 = 300;\n\tconst time2 = await step1(time1);\n\tconst time3 = await step2(time2);\n\tconst result = await step3(time3);\n\tconsole.log(`result is ${result}`);\n\tconsole.timeEnd('doIt');\n}\ndoIt();\nstep1 with 300\nstep2 with 500\nstep3 with 700\nresult is 900\ndoIt: 1.515s\n```\n\n结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样\n\n## async/await 对比 Promise 的优势\n代码读起来更加同步，Promise 虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担\n\nPromise 传递中间值⾮常麻烦，⽽async/await⼏乎是同步的写法，⾮常优雅\n\n错误处理友好，async/await 可以⽤成熟的try/catch，Promise的错误捕获⾮常冗余\n\n调试友好，Promise 的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then 代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。","slug":"javaScript/async-await","published":1,"updated":"2023-10-21T14:00:11.279Z","__permalink":"/javascript/async/await.html","layout":"post","photos":[],"link":"","_id":"clofw8yd4000qm0uo1i0e4abc","content":"<div id=\"vip-container\"><h2 id=\"async-await-的理解\"><a href=\"#async-await-的理解\" class=\"headerlink\" title=\"async&#x2F;await 的理解\"></a>async&#x2F;await 的理解</h2><p>async&#x2F;await 其实是 Generator 的语法糖，它能实现的效果都能用then 链来实现，它是为优化 then 链而开发出来的。从字面上来看，async 是“异步”的简写，await 则为等待，所以很好理解async用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定 await 只能出现在asnyc 函数中，先来看看 async 函数返回了什么：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">testAsy</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\"><span class=\"title class_\">Promise</span> &#123;&lt;fulfilled&gt;: <span class=\"string\">&#x27;hello world;&#x27;</span>&#125;</span><br><span class=\"line\">[[<span class=\"title class_\">Prototype</span>]]: <span class=\"title class_\">Promise</span></span><br><span class=\"line\">[[<span class=\"title class_\">PromiseState</span>]]: <span class=\"string\">&quot;fulfilled&quot;</span></span><br><span class=\"line\">[[<span class=\"title class_\">PromiseResult</span>]]: <span class=\"string\">&quot;hello world;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个Promise对象，如果在函数中 return 一个直接量，async 会把这个直接量通过Promise.resolve() 封装成 Promise 对象。async 函数返回的是一个 Promise 对象，所以在最外层不能用await 获取其返回值的情况下，当然应该用原来的方式：then()链来处理这个 Promise 对象，就像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">testAsy</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">result.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res); <span class=\"comment\">// hello world;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>那如果 async 函数没有返回值，又该如何？很容易想到，他会返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"literal\">undefined</span>);</span><br></pre></td></tr></table></figure>\n<p>联想一下 Promise 的特点——无等待，所以在没有await 的情况下执行 async 函数，它会立即执行，返回一个Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回Promise 对象的函数并无二致。</p>\n<pre><code> 注意：Promise.resolve(x) 可以看作是new Promise(resolve=&gt;resolve(x)) 的简写\n 可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n</code></pre>\n<h2 id=\"async-await-的优势\"><a href=\"#async-await-的优势\" class=\"headerlink\" title=\"async&#x2F;await 的优势\"></a>async&#x2F;await 的优势</h2><p>单一的 Promise 链并不能发现 async&#x2F;await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async&#x2F;await 来进一步优化它）。<br>假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">takeLongTime</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(n + <span class=\"number\">200</span>), n)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step1 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step2</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step2 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step3</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step3 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在用 Promise 方式来实现这三个步骤的处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doIt</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">step1</span>(time1)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">time2</span> =&gt;</span> <span class=\"title function_\">step2</span>(time2))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">time3</span> =&gt;</span> <span class=\"title function_\">step3</span>(time3))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t\t&#125;);\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">doIt</span>();</span><br><span class=\"line\">step1 <span class=\"keyword\">with</span> <span class=\"number\">300</span></span><br><span class=\"line\">step2 <span class=\"keyword\">with</span> <span class=\"number\">500</span></span><br><span class=\"line\">step3 <span class=\"keyword\">with</span> <span class=\"number\">700</span></span><br><span class=\"line\">result is <span class=\"number\">900</span></span><br><span class=\"line\"><span class=\"attr\">doIt</span>: <span class=\"number\">1.</span>652s</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出结果 result 是 step3() 的参数 700 + 200 &#x3D; 900。doIt()顺序执行了三个步骤，一共用了 300 + 500 + 700 &#x3D; 1500 毫秒，和console.time()&#x2F;console.timeEnd() 计算的结果一致。如果用 async&#x2F;await 来实现呢，会是这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">doIt</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time2 = <span class=\"keyword\">await</span> <span class=\"title function_\">step1</span>(time1);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time3 = <span class=\"keyword\">await</span> <span class=\"title function_\">step2</span>(time2);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">step3</span>(time3);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">doIt</span>();</span><br><span class=\"line\">step1 <span class=\"keyword\">with</span> <span class=\"number\">300</span></span><br><span class=\"line\">step2 <span class=\"keyword\">with</span> <span class=\"number\">500</span></span><br><span class=\"line\">step3 <span class=\"keyword\">with</span> <span class=\"number\">700</span></span><br><span class=\"line\">result is <span class=\"number\">900</span></span><br><span class=\"line\"><span class=\"attr\">doIt</span>: <span class=\"number\">1.</span>515s</span><br></pre></td></tr></table></figure>\n\n<p>结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样</p>\n<h2 id=\"async-await-对比-Promise-的优势\"><a href=\"#async-await-对比-Promise-的优势\" class=\"headerlink\" title=\"async&#x2F;await 对比 Promise 的优势\"></a>async&#x2F;await 对比 Promise 的优势</h2><p>代码读起来更加同步，Promise 虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担</p>\n<p>Promise 传递中间值⾮常麻烦，⽽async&#x2F;await⼏乎是同步的写法，⾮常优雅</p>\n<p>错误处理友好，async&#x2F;await 可以⽤成熟的try&#x2F;catch，Promise的错误捕获⾮常冗余</p>\n<p>调试友好，Promise 的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then 代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/javascript/promise.html","/hexo/config/rss.html"],"length":975,"excerpt":"","more":"<h2 id=\"async-await-的理解\"><a href=\"#async-await-的理解\" class=\"headerlink\" title=\"async&#x2F;await 的理解\"></a>async&#x2F;await 的理解</h2><p>async&#x2F;await 其实是 Generator 的语法糖，它能实现的效果都能用then 链来实现，它是为优化 then 链而开发出来的。从字面上来看，async 是“异步”的简写，await 则为等待，所以很好理解async用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定 await 只能出现在asnyc 函数中，先来看看 async 函数返回了什么：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">testAsy</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\"><span class=\"title class_\">Promise</span> &#123;&lt;fulfilled&gt;: <span class=\"string\">&#x27;hello world;&#x27;</span>&#125;</span><br><span class=\"line\">[[<span class=\"title class_\">Prototype</span>]]: <span class=\"title class_\">Promise</span></span><br><span class=\"line\">[[<span class=\"title class_\">PromiseState</span>]]: <span class=\"string\">&quot;fulfilled&quot;</span></span><br><span class=\"line\">[[<span class=\"title class_\">PromiseResult</span>]]: <span class=\"string\">&quot;hello world;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个Promise对象，如果在函数中 return 一个直接量，async 会把这个直接量通过Promise.resolve() 封装成 Promise 对象。async 函数返回的是一个 Promise 对象，所以在最外层不能用await 获取其返回值的情况下，当然应该用原来的方式：then()链来处理这个 Promise 对象，就像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testAsy</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">testAsy</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">result.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res); <span class=\"comment\">// hello world;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>那如果 async 函数没有返回值，又该如何？很容易想到，他会返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"literal\">undefined</span>);</span><br></pre></td></tr></table></figure>\n<p>联想一下 Promise 的特点——无等待，所以在没有await 的情况下执行 async 函数，它会立即执行，返回一个Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回Promise 对象的函数并无二致。</p>\n<pre><code> 注意：Promise.resolve(x) 可以看作是new Promise(resolve=&gt;resolve(x)) 的简写\n 可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n</code></pre>\n<h2 id=\"async-await-的优势\"><a href=\"#async-await-的优势\" class=\"headerlink\" title=\"async&#x2F;await 的优势\"></a>async&#x2F;await 的优势</h2><p>单一的 Promise 链并不能发现 async&#x2F;await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async&#x2F;await 来进一步优化它）。<br>假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">takeLongTime</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(n + <span class=\"number\">200</span>), n)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step1 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step2</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step2 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step3</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`step3 with <span class=\"subst\">$&#123;n&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">takeLongTime</span>(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在用 Promise 方式来实现这三个步骤的处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doIt</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">step1</span>(time1)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">time2</span> =&gt;</span> <span class=\"title function_\">step2</span>(time2))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">time3</span> =&gt;</span> <span class=\"title function_\">step3</span>(time3))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t\t&#125;);\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">doIt</span>();</span><br><span class=\"line\">step1 <span class=\"keyword\">with</span> <span class=\"number\">300</span></span><br><span class=\"line\">step2 <span class=\"keyword\">with</span> <span class=\"number\">500</span></span><br><span class=\"line\">step3 <span class=\"keyword\">with</span> <span class=\"number\">700</span></span><br><span class=\"line\">result is <span class=\"number\">900</span></span><br><span class=\"line\"><span class=\"attr\">doIt</span>: <span class=\"number\">1.</span>652s</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出结果 result 是 step3() 的参数 700 + 200 &#x3D; 900。doIt()顺序执行了三个步骤，一共用了 300 + 500 + 700 &#x3D; 1500 毫秒，和console.time()&#x2F;console.timeEnd() 计算的结果一致。如果用 async&#x2F;await 来实现呢，会是这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">doIt</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">time</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time1 = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time2 = <span class=\"keyword\">await</span> <span class=\"title function_\">step1</span>(time1);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> time3 = <span class=\"keyword\">await</span> <span class=\"title function_\">step2</span>(time2);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">step3</span>(time3);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result is <span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">timeEnd</span>(<span class=\"string\">&#x27;doIt&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">doIt</span>();</span><br><span class=\"line\">step1 <span class=\"keyword\">with</span> <span class=\"number\">300</span></span><br><span class=\"line\">step2 <span class=\"keyword\">with</span> <span class=\"number\">500</span></span><br><span class=\"line\">step3 <span class=\"keyword\">with</span> <span class=\"number\">700</span></span><br><span class=\"line\">result is <span class=\"number\">900</span></span><br><span class=\"line\"><span class=\"attr\">doIt</span>: <span class=\"number\">1.</span>515s</span><br></pre></td></tr></table></figure>\n\n<p>结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样</p>\n<h2 id=\"async-await-对比-Promise-的优势\"><a href=\"#async-await-对比-Promise-的优势\" class=\"headerlink\" title=\"async&#x2F;await 对比 Promise 的优势\"></a>async&#x2F;await 对比 Promise 的优势</h2><p>代码读起来更加同步，Promise 虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担</p>\n<p>Promise 传递中间值⾮常麻烦，⽽async&#x2F;await⼏乎是同步的写法，⾮常优雅</p>\n<p>错误处理友好，async&#x2F;await 可以⽤成熟的try&#x2F;catch，Promise的错误捕获⾮常冗余</p>\n<p>调试友好，Promise 的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then 代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。</p>\n"},{"title":"编写 Promise 方法","date":"2023-10-19T14:14:04.000Z","description":"Promise 是异步编程的一种解决方案，它是一个对象，可以获取异步 操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调， 它比传统的解决方案回调函数和事件更合理和更强大。","comments":1,"_content":"\n##### Promise 是什么？\n\nPromise 是异步编程的一种解决方案，它是一个对象，可以获取异步 操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调， 它比传统的解决方案回调函数和事件更合理和更强大。\n<!-- more -->\n所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束 的事件(通常是一个异步操作)的结果。从语法上说，Promise 是一 个对象，从它可以获取异步操作的消息。Promise 提供统一的 API， 各种异步操作都可以用同样的方法进行处理。\n\n1. Promise 的实例有三个状态:\n\n- Pending(进行中)\n\n- Resolved(已完成)\n\n- Rejected(已拒绝)\n\n当把一件事情交给 promise 时，它的状态就是 Pending，任务完成了 状态就变成了 Resolved、没有完成失败了就变成了 Rejected。\n\n2. Promise 的实例有两个过程:\n    pending -> fulfilled: Resolved(已完成)\n    pending -> rejected: Rejected(已拒绝)\n\n    注意:一旦从进行状态变成为其他状态就永远不能更改状态了。\n\n##### Promise 的特点\n\n对象的状态不受外界影响。promise 对象代表一个异步操作，有三种 状态，pending(进行中)、fulfilled(已成功)、rejected(已失 败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他 操作都无法改变这个状态，这也是 promise 这个名字的由来——“承 诺”;\n\n一旦状态改变就不会再变，任何时候都可以得到这个结果。promise 对象的状态改变，只有两种可能:从 pending 变为 fulfilled，从 pending 变为 rejected。这时就称为 resolved(已定型)。如果改 变已经发生了，你再对 promise 对象添加回调函数，也会立即得到这 个结果。这与事件(event)完全不同，事件的特点是:如果你错过 了它，再去监听是得不到结果的。\n\n##### Promise 实现\n\nPromise 实现是通过js class编写，主要包括status、value、error、resolve、reject、then、catch、all、race、allSettled、any等组成。\n\n1. 状态\n\n```ts\n  const PROMISE_STATUE_PENDING = \"pending\"; // 进行中\n  const PROMISE_STATUE_FULFILLED = \"fulfilled\"; // 已完成\n  const PROMISE_STATUE_REJECTED = \"rejected\"; // 已拒绝\n```\n\n2. resolve 创建一个已解决的Promise对象，将给定的值作为其参数。\n\n```js\n  resolve = (value) => {\n      if (this.statue === PROMISE_STATUE_PENDING) {\n        queueMicrotask(() => {\n          if (this.statue !== PROMISE_STATUE_PENDING) return;\n          this.statue = PROMISE_STATUE_FULFILLED;\n          this.value = value;\n          this.resFns?.forEach((fn) => {\n            fn(this.value);\n          });\n        });\n      }\n    };\n```\n\n   \n\n3. reject 创建一个已拒绝的Promise对象，将给定的原因作为其参数\n\n```js\n  reject = (error) => {\n    if (this.statue === PROMISE_STATUE_PENDING) {\n      queueMicrotask(() => {\n        if (this.statue !== PROMISE_STATUE_PENDING) return;\n        this.statue = PROMISE_STATUE_REJECTED;\n        this.error = error;\n        this.errFns.forEach((en) => {\n          en(this.error);\n        });\n      });\n    }\n  };\n```\n\n   \n\n4. then 添加对Promise对象解决或拒绝时的处理程序\n\n  - 单个方法调用\n\n   ```js\n    constructor(executer) {\n      this.statue = PROMISE_STATUE_PENDING;\n      this.value = void 0;\n      this.error = void 0;\n      this.resFn;\n      this.errFn;\n   \t\tconst resolve = ((value) => {\n        if (this.status === PROMISE_STATUS_PENDING) {\n          this.status = PROMISE_STATUS_FULFILLED\n          \n          queueMicrotask(() => { //queueMicrotask:  主线程执行完毕之后立马执行\n              this.resfn(value)\n          })\n        }\n      })\n \n      const reject = ((error) => {\n        if (this.status === PROMISE_STATUS_PENDING) {\n          this.status = PROMISE_STATUS_REJECTED\n          queueMicrotask(() => {\n              this.errfn(error)\n          })\n        }\n      })\n       executer(this.resolve, this.reject);\n    }\n\n    then(resFn, errFn) {\n   \t  this.resFn = resFn;\n      this.errFn = errFn;\n    }\n   ```\n  - 执行结果\n  ```js\n  const p1 = new myPromise((resolve, reject) => {\n    resolve(111)\n    reject(333333)\n  })\n  p1.then(res => {        //最终打印 1111\n      console.log(res);\n  }, err => {\n      console.log(err);\n\n  })\n\n  ```\n  - 优化then 方法\n\n官方给与的then 方法是可以进行数组传值和链式调用的，而目前我们写的是不支持。\n```js\n  this.resFns = [] //1.多次调用then 时用数组 保存\n  this.errFns = []\n  \n  // 将then 方法修改为 \n  then(resFn, errFn) {\n    this.resfns.push(resFn);\n    this.errFns.push(errFn);\n  }\n\n  // resolve修改为\n  resolve = (value) => {\n    if (this.statue === PROMISE_STATUE_PENDING) {\n      queueMicrotask(() => {\n        if (this.statue !== PROMISE_STATUE_PENDING) return;\n        this.statue = PROMISE_STATUE_FULFILLED;\n        this.value = value;\n        this.resFns?.forEach((fn) => {\n          fn(this.value);\n        });\n      });\n    }\n  };\n  // reject 修改为\n  reject = (error) => {\n    if (this.statue === PROMISE_STATUE_PENDING) {\n      queueMicrotask(() => {\n        if (this.statue !== PROMISE_STATUE_PENDING) return;\n        this.statue = PROMISE_STATUE_REJECTED;\n        this.error = error;\n        this.errFns.forEach((en) => {\n          en(this.error);\n        });\n      });\n    }\n  };\n\n```\n  优化后then的运行结果\n  ```js\n  p1.then(res => {\n    console.log(\"res1:\", res) \n  }, err => {\n      console.log(\"err1:\", err)\n  })\n  // 调用then方法多次调用\n  p1.then(res => {\n      console.log(\"res2:\", res)\n  }, err => {\n      console.log(\"err2:\", err)\n  })\n\n  ```\n运行结果：res2: 111  因为后面的.then 把前面的覆盖掉了 并不会执行res1 所在的代码块\n*由此可见 then 方法调用时应该是个数组然后依次调用\n下面改造我们的代码then,还需要优化执行resolve 时调用reject\n   ```js\n   then(resFn, errFn) {\n       const defaultOnRejected = (err) => {\n         throw err;\n       };\n       errFn = errFn || defaultOnRejected;\n   \n       const defaultOnFulFilled = (value) => {\n         return value;\n       };\n       resFn = resFn || defaultOnFulFilled;\n   \n       return new MyPromise((resolve, reject) => {\n         if (this.statue === PROMISE_STATUE_FULFILLED && !!resFn) {\n           try {\n             const value = resFn(this.value);\n             resolve(value);\n           } catch (error) {\n             reject(error);\n           }\n         }\n         if (this.statue === PROMISE_STATUE_REJECTED && !!errFn) {\n           try {\n             resolve(value);\n           } catch (error) {\n             reject(error);\n           }\n         }\n         if (this.statue === PROMISE_STATUE_PENDING) {\n           if (!!resFn) {\n             this.resFns.push(() => {\n               try {\n                 const value = resFn(this.value);\n                 resolve(value);\n               } catch (error) {\n                 reject(error);\n               }\n             });\n           }\n   \n           if (!!errFn) {\n             this.errFns.push(() => {\n               try {\n                 const value = errFn(this.error);\n                 resolve(value);\n               } catch (error) {\n                 reject(error);\n               }\n             });\n           }\n         }\n       });\n     }\n   ```\n然后执行：\n  ```js\n    const p1 = new myPromise((resolve, reject) => {\n        resolve(111);\n        reject(333333);\n    })\n    p1.then(res => {\n        console.log(\"res1:\", res);\n    }, err => {\n        console.log(\"err1:\", err);\n    })\n    // 调用then方法多次调用\n    p1.then(res => {\n        console.log(\"res2:\", res);\n    }, err => {\n        console.log(\"err2:\", err);\n    })\n    执行结果：\n    res1: 111\n    res2: 111\n  ```\n\n5. catch 添加对Promise对象拒绝时的处理程序\n```js\n  // 添加对Promise对象拒绝时的处理程序。\n  catch(errFn) {\n    return this.then(undefined, errFn);\n  }\n```\n\n6. finally 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。\n```js\n  finally(fn) {\n    setTimeout(() => {\n      fn();\n    }, 0);\n  }\n```\n6. all 接收一个可迭代对象（如数组），并返回一个新的Promise对象。当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。\n```js\n  // 通过类型判断当前数组中的方法或者对象是否为Promise 对象\n  const isPromise = function(promise) {\n    return (\n      !!promise &&\n      (typeof promise === \"object\" || typeof promise === \"function\") &&\n      typeof promise.then === \"function\"\n    );\n  };\n\n  /**\n   * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。\n   * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。\n   * @param {any[]} iterable\n   * @desc 实际上多个对象同步执行时，就相当于把所有的方法重新进行Promise一次。\n   * 当遍历到最后一个时，resolve 所有结果。\n   * \n   */\n  \n  MyPromise.all = function(iterable) {\n    if (!(iterable instanceof Array)) {\n      return console.log(\"传入参数必须是一个数组\");\n    }\n    return new MyPromise((resolve, reject) => {\n      let len = iterable.length;\n      let count = 0;\n      let results = new Array(len);\n      for (let i = 0; i < len; i++) {\n        let promise = iterable[i];\n        count++;\n        if (isPromise(promise)) {\n          promise\n            .then((res) => {\n              results[i] = res;\n              if (count === len) {\n                resolve(results);\n              }\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        } else if (typeof promise === \"function\") {\n          results[i] = promise();\n        } else {\n          results[i] = promise;\n        }\n      }\n      // 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve\n      if (count === len) {\n        resolve(results);\n      }\n    });\n  };\n```\nall 运行示例\n```js\n  (async function() {\n    const res = MyPromise.all([\n      new MyPromise((resolve) => {\n        resolve(1);\n      }),\n      new MyPromise((resolve) => {\n        resolve(2);\n      }),\n      () => {\n        return 123;\n      },\n      88888,\n    ]);\n    res.then((res) => {\n      console.log(res);\n    });\n  })();\n  运行结果: [1, 2, 123,  88888]\n```\n\n7. race Promise.race(iterable) 传入多个对象,当任何一个执行完成后 resolve 结果\n\n```js\nMyPromise.race = function(iterable) {\n  if (!(iterable instanceof Array)) {\n    return console.log(\"传入参数必须是一个数组\");\n  }\n  return new MyPromise((resolve, reject) => {\n    iterable.forEach((p) => {\n      if (isPromise(p)) {\n        p.then((value) => {\n          resolve(value);\n        }).catch((err) => {\n          reject(err);\n        });\n      } else if (typeof p === \"function\") {\n        resolve(p());\n      } else {\n        resolve(p);\n      }\n    });\n  });\n};\n```\nrace 运行示例\n```js\n  (async function() {\n    const res = MyPromise.race([\n      new MyPromise((resolve) => {\n        resolve(1);\n      }),\n      new MyPromise((resolve) => {\n        resolve(2);\n      }),\n    ]);\n    res.then((res) => {\n      console.log(res);\n    });\n  })();\n  运行结果： 1\n```\n\n完整代码\n```js\n  // status\n  const PROMISE_STATUE_PENDING = \"pending\"; // 进行中\n  const PROMISE_STATUE_FULFILLED = \"fulfilled\"; // 已完成\n  const PROMISE_STATUE_REJECTED = \"rejected\"; // 已拒绝\n\n  class MyPromise {\n    constructor(executer) {\n      this.statue = PROMISE_STATUE_PENDING;\n      this.value = void 0;\n      this.error = void 0;\n      this.resFns = [];\n      this.errFns = [];\n\n      executer(this.resolve, this.reject);\n    }\n    //    创建一个已解决的Promise对象，将给定的值作为其参数。\n    resolve = (value) => {\n      if (this.statue === PROMISE_STATUE_PENDING) {\n        queueMicrotask(() => {\n          if (this.statue !== PROMISE_STATUE_PENDING) return;\n          this.statue = PROMISE_STATUE_FULFILLED;\n          this.value = value;\n          this.resFns?.forEach((fn) => {\n            fn(this.value);\n          });\n        });\n      }\n    };\n    // 创建一个已拒绝的Promise对象，将给定的原因作为其参数。\n    reject = (error) => {\n      if (this.statue === PROMISE_STATUE_PENDING) {\n        queueMicrotask(() => {\n          if (this.statue !== PROMISE_STATUE_PENDING) return;\n          this.statue = PROMISE_STATUE_REJECTED;\n          this.error = error;\n          this.errFns.forEach((en) => {\n            en(this.error);\n          });\n        });\n      }\n    };\n    //   添加对Promise对象解决或拒绝时的处理程序。\n    then(resFn, errFn) {\n      const defaultOnRejected = (err) => {\n        throw err;\n      };\n      errFn = errFn || defaultOnRejected;\n\n      const defaultOnFulFilled = (value) => {\n        return value;\n      };\n      resFn = resFn || defaultOnFulFilled;\n\n      return new MyPromise((resolve, reject) => {\n        if (this.statue === PROMISE_STATUE_FULFILLED && !!resFn) {\n          try {\n            const value = resFn(this.value);\n            resolve(value);\n          } catch (error) {\n            reject(error);\n          }\n        }\n        if (this.statue === PROMISE_STATUE_REJECTED && !!errFn) {\n          try {\n            resolve(value);\n          } catch (error) {\n            reject(error);\n          }\n        }\n        if (this.statue === PROMISE_STATUE_PENDING) {\n          if (!!resFn) {\n            this.resFns.push(() => {\n              try {\n                const value = resFn(this.value);\n                resolve(value);\n              } catch (error) {\n                reject(error);\n              }\n            });\n          }\n\n          if (!!errFn) {\n            this.errFns.push(() => {\n              try {\n                const value = errFn(this.error);\n                resolve(value);\n              } catch (error) {\n                reject(error);\n              }\n            });\n          }\n        }\n      });\n    }\n    // 添加对Promise对象拒绝时的处理程序。\n    catch(errFn) {\n      return this.then(undefined, errFn);\n    }\n    // 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。\n    finally(fn) {\n      setTimeout(() => {\n        fn();\n      }, 0);\n    }\n  }\n\n  const isPromise = function(promise) {\n    return (\n      !!promise &&\n      (typeof promise === \"object\" || typeof promise === \"function\") &&\n      typeof promise.then === \"function\"\n    );\n  };\n\n  /**\n   * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。\n   * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。\n   * @param {any[]} iterable\n   */\n  MyPromise.all = function(iterable) {\n    if (!(iterable instanceof Array)) {\n      return console.log(\"传入参数必须是一个数组\");\n    }\n    return new MyPromise((resolve, reject) => {\n      let len = iterable.length;\n      let count = 0;\n      let results = new Array(len);\n      for (let i = 0; i < len; i++) {\n        let promise = iterable[i];\n        count++;\n        if (isPromise(promise)) {\n          promise\n            .then((res) => {\n              results[i] = res;\n              if (count === len) {\n                resolve(results);\n              }\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        } else if (typeof promise === \"function\") {\n          results[i] = promise();\n        } else {\n          results[i] = promise;\n        }\n      }\n      // 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve\n      if (count === len) {\n        resolve(results);\n      }\n    });\n  };\n\n  MyPromise.race = function(iterable) {\n    if (!(iterable instanceof Array)) {\n      return console.log(\"传入参数必须是一个数组\");\n    }\n    return new MyPromise((resolve, reject) => {\n      iterable.forEach((p) => {\n        if (isPromise(p)) {\n          p.then((value) => {\n            resolve(value);\n          }).catch((err) => {\n            reject(err);\n          });\n        } else if (typeof p === \"function\") {\n          resolve(p());\n        } else {\n          resolve(p);\n        }\n      });\n    });\n  };\n  // const p1 = new MyPromise((resolve, reject) => {\n  //   console.log(\"状态pending\");\n  //   resolve(\"22222\");\n  //   reject(\"3333333\");\n  // });\n\n  // p1.then((res) => {\n  //   console.log(\"res1:\", res);\n  //   return \"第二次的成功回调\";\n  // })\n  //   .catch((error) => {\n  //     console.log(\"err1:\", error);\n  //     throw new Error(\"第二次的失败回调\");\n  //   })\n  //   .finally(() => {\n  //     console.log(\"finally\");\n  //   });\n  // (async function() {\n  //   const res = MyPromise.all([\n  //     new MyPromise((resolve) => {\n  //       resolve(1);\n  //     }),\n  //     new MyPromise((resolve) => {\n  //       resolve(2);\n  //     }),\n  //     () => {\n  //       return 123;\n  //     },\n  //     88888,\n  //   ]);\n  //   res.then((res) => {\n  //     console.log(res);\n  //   });\n  // })();\n\n  // (async function() {\n  //   const res = MyPromise.race([\n  //     new MyPromise((resolve) => {\n  //       resolve(1);\n  //     }),\n  //     new MyPromise((resolve) => {\n  //       resolve(2);\n  //     }),\n  //   ]);\n  //   res.then((res) => {\n  //     console.log(res);\n  //   });\n  // })();\n\n```\n\n##### Promise 的缺点\n\n无法取消 Promise，一旦新建它就会立即执行，无法中途取消。\n\n如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。\n\n当处于 pending 状态时，无法得知目前进展到哪一个阶段(刚刚开始 还是即将完成)。\n\n##### 总结:\n\nPromise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。 一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变， 就凝固了，无法再被改变了。\n\n状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在 异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原 型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的 改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的 末尾执行。\n\n注意:在构造 Promise 的时候，构造函数内部的代码是立即执行的。\n","source":"_posts/javaScript/promise.md","raw":"---\ntitle: 编写 Promise 方法\npermalink: /javascript/promise.html\ndate: 2023-10-19 22:14:04\ndescription: Promise 是异步编程的一种解决方案，它是一个对象，可以获取异步 操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调， 它比传统的解决方案回调函数和事件更合理和更强大。\ntag: [前端, JavaScript, es6]\ncomments: true\ncategories: \n - 前端\n - es6\n---\n\n##### Promise 是什么？\n\nPromise 是异步编程的一种解决方案，它是一个对象，可以获取异步 操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调， 它比传统的解决方案回调函数和事件更合理和更强大。\n<!-- more -->\n所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束 的事件(通常是一个异步操作)的结果。从语法上说，Promise 是一 个对象，从它可以获取异步操作的消息。Promise 提供统一的 API， 各种异步操作都可以用同样的方法进行处理。\n\n1. Promise 的实例有三个状态:\n\n- Pending(进行中)\n\n- Resolved(已完成)\n\n- Rejected(已拒绝)\n\n当把一件事情交给 promise 时，它的状态就是 Pending，任务完成了 状态就变成了 Resolved、没有完成失败了就变成了 Rejected。\n\n2. Promise 的实例有两个过程:\n    pending -> fulfilled: Resolved(已完成)\n    pending -> rejected: Rejected(已拒绝)\n\n    注意:一旦从进行状态变成为其他状态就永远不能更改状态了。\n\n##### Promise 的特点\n\n对象的状态不受外界影响。promise 对象代表一个异步操作，有三种 状态，pending(进行中)、fulfilled(已成功)、rejected(已失 败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他 操作都无法改变这个状态，这也是 promise 这个名字的由来——“承 诺”;\n\n一旦状态改变就不会再变，任何时候都可以得到这个结果。promise 对象的状态改变，只有两种可能:从 pending 变为 fulfilled，从 pending 变为 rejected。这时就称为 resolved(已定型)。如果改 变已经发生了，你再对 promise 对象添加回调函数，也会立即得到这 个结果。这与事件(event)完全不同，事件的特点是:如果你错过 了它，再去监听是得不到结果的。\n\n##### Promise 实现\n\nPromise 实现是通过js class编写，主要包括status、value、error、resolve、reject、then、catch、all、race、allSettled、any等组成。\n\n1. 状态\n\n```ts\n  const PROMISE_STATUE_PENDING = \"pending\"; // 进行中\n  const PROMISE_STATUE_FULFILLED = \"fulfilled\"; // 已完成\n  const PROMISE_STATUE_REJECTED = \"rejected\"; // 已拒绝\n```\n\n2. resolve 创建一个已解决的Promise对象，将给定的值作为其参数。\n\n```js\n  resolve = (value) => {\n      if (this.statue === PROMISE_STATUE_PENDING) {\n        queueMicrotask(() => {\n          if (this.statue !== PROMISE_STATUE_PENDING) return;\n          this.statue = PROMISE_STATUE_FULFILLED;\n          this.value = value;\n          this.resFns?.forEach((fn) => {\n            fn(this.value);\n          });\n        });\n      }\n    };\n```\n\n   \n\n3. reject 创建一个已拒绝的Promise对象，将给定的原因作为其参数\n\n```js\n  reject = (error) => {\n    if (this.statue === PROMISE_STATUE_PENDING) {\n      queueMicrotask(() => {\n        if (this.statue !== PROMISE_STATUE_PENDING) return;\n        this.statue = PROMISE_STATUE_REJECTED;\n        this.error = error;\n        this.errFns.forEach((en) => {\n          en(this.error);\n        });\n      });\n    }\n  };\n```\n\n   \n\n4. then 添加对Promise对象解决或拒绝时的处理程序\n\n  - 单个方法调用\n\n   ```js\n    constructor(executer) {\n      this.statue = PROMISE_STATUE_PENDING;\n      this.value = void 0;\n      this.error = void 0;\n      this.resFn;\n      this.errFn;\n   \t\tconst resolve = ((value) => {\n        if (this.status === PROMISE_STATUS_PENDING) {\n          this.status = PROMISE_STATUS_FULFILLED\n          \n          queueMicrotask(() => { //queueMicrotask:  主线程执行完毕之后立马执行\n              this.resfn(value)\n          })\n        }\n      })\n \n      const reject = ((error) => {\n        if (this.status === PROMISE_STATUS_PENDING) {\n          this.status = PROMISE_STATUS_REJECTED\n          queueMicrotask(() => {\n              this.errfn(error)\n          })\n        }\n      })\n       executer(this.resolve, this.reject);\n    }\n\n    then(resFn, errFn) {\n   \t  this.resFn = resFn;\n      this.errFn = errFn;\n    }\n   ```\n  - 执行结果\n  ```js\n  const p1 = new myPromise((resolve, reject) => {\n    resolve(111)\n    reject(333333)\n  })\n  p1.then(res => {        //最终打印 1111\n      console.log(res);\n  }, err => {\n      console.log(err);\n\n  })\n\n  ```\n  - 优化then 方法\n\n官方给与的then 方法是可以进行数组传值和链式调用的，而目前我们写的是不支持。\n```js\n  this.resFns = [] //1.多次调用then 时用数组 保存\n  this.errFns = []\n  \n  // 将then 方法修改为 \n  then(resFn, errFn) {\n    this.resfns.push(resFn);\n    this.errFns.push(errFn);\n  }\n\n  // resolve修改为\n  resolve = (value) => {\n    if (this.statue === PROMISE_STATUE_PENDING) {\n      queueMicrotask(() => {\n        if (this.statue !== PROMISE_STATUE_PENDING) return;\n        this.statue = PROMISE_STATUE_FULFILLED;\n        this.value = value;\n        this.resFns?.forEach((fn) => {\n          fn(this.value);\n        });\n      });\n    }\n  };\n  // reject 修改为\n  reject = (error) => {\n    if (this.statue === PROMISE_STATUE_PENDING) {\n      queueMicrotask(() => {\n        if (this.statue !== PROMISE_STATUE_PENDING) return;\n        this.statue = PROMISE_STATUE_REJECTED;\n        this.error = error;\n        this.errFns.forEach((en) => {\n          en(this.error);\n        });\n      });\n    }\n  };\n\n```\n  优化后then的运行结果\n  ```js\n  p1.then(res => {\n    console.log(\"res1:\", res) \n  }, err => {\n      console.log(\"err1:\", err)\n  })\n  // 调用then方法多次调用\n  p1.then(res => {\n      console.log(\"res2:\", res)\n  }, err => {\n      console.log(\"err2:\", err)\n  })\n\n  ```\n运行结果：res2: 111  因为后面的.then 把前面的覆盖掉了 并不会执行res1 所在的代码块\n*由此可见 then 方法调用时应该是个数组然后依次调用\n下面改造我们的代码then,还需要优化执行resolve 时调用reject\n   ```js\n   then(resFn, errFn) {\n       const defaultOnRejected = (err) => {\n         throw err;\n       };\n       errFn = errFn || defaultOnRejected;\n   \n       const defaultOnFulFilled = (value) => {\n         return value;\n       };\n       resFn = resFn || defaultOnFulFilled;\n   \n       return new MyPromise((resolve, reject) => {\n         if (this.statue === PROMISE_STATUE_FULFILLED && !!resFn) {\n           try {\n             const value = resFn(this.value);\n             resolve(value);\n           } catch (error) {\n             reject(error);\n           }\n         }\n         if (this.statue === PROMISE_STATUE_REJECTED && !!errFn) {\n           try {\n             resolve(value);\n           } catch (error) {\n             reject(error);\n           }\n         }\n         if (this.statue === PROMISE_STATUE_PENDING) {\n           if (!!resFn) {\n             this.resFns.push(() => {\n               try {\n                 const value = resFn(this.value);\n                 resolve(value);\n               } catch (error) {\n                 reject(error);\n               }\n             });\n           }\n   \n           if (!!errFn) {\n             this.errFns.push(() => {\n               try {\n                 const value = errFn(this.error);\n                 resolve(value);\n               } catch (error) {\n                 reject(error);\n               }\n             });\n           }\n         }\n       });\n     }\n   ```\n然后执行：\n  ```js\n    const p1 = new myPromise((resolve, reject) => {\n        resolve(111);\n        reject(333333);\n    })\n    p1.then(res => {\n        console.log(\"res1:\", res);\n    }, err => {\n        console.log(\"err1:\", err);\n    })\n    // 调用then方法多次调用\n    p1.then(res => {\n        console.log(\"res2:\", res);\n    }, err => {\n        console.log(\"err2:\", err);\n    })\n    执行结果：\n    res1: 111\n    res2: 111\n  ```\n\n5. catch 添加对Promise对象拒绝时的处理程序\n```js\n  // 添加对Promise对象拒绝时的处理程序。\n  catch(errFn) {\n    return this.then(undefined, errFn);\n  }\n```\n\n6. finally 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。\n```js\n  finally(fn) {\n    setTimeout(() => {\n      fn();\n    }, 0);\n  }\n```\n6. all 接收一个可迭代对象（如数组），并返回一个新的Promise对象。当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。\n```js\n  // 通过类型判断当前数组中的方法或者对象是否为Promise 对象\n  const isPromise = function(promise) {\n    return (\n      !!promise &&\n      (typeof promise === \"object\" || typeof promise === \"function\") &&\n      typeof promise.then === \"function\"\n    );\n  };\n\n  /**\n   * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。\n   * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。\n   * @param {any[]} iterable\n   * @desc 实际上多个对象同步执行时，就相当于把所有的方法重新进行Promise一次。\n   * 当遍历到最后一个时，resolve 所有结果。\n   * \n   */\n  \n  MyPromise.all = function(iterable) {\n    if (!(iterable instanceof Array)) {\n      return console.log(\"传入参数必须是一个数组\");\n    }\n    return new MyPromise((resolve, reject) => {\n      let len = iterable.length;\n      let count = 0;\n      let results = new Array(len);\n      for (let i = 0; i < len; i++) {\n        let promise = iterable[i];\n        count++;\n        if (isPromise(promise)) {\n          promise\n            .then((res) => {\n              results[i] = res;\n              if (count === len) {\n                resolve(results);\n              }\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        } else if (typeof promise === \"function\") {\n          results[i] = promise();\n        } else {\n          results[i] = promise;\n        }\n      }\n      // 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve\n      if (count === len) {\n        resolve(results);\n      }\n    });\n  };\n```\nall 运行示例\n```js\n  (async function() {\n    const res = MyPromise.all([\n      new MyPromise((resolve) => {\n        resolve(1);\n      }),\n      new MyPromise((resolve) => {\n        resolve(2);\n      }),\n      () => {\n        return 123;\n      },\n      88888,\n    ]);\n    res.then((res) => {\n      console.log(res);\n    });\n  })();\n  运行结果: [1, 2, 123,  88888]\n```\n\n7. race Promise.race(iterable) 传入多个对象,当任何一个执行完成后 resolve 结果\n\n```js\nMyPromise.race = function(iterable) {\n  if (!(iterable instanceof Array)) {\n    return console.log(\"传入参数必须是一个数组\");\n  }\n  return new MyPromise((resolve, reject) => {\n    iterable.forEach((p) => {\n      if (isPromise(p)) {\n        p.then((value) => {\n          resolve(value);\n        }).catch((err) => {\n          reject(err);\n        });\n      } else if (typeof p === \"function\") {\n        resolve(p());\n      } else {\n        resolve(p);\n      }\n    });\n  });\n};\n```\nrace 运行示例\n```js\n  (async function() {\n    const res = MyPromise.race([\n      new MyPromise((resolve) => {\n        resolve(1);\n      }),\n      new MyPromise((resolve) => {\n        resolve(2);\n      }),\n    ]);\n    res.then((res) => {\n      console.log(res);\n    });\n  })();\n  运行结果： 1\n```\n\n完整代码\n```js\n  // status\n  const PROMISE_STATUE_PENDING = \"pending\"; // 进行中\n  const PROMISE_STATUE_FULFILLED = \"fulfilled\"; // 已完成\n  const PROMISE_STATUE_REJECTED = \"rejected\"; // 已拒绝\n\n  class MyPromise {\n    constructor(executer) {\n      this.statue = PROMISE_STATUE_PENDING;\n      this.value = void 0;\n      this.error = void 0;\n      this.resFns = [];\n      this.errFns = [];\n\n      executer(this.resolve, this.reject);\n    }\n    //    创建一个已解决的Promise对象，将给定的值作为其参数。\n    resolve = (value) => {\n      if (this.statue === PROMISE_STATUE_PENDING) {\n        queueMicrotask(() => {\n          if (this.statue !== PROMISE_STATUE_PENDING) return;\n          this.statue = PROMISE_STATUE_FULFILLED;\n          this.value = value;\n          this.resFns?.forEach((fn) => {\n            fn(this.value);\n          });\n        });\n      }\n    };\n    // 创建一个已拒绝的Promise对象，将给定的原因作为其参数。\n    reject = (error) => {\n      if (this.statue === PROMISE_STATUE_PENDING) {\n        queueMicrotask(() => {\n          if (this.statue !== PROMISE_STATUE_PENDING) return;\n          this.statue = PROMISE_STATUE_REJECTED;\n          this.error = error;\n          this.errFns.forEach((en) => {\n            en(this.error);\n          });\n        });\n      }\n    };\n    //   添加对Promise对象解决或拒绝时的处理程序。\n    then(resFn, errFn) {\n      const defaultOnRejected = (err) => {\n        throw err;\n      };\n      errFn = errFn || defaultOnRejected;\n\n      const defaultOnFulFilled = (value) => {\n        return value;\n      };\n      resFn = resFn || defaultOnFulFilled;\n\n      return new MyPromise((resolve, reject) => {\n        if (this.statue === PROMISE_STATUE_FULFILLED && !!resFn) {\n          try {\n            const value = resFn(this.value);\n            resolve(value);\n          } catch (error) {\n            reject(error);\n          }\n        }\n        if (this.statue === PROMISE_STATUE_REJECTED && !!errFn) {\n          try {\n            resolve(value);\n          } catch (error) {\n            reject(error);\n          }\n        }\n        if (this.statue === PROMISE_STATUE_PENDING) {\n          if (!!resFn) {\n            this.resFns.push(() => {\n              try {\n                const value = resFn(this.value);\n                resolve(value);\n              } catch (error) {\n                reject(error);\n              }\n            });\n          }\n\n          if (!!errFn) {\n            this.errFns.push(() => {\n              try {\n                const value = errFn(this.error);\n                resolve(value);\n              } catch (error) {\n                reject(error);\n              }\n            });\n          }\n        }\n      });\n    }\n    // 添加对Promise对象拒绝时的处理程序。\n    catch(errFn) {\n      return this.then(undefined, errFn);\n    }\n    // 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。\n    finally(fn) {\n      setTimeout(() => {\n        fn();\n      }, 0);\n    }\n  }\n\n  const isPromise = function(promise) {\n    return (\n      !!promise &&\n      (typeof promise === \"object\" || typeof promise === \"function\") &&\n      typeof promise.then === \"function\"\n    );\n  };\n\n  /**\n   * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。\n   * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。\n   * @param {any[]} iterable\n   */\n  MyPromise.all = function(iterable) {\n    if (!(iterable instanceof Array)) {\n      return console.log(\"传入参数必须是一个数组\");\n    }\n    return new MyPromise((resolve, reject) => {\n      let len = iterable.length;\n      let count = 0;\n      let results = new Array(len);\n      for (let i = 0; i < len; i++) {\n        let promise = iterable[i];\n        count++;\n        if (isPromise(promise)) {\n          promise\n            .then((res) => {\n              results[i] = res;\n              if (count === len) {\n                resolve(results);\n              }\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        } else if (typeof promise === \"function\") {\n          results[i] = promise();\n        } else {\n          results[i] = promise;\n        }\n      }\n      // 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve\n      if (count === len) {\n        resolve(results);\n      }\n    });\n  };\n\n  MyPromise.race = function(iterable) {\n    if (!(iterable instanceof Array)) {\n      return console.log(\"传入参数必须是一个数组\");\n    }\n    return new MyPromise((resolve, reject) => {\n      iterable.forEach((p) => {\n        if (isPromise(p)) {\n          p.then((value) => {\n            resolve(value);\n          }).catch((err) => {\n            reject(err);\n          });\n        } else if (typeof p === \"function\") {\n          resolve(p());\n        } else {\n          resolve(p);\n        }\n      });\n    });\n  };\n  // const p1 = new MyPromise((resolve, reject) => {\n  //   console.log(\"状态pending\");\n  //   resolve(\"22222\");\n  //   reject(\"3333333\");\n  // });\n\n  // p1.then((res) => {\n  //   console.log(\"res1:\", res);\n  //   return \"第二次的成功回调\";\n  // })\n  //   .catch((error) => {\n  //     console.log(\"err1:\", error);\n  //     throw new Error(\"第二次的失败回调\");\n  //   })\n  //   .finally(() => {\n  //     console.log(\"finally\");\n  //   });\n  // (async function() {\n  //   const res = MyPromise.all([\n  //     new MyPromise((resolve) => {\n  //       resolve(1);\n  //     }),\n  //     new MyPromise((resolve) => {\n  //       resolve(2);\n  //     }),\n  //     () => {\n  //       return 123;\n  //     },\n  //     88888,\n  //   ]);\n  //   res.then((res) => {\n  //     console.log(res);\n  //   });\n  // })();\n\n  // (async function() {\n  //   const res = MyPromise.race([\n  //     new MyPromise((resolve) => {\n  //       resolve(1);\n  //     }),\n  //     new MyPromise((resolve) => {\n  //       resolve(2);\n  //     }),\n  //   ]);\n  //   res.then((res) => {\n  //     console.log(res);\n  //   });\n  // })();\n\n```\n\n##### Promise 的缺点\n\n无法取消 Promise，一旦新建它就会立即执行，无法中途取消。\n\n如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。\n\n当处于 pending 状态时，无法得知目前进展到哪一个阶段(刚刚开始 还是即将完成)。\n\n##### 总结:\n\nPromise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。 一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变， 就凝固了，无法再被改变了。\n\n状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在 异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原 型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的 改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的 末尾执行。\n\n注意:在构造 Promise 的时候，构造函数内部的代码是立即执行的。\n","slug":"javaScript/promise","published":1,"updated":"2023-10-21T13:56:03.979Z","__permalink":"/javascript/promise.html","layout":"post","photos":[],"link":"","_id":"clofw8yd6000rm0uoga8yf0rv","content":"<div id=\"vip-container\"><h5 id=\"Promise-是什么？\"><a href=\"#Promise-是什么？\" class=\"headerlink\" title=\"Promise 是什么？\"></a>Promise 是什么？</h5><p>Promise 是异步编程的一种解决方案，它是一个对象，可以获取异步 操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调， 它比传统的解决方案回调函数和事件更合理和更强大。</p>\n<span id=\"more\"></span>\n<p>所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束 的事件(通常是一个异步操作)的结果。从语法上说，Promise 是一 个对象，从它可以获取异步操作的消息。Promise 提供统一的 API， 各种异步操作都可以用同样的方法进行处理。</p>\n<ol>\n<li>Promise 的实例有三个状态:</li>\n</ol>\n<ul>\n<li><p>Pending(进行中)</p>\n</li>\n<li><p>Resolved(已完成)</p>\n</li>\n<li><p>Rejected(已拒绝)</p>\n</li>\n</ul>\n<p>当把一件事情交给 promise 时，它的状态就是 Pending，任务完成了 状态就变成了 Resolved、没有完成失败了就变成了 Rejected。</p>\n<ol start=\"2\">\n<li><p>Promise 的实例有两个过程:<br> pending -&gt; fulfilled: Resolved(已完成)<br> pending -&gt; rejected: Rejected(已拒绝)</p>\n<p> 注意:一旦从进行状态变成为其他状态就永远不能更改状态了。</p>\n</li>\n</ol>\n<h5 id=\"Promise-的特点\"><a href=\"#Promise-的特点\" class=\"headerlink\" title=\"Promise 的特点\"></a>Promise 的特点</h5><p>对象的状态不受外界影响。promise 对象代表一个异步操作，有三种 状态，pending(进行中)、fulfilled(已成功)、rejected(已失 败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他 操作都无法改变这个状态，这也是 promise 这个名字的由来——“承 诺”;</p>\n<p>一旦状态改变就不会再变，任何时候都可以得到这个结果。promise 对象的状态改变，只有两种可能:从 pending 变为 fulfilled，从 pending 变为 rejected。这时就称为 resolved(已定型)。如果改 变已经发生了，你再对 promise 对象添加回调函数，也会立即得到这 个结果。这与事件(event)完全不同，事件的特点是:如果你错过 了它，再去监听是得不到结果的。</p>\n<h5 id=\"Promise-实现\"><a href=\"#Promise-实现\" class=\"headerlink\" title=\"Promise 实现\"></a>Promise 实现</h5><p>Promise 实现是通过js class编写，主要包括status、value、error、resolve、reject、then、catch、all、race、allSettled、any等组成。</p>\n<ol>\n<li>状态</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span> = <span class=\"string\">&quot;pending&quot;</span>; <span class=\"comment\">// 进行中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> = <span class=\"string\">&quot;fulfilled&quot;</span>; <span class=\"comment\">// 已完成</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> = <span class=\"string\">&quot;rejected&quot;</span>; <span class=\"comment\">// 已拒绝</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>resolve 创建一个已解决的Promise对象，将给定的值作为其参数。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>reject 创建一个已拒绝的Promise对象，将给定的原因作为其参数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>then 添加对Promise对象解决或拒绝时的处理程序</li>\n</ol>\n<ul>\n<li>单个方法调用</li>\n</ul>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">executer</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resFn</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFn</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> resolve = (<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PROMISE_STATUS_FULFILLED</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">//queueMicrotask:  主线程执行完毕之后立马执行</span></span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">resfn</span>(value)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">const</span> reject = (<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PROMISE_STATUS_REJECTED</span></span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">errfn</span>(error)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">   <span class=\"title function_\">executer</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resFn</span> = resFn;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFn</span> = errFn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行结果  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"number\">333333</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;        <span class=\"comment\">//最终打印 1111</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>优化then 方法</li>\n</ul>\n<p>官方给与的then 方法是可以进行数组传值和链式调用的，而目前我们写的是不支持。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span> = [] <span class=\"comment\">//1.多次调用then 时用数组 保存</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span> = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将then 方法修改为 </span></span><br><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resfns</span>.<span class=\"title function_\">push</span>(resFn);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(errFn);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// resolve修改为</span></span><br><span class=\"line\">resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// reject 修改为</span></span><br><span class=\"line\">reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  优化后then的运行结果<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res1:&quot;</span>, res) </span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err1:&quot;</span>, err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 调用then方法多次调用</span></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res2:&quot;</span>, res)</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err2:&quot;</span>, err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>运行结果：res2: 111  因为后面的.then 把前面的覆盖掉了 并不会执行res1 所在的代码块<br>*由此可见 then 方法调用时应该是个数组然后依次调用<br>下面改造我们的代码then,还需要优化执行resolve 时调用reject<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnRejected</span> = (<span class=\"params\">err</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    errFn = errFn || defaultOnRejected;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnFulFilled</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    resFn = resFn || defaultOnFulFilled;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> &amp;&amp; !!resFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> &amp;&amp; !!errFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!resFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!errFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">errFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><br>然后执行：<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"number\">333333</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res1:&quot;</span>, res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err1:&quot;</span>, err);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 调用then方法多次调用</span></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res2:&quot;</span>, res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err2:&quot;</span>, err);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">执行结果：</span><br><span class=\"line\"><span class=\"attr\">res1</span>: <span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"attr\">res2</span>: <span class=\"number\">111</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li><p>catch 添加对Promise对象拒绝时的处理程序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加对Promise对象拒绝时的处理程序。</span></span><br><span class=\"line\"><span class=\"keyword\">catch</span>(errFn) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">undefined</span>, errFn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>finally 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">finally</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>all 接收一个可迭代对象（如数组），并返回一个新的Promise对象。当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过类型判断当前数组中的方法或者对象是否为Promise 对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isPromise = <span class=\"keyword\">function</span>(<span class=\"params\">promise</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    !!promise &amp;&amp;</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> promise.<span class=\"property\">then</span> === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any[]</span>&#125; <span class=\"variable\">iterable</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 实际上多个对象同步执行时，就相当于把所有的方法重新进行Promise一次。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当遍历到最后一个时，resolve 所有结果。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = iterable.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> results = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> promise = iterable[i];</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(promise)) &#123;</span><br><span class=\"line\">        promise</span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            results[i] = res;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        results[i] = <span class=\"title function_\">promise</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        results[i] = promise;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>all 运行示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">88888</span>,</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  res.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">运行结果: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">123</span>,  <span class=\"number\">88888</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>race Promise.race(iterable) 传入多个对象,当任何一个执行完成后 resolve 结果</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    iterable.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(p)) &#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> p === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"title function_\">p</span>());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>race 运行示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">race</span>([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  res.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">运行结果： <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>完整代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// status</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span> = <span class=\"string\">&quot;pending&quot;</span>; <span class=\"comment\">// 进行中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> = <span class=\"string\">&quot;fulfilled&quot;</span>; <span class=\"comment\">// 已完成</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> = <span class=\"string\">&quot;rejected&quot;</span>; <span class=\"comment\">// 已拒绝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executer</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executer</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//    创建一个已解决的Promise对象，将给定的值作为其参数。</span></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个已拒绝的Promise对象，将给定的原因作为其参数。</span></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//   添加对Promise对象解决或拒绝时的处理程序。</span></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnRejected</span> = (<span class=\"params\">err</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    errFn = errFn || defaultOnRejected;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnFulFilled</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    resFn = resFn || defaultOnFulFilled;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> &amp;&amp; !!resFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> &amp;&amp; !!errFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!resFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!errFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">errFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加对Promise对象拒绝时的处理程序。</span></span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(errFn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">undefined</span>, errFn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。</span></span><br><span class=\"line\">  <span class=\"title function_\">finally</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isPromise = <span class=\"keyword\">function</span>(<span class=\"params\">promise</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    !!promise &amp;&amp;</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> promise.<span class=\"property\">then</span> === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any[]</span>&#125; <span class=\"variable\">iterable</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = iterable.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> results = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> promise = iterable[i];</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(promise)) &#123;</span><br><span class=\"line\">        promise</span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            results[i] = res;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        results[i] = <span class=\"title function_\">promise</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        results[i] = promise;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    iterable.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(p)) &#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> p === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"title function_\">p</span>());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// const p1 = new MyPromise((resolve, reject) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(&quot;状态pending&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   resolve(&quot;22222&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   reject(&quot;3333333&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p1.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(&quot;res1:&quot;, res);</span></span><br><span class=\"line\"><span class=\"comment\">//   return &quot;第二次的成功回调&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   .catch((error) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;err1:&quot;, error);</span></span><br><span class=\"line\"><span class=\"comment\">//     throw new Error(&quot;第二次的失败回调&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   .finally(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;finally&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// (async function() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   const res = MyPromise.all([</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(1);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(2);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       return 123;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     88888,</span></span><br><span class=\"line\"><span class=\"comment\">//   ]);</span></span><br><span class=\"line\"><span class=\"comment\">//   res.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (async function() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   const res = MyPromise.race([</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(1);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(2);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//   ]);</span></span><br><span class=\"line\"><span class=\"comment\">//   res.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)();</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Promise-的缺点\"><a href=\"#Promise-的缺点\" class=\"headerlink\" title=\"Promise 的缺点\"></a>Promise 的缺点</h5><p>无法取消 Promise，一旦新建它就会立即执行，无法中途取消。</p>\n<p>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。</p>\n<p>当处于 pending 状态时，无法得知目前进展到哪一个阶段(刚刚开始 还是即将完成)。</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h5><p>Promise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。 一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变， 就凝固了，无法再被改变了。</p>\n<p>状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在 异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原 型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的 改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的 末尾执行。</p>\n<p>注意:在构造 Promise 的时候，构造函数内部的代码是立即执行的。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/javascript/async/await.html"],"length":2558,"excerpt":"<h5 id=\"Promise-是什么？\"><a href=\"#Promise-是什么？\" class=\"headerlink\" title=\"Promise 是什么？\"></a>Promise 是什么？</h5><p>Promise 是异步编程的一种解决方案，它是一个对象，可以获取异步 操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调， 它比传统的解决方案回调函数和事件更合理和更强大。</p>","more":"<p>所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束 的事件(通常是一个异步操作)的结果。从语法上说，Promise 是一 个对象，从它可以获取异步操作的消息。Promise 提供统一的 API， 各种异步操作都可以用同样的方法进行处理。</p>\n<ol>\n<li>Promise 的实例有三个状态:</li>\n</ol>\n<ul>\n<li><p>Pending(进行中)</p>\n</li>\n<li><p>Resolved(已完成)</p>\n</li>\n<li><p>Rejected(已拒绝)</p>\n</li>\n</ul>\n<p>当把一件事情交给 promise 时，它的状态就是 Pending，任务完成了 状态就变成了 Resolved、没有完成失败了就变成了 Rejected。</p>\n<ol start=\"2\">\n<li><p>Promise 的实例有两个过程:<br> pending -&gt; fulfilled: Resolved(已完成)<br> pending -&gt; rejected: Rejected(已拒绝)</p>\n<p> 注意:一旦从进行状态变成为其他状态就永远不能更改状态了。</p>\n</li>\n</ol>\n<h5 id=\"Promise-的特点\"><a href=\"#Promise-的特点\" class=\"headerlink\" title=\"Promise 的特点\"></a>Promise 的特点</h5><p>对象的状态不受外界影响。promise 对象代表一个异步操作，有三种 状态，pending(进行中)、fulfilled(已成功)、rejected(已失 败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他 操作都无法改变这个状态，这也是 promise 这个名字的由来——“承 诺”;</p>\n<p>一旦状态改变就不会再变，任何时候都可以得到这个结果。promise 对象的状态改变，只有两种可能:从 pending 变为 fulfilled，从 pending 变为 rejected。这时就称为 resolved(已定型)。如果改 变已经发生了，你再对 promise 对象添加回调函数，也会立即得到这 个结果。这与事件(event)完全不同，事件的特点是:如果你错过 了它，再去监听是得不到结果的。</p>\n<h5 id=\"Promise-实现\"><a href=\"#Promise-实现\" class=\"headerlink\" title=\"Promise 实现\"></a>Promise 实现</h5><p>Promise 实现是通过js class编写，主要包括status、value、error、resolve、reject、then、catch、all、race、allSettled、any等组成。</p>\n<ol>\n<li>状态</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span> = <span class=\"string\">&quot;pending&quot;</span>; <span class=\"comment\">// 进行中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> = <span class=\"string\">&quot;fulfilled&quot;</span>; <span class=\"comment\">// 已完成</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> = <span class=\"string\">&quot;rejected&quot;</span>; <span class=\"comment\">// 已拒绝</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>resolve 创建一个已解决的Promise对象，将给定的值作为其参数。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>reject 创建一个已拒绝的Promise对象，将给定的原因作为其参数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>then 添加对Promise对象解决或拒绝时的处理程序</li>\n</ol>\n<ul>\n<li>单个方法调用</li>\n</ul>\n   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">executer</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resFn</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFn</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> resolve = (<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PROMISE_STATUS_FULFILLED</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">//queueMicrotask:  主线程执行完毕之后立马执行</span></span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">resfn</span>(value)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">const</span> reject = (<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PROMISE_STATUS_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PROMISE_STATUS_REJECTED</span></span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">errfn</span>(error)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">   <span class=\"title function_\">executer</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resFn</span> = resFn;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFn</span> = errFn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行结果  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"number\">333333</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;        <span class=\"comment\">//最终打印 1111</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>优化then 方法</li>\n</ul>\n<p>官方给与的then 方法是可以进行数组传值和链式调用的，而目前我们写的是不支持。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span> = [] <span class=\"comment\">//1.多次调用then 时用数组 保存</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span> = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将then 方法修改为 </span></span><br><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resfns</span>.<span class=\"title function_\">push</span>(resFn);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(errFn);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// resolve修改为</span></span><br><span class=\"line\">resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// reject 修改为</span></span><br><span class=\"line\">reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  优化后then的运行结果<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res1:&quot;</span>, res) </span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err1:&quot;</span>, err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 调用then方法多次调用</span></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res2:&quot;</span>, res)</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err2:&quot;</span>, err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>运行结果：res2: 111  因为后面的.then 把前面的覆盖掉了 并不会执行res1 所在的代码块<br>*由此可见 then 方法调用时应该是个数组然后依次调用<br>下面改造我们的代码then,还需要优化执行resolve 时调用reject<br>   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnRejected</span> = (<span class=\"params\">err</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    errFn = errFn || defaultOnRejected;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnFulFilled</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    resFn = resFn || defaultOnFulFilled;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> &amp;&amp; !!resFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> &amp;&amp; !!errFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!resFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!errFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">errFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><br>然后执行：<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">111</span>);</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"number\">333333</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res1:&quot;</span>, res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err1:&quot;</span>, err);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 调用then方法多次调用</span></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res2:&quot;</span>, res);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err2:&quot;</span>, err);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">执行结果：</span><br><span class=\"line\"><span class=\"attr\">res1</span>: <span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"attr\">res2</span>: <span class=\"number\">111</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li><p>catch 添加对Promise对象拒绝时的处理程序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加对Promise对象拒绝时的处理程序。</span></span><br><span class=\"line\"><span class=\"keyword\">catch</span>(errFn) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">undefined</span>, errFn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>finally 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">finally</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>all 接收一个可迭代对象（如数组），并返回一个新的Promise对象。当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过类型判断当前数组中的方法或者对象是否为Promise 对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isPromise = <span class=\"keyword\">function</span>(<span class=\"params\">promise</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    !!promise &amp;&amp;</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> promise.<span class=\"property\">then</span> === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any[]</span>&#125; <span class=\"variable\">iterable</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 实际上多个对象同步执行时，就相当于把所有的方法重新进行Promise一次。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当遍历到最后一个时，resolve 所有结果。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = iterable.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> results = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> promise = iterable[i];</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(promise)) &#123;</span><br><span class=\"line\">        promise</span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            results[i] = res;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        results[i] = <span class=\"title function_\">promise</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        results[i] = promise;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>all 运行示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">88888</span>,</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  res.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">运行结果: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">123</span>,  <span class=\"number\">88888</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>race Promise.race(iterable) 传入多个对象,当任何一个执行完成后 resolve 结果</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    iterable.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(p)) &#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> p === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"title function_\">p</span>());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>race 运行示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">race</span>([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  res.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">运行结果： <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>完整代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// status</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span> = <span class=\"string\">&quot;pending&quot;</span>; <span class=\"comment\">// 进行中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> = <span class=\"string\">&quot;fulfilled&quot;</span>; <span class=\"comment\">// 已完成</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> = <span class=\"string\">&quot;rejected&quot;</span>; <span class=\"comment\">// 已拒绝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executer</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">executer</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//    创建一个已解决的Promise对象，将给定的值作为其参数。</span></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个已拒绝的Promise对象，将给定的原因作为其参数。</span></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">queueMicrotask</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> !== <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> = <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">en</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">en</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//   添加对Promise对象解决或拒绝时的处理程序。</span></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">resFn, errFn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnRejected</span> = (<span class=\"params\">err</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    errFn = errFn || defaultOnRejected;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">defaultOnFulFilled</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    resFn = resFn || defaultOnFulFilled;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_FULFILLED</span> &amp;&amp; !!resFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_REJECTED</span> &amp;&amp; !!errFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">statue</span> === <span class=\"variable constant_\">PROMISE_STATUE_PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!resFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">resFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">resFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!errFn) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">errFns</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> value = <span class=\"title function_\">errFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加对Promise对象拒绝时的处理程序。</span></span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(errFn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">undefined</span>, errFn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加对Promise对象解决或拒绝时的最终处理程序，无论Promise对象是否已被解决或拒绝。</span></span><br><span class=\"line\">  <span class=\"title function_\">finally</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isPromise = <span class=\"keyword\">function</span>(<span class=\"params\">promise</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    !!promise &amp;&amp;</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> promise.<span class=\"property\">then</span> === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 接收一个可迭代对象（如数组），并返回一个新的Promise对象。</span></span><br><span class=\"line\"><span class=\"comment\"> * 当所有Promise对象都已解决时，该Promise对象才将被解决，并返回一个包含所有解决值的数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any[]</span>&#125; <span class=\"variable\">iterable</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = iterable.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> results = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> promise = iterable[i];</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(promise)) &#123;</span><br><span class=\"line\">        promise</span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            results[i] = res;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> promise === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        results[i] = <span class=\"title function_\">promise</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        results[i] = promise;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当数据的所有项都不是promise实例，我们就在这判断多一次，然后resolve</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count === len) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">iterable</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(iterable <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;传入参数必须是一个数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    iterable.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isPromise</span>(p)) &#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> p === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"title function_\">p</span>());</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// const p1 = new MyPromise((resolve, reject) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(&quot;状态pending&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   resolve(&quot;22222&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   reject(&quot;3333333&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p1.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(&quot;res1:&quot;, res);</span></span><br><span class=\"line\"><span class=\"comment\">//   return &quot;第二次的成功回调&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   .catch((error) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;err1:&quot;, error);</span></span><br><span class=\"line\"><span class=\"comment\">//     throw new Error(&quot;第二次的失败回调&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   .finally(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;finally&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// (async function() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   const res = MyPromise.all([</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(1);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(2);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       return 123;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     88888,</span></span><br><span class=\"line\"><span class=\"comment\">//   ]);</span></span><br><span class=\"line\"><span class=\"comment\">//   res.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (async function() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   const res = MyPromise.race([</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(1);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//     new MyPromise((resolve) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       resolve(2);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//   ]);</span></span><br><span class=\"line\"><span class=\"comment\">//   res.then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(res);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)();</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Promise-的缺点\"><a href=\"#Promise-的缺点\" class=\"headerlink\" title=\"Promise 的缺点\"></a>Promise 的缺点</h5><p>无法取消 Promise，一旦新建它就会立即执行，无法中途取消。</p>\n<p>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。</p>\n<p>当处于 pending 状态时，无法得知目前进展到哪一个阶段(刚刚开始 还是即将完成)。</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h5><p>Promise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。 一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变， 就凝固了，无法再被改变了。</p>\n<p>状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在 异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原 型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的 改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的 末尾执行。</p>\n<p>注意:在构造 Promise 的时候，构造函数内部的代码是立即执行的。</p>"},{"title":"对原型、原型链的理解","date":"2023-10-23T12:37:51.000Z","description":"JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。","comments":1,"_content":"\n在 JavaScript 中是使用构造两数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造西数的所有实例共享的属性和方法。\n当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造两数的prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在 浏览器中都实现了_proto_ 属性来访问这个属性，但是最好不要 使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法米获取对象的原型。 \n\n当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象义会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 0bject.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。 \n\n特点：JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。\n![原型链图解](https://pic.imgdb.cn/item/65366accc458853aefbfcd92.jpg)\n那么原型链的终点是什么？如何打印出原型链的终点？\n\n由于 Object 是构造函数，原型链终点 Ob ject.prototype._proto_，而 Object.prototype._proto_ === null // true，所以，原型链的终点是 null。原型链上的所有原型都是对象，所有的对象最终都是由 0bject 构造的，而 Object.prototype 的下一级是Object. prototype._proto_。\n\n![在这里插入图片描述](https://pic.imgdb.cn/item/653668e4c458853aefb94875.jpg)\n","source":"_posts/javaScript/prototype.md","raw":"---\ntitle: 对原型、原型链的理解\npermalink: /javascript/prototype.html\ndate: 2023-10-23 20:37:51\ndescription: JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。\ntag: [前端, JavaScript, es6]\ncomments: true\ncategories: \n - 前端\n - es6\n---\n\n在 JavaScript 中是使用构造两数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造西数的所有实例共享的属性和方法。\n当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造两数的prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在 浏览器中都实现了_proto_ 属性来访问这个属性，但是最好不要 使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法米获取对象的原型。 \n\n当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象义会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 0bject.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。 \n\n特点：JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。\n![原型链图解](https://pic.imgdb.cn/item/65366accc458853aefbfcd92.jpg)\n那么原型链的终点是什么？如何打印出原型链的终点？\n\n由于 Object 是构造函数，原型链终点 Ob ject.prototype._proto_，而 Object.prototype._proto_ === null // true，所以，原型链的终点是 null。原型链上的所有原型都是对象，所有的对象最终都是由 0bject 构造的，而 Object.prototype 的下一级是Object. prototype._proto_。\n\n![在这里插入图片描述](https://pic.imgdb.cn/item/653668e4c458853aefb94875.jpg)\n","slug":"javaScript/prototype","published":1,"updated":"2023-10-23T12:45:14.869Z","__permalink":"/javascript/prototype.html","layout":"post","photos":[],"link":"","_id":"clofw8yd8000um0uohne5hywq","content":"<div id=\"vip-container\"><p>在 JavaScript 中是使用构造两数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造西数的所有实例共享的属性和方法。<br>当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造两数的prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在 浏览器中都实现了_proto_ 属性来访问这个属性，但是最好不要 使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法米获取对象的原型。 </p>\n<p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象义会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 0bject.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。 </p>\n<p>特点：JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。<br><img src=\"https://pic.imgdb.cn/item/65366accc458853aefbfcd92.jpg\" alt=\"原型链图解\"><br>那么原型链的终点是什么？如何打印出原型链的终点？</p>\n<p>由于 Object 是构造函数，原型链终点 Ob ject.prototype._proto_，而 Object.prototype.<em>proto</em> &#x3D;&#x3D;&#x3D; null &#x2F;&#x2F; true，所以，原型链的终点是 null。原型链上的所有原型都是对象，所有的对象最终都是由 0bject 构造的，而 Object.prototype 的下一级是Object. prototype._proto_。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653668e4c458853aefb94875.jpg\" alt=\"在这里插入图片描述\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/browser/render/process.html"],"length":500,"excerpt":"","more":"<p>在 JavaScript 中是使用构造两数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造西数的所有实例共享的属性和方法。<br>当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造两数的prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在 浏览器中都实现了_proto_ 属性来访问这个属性，但是最好不要 使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法米获取对象的原型。 </p>\n<p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象义会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 0bject.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。 </p>\n<p>特点：JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。<br><img src=\"https://pic.imgdb.cn/item/65366accc458853aefbfcd92.jpg\" alt=\"原型链图解\"><br>那么原型链的终点是什么？如何打印出原型链的终点？</p>\n<p>由于 Object 是构造函数，原型链终点 Ob ject.prototype._proto_，而 Object.prototype.<em>proto</em> &#x3D;&#x3D;&#x3D; null &#x2F;&#x2F; true，所以，原型链的终点是 null。原型链上的所有原型都是对象，所有的对象最终都是由 0bject 构造的，而 Object.prototype 的下一级是Object. prototype._proto_。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653668e4c458853aefb94875.jpg\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"var、let、const的区别","date":"2023-10-23T12:34:19.000Z","description":"var、let、const三大基础类型使用非常广泛，所以需要切实熟练使用他们，更需要了解他们的所有属性。","comments":1,"_content":"\n##### var 关键词\n1. var声明作用域\nvar定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问\n\n```javascript\nfunction test() {\n    var message = \"hello world\";   // 局部变量\n}\ntest();\nconsole.log(message);  // 报错\n```\n\n函数test()调用时会创建变量message并给它赋值，调用之后变量随即被销毁。因此，在函数test()之外调用变量message会报错\n\n在函数内定义变量时省略var操作符，可以创建一个全局变量\n\n```javascript\nfunction test() {\n    message = \"hello world\";   // 局部变量\n}\ntest();\nconsole.log(message);  // hello world\n```\n\n省略掉var操作符之后，message就变成了全局变量。只要调用一次函数test()，就会定义这个变量，并且可以在函数外部访问到。在局部作用域中定义的全局变量很难维护，不推荐这么做。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出ReferenceError。\n\n2. var声明提升\nvar在js中是支持预解析的，如下代码不会报错。这是因为使用var声明的变量会自动提升到函数作用域顶部：\n\n```javascript\nfunction foo() {\n    console.log(age);\n    var age = 26;\n}\nfoo(); // undefined\n```\n\njavaScript引擎，在代码预编译时，javaScript引擎会自动将所有代码里面的var关键字声明的语句都会提升到当前作用域的顶端,如下代码：\n\n```javascript\nfunction foo() {\n    var age;\n    console.log(age);\n    age = 26;\n}\nfoo(); // undefined\n```\n\n##### let声明\n1. let声明作用域\nlet定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问，而var可以跨块访问\n\n```javascript\n// var定义的变量\nif (true) {\n    var name = 'Matt';\n    console.log(name); // Matt\n}\nconsole.log(name); // Matt\n\n// let定义的变量\nif (true) {\n    let age = 26;\n    console.log(age); // 26\n}\nconsole.log(age); // ReferenceError: age没有定义\n```\n\nlet也不允许同一个块作用域中出现冗余声明（重复声明）\n\n```javascript\nvar name;\nvar name;\n\nlet age;\nlet age; // SyntaxError；标识符age已经声明过了\n```\n\n2. 暂时性死区\nlet、const与var的另一个重要的区别，let、const声明的变量不会在作用域中被提升。ES6新增的let、const关键字声明的变量会产生块级作用域，如果变量在当前作用域中被创建出来，由于此时还未完成语法绑定，所以是不能被访问的，如果访问就会抛出错误ReferenceError。因此，在这运行流程进入作用域创建变量，到变量可以被访问之间的这一段时间，就称之为暂时死区。\n\n```javascript\n// name会被提升\nconsole.log(name); // undefined\nvar name = 'Matt';\n\n// age不会被提升\nconsole.log(age); // ReferenceError：age没有定义\nlet age = 26;\n```\n\n3. 全局声明\n与var关键字不同，var定义的全局变量会挂载到window对象上，使用window可以访问，而let在全局作用域中声明的变量不会成为window对象的属性\n\n```javascript\nvar name = 'Matt';\nconsole.log(window.name); // 'Matt'\n\nlet age = 26;\nconsole.log(window.age); // undefined\n```\n\n4. for循环中的var、let声明\nfor循环中var定义的迭代变量会渗透到循环体外部：\n\n```javascript\nfor (var i = 0; i < 5; ++i) {\n    // 循环逻辑\n}\nconsole.log(i); // 5\n```\n\n改成使用let之后，这个问题就消失了，因为迭代变量的作用域仅限于for循环块内部：\n\n```javascript\nfor (let i = 0; i < 5; ++i) {\n    // 循环逻辑\n}\nconsole.log(i); // ReferenceError: i没有定义\n```\n\n使用var和let定义for循环中的变量，循环里使用定时器setTimeout后循环结果如下代码：\n\n```javascript\nfor (var i = 0; i < 5; ++i) {\n    setTimeout(() => console.log(i), 0)\n}\n// 输出5、5、5、5、5\n\nfor (let i = 0; i < 5; ++i) {\n    setTimeout(() => console.log(i), 0)\n}\n// 输出0、1、2、3、4\n```\n\nlet 是在代码块内有效，var 是在全局范围内有效。let 只能声明一次 ，var 可以声明多次。\n\n当同步代码执行完毕后，开始执行异步的setTimeout代码，执行setTimeout时需要从当前作用域内寻找一个变量 i，for循环执行完毕，当前 i=5，执行setTimeout时输出为5，任务队列中的剩余4个setTimeout也依次执行，输出为5。\n\n变量 j 是用 let 声明的，当前的 i 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出0-4。\n\n##### const声明\nconst的行为与let基本相同，唯一一个重要的区别是：\n\nconst是用来定义常量的，而且定义的时候必须赋值，不赋值会报错，定义之后是不允许被修改的，修改const声明的变量会导致运行时错误。\n\n```javascript\nconst age = 26;\nage = 36; // TypeError: 给常量赋值\n\n// const也不允许重复声明\nconst name = 'Matt';\nconst name = 'Nicholas'; // SyntaxError\n\n// const声明的作用域也是块\nconst name = 'Matt';\nif (true) {\n    const name = 'Nicholas';\n}\nconsole.log(name); // Matt\n```\n\n而const声明的变量是一个对象时，修改这个对象内部的属性并不会报错。\n\n这是因为const声明的是栈区里的内容不能修改，基本数据类型的值直接在栈内存中存储，而引用数据类型在栈区保存的是对象在堆区的地址，修改对象的属性，不会修改对象在栈区的地址，如果重新给对象person赋值，则会报错。\n\n```javascript\nconst person = {\n    name: 'Lili'\n};\nperson.name = 'Matt'; // ok\n```\n\nJavaScript引擎会为for循环中的let声明分别创建独立的变量实例，虽然const变量跟let变量很相似，但是不能用const来声明迭代变量（因为迭代变量会自增）：\n\n```javascript\nfor (const i = 0; i < 10; ++i) {} // TypeError：给常量赋值\n```\n\n不过，如果你只想用const声明一个不会被修改的for循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对for-of和for-in循环特别有意义：\n\n\n```javascript\nlet i = 0;\nfor (const j = 7; i < 5; ++i) {\n    console.log(j);\n}\n// 7, 7, 7, 7, 7\nfor (const key in {a: 1, b: 2}) {\n    console.log(key);\n}\n// a, b\nfor (const value of [1,2,3,4,5]) {\n    console.log(value);\n}\n// 1, 2, 3, 4, 5\n```\n","source":"_posts/javaScript/varLetConst.md","raw":"---\ntitle: var、let、const的区别\npermalink: /javascript/var/let/const.html\ndate: 2023-10-23 20:34:19\ndescription: var、let、const三大基础类型使用非常广泛，所以需要切实熟练使用他们，更需要了解他们的所有属性。\ntag: [前端, JavaScript, es6]\ncomments: true\ncategories: \n - 前端\n - es6\n---\n\n##### var 关键词\n1. var声明作用域\nvar定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问\n\n```javascript\nfunction test() {\n    var message = \"hello world\";   // 局部变量\n}\ntest();\nconsole.log(message);  // 报错\n```\n\n函数test()调用时会创建变量message并给它赋值，调用之后变量随即被销毁。因此，在函数test()之外调用变量message会报错\n\n在函数内定义变量时省略var操作符，可以创建一个全局变量\n\n```javascript\nfunction test() {\n    message = \"hello world\";   // 局部变量\n}\ntest();\nconsole.log(message);  // hello world\n```\n\n省略掉var操作符之后，message就变成了全局变量。只要调用一次函数test()，就会定义这个变量，并且可以在函数外部访问到。在局部作用域中定义的全局变量很难维护，不推荐这么做。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出ReferenceError。\n\n2. var声明提升\nvar在js中是支持预解析的，如下代码不会报错。这是因为使用var声明的变量会自动提升到函数作用域顶部：\n\n```javascript\nfunction foo() {\n    console.log(age);\n    var age = 26;\n}\nfoo(); // undefined\n```\n\njavaScript引擎，在代码预编译时，javaScript引擎会自动将所有代码里面的var关键字声明的语句都会提升到当前作用域的顶端,如下代码：\n\n```javascript\nfunction foo() {\n    var age;\n    console.log(age);\n    age = 26;\n}\nfoo(); // undefined\n```\n\n##### let声明\n1. let声明作用域\nlet定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问，而var可以跨块访问\n\n```javascript\n// var定义的变量\nif (true) {\n    var name = 'Matt';\n    console.log(name); // Matt\n}\nconsole.log(name); // Matt\n\n// let定义的变量\nif (true) {\n    let age = 26;\n    console.log(age); // 26\n}\nconsole.log(age); // ReferenceError: age没有定义\n```\n\nlet也不允许同一个块作用域中出现冗余声明（重复声明）\n\n```javascript\nvar name;\nvar name;\n\nlet age;\nlet age; // SyntaxError；标识符age已经声明过了\n```\n\n2. 暂时性死区\nlet、const与var的另一个重要的区别，let、const声明的变量不会在作用域中被提升。ES6新增的let、const关键字声明的变量会产生块级作用域，如果变量在当前作用域中被创建出来，由于此时还未完成语法绑定，所以是不能被访问的，如果访问就会抛出错误ReferenceError。因此，在这运行流程进入作用域创建变量，到变量可以被访问之间的这一段时间，就称之为暂时死区。\n\n```javascript\n// name会被提升\nconsole.log(name); // undefined\nvar name = 'Matt';\n\n// age不会被提升\nconsole.log(age); // ReferenceError：age没有定义\nlet age = 26;\n```\n\n3. 全局声明\n与var关键字不同，var定义的全局变量会挂载到window对象上，使用window可以访问，而let在全局作用域中声明的变量不会成为window对象的属性\n\n```javascript\nvar name = 'Matt';\nconsole.log(window.name); // 'Matt'\n\nlet age = 26;\nconsole.log(window.age); // undefined\n```\n\n4. for循环中的var、let声明\nfor循环中var定义的迭代变量会渗透到循环体外部：\n\n```javascript\nfor (var i = 0; i < 5; ++i) {\n    // 循环逻辑\n}\nconsole.log(i); // 5\n```\n\n改成使用let之后，这个问题就消失了，因为迭代变量的作用域仅限于for循环块内部：\n\n```javascript\nfor (let i = 0; i < 5; ++i) {\n    // 循环逻辑\n}\nconsole.log(i); // ReferenceError: i没有定义\n```\n\n使用var和let定义for循环中的变量，循环里使用定时器setTimeout后循环结果如下代码：\n\n```javascript\nfor (var i = 0; i < 5; ++i) {\n    setTimeout(() => console.log(i), 0)\n}\n// 输出5、5、5、5、5\n\nfor (let i = 0; i < 5; ++i) {\n    setTimeout(() => console.log(i), 0)\n}\n// 输出0、1、2、3、4\n```\n\nlet 是在代码块内有效，var 是在全局范围内有效。let 只能声明一次 ，var 可以声明多次。\n\n当同步代码执行完毕后，开始执行异步的setTimeout代码，执行setTimeout时需要从当前作用域内寻找一个变量 i，for循环执行完毕，当前 i=5，执行setTimeout时输出为5，任务队列中的剩余4个setTimeout也依次执行，输出为5。\n\n变量 j 是用 let 声明的，当前的 i 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出0-4。\n\n##### const声明\nconst的行为与let基本相同，唯一一个重要的区别是：\n\nconst是用来定义常量的，而且定义的时候必须赋值，不赋值会报错，定义之后是不允许被修改的，修改const声明的变量会导致运行时错误。\n\n```javascript\nconst age = 26;\nage = 36; // TypeError: 给常量赋值\n\n// const也不允许重复声明\nconst name = 'Matt';\nconst name = 'Nicholas'; // SyntaxError\n\n// const声明的作用域也是块\nconst name = 'Matt';\nif (true) {\n    const name = 'Nicholas';\n}\nconsole.log(name); // Matt\n```\n\n而const声明的变量是一个对象时，修改这个对象内部的属性并不会报错。\n\n这是因为const声明的是栈区里的内容不能修改，基本数据类型的值直接在栈内存中存储，而引用数据类型在栈区保存的是对象在堆区的地址，修改对象的属性，不会修改对象在栈区的地址，如果重新给对象person赋值，则会报错。\n\n```javascript\nconst person = {\n    name: 'Lili'\n};\nperson.name = 'Matt'; // ok\n```\n\nJavaScript引擎会为for循环中的let声明分别创建独立的变量实例，虽然const变量跟let变量很相似，但是不能用const来声明迭代变量（因为迭代变量会自增）：\n\n```javascript\nfor (const i = 0; i < 10; ++i) {} // TypeError：给常量赋值\n```\n\n不过，如果你只想用const声明一个不会被修改的for循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对for-of和for-in循环特别有意义：\n\n\n```javascript\nlet i = 0;\nfor (const j = 7; i < 5; ++i) {\n    console.log(j);\n}\n// 7, 7, 7, 7, 7\nfor (const key in {a: 1, b: 2}) {\n    console.log(key);\n}\n// a, b\nfor (const value of [1,2,3,4,5]) {\n    console.log(value);\n}\n// 1, 2, 3, 4, 5\n```\n","slug":"javaScript/varLetConst","published":1,"updated":"2023-10-23T12:35:56.937Z","__permalink":"/javascript/var/let/const.html","layout":"post","photos":[],"link":"","_id":"clofw8yd9000vm0uo12snhg61","content":"<div id=\"vip-container\"><h5 id=\"var-关键词\"><a href=\"#var-关键词\" class=\"headerlink\" title=\"var 关键词\"></a>var 关键词</h5><ol>\n<li>var声明作用域<br>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = <span class=\"string\">&quot;hello world&quot;</span>;   <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message);  <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p>函数test()调用时会创建变量message并给它赋值，调用之后变量随即被销毁。因此，在函数test()之外调用变量message会报错</p>\n<p>在函数内定义变量时省略var操作符，可以创建一个全局变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    message = <span class=\"string\">&quot;hello world&quot;</span>;   <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message);  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n<p>省略掉var操作符之后，message就变成了全局变量。只要调用一次函数test()，就会定义这个变量，并且可以在函数外部访问到。在局部作用域中定义的全局变量很难维护，不推荐这么做。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出ReferenceError。</p>\n<ol start=\"2\">\n<li>var声明提升<br>var在js中是支持预解析的，如下代码不会报错。这是因为使用var声明的变量会自动提升到函数作用域顶部：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>javaScript引擎，在代码预编译时，javaScript引擎会自动将所有代码里面的var关键字声明的语句都会提升到当前作用域的顶端,如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">    age = <span class=\"number\">26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"let声明\"><a href=\"#let声明\" class=\"headerlink\" title=\"let声明\"></a>let声明</h5><ol>\n<li>let声明作用域<br>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问，而var可以跨块访问</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var定义的变量</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let定义的变量</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// 26</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// ReferenceError: age没有定义</span></span><br></pre></td></tr></table></figure>\n\n<p>let也不允许同一个块作用域中出现冗余声明（重复声明）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age; <span class=\"comment\">// SyntaxError；标识符age已经声明过了</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>暂时性死区<br>let、const与var的另一个重要的区别，let、const声明的变量不会在作用域中被提升。ES6新增的let、const关键字声明的变量会产生块级作用域，如果变量在当前作用域中被创建出来，由于此时还未完成语法绑定，所以是不能被访问的，如果访问就会抛出错误ReferenceError。因此，在这运行流程进入作用域创建变量，到变量可以被访问之间的这一段时间，就称之为暂时死区。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// name会被提升</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// age不会被提升</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// ReferenceError：age没有定义</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>全局声明<br>与var关键字不同，var定义的全局变量会挂载到window对象上，使用window可以访问，而let在全局作用域中声明的变量不会成为window对象的属性</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">name</span>); <span class=\"comment\">// &#x27;Matt&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">age</span>); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>for循环中的var、let声明<br>for循环中var定义的迭代变量会渗透到循环体外部：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>改成使用let之后，这个问题就消失了，因为迭代变量的作用域仅限于for循环块内部：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// ReferenceError: i没有定义</span></span><br></pre></td></tr></table></figure>\n\n<p>使用var和let定义for循环中的变量，循环里使用定时器setTimeout后循环结果如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出5、5、5、5、5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出0、1、2、3、4</span></span><br></pre></td></tr></table></figure>\n\n<p>let 是在代码块内有效，var 是在全局范围内有效。let 只能声明一次 ，var 可以声明多次。</p>\n<p>当同步代码执行完毕后，开始执行异步的setTimeout代码，执行setTimeout时需要从当前作用域内寻找一个变量 i，for循环执行完毕，当前 i&#x3D;5，执行setTimeout时输出为5，任务队列中的剩余4个setTimeout也依次执行，输出为5。</p>\n<p>变量 j 是用 let 声明的，当前的 i 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出0-4。</p>\n<h5 id=\"const声明\"><a href=\"#const声明\" class=\"headerlink\" title=\"const声明\"></a>const声明</h5><p>const的行为与let基本相同，唯一一个重要的区别是：</p>\n<p>const是用来定义常量的，而且定义的时候必须赋值，不赋值会报错，定义之后是不允许被修改的，修改const声明的变量会导致运行时错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">age = <span class=\"number\">36</span>; <span class=\"comment\">// TypeError: 给常量赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const也不允许重复声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Nicholas&#x27;</span>; <span class=\"comment\">// SyntaxError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const声明的作用域也是块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Nicholas&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br></pre></td></tr></table></figure>\n\n<p>而const声明的变量是一个对象时，修改这个对象内部的属性并不会报错。</p>\n<p>这是因为const声明的是栈区里的内容不能修改，基本数据类型的值直接在栈内存中存储，而引用数据类型在栈区保存的是对象在堆区的地址，修改对象的属性，不会修改对象在栈区的地址，如果重新给对象person赋值，则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Lili&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Matt&#x27;</span>; <span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript引擎会为for循环中的let声明分别创建独立的变量实例，虽然const变量跟let变量很相似，但是不能用const来声明迭代变量（因为迭代变量会自增）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;&#125; <span class=\"comment\">// TypeError：给常量赋值</span></span><br></pre></td></tr></table></figure>\n\n<p>不过，如果你只想用const声明一个不会被修改的for循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对for-of和for-in循环特别有意义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> j = <span class=\"number\">7</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 7, 7, 7, 7, 7</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a, b</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":1506,"excerpt":"","more":"<h5 id=\"var-关键词\"><a href=\"#var-关键词\" class=\"headerlink\" title=\"var 关键词\"></a>var 关键词</h5><ol>\n<li>var声明作用域<br>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = <span class=\"string\">&quot;hello world&quot;</span>;   <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message);  <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p>函数test()调用时会创建变量message并给它赋值，调用之后变量随即被销毁。因此，在函数test()之外调用变量message会报错</p>\n<p>在函数内定义变量时省略var操作符，可以创建一个全局变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    message = <span class=\"string\">&quot;hello world&quot;</span>;   <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message);  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n<p>省略掉var操作符之后，message就变成了全局变量。只要调用一次函数test()，就会定义这个变量，并且可以在函数外部访问到。在局部作用域中定义的全局变量很难维护，不推荐这么做。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出ReferenceError。</p>\n<ol start=\"2\">\n<li>var声明提升<br>var在js中是支持预解析的，如下代码不会报错。这是因为使用var声明的变量会自动提升到函数作用域顶部：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>javaScript引擎，在代码预编译时，javaScript引擎会自动将所有代码里面的var关键字声明的语句都会提升到当前作用域的顶端,如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">    age = <span class=\"number\">26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"let声明\"><a href=\"#let声明\" class=\"headerlink\" title=\"let声明\"></a>let声明</h5><ol>\n<li>let声明作用域<br>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问，而var可以跨块访问</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var定义的变量</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let定义的变量</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// 26</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// ReferenceError: age没有定义</span></span><br></pre></td></tr></table></figure>\n\n<p>let也不允许同一个块作用域中出现冗余声明（重复声明）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age; <span class=\"comment\">// SyntaxError；标识符age已经声明过了</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>暂时性死区<br>let、const与var的另一个重要的区别，let、const声明的变量不会在作用域中被提升。ES6新增的let、const关键字声明的变量会产生块级作用域，如果变量在当前作用域中被创建出来，由于此时还未完成语法绑定，所以是不能被访问的，如果访问就会抛出错误ReferenceError。因此，在这运行流程进入作用域创建变量，到变量可以被访问之间的这一段时间，就称之为暂时死区。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// name会被提升</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// age不会被提升</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// ReferenceError：age没有定义</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>全局声明<br>与var关键字不同，var定义的全局变量会挂载到window对象上，使用window可以访问，而let在全局作用域中声明的变量不会成为window对象的属性</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">name</span>); <span class=\"comment\">// &#x27;Matt&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">age</span>); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>for循环中的var、let声明<br>for循环中var定义的迭代变量会渗透到循环体外部：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>改成使用let之后，这个问题就消失了，因为迭代变量的作用域仅限于for循环块内部：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// ReferenceError: i没有定义</span></span><br></pre></td></tr></table></figure>\n\n<p>使用var和let定义for循环中的变量，循环里使用定时器setTimeout后循环结果如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出5、5、5、5、5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出0、1、2、3、4</span></span><br></pre></td></tr></table></figure>\n\n<p>let 是在代码块内有效，var 是在全局范围内有效。let 只能声明一次 ，var 可以声明多次。</p>\n<p>当同步代码执行完毕后，开始执行异步的setTimeout代码，执行setTimeout时需要从当前作用域内寻找一个变量 i，for循环执行完毕，当前 i&#x3D;5，执行setTimeout时输出为5，任务队列中的剩余4个setTimeout也依次执行，输出为5。</p>\n<p>变量 j 是用 let 声明的，当前的 i 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出0-4。</p>\n<h5 id=\"const声明\"><a href=\"#const声明\" class=\"headerlink\" title=\"const声明\"></a>const声明</h5><p>const的行为与let基本相同，唯一一个重要的区别是：</p>\n<p>const是用来定义常量的，而且定义的时候必须赋值，不赋值会报错，定义之后是不允许被修改的，修改const声明的变量会导致运行时错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">26</span>;</span><br><span class=\"line\">age = <span class=\"number\">36</span>; <span class=\"comment\">// TypeError: 给常量赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const也不允许重复声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Nicholas&#x27;</span>; <span class=\"comment\">// SyntaxError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const声明的作用域也是块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Nicholas&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// Matt</span></span><br></pre></td></tr></table></figure>\n\n<p>而const声明的变量是一个对象时，修改这个对象内部的属性并不会报错。</p>\n<p>这是因为const声明的是栈区里的内容不能修改，基本数据类型的值直接在栈内存中存储，而引用数据类型在栈区保存的是对象在堆区的地址，修改对象的属性，不会修改对象在栈区的地址，如果重新给对象person赋值，则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Lili&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Matt&#x27;</span>; <span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript引擎会为for循环中的let声明分别创建独立的变量实例，虽然const变量跟let变量很相似，但是不能用const来声明迭代变量（因为迭代变量会自增）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;&#125; <span class=\"comment\">// TypeError：给常量赋值</span></span><br></pre></td></tr></table></figure>\n\n<p>不过，如果你只想用const声明一个不会被修改的for循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对for-of和for-in循环特别有意义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> j = <span class=\"number\">7</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 7, 7, 7, 7, 7</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a, b</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Fiber 架构的起源","date":"2023-10-19T12:12:08.000Z","description":"Fiber 架构的引入使得 React 在渲染过程中可以更加灵活地响应用户交互，提供更好的用户体验。","comments":1,"_content":"\n# Fiber 架构的起源\nFiber 架构的起源可以追溯到 React 团队在 2017 年提出的一项重大改进计划。在过去的 React 版本中，渲染过程是基于递归的，即组件树的遍历是通过递归函数来完成的。这种方式在大规模复杂应用中可能会引发一些性能问题，例如长时间的主线程阻塞，导致用户体验下降。\n<!-- more -->\n为了解决这些性能问题，React 团队开始着手设计一种新的渲染架构，即 Fiber 架构。Fiber 架构的目标是使 React 的渲染过程可中断和恢复，从而实现更好的任务调度、优先级管理和增量更新。\n\nFiber 这个名字来源于计算机科学中的 \"Fiber\"（纤程）概念，指的是一种轻量级的执行单元，可以在多个任务之间切换，并且可以中断和恢复执行。React 中的 Fiber 也是类似的概念，表示渲染过程中的任务单元，可以根据任务的优先级和时间片进行灵活的调度和中断。\n\n通过 Fiber 架构，React 实现了一个基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。同时，React 还引入了优先级调度算法，通过动态调整任务的优先级，可以根据不同任务的重要性和紧急程度来合理地分配渲染资源。\n\nFiber 架构的引入使得 React 在渲染过程中可以更加灵活地响应用户交互，提供更好的用户体验。它为 React 提供了更强大的渲染能力，能够支持更复杂、更大规模的应用程序。\n\n值得一提的是，Fiber 架构的设计和实现是一个非常复杂的过程，并且在不同版本的 React 中可能会有一些细节上的差异。React 团队在不断地改进和优化 Fiber 架构，以进一步提升 React 应用的性能和可靠性。\n\n# Fiber的含义\n> 总的来说，Fiber 是 React 中的一种渲染架构和调度算法，通过将渲染过程划分为可中断和恢复的任务单元，实现了增量更新和优先级调度。Fiber 架构的引入使得 React 能够更加高效地处理渲染任务，提供更好的用户体验和更高的性能。\n\nFiber 是 React 中的一个概念，它有多个含义和作用：\n\n- 渲染任务单元：在 React 中，Fiber 表示渲染过程中的任务单元。传统的递归渲染方式可能会导致长时间的主线程阻塞，影响用户体验。而 Fiber 架构将渲染过程划分为一系列小的任务单元（Fiber 节点），可以根据任务的优先级和时间片进行灵活的调度和中断，实现增量更新和任务的并发处理。\n\n- 调度和优先级管理：Fiber 架构引入了一套调度算法，用于根据任务的优先级和时间片来动态调整任务的执行顺序。通过优先级调度，React 可以根据任务的重要性和紧急程度合理地分配渲染资源，从而提供更好的用户体验。优先级调度还使得 React 可以在不同任务之间进行中断和恢复，避免了长时间的阻塞。\n\n- 组件结构表示：Fiber 架构引入了基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。每个 Fiber 节点表示一个组件或 DOM 元素，并通过 child、sibling 和 return 等属性建立起节点之间的关联。通过 Fiber 树的结构，React 可以更加高效地遍历和更新组件树，实现增量渲染。\n\n- 增量更新：Fiber 架构支持增量更新，即仅更新发生变化的部分，而不需要重新渲染整个组件树。通过对比 Fiber 树的两个状态，React 可以确定哪些组件需要更新，并且可以跳过不需要更新的部分，从而提高渲染性能。\n\n![react 中一帧的过程](https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg)\n","source":"_posts/react/fiber.md","raw":"---\ntitle: Fiber 架构的起源\npermalink: /react/fiber.html\ndate: 2023-10-19 20:12:08\ndescription: Fiber 架构的引入使得 React 在渲染过程中可以更加灵活地响应用户交互，提供更好的用户体验。\ntag: [前端, react, JavaScript, Fiber]\ncomments: true\ncategories: \n - React\n - Fiber\n---\n\n# Fiber 架构的起源\nFiber 架构的起源可以追溯到 React 团队在 2017 年提出的一项重大改进计划。在过去的 React 版本中，渲染过程是基于递归的，即组件树的遍历是通过递归函数来完成的。这种方式在大规模复杂应用中可能会引发一些性能问题，例如长时间的主线程阻塞，导致用户体验下降。\n<!-- more -->\n为了解决这些性能问题，React 团队开始着手设计一种新的渲染架构，即 Fiber 架构。Fiber 架构的目标是使 React 的渲染过程可中断和恢复，从而实现更好的任务调度、优先级管理和增量更新。\n\nFiber 这个名字来源于计算机科学中的 \"Fiber\"（纤程）概念，指的是一种轻量级的执行单元，可以在多个任务之间切换，并且可以中断和恢复执行。React 中的 Fiber 也是类似的概念，表示渲染过程中的任务单元，可以根据任务的优先级和时间片进行灵活的调度和中断。\n\n通过 Fiber 架构，React 实现了一个基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。同时，React 还引入了优先级调度算法，通过动态调整任务的优先级，可以根据不同任务的重要性和紧急程度来合理地分配渲染资源。\n\nFiber 架构的引入使得 React 在渲染过程中可以更加灵活地响应用户交互，提供更好的用户体验。它为 React 提供了更强大的渲染能力，能够支持更复杂、更大规模的应用程序。\n\n值得一提的是，Fiber 架构的设计和实现是一个非常复杂的过程，并且在不同版本的 React 中可能会有一些细节上的差异。React 团队在不断地改进和优化 Fiber 架构，以进一步提升 React 应用的性能和可靠性。\n\n# Fiber的含义\n> 总的来说，Fiber 是 React 中的一种渲染架构和调度算法，通过将渲染过程划分为可中断和恢复的任务单元，实现了增量更新和优先级调度。Fiber 架构的引入使得 React 能够更加高效地处理渲染任务，提供更好的用户体验和更高的性能。\n\nFiber 是 React 中的一个概念，它有多个含义和作用：\n\n- 渲染任务单元：在 React 中，Fiber 表示渲染过程中的任务单元。传统的递归渲染方式可能会导致长时间的主线程阻塞，影响用户体验。而 Fiber 架构将渲染过程划分为一系列小的任务单元（Fiber 节点），可以根据任务的优先级和时间片进行灵活的调度和中断，实现增量更新和任务的并发处理。\n\n- 调度和优先级管理：Fiber 架构引入了一套调度算法，用于根据任务的优先级和时间片来动态调整任务的执行顺序。通过优先级调度，React 可以根据任务的重要性和紧急程度合理地分配渲染资源，从而提供更好的用户体验。优先级调度还使得 React 可以在不同任务之间进行中断和恢复，避免了长时间的阻塞。\n\n- 组件结构表示：Fiber 架构引入了基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。每个 Fiber 节点表示一个组件或 DOM 元素，并通过 child、sibling 和 return 等属性建立起节点之间的关联。通过 Fiber 树的结构，React 可以更加高效地遍历和更新组件树，实现增量渲染。\n\n- 增量更新：Fiber 架构支持增量更新，即仅更新发生变化的部分，而不需要重新渲染整个组件树。通过对比 Fiber 树的两个状态，React 可以确定哪些组件需要更新，并且可以跳过不需要更新的部分，从而提高渲染性能。\n\n![react 中一帧的过程](https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg)\n","slug":"react/fiber","published":1,"updated":"2023-10-27T13:18:10.710Z","__permalink":"/react/fiber.html","layout":"post","photos":[],"link":"","_id":"clofw8ydb000zm0uo4d378sa8","content":"<div id=\"vip-container\"><h1 id=\"Fiber-架构的起源\"><a href=\"#Fiber-架构的起源\" class=\"headerlink\" title=\"Fiber 架构的起源\"></a>Fiber 架构的起源</h1><p>Fiber 架构的起源可以追溯到 React 团队在 2017 年提出的一项重大改进计划。在过去的 React 版本中，渲染过程是基于递归的，即组件树的遍历是通过递归函数来完成的。这种方式在大规模复杂应用中可能会引发一些性能问题，例如长时间的主线程阻塞，导致用户体验下降。</p>\n<span id=\"more\"></span>\n<p>为了解决这些性能问题，React 团队开始着手设计一种新的渲染架构，即 Fiber 架构。Fiber 架构的目标是使 React 的渲染过程可中断和恢复，从而实现更好的任务调度、优先级管理和增量更新。</p>\n<p>Fiber 这个名字来源于计算机科学中的 “Fiber”（纤程）概念，指的是一种轻量级的执行单元，可以在多个任务之间切换，并且可以中断和恢复执行。React 中的 Fiber 也是类似的概念，表示渲染过程中的任务单元，可以根据任务的优先级和时间片进行灵活的调度和中断。</p>\n<p>通过 Fiber 架构，React 实现了一个基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。同时，React 还引入了优先级调度算法，通过动态调整任务的优先级，可以根据不同任务的重要性和紧急程度来合理地分配渲染资源。</p>\n<p>Fiber 架构的引入使得 React 在渲染过程中可以更加灵活地响应用户交互，提供更好的用户体验。它为 React 提供了更强大的渲染能力，能够支持更复杂、更大规模的应用程序。</p>\n<p>值得一提的是，Fiber 架构的设计和实现是一个非常复杂的过程，并且在不同版本的 React 中可能会有一些细节上的差异。React 团队在不断地改进和优化 Fiber 架构，以进一步提升 React 应用的性能和可靠性。</p>\n<h1 id=\"Fiber的含义\"><a href=\"#Fiber的含义\" class=\"headerlink\" title=\"Fiber的含义\"></a>Fiber的含义</h1><blockquote>\n<p>总的来说，Fiber 是 React 中的一种渲染架构和调度算法，通过将渲染过程划分为可中断和恢复的任务单元，实现了增量更新和优先级调度。Fiber 架构的引入使得 React 能够更加高效地处理渲染任务，提供更好的用户体验和更高的性能。</p>\n</blockquote>\n<p>Fiber 是 React 中的一个概念，它有多个含义和作用：</p>\n<ul>\n<li><p>渲染任务单元：在 React 中，Fiber 表示渲染过程中的任务单元。传统的递归渲染方式可能会导致长时间的主线程阻塞，影响用户体验。而 Fiber 架构将渲染过程划分为一系列小的任务单元（Fiber 节点），可以根据任务的优先级和时间片进行灵活的调度和中断，实现增量更新和任务的并发处理。</p>\n</li>\n<li><p>调度和优先级管理：Fiber 架构引入了一套调度算法，用于根据任务的优先级和时间片来动态调整任务的执行顺序。通过优先级调度，React 可以根据任务的重要性和紧急程度合理地分配渲染资源，从而提供更好的用户体验。优先级调度还使得 React 可以在不同任务之间进行中断和恢复，避免了长时间的阻塞。</p>\n</li>\n<li><p>组件结构表示：Fiber 架构引入了基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。每个 Fiber 节点表示一个组件或 DOM 元素，并通过 child、sibling 和 return 等属性建立起节点之间的关联。通过 Fiber 树的结构，React 可以更加高效地遍历和更新组件树，实现增量渲染。</p>\n</li>\n<li><p>增量更新：Fiber 架构支持增量更新，即仅更新发生变化的部分，而不需要重新渲染整个组件树。通过对比 Fiber 树的两个状态，React 可以确定哪些组件需要更新，并且可以跳过不需要更新的部分，从而提高渲染性能。</p>\n</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg\" alt=\"react 中一帧的过程\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/fiber/implement.html","/react/implement.html","/react/synthetic/event.html","/react/fiber/works.html","/react/fiber/node.html"],"length":1062,"excerpt":"<h1 id=\"Fiber-架构的起源\"><a href=\"#Fiber-架构的起源\" class=\"headerlink\" title=\"Fiber 架构的起源\"></a>Fiber 架构的起源</h1><p>Fiber 架构的起源可以追溯到 React 团队在 2017 年提出的一项重大改进计划。在过去的 React 版本中，渲染过程是基于递归的，即组件树的遍历是通过递归函数来完成的。这种方式在大规模复杂应用中可能会引发一些性能问题，例如长时间的主线程阻塞，导致用户体验下降。</p>","more":"<p>为了解决这些性能问题，React 团队开始着手设计一种新的渲染架构，即 Fiber 架构。Fiber 架构的目标是使 React 的渲染过程可中断和恢复，从而实现更好的任务调度、优先级管理和增量更新。</p>\n<p>Fiber 这个名字来源于计算机科学中的 “Fiber”（纤程）概念，指的是一种轻量级的执行单元，可以在多个任务之间切换，并且可以中断和恢复执行。React 中的 Fiber 也是类似的概念，表示渲染过程中的任务单元，可以根据任务的优先级和时间片进行灵活的调度和中断。</p>\n<p>通过 Fiber 架构，React 实现了一个基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。同时，React 还引入了优先级调度算法，通过动态调整任务的优先级，可以根据不同任务的重要性和紧急程度来合理地分配渲染资源。</p>\n<p>Fiber 架构的引入使得 React 在渲染过程中可以更加灵活地响应用户交互，提供更好的用户体验。它为 React 提供了更强大的渲染能力，能够支持更复杂、更大规模的应用程序。</p>\n<p>值得一提的是，Fiber 架构的设计和实现是一个非常复杂的过程，并且在不同版本的 React 中可能会有一些细节上的差异。React 团队在不断地改进和优化 Fiber 架构，以进一步提升 React 应用的性能和可靠性。</p>\n<h1 id=\"Fiber的含义\"><a href=\"#Fiber的含义\" class=\"headerlink\" title=\"Fiber的含义\"></a>Fiber的含义</h1><blockquote>\n<p>总的来说，Fiber 是 React 中的一种渲染架构和调度算法，通过将渲染过程划分为可中断和恢复的任务单元，实现了增量更新和优先级调度。Fiber 架构的引入使得 React 能够更加高效地处理渲染任务，提供更好的用户体验和更高的性能。</p>\n</blockquote>\n<p>Fiber 是 React 中的一个概念，它有多个含义和作用：</p>\n<ul>\n<li><p>渲染任务单元：在 React 中，Fiber 表示渲染过程中的任务单元。传统的递归渲染方式可能会导致长时间的主线程阻塞，影响用户体验。而 Fiber 架构将渲染过程划分为一系列小的任务单元（Fiber 节点），可以根据任务的优先级和时间片进行灵活的调度和中断，实现增量更新和任务的并发处理。</p>\n</li>\n<li><p>调度和优先级管理：Fiber 架构引入了一套调度算法，用于根据任务的优先级和时间片来动态调整任务的执行顺序。通过优先级调度，React 可以根据任务的重要性和紧急程度合理地分配渲染资源，从而提供更好的用户体验。优先级调度还使得 React 可以在不同任务之间进行中断和恢复，避免了长时间的阻塞。</p>\n</li>\n<li><p>组件结构表示：Fiber 架构引入了基于链表结构的 Fiber 树，用于表示组件的层级关系和渲染顺序。每个 Fiber 节点表示一个组件或 DOM 元素，并通过 child、sibling 和 return 等属性建立起节点之间的关联。通过 Fiber 树的结构，React 可以更加高效地遍历和更新组件树，实现增量渲染。</p>\n</li>\n<li><p>增量更新：Fiber 架构支持增量更新，即仅更新发生变化的部分，而不需要重新渲染整个组件树。通过对比 Fiber 树的两个状态，React 可以确定哪些组件需要更新，并且可以跳过不需要更新的部分，从而提高渲染性能。</p>\n</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg\" alt=\"react 中一帧的过程\"></p>"},{"title":"Fiber 架构实现流程","date":"2023-10-20T08:29:47.000Z","description":"Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。","comments":1,"_content":"\nFiber 架构是 React 中用于实现虚拟 DOM 的一种算法架构。它的目标是提高渲染性能和用户体验，通过将渲染工作分割成多个小任务，在不阻塞主线程的情况下逐步完成整个渲染过程。\n\n下面是 Fiber 架构的简要实现过程：\n\n- 构建 Fiber 树：在进行首次渲染时，React 会构建一棵 Fiber 树，用于表示组件的层级结构和渲染顺序。每个 Fiber 节点对应一个组件实例，其中包含组件的状态、属性和其他相关信息。\n\n- 初始渲染阶段：React 通过递归遍历 Fiber 树，在每个 Fiber 节点上执行渲染操作，生成对应的虚拟 DOM 元素。\n\n- 任务拆分：在渲染过程中，React 根据时间片（Time Slicing）的概念将渲染任务拆分为多个小任务（Fiber），每个小任务执行时间有限，并且可以中断和恢复。\n\n- 优先级调度：React 使用优先级调度算法确定哪些任务具有更高的优先级，并按照顺序执行这些高优先级的任务，以保证用户界面的流畅度。\n\n- 增量更新：在执行每个小任务时，React 会比较前后两次渲染结果，找出需要更新的部分，并对其进行增量更新。这样可以避免全量重新渲染，提高性能。\n\n- 渲染结果提交：当所有小任务完成后，React 将最终渲染结果提交给浏览器进行绘制，完成整个渲染过程。\n\nFiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。这样可以更好地响应用户的交互，提供更流畅的用户体验。\n","source":"_posts/react/fiberImplement.md","raw":"---\ntitle: Fiber 架构实现流程\npermalink: /react/fiber/implement.html\ndate: 2023-10-20 16:29:47\ndescription: Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。\ntag: [前端, react, JavaScript, Fiber]\ncomments: true\ncategories: \n - React\n - Fiber\n---\n\nFiber 架构是 React 中用于实现虚拟 DOM 的一种算法架构。它的目标是提高渲染性能和用户体验，通过将渲染工作分割成多个小任务，在不阻塞主线程的情况下逐步完成整个渲染过程。\n\n下面是 Fiber 架构的简要实现过程：\n\n- 构建 Fiber 树：在进行首次渲染时，React 会构建一棵 Fiber 树，用于表示组件的层级结构和渲染顺序。每个 Fiber 节点对应一个组件实例，其中包含组件的状态、属性和其他相关信息。\n\n- 初始渲染阶段：React 通过递归遍历 Fiber 树，在每个 Fiber 节点上执行渲染操作，生成对应的虚拟 DOM 元素。\n\n- 任务拆分：在渲染过程中，React 根据时间片（Time Slicing）的概念将渲染任务拆分为多个小任务（Fiber），每个小任务执行时间有限，并且可以中断和恢复。\n\n- 优先级调度：React 使用优先级调度算法确定哪些任务具有更高的优先级，并按照顺序执行这些高优先级的任务，以保证用户界面的流畅度。\n\n- 增量更新：在执行每个小任务时，React 会比较前后两次渲染结果，找出需要更新的部分，并对其进行增量更新。这样可以避免全量重新渲染，提高性能。\n\n- 渲染结果提交：当所有小任务完成后，React 将最终渲染结果提交给浏览器进行绘制，完成整个渲染过程。\n\nFiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。这样可以更好地响应用户的交互，提供更流畅的用户体验。\n","slug":"react/fiberImplement","published":1,"updated":"2023-10-27T13:49:38.257Z","__permalink":"/react/fiber/implement.html","layout":"post","photos":[],"link":"","_id":"clofw8ydc0012m0uo79em6cah","content":"<div id=\"vip-container\"><p>Fiber 架构是 React 中用于实现虚拟 DOM 的一种算法架构。它的目标是提高渲染性能和用户体验，通过将渲染工作分割成多个小任务，在不阻塞主线程的情况下逐步完成整个渲染过程。</p>\n<p>下面是 Fiber 架构的简要实现过程：</p>\n<ul>\n<li><p>构建 Fiber 树：在进行首次渲染时，React 会构建一棵 Fiber 树，用于表示组件的层级结构和渲染顺序。每个 Fiber 节点对应一个组件实例，其中包含组件的状态、属性和其他相关信息。</p>\n</li>\n<li><p>初始渲染阶段：React 通过递归遍历 Fiber 树，在每个 Fiber 节点上执行渲染操作，生成对应的虚拟 DOM 元素。</p>\n</li>\n<li><p>任务拆分：在渲染过程中，React 根据时间片（Time Slicing）的概念将渲染任务拆分为多个小任务（Fiber），每个小任务执行时间有限，并且可以中断和恢复。</p>\n</li>\n<li><p>优先级调度：React 使用优先级调度算法确定哪些任务具有更高的优先级，并按照顺序执行这些高优先级的任务，以保证用户界面的流畅度。</p>\n</li>\n<li><p>增量更新：在执行每个小任务时，React 会比较前后两次渲染结果，找出需要更新的部分，并对其进行增量更新。这样可以避免全量重新渲染，提高性能。</p>\n</li>\n<li><p>渲染结果提交：当所有小任务完成后，React 将最终渲染结果提交给浏览器进行绘制，完成整个渲染过程。</p>\n</li>\n</ul>\n<p>Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。这样可以更好地响应用户的交互，提供更流畅的用户体验。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/fiber.html","/react/implement.html","/react/synthetic/event.html","/react/fiber/works.html","/react/fiber/node.html"],"length":467,"excerpt":"","more":"<p>Fiber 架构是 React 中用于实现虚拟 DOM 的一种算法架构。它的目标是提高渲染性能和用户体验，通过将渲染工作分割成多个小任务，在不阻塞主线程的情况下逐步完成整个渲染过程。</p>\n<p>下面是 Fiber 架构的简要实现过程：</p>\n<ul>\n<li><p>构建 Fiber 树：在进行首次渲染时，React 会构建一棵 Fiber 树，用于表示组件的层级结构和渲染顺序。每个 Fiber 节点对应一个组件实例，其中包含组件的状态、属性和其他相关信息。</p>\n</li>\n<li><p>初始渲染阶段：React 通过递归遍历 Fiber 树，在每个 Fiber 节点上执行渲染操作，生成对应的虚拟 DOM 元素。</p>\n</li>\n<li><p>任务拆分：在渲染过程中，React 根据时间片（Time Slicing）的概念将渲染任务拆分为多个小任务（Fiber），每个小任务执行时间有限，并且可以中断和恢复。</p>\n</li>\n<li><p>优先级调度：React 使用优先级调度算法确定哪些任务具有更高的优先级，并按照顺序执行这些高优先级的任务，以保证用户界面的流畅度。</p>\n</li>\n<li><p>增量更新：在执行每个小任务时，React 会比较前后两次渲染结果，找出需要更新的部分，并对其进行增量更新。这样可以避免全量重新渲染，提高性能。</p>\n</li>\n<li><p>渲染结果提交：当所有小任务完成后，React 将最终渲染结果提交给浏览器进行绘制，完成整个渲染过程。</p>\n</li>\n</ul>\n<p>Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。这样可以更好地响应用户的交互，提供更流畅的用户体验。</p>\n"},{"title":"FiberNode结构解析","date":"2023-10-19T12:12:08.000Z","comments":1,"description":"FiberNode（也称为 Fiber 节点）是 React Fiber 架构中的核心概念之一，用于表示组件的层级结构和渲染过程中的任务。","_content":"\n# FiberNode结构解析\n\nFiberNode（也称为 Fiber 节点）是 React Fiber 架构中的核心概念之一，用于表示组件的层级结构和渲染过程中的任务。\n<!-- more -->\n\n\n```javascript\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null; // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n  this.alternate = null;\n\n  {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n```\n\n#### \n\n##### tag\n\n表示 FiberNode 的类型，可以是 HostComponent、ClassComponent、FunctionComponent 等。\n\n##### key\n\n表示组件的唯一标识符，用于在列表渲染中进行元素的重用。\n\n##### elementType\n\n表示组件元素的类型。大部分情况同type，某些情况不同，比如FunctionComponent使用React.memo包裹。\n\n##### type\n\ntype 属性表示 FiberNode 对应的组件类型，可以是字符串（原生组件）或函数/类（自定义组件）。对于 FunctionComponent，指函数本身，对于ClassComponent，指class，对于HostComponent，指DOM节点tagName。\n\n##### stateNode\n\n每个 FiberNode 包含一个 stateNode 属性，它指向组件实例。stateNode 可以是一个 DOM 元素（对于原生组件），也可以是一个类实例（对于自定义组件）。\n\n\n\n> ​\tFiberNode 使用链表结构来表示组件的层级关系\n\n##### return\n\nreturn 指向父节点。\n\n#####   child\n\n  child 属性指向第一个子节点。\n\n##### sibling\n\n  sibling 属性指向下一个兄弟节点。\n\n###### 例子：\n\n```react\nfunction App() {\n  return (\n    <div>\n      i am\n      <span>SongShao</span>\n    </div>\n  )\n}\n\n```\n\n对应的`Fiber树`结构\n\n```sh\n\t\t    App\n\t\t    ||\n\t  child || return\n\t\t\t||\n    --------div ----------------\n\t        ||  \t\t\t ||\n\t  child || return  child || return \n            ||\t\t\t\t ||\n           i am ----------- span\n                  sibling    ||\n              \t\t   child || return\n              \t\t \t     ||\n              \t\t      SongShao\n       \n```\n\n> 这里需要提一下，为什么父级指针叫做`return`而不是`parent`或者`father`呢？因为作为一个工作单元，`return`指节点执完`completeWork`（本章后面会介绍）后会返回的下一个节点。子`Fiber节点`及其兄弟节点完成工作后会返回其父级节点，所以用`return`指代父级节点。\n\n##### index\n\n在父节点中的索引位置。\n\n##### ref\n\n用于引用组件。\n\n##### pendingProps\n\n组件的待处理属性。\n\n##### memoizedProps 和 memoizedState\n\n这些属性保存了组件的当前状态（props 和 state）。在渲染过程中，React 使用 memoizedProps 和 memoizedState 保存组件的最新状态，并通过比较前后两次状态的差异，确定是否需要更新组件。\n\n##### updateQueue\n\n用于存储组件的更新队列。\n\n##### dependencies\n\n表示组件的依赖项。\n\n##### mode\n\n表示渲染模式。\n\n##### flags 和 subtreeFlags\n\n表示 FiberNode 的状态标志。\n\n##### deletions\n\n表示待删除的节点。\n\n##### lanes 和 childLanes\n\n表示调度的优先级。\n\n##### alternate\n\nalternate 属性指向 FiberNode 的替代节点。在渲染过程中，React 会创建两个 FiberNode，一个表示当前渲染状态，另一个表示下一次渲染状态。通过 alternate 属性，React 在两个状态之间进行比较，找出需要更新的节点。\n\n##### actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\n\n用于记录组件的实际渲染时间和基准时间。\n\n##### __debugSource、__debugOwner、__debugNeedsRemount、__debugHookTypes\n\n用于调试和内部记录。","source":"_posts/react/fiberNode.md","raw":"---\ntitle: FiberNode结构解析\npermalink: /react/fiber/node.html\ndate: 2023-10-19 20:12:08\ntag: [前端, react, JavaScript, Fiber]\ncomments: true\ndescription: FiberNode（也称为 Fiber 节点）是 React Fiber 架构中的核心概念之一，用于表示组件的层级结构和渲染过程中的任务。\ncategories: \n - React\n - Fiber\n---\n\n# FiberNode结构解析\n\nFiberNode（也称为 Fiber 节点）是 React Fiber 架构中的核心概念之一，用于表示组件的层级结构和渲染过程中的任务。\n<!-- more -->\n\n\n```javascript\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null; // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n  this.alternate = null;\n\n  {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n```\n\n#### \n\n##### tag\n\n表示 FiberNode 的类型，可以是 HostComponent、ClassComponent、FunctionComponent 等。\n\n##### key\n\n表示组件的唯一标识符，用于在列表渲染中进行元素的重用。\n\n##### elementType\n\n表示组件元素的类型。大部分情况同type，某些情况不同，比如FunctionComponent使用React.memo包裹。\n\n##### type\n\ntype 属性表示 FiberNode 对应的组件类型，可以是字符串（原生组件）或函数/类（自定义组件）。对于 FunctionComponent，指函数本身，对于ClassComponent，指class，对于HostComponent，指DOM节点tagName。\n\n##### stateNode\n\n每个 FiberNode 包含一个 stateNode 属性，它指向组件实例。stateNode 可以是一个 DOM 元素（对于原生组件），也可以是一个类实例（对于自定义组件）。\n\n\n\n> ​\tFiberNode 使用链表结构来表示组件的层级关系\n\n##### return\n\nreturn 指向父节点。\n\n#####   child\n\n  child 属性指向第一个子节点。\n\n##### sibling\n\n  sibling 属性指向下一个兄弟节点。\n\n###### 例子：\n\n```react\nfunction App() {\n  return (\n    <div>\n      i am\n      <span>SongShao</span>\n    </div>\n  )\n}\n\n```\n\n对应的`Fiber树`结构\n\n```sh\n\t\t    App\n\t\t    ||\n\t  child || return\n\t\t\t||\n    --------div ----------------\n\t        ||  \t\t\t ||\n\t  child || return  child || return \n            ||\t\t\t\t ||\n           i am ----------- span\n                  sibling    ||\n              \t\t   child || return\n              \t\t \t     ||\n              \t\t      SongShao\n       \n```\n\n> 这里需要提一下，为什么父级指针叫做`return`而不是`parent`或者`father`呢？因为作为一个工作单元，`return`指节点执完`completeWork`（本章后面会介绍）后会返回的下一个节点。子`Fiber节点`及其兄弟节点完成工作后会返回其父级节点，所以用`return`指代父级节点。\n\n##### index\n\n在父节点中的索引位置。\n\n##### ref\n\n用于引用组件。\n\n##### pendingProps\n\n组件的待处理属性。\n\n##### memoizedProps 和 memoizedState\n\n这些属性保存了组件的当前状态（props 和 state）。在渲染过程中，React 使用 memoizedProps 和 memoizedState 保存组件的最新状态，并通过比较前后两次状态的差异，确定是否需要更新组件。\n\n##### updateQueue\n\n用于存储组件的更新队列。\n\n##### dependencies\n\n表示组件的依赖项。\n\n##### mode\n\n表示渲染模式。\n\n##### flags 和 subtreeFlags\n\n表示 FiberNode 的状态标志。\n\n##### deletions\n\n表示待删除的节点。\n\n##### lanes 和 childLanes\n\n表示调度的优先级。\n\n##### alternate\n\nalternate 属性指向 FiberNode 的替代节点。在渲染过程中，React 会创建两个 FiberNode，一个表示当前渲染状态，另一个表示下一次渲染状态。通过 alternate 属性，React 在两个状态之间进行比较，找出需要更新的节点。\n\n##### actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\n\n用于记录组件的实际渲染时间和基准时间。\n\n##### __debugSource、__debugOwner、__debugNeedsRemount、__debugHookTypes\n\n用于调试和内部记录。","slug":"react/fiberNode","published":1,"updated":"2023-10-21T13:56:49.549Z","__permalink":"/react/fiber/node.html","layout":"post","photos":[],"link":"","_id":"clofw8yde0017m0uo6xi40h79","content":"<div id=\"vip-container\"><h1 id=\"FiberNode结构解析\"><a href=\"#FiberNode结构解析\" class=\"headerlink\" title=\"FiberNode结构解析\"></a>FiberNode结构解析</h1><p>FiberNode（也称为 Fiber 节点）是 React Fiber 架构中的核心概念之一，用于表示组件的层级结构和渲染过程中的任务。</p>\n<span id=\"more\"></span>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberNode</span>(<span class=\"params\">tag, pendingProps, key, mode</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Instance</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">elementType</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">stateNode</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// Fiber</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">return</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">child</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sibling</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">index</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">ref</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">pendingProps</span> = pendingProps;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">memoizedProps</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">updateQueue</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">memoizedState</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">dependencies</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">mode</span> = mode; <span class=\"comment\">// Effects</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">flags</span> = <span class=\"title class_\">NoFlags</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">subtreeFlags</span> = <span class=\"title class_\">NoFlags</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">deletions</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">lanes</span> = <span class=\"title class_\">NoLanes</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">childLanes</span> = <span class=\"title class_\">NoLanes</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Note: The following is done to avoid a v8 performance cliff.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Initializing the fields below to smis and later updating them with</span></span><br><span class=\"line\">    <span class=\"comment\">// double values will cause Fibers to end up having separate shapes.</span></span><br><span class=\"line\">    <span class=\"comment\">// This behavior/bug has something to do with Object.preventExtension().</span></span><br><span class=\"line\">    <span class=\"comment\">// Fortunately this only impacts DEV builds.</span></span><br><span class=\"line\">    <span class=\"comment\">// Unfortunately it makes React unusably slow for some applications.</span></span><br><span class=\"line\">    <span class=\"comment\">// To work around this, initialize the fields below with doubles.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Learn more about this here:</span></span><br><span class=\"line\">    <span class=\"comment\">// https://github.com/facebook/react/issues/14365</span></span><br><span class=\"line\">    <span class=\"comment\">// https://bugs.chromium.org/p/v8/issues/detail?id=8538</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualStartTime</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selfBaseDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">treeBaseDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>; <span class=\"comment\">// It&#x27;s okay to replace the initial doubles with smis after initialization.</span></span><br><span class=\"line\">    <span class=\"comment\">// This won&#x27;t trigger the performance cliff mentioned above,</span></span><br><span class=\"line\">    <span class=\"comment\">// and it simplifies other profiler code (including DevTools).</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualStartTime</span> = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selfBaseDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">treeBaseDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This isn&#x27;t directly used but is handy for debugging internals:</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugSource</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugOwner</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugNeedsRemount</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugHookTypes</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasBadMapPolyfill &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Object</span>.<span class=\"property\">preventExtensions</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Object</span>.<span class=\"title function_\">preventExtensions</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><h5 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h5><p>表示 FiberNode 的类型，可以是 HostComponent、ClassComponent、FunctionComponent 等。</p>\n<h5 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h5><p>表示组件的唯一标识符，用于在列表渲染中进行元素的重用。</p>\n<h5 id=\"elementType\"><a href=\"#elementType\" class=\"headerlink\" title=\"elementType\"></a>elementType</h5><p>表示组件元素的类型。大部分情况同type，某些情况不同，比如FunctionComponent使用React.memo包裹。</p>\n<h5 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h5><p>type 属性表示 FiberNode 对应的组件类型，可以是字符串（原生组件）或函数&#x2F;类（自定义组件）。对于 FunctionComponent，指函数本身，对于ClassComponent，指class，对于HostComponent，指DOM节点tagName。</p>\n<h5 id=\"stateNode\"><a href=\"#stateNode\" class=\"headerlink\" title=\"stateNode\"></a>stateNode</h5><p>每个 FiberNode 包含一个 stateNode 属性，它指向组件实例。stateNode 可以是一个 DOM 元素（对于原生组件），也可以是一个类实例（对于自定义组件）。</p>\n<blockquote>\n<p>​\tFiberNode 使用链表结构来表示组件的层级关系</p>\n</blockquote>\n<h5 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h5><p>return 指向父节点。</p>\n<h5 id=\"child\"><a href=\"#child\" class=\"headerlink\" title=\"child\"></a>child</h5><p>  child 属性指向第一个子节点。</p>\n<h5 id=\"sibling\"><a href=\"#sibling\" class=\"headerlink\" title=\"sibling\"></a>sibling</h5><p>  sibling 属性指向下一个兄弟节点。</p>\n<h6 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function App() &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      i am</span><br><span class=\"line\">      &lt;span&gt;SongShao&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对应的<code>Fiber树</code>结构</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   App</span><br><span class=\"line\">   ||</span><br><span class=\"line\">child || <span class=\"built_in\">return</span></span><br><span class=\"line\">||</span><br><span class=\"line\"> --------div ----------------</span><br><span class=\"line\">      ||  \t\t\t ||</span><br><span class=\"line\">child || <span class=\"built_in\">return</span>  child || <span class=\"built_in\">return</span> </span><br><span class=\"line\">         ||\t\t\t\t ||</span><br><span class=\"line\">        i am ----------- span</span><br><span class=\"line\">               sibling    ||</span><br><span class=\"line\">           \t\t   child || <span class=\"built_in\">return</span></span><br><span class=\"line\">           \t\t \t     ||</span><br><span class=\"line\">           \t\t      SongShao</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里需要提一下，为什么父级指针叫做<code>return</code>而不是<code>parent</code>或者<code>father</code>呢？因为作为一个工作单元，<code>return</code>指节点执完<code>completeWork</code>（本章后面会介绍）后会返回的下一个节点。子<code>Fiber节点</code>及其兄弟节点完成工作后会返回其父级节点，所以用<code>return</code>指代父级节点。</p>\n</blockquote>\n<h5 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h5><p>在父节点中的索引位置。</p>\n<h5 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h5><p>用于引用组件。</p>\n<h5 id=\"pendingProps\"><a href=\"#pendingProps\" class=\"headerlink\" title=\"pendingProps\"></a>pendingProps</h5><p>组件的待处理属性。</p>\n<h5 id=\"memoizedProps-和-memoizedState\"><a href=\"#memoizedProps-和-memoizedState\" class=\"headerlink\" title=\"memoizedProps 和 memoizedState\"></a>memoizedProps 和 memoizedState</h5><p>这些属性保存了组件的当前状态（props 和 state）。在渲染过程中，React 使用 memoizedProps 和 memoizedState 保存组件的最新状态，并通过比较前后两次状态的差异，确定是否需要更新组件。</p>\n<h5 id=\"updateQueue\"><a href=\"#updateQueue\" class=\"headerlink\" title=\"updateQueue\"></a>updateQueue</h5><p>用于存储组件的更新队列。</p>\n<h5 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h5><p>表示组件的依赖项。</p>\n<h5 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h5><p>表示渲染模式。</p>\n<h5 id=\"flags-和-subtreeFlags\"><a href=\"#flags-和-subtreeFlags\" class=\"headerlink\" title=\"flags 和 subtreeFlags\"></a>flags 和 subtreeFlags</h5><p>表示 FiberNode 的状态标志。</p>\n<h5 id=\"deletions\"><a href=\"#deletions\" class=\"headerlink\" title=\"deletions\"></a>deletions</h5><p>表示待删除的节点。</p>\n<h5 id=\"lanes-和-childLanes\"><a href=\"#lanes-和-childLanes\" class=\"headerlink\" title=\"lanes 和 childLanes\"></a>lanes 和 childLanes</h5><p>表示调度的优先级。</p>\n<h5 id=\"alternate\"><a href=\"#alternate\" class=\"headerlink\" title=\"alternate\"></a>alternate</h5><p>alternate 属性指向 FiberNode 的替代节点。在渲染过程中，React 会创建两个 FiberNode，一个表示当前渲染状态，另一个表示下一次渲染状态。通过 alternate 属性，React 在两个状态之间进行比较，找出需要更新的节点。</p>\n<h5 id=\"actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\"><a href=\"#actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\" class=\"headerlink\" title=\"actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\"></a>actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration</h5><p>用于记录组件的实际渲染时间和基准时间。</p>\n<h5 id=\"debugSource、-debugOwner、-debugNeedsRemount、-debugHookTypes\"><a href=\"#debugSource、-debugOwner、-debugNeedsRemount、-debugHookTypes\" class=\"headerlink\" title=\"__debugSource、__debugOwner、__debugNeedsRemount、__debugHookTypes\"></a>__debugSource、__debugOwner、__debugNeedsRemount、__debugHookTypes</h5><p>用于调试和内部记录。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/fiber.html","/react/fiber/implement.html","/react/fiber/works.html","/react/implement.html","/react/synthetic/event.html"],"length":868,"excerpt":"<h1 id=\"FiberNode结构解析\"><a href=\"#FiberNode结构解析\" class=\"headerlink\" title=\"FiberNode结构解析\"></a>FiberNode结构解析</h1><p>FiberNode（也称为 Fiber 节点）是 React Fiber 架构中的核心概念之一，用于表示组件的层级结构和渲染过程中的任务。</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberNode</span>(<span class=\"params\">tag, pendingProps, key, mode</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Instance</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">elementType</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">stateNode</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// Fiber</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">return</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">child</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sibling</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">index</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">ref</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">pendingProps</span> = pendingProps;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">memoizedProps</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">updateQueue</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">memoizedState</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">dependencies</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">mode</span> = mode; <span class=\"comment\">// Effects</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">flags</span> = <span class=\"title class_\">NoFlags</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">subtreeFlags</span> = <span class=\"title class_\">NoFlags</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">deletions</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">lanes</span> = <span class=\"title class_\">NoLanes</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">childLanes</span> = <span class=\"title class_\">NoLanes</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Note: The following is done to avoid a v8 performance cliff.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Initializing the fields below to smis and later updating them with</span></span><br><span class=\"line\">    <span class=\"comment\">// double values will cause Fibers to end up having separate shapes.</span></span><br><span class=\"line\">    <span class=\"comment\">// This behavior/bug has something to do with Object.preventExtension().</span></span><br><span class=\"line\">    <span class=\"comment\">// Fortunately this only impacts DEV builds.</span></span><br><span class=\"line\">    <span class=\"comment\">// Unfortunately it makes React unusably slow for some applications.</span></span><br><span class=\"line\">    <span class=\"comment\">// To work around this, initialize the fields below with doubles.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Learn more about this here:</span></span><br><span class=\"line\">    <span class=\"comment\">// https://github.com/facebook/react/issues/14365</span></span><br><span class=\"line\">    <span class=\"comment\">// https://bugs.chromium.org/p/v8/issues/detail?id=8538</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualStartTime</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selfBaseDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">treeBaseDuration</span> = <span class=\"title class_\">Number</span>.<span class=\"property\">NaN</span>; <span class=\"comment\">// It&#x27;s okay to replace the initial doubles with smis after initialization.</span></span><br><span class=\"line\">    <span class=\"comment\">// This won&#x27;t trigger the performance cliff mentioned above,</span></span><br><span class=\"line\">    <span class=\"comment\">// and it simplifies other profiler code (including DevTools).</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">actualStartTime</span> = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selfBaseDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">treeBaseDuration</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This isn&#x27;t directly used but is handy for debugging internals:</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugSource</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugOwner</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugNeedsRemount</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_debugHookTypes</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasBadMapPolyfill &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Object</span>.<span class=\"property\">preventExtensions</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Object</span>.<span class=\"title function_\">preventExtensions</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><h5 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h5><p>表示 FiberNode 的类型，可以是 HostComponent、ClassComponent、FunctionComponent 等。</p>\n<h5 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h5><p>表示组件的唯一标识符，用于在列表渲染中进行元素的重用。</p>\n<h5 id=\"elementType\"><a href=\"#elementType\" class=\"headerlink\" title=\"elementType\"></a>elementType</h5><p>表示组件元素的类型。大部分情况同type，某些情况不同，比如FunctionComponent使用React.memo包裹。</p>\n<h5 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h5><p>type 属性表示 FiberNode 对应的组件类型，可以是字符串（原生组件）或函数&#x2F;类（自定义组件）。对于 FunctionComponent，指函数本身，对于ClassComponent，指class，对于HostComponent，指DOM节点tagName。</p>\n<h5 id=\"stateNode\"><a href=\"#stateNode\" class=\"headerlink\" title=\"stateNode\"></a>stateNode</h5><p>每个 FiberNode 包含一个 stateNode 属性，它指向组件实例。stateNode 可以是一个 DOM 元素（对于原生组件），也可以是一个类实例（对于自定义组件）。</p>\n<blockquote>\n<p>​\tFiberNode 使用链表结构来表示组件的层级关系</p>\n</blockquote>\n<h5 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h5><p>return 指向父节点。</p>\n<h5 id=\"child\"><a href=\"#child\" class=\"headerlink\" title=\"child\"></a>child</h5><p>  child 属性指向第一个子节点。</p>\n<h5 id=\"sibling\"><a href=\"#sibling\" class=\"headerlink\" title=\"sibling\"></a>sibling</h5><p>  sibling 属性指向下一个兄弟节点。</p>\n<h6 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function App() &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      i am</span><br><span class=\"line\">      &lt;span&gt;SongShao&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对应的<code>Fiber树</code>结构</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   App</span><br><span class=\"line\">   ||</span><br><span class=\"line\">child || <span class=\"built_in\">return</span></span><br><span class=\"line\">||</span><br><span class=\"line\"> --------div ----------------</span><br><span class=\"line\">      ||  \t\t\t ||</span><br><span class=\"line\">child || <span class=\"built_in\">return</span>  child || <span class=\"built_in\">return</span> </span><br><span class=\"line\">         ||\t\t\t\t ||</span><br><span class=\"line\">        i am ----------- span</span><br><span class=\"line\">               sibling    ||</span><br><span class=\"line\">           \t\t   child || <span class=\"built_in\">return</span></span><br><span class=\"line\">           \t\t \t     ||</span><br><span class=\"line\">           \t\t      SongShao</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里需要提一下，为什么父级指针叫做<code>return</code>而不是<code>parent</code>或者<code>father</code>呢？因为作为一个工作单元，<code>return</code>指节点执完<code>completeWork</code>（本章后面会介绍）后会返回的下一个节点。子<code>Fiber节点</code>及其兄弟节点完成工作后会返回其父级节点，所以用<code>return</code>指代父级节点。</p>\n</blockquote>\n<h5 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h5><p>在父节点中的索引位置。</p>\n<h5 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h5><p>用于引用组件。</p>\n<h5 id=\"pendingProps\"><a href=\"#pendingProps\" class=\"headerlink\" title=\"pendingProps\"></a>pendingProps</h5><p>组件的待处理属性。</p>\n<h5 id=\"memoizedProps-和-memoizedState\"><a href=\"#memoizedProps-和-memoizedState\" class=\"headerlink\" title=\"memoizedProps 和 memoizedState\"></a>memoizedProps 和 memoizedState</h5><p>这些属性保存了组件的当前状态（props 和 state）。在渲染过程中，React 使用 memoizedProps 和 memoizedState 保存组件的最新状态，并通过比较前后两次状态的差异，确定是否需要更新组件。</p>\n<h5 id=\"updateQueue\"><a href=\"#updateQueue\" class=\"headerlink\" title=\"updateQueue\"></a>updateQueue</h5><p>用于存储组件的更新队列。</p>\n<h5 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h5><p>表示组件的依赖项。</p>\n<h5 id=\"mode\"><a href=\"#mode\" class=\"headerlink\" title=\"mode\"></a>mode</h5><p>表示渲染模式。</p>\n<h5 id=\"flags-和-subtreeFlags\"><a href=\"#flags-和-subtreeFlags\" class=\"headerlink\" title=\"flags 和 subtreeFlags\"></a>flags 和 subtreeFlags</h5><p>表示 FiberNode 的状态标志。</p>\n<h5 id=\"deletions\"><a href=\"#deletions\" class=\"headerlink\" title=\"deletions\"></a>deletions</h5><p>表示待删除的节点。</p>\n<h5 id=\"lanes-和-childLanes\"><a href=\"#lanes-和-childLanes\" class=\"headerlink\" title=\"lanes 和 childLanes\"></a>lanes 和 childLanes</h5><p>表示调度的优先级。</p>\n<h5 id=\"alternate\"><a href=\"#alternate\" class=\"headerlink\" title=\"alternate\"></a>alternate</h5><p>alternate 属性指向 FiberNode 的替代节点。在渲染过程中，React 会创建两个 FiberNode，一个表示当前渲染状态，另一个表示下一次渲染状态。通过 alternate 属性，React 在两个状态之间进行比较，找出需要更新的节点。</p>\n<h5 id=\"actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\"><a href=\"#actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\" class=\"headerlink\" title=\"actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration\"></a>actualDuration、actualStartTime、selfBaseDuration、treeBaseDuration</h5><p>用于记录组件的实际渲染时间和基准时间。</p>\n<h5 id=\"debugSource、-debugOwner、-debugNeedsRemount、-debugHookTypes\"><a href=\"#debugSource、-debugOwner、-debugNeedsRemount、-debugHookTypes\" class=\"headerlink\" title=\"__debugSource、__debugOwner、__debugNeedsRemount、__debugHookTypes\"></a>__debugSource、__debugOwner、__debugNeedsRemount、__debugHookTypes</h5><p>用于调试和内部记录。</p>"},{"title":"Fiber架构工作原理","date":"2023-10-25T10:12:49.000Z","comments":1,"description":"在`React`中最多会同时存在两棵`Fiber树`。当前屏幕上显示内容对应的`Fiber树`称为`current Fiber树`，正在内存中构建的`Fiber树`称为`workInProgress Fiber树`。","_content":"\n## 什么是“双缓存”？\n\n\"双缓存\"是一种常见的图形处理技术，用于在图像渲染中实现平滑的、无闪烁的更新效果。它通过使用两个缓冲区（即两块内存区域）来完成。其中一个缓冲区用于显示图像，而另一个缓冲区则用于在后台进行图像的更新和绘制。当更新完成后，通过交换两个缓冲区的引用，以实现无缝的切换和更新。\n\n在图形处理中使用双缓存的好处包括：\n\n1. 无闪烁：通过在后台缓冲区进行绘制，然后将绘制结果一次性地切换到显示缓冲区，可以避免在图像更新过程中的闪烁问题。这对于实时图形、动画和视频等应用非常重要。\n2. 平滑更新：使用双缓冲可以实现平滑的更新效果。在后台缓冲区进行绘制和更新，然后在更新完成后将其切换到显示缓冲区，可以避免直接在显示缓冲区上进行绘制和修改，从而减少了可能出现的可见的渲染中间状态。\n3. 减少渲染延迟：使用双缓冲可以减少渲染延迟。由于绘制和更新发生在后台缓冲区，因此可以在绘制完成后立即切换到显示缓冲区，从而减少了等待绘制完成的时间，提高了渲染效率和响应时间。\n\n双缓存技术在图形处理、动画、视频播放和游戏开发等领域得到广泛应用。在图形库、操作系统和桌面应用程序中，双缓存被用于实现平滑的图像渲染和交互效果。在前端开发中，双缓存也被广泛应用于图形绘制和动画效果的实现，以提供更好的用户体验。\n\n`React`使用“双缓存”来完成`Fiber树`的构建与替换——对应着`DOM树`的创建与更新。\n\n## 双缓存Fiber树\n\n在`React`中最多会同时存在两棵`Fiber树`。当前屏幕上显示内容对应的`Fiber树`称为`current Fiber树`，正在内存中构建的`Fiber树`称为`workInProgress Fiber树`。\n\n`current Fiber树`中的`Fiber节点`被称为`current fiber`，`workInProgress Fiber树`中的`Fiber节点`被称为`workInProgress fiber`，他们通过`alternate`属性连接。\n\n```js\ncurrentFiber.alternate === workInProgressFiber;\nworkInProgressFiber.alternate === currentFiber;\n```\n\n`React `应用的根节点通过使 `current ` 指针在不同 `Fiber树` 的 `rootFiber` 间切换来完成 `current Fiber` 树指向的切换。\n\n即当 `workInProgress Fiber树` 构建完成交给 `Renderer` 渲染在页面上后，应用根节点的 `current` 指针指向 `workInProgress Fiber树` ，此时`workInProgress Fiber树`就变为`current Fiber树`。\n\n每次状态更新都会产生新的`workInProgress Fiber树`，通过`current`与`workInProgress`的替换，完成`DOM`更新。\n\n接下来我们以具体例子讲解`mount时`、`update时`的构建/替换流程。\n\n## mount时\n\n考虑如下例子：\n\n```js\nfunction App() {\n  return (\n    <h1>hello<span style={{ color: 'red' }}>world</span></h1>\n  )\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n```\n\n1. 首次执行`ReactDOM.render`会创建`fiberRootNode`（源码中叫`fiberRoot`）和`rootFiber`。其中`fiberRootNode`是整个应用的根节点，`rootFiber`是`<App/>`所在组件树的根节点。\n\n之所以要区分`fiberRootNode`与`rootFiber`，是因为在应用中我们可以多次调用`ReactDOM.render`渲染不同的组件树，他们会拥有不同的`rootFiber`。但是整个应用的根节点只有一个，那就是`fiberRootNode`。\n\n`fiberRootNode`的`current`会指向当前页面上已渲染内容对应`Fiber树`，即`current Fiber树`。\n\n![fiberRootNode](https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg)\n\n`fiberRootNode.current = rootFiber;`\n\n由于是首屏渲染，页面中还没有挂载任何`DOM`，所以`fiberRootNode.current`指向的`rootFiber`没有任何`子Fiber节点`（即`current Fiber树`为空）。\n\n2. 接下来进入`render阶段`，根据组件返回的`JSX`在内存中依次创建`Fiber节点`并连接在一起构建`Fiber树`，被称为`workInProgress Fiber树`。（下图中右侧为内存中构建的树，左侧为页面显示的树）\n\n在构建`workInProgress Fiber树`时会尝试复用`current Fiber树`中已有的`Fiber节点`内的属性，在`首屏渲染`时只有`rootFiber`存在对应的`current fiber`（即`rootFiber.alternate`）。\n\n![](https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg)\n\n3. 图中右侧已构建完的`workInProgress Fiber树`在`commit阶段`渲染到页面。\n\n此时`DOM`更新为右侧树对应的样子。`fiberRootNode`的`current`指针指向`workInProgress Fiber树`使其变为`current Fiber 树`。\n\n![](https://react.iamkasong.com/img/wipTreeFinish.png)\n\n## update时\n\n1. 接下来我们点击`p节点`触发状态改变，这会开启一次新的`render阶段`并构建一棵新的`workInProgress Fiber 树`。\n\n   ![](https://react.iamkasong.com/img/wipTreeUpdate.png)\n\n和`mount`时一样，`workInProgress fiber`的创建可以复用`current Fiber树`对应的节点数据。\n\n2. `workInProgress Fiber 树`在`render阶段`完成构建后进入`commit阶段`渲染到页面上。渲染完毕后，`workInProgress Fiber 树`变为`current Fiber 树`。\n\n![渲染过程](https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg)\n","source":"_posts/react/fiberWorksHow.md","raw":"---\ntitle: Fiber架构工作原理\npermalink: /react/fiber/works.html\ndate: 2023-10-25 18:12:49\ntag: [前端, react, JavaScript, Fiber]\ncomments: true\ndescription: 在`React`中最多会同时存在两棵`Fiber树`。当前屏幕上显示内容对应的`Fiber树`称为`current Fiber树`，正在内存中构建的`Fiber树`称为`workInProgress Fiber树`。\ncategories: \n - React\n - Fiber\n---\n\n## 什么是“双缓存”？\n\n\"双缓存\"是一种常见的图形处理技术，用于在图像渲染中实现平滑的、无闪烁的更新效果。它通过使用两个缓冲区（即两块内存区域）来完成。其中一个缓冲区用于显示图像，而另一个缓冲区则用于在后台进行图像的更新和绘制。当更新完成后，通过交换两个缓冲区的引用，以实现无缝的切换和更新。\n\n在图形处理中使用双缓存的好处包括：\n\n1. 无闪烁：通过在后台缓冲区进行绘制，然后将绘制结果一次性地切换到显示缓冲区，可以避免在图像更新过程中的闪烁问题。这对于实时图形、动画和视频等应用非常重要。\n2. 平滑更新：使用双缓冲可以实现平滑的更新效果。在后台缓冲区进行绘制和更新，然后在更新完成后将其切换到显示缓冲区，可以避免直接在显示缓冲区上进行绘制和修改，从而减少了可能出现的可见的渲染中间状态。\n3. 减少渲染延迟：使用双缓冲可以减少渲染延迟。由于绘制和更新发生在后台缓冲区，因此可以在绘制完成后立即切换到显示缓冲区，从而减少了等待绘制完成的时间，提高了渲染效率和响应时间。\n\n双缓存技术在图形处理、动画、视频播放和游戏开发等领域得到广泛应用。在图形库、操作系统和桌面应用程序中，双缓存被用于实现平滑的图像渲染和交互效果。在前端开发中，双缓存也被广泛应用于图形绘制和动画效果的实现，以提供更好的用户体验。\n\n`React`使用“双缓存”来完成`Fiber树`的构建与替换——对应着`DOM树`的创建与更新。\n\n## 双缓存Fiber树\n\n在`React`中最多会同时存在两棵`Fiber树`。当前屏幕上显示内容对应的`Fiber树`称为`current Fiber树`，正在内存中构建的`Fiber树`称为`workInProgress Fiber树`。\n\n`current Fiber树`中的`Fiber节点`被称为`current fiber`，`workInProgress Fiber树`中的`Fiber节点`被称为`workInProgress fiber`，他们通过`alternate`属性连接。\n\n```js\ncurrentFiber.alternate === workInProgressFiber;\nworkInProgressFiber.alternate === currentFiber;\n```\n\n`React `应用的根节点通过使 `current ` 指针在不同 `Fiber树` 的 `rootFiber` 间切换来完成 `current Fiber` 树指向的切换。\n\n即当 `workInProgress Fiber树` 构建完成交给 `Renderer` 渲染在页面上后，应用根节点的 `current` 指针指向 `workInProgress Fiber树` ，此时`workInProgress Fiber树`就变为`current Fiber树`。\n\n每次状态更新都会产生新的`workInProgress Fiber树`，通过`current`与`workInProgress`的替换，完成`DOM`更新。\n\n接下来我们以具体例子讲解`mount时`、`update时`的构建/替换流程。\n\n## mount时\n\n考虑如下例子：\n\n```js\nfunction App() {\n  return (\n    <h1>hello<span style={{ color: 'red' }}>world</span></h1>\n  )\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n```\n\n1. 首次执行`ReactDOM.render`会创建`fiberRootNode`（源码中叫`fiberRoot`）和`rootFiber`。其中`fiberRootNode`是整个应用的根节点，`rootFiber`是`<App/>`所在组件树的根节点。\n\n之所以要区分`fiberRootNode`与`rootFiber`，是因为在应用中我们可以多次调用`ReactDOM.render`渲染不同的组件树，他们会拥有不同的`rootFiber`。但是整个应用的根节点只有一个，那就是`fiberRootNode`。\n\n`fiberRootNode`的`current`会指向当前页面上已渲染内容对应`Fiber树`，即`current Fiber树`。\n\n![fiberRootNode](https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg)\n\n`fiberRootNode.current = rootFiber;`\n\n由于是首屏渲染，页面中还没有挂载任何`DOM`，所以`fiberRootNode.current`指向的`rootFiber`没有任何`子Fiber节点`（即`current Fiber树`为空）。\n\n2. 接下来进入`render阶段`，根据组件返回的`JSX`在内存中依次创建`Fiber节点`并连接在一起构建`Fiber树`，被称为`workInProgress Fiber树`。（下图中右侧为内存中构建的树，左侧为页面显示的树）\n\n在构建`workInProgress Fiber树`时会尝试复用`current Fiber树`中已有的`Fiber节点`内的属性，在`首屏渲染`时只有`rootFiber`存在对应的`current fiber`（即`rootFiber.alternate`）。\n\n![](https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg)\n\n3. 图中右侧已构建完的`workInProgress Fiber树`在`commit阶段`渲染到页面。\n\n此时`DOM`更新为右侧树对应的样子。`fiberRootNode`的`current`指针指向`workInProgress Fiber树`使其变为`current Fiber 树`。\n\n![](https://react.iamkasong.com/img/wipTreeFinish.png)\n\n## update时\n\n1. 接下来我们点击`p节点`触发状态改变，这会开启一次新的`render阶段`并构建一棵新的`workInProgress Fiber 树`。\n\n   ![](https://react.iamkasong.com/img/wipTreeUpdate.png)\n\n和`mount`时一样，`workInProgress fiber`的创建可以复用`current Fiber树`对应的节点数据。\n\n2. `workInProgress Fiber 树`在`render阶段`完成构建后进入`commit阶段`渲染到页面上。渲染完毕后，`workInProgress Fiber 树`变为`current Fiber 树`。\n\n![渲染过程](https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg)\n","slug":"react/fiberWorksHow","published":1,"updated":"2023-10-27T13:18:10.726Z","__permalink":"/react/fiber/works.html","layout":"post","photos":[],"link":"","_id":"clofw8ydf001am0uoc64x68az","content":"<div id=\"vip-container\"><h2 id=\"什么是“双缓存”？\"><a href=\"#什么是“双缓存”？\" class=\"headerlink\" title=\"什么是“双缓存”？\"></a>什么是“双缓存”？</h2><p>“双缓存”是一种常见的图形处理技术，用于在图像渲染中实现平滑的、无闪烁的更新效果。它通过使用两个缓冲区（即两块内存区域）来完成。其中一个缓冲区用于显示图像，而另一个缓冲区则用于在后台进行图像的更新和绘制。当更新完成后，通过交换两个缓冲区的引用，以实现无缝的切换和更新。</p>\n<p>在图形处理中使用双缓存的好处包括：</p>\n<ol>\n<li>无闪烁：通过在后台缓冲区进行绘制，然后将绘制结果一次性地切换到显示缓冲区，可以避免在图像更新过程中的闪烁问题。这对于实时图形、动画和视频等应用非常重要。</li>\n<li>平滑更新：使用双缓冲可以实现平滑的更新效果。在后台缓冲区进行绘制和更新，然后在更新完成后将其切换到显示缓冲区，可以避免直接在显示缓冲区上进行绘制和修改，从而减少了可能出现的可见的渲染中间状态。</li>\n<li>减少渲染延迟：使用双缓冲可以减少渲染延迟。由于绘制和更新发生在后台缓冲区，因此可以在绘制完成后立即切换到显示缓冲区，从而减少了等待绘制完成的时间，提高了渲染效率和响应时间。</li>\n</ol>\n<p>双缓存技术在图形处理、动画、视频播放和游戏开发等领域得到广泛应用。在图形库、操作系统和桌面应用程序中，双缓存被用于实现平滑的图像渲染和交互效果。在前端开发中，双缓存也被广泛应用于图形绘制和动画效果的实现，以提供更好的用户体验。</p>\n<p><code>React</code>使用“双缓存”来完成<code>Fiber树</code>的构建与替换——对应着<code>DOM树</code>的创建与更新。</p>\n<h2 id=\"双缓存Fiber树\"><a href=\"#双缓存Fiber树\" class=\"headerlink\" title=\"双缓存Fiber树\"></a>双缓存Fiber树</h2><p>在<code>React</code>中最多会同时存在两棵<code>Fiber树</code>。当前屏幕上显示内容对应的<code>Fiber树</code>称为<code>current Fiber树</code>，正在内存中构建的<code>Fiber树</code>称为<code>workInProgress Fiber树</code>。</p>\n<p><code>current Fiber树</code>中的<code>Fiber节点</code>被称为<code>current fiber</code>，<code>workInProgress Fiber树</code>中的<code>Fiber节点</code>被称为<code>workInProgress fiber</code>，他们通过<code>alternate</code>属性连接。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">currentFiber.<span class=\"property\">alternate</span> === workInProgressFiber;</span><br><span class=\"line\">workInProgressFiber.<span class=\"property\">alternate</span> === currentFiber;</span><br></pre></td></tr></table></figure>\n\n<p><code>React </code>应用的根节点通过使 <code>current </code> 指针在不同 <code>Fiber树</code> 的 <code>rootFiber</code> 间切换来完成 <code>current Fiber</code> 树指向的切换。</p>\n<p>即当 <code>workInProgress Fiber树</code> 构建完成交给 <code>Renderer</code> 渲染在页面上后，应用根节点的 <code>current</code> 指针指向 <code>workInProgress Fiber树</code> ，此时<code>workInProgress Fiber树</code>就变为<code>current Fiber树</code>。</p>\n<p>每次状态更新都会产生新的<code>workInProgress Fiber树</code>，通过<code>current</code>与<code>workInProgress</code>的替换，完成<code>DOM</code>更新。</p>\n<p>接下来我们以具体例子讲解<code>mount时</code>、<code>update时</code>的构建&#x2F;替换流程。</p>\n<h2 id=\"mount时\"><a href=\"#mount时\" class=\"headerlink\" title=\"mount时\"></a>mount时</h2><p>考虑如下例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">red</span>&#x27; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span>/&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>首次执行<code>ReactDOM.render</code>会创建<code>fiberRootNode</code>（源码中叫<code>fiberRoot</code>）和<code>rootFiber</code>。其中<code>fiberRootNode</code>是整个应用的根节点，<code>rootFiber</code>是<code>&lt;App/&gt;</code>所在组件树的根节点。</li>\n</ol>\n<p>之所以要区分<code>fiberRootNode</code>与<code>rootFiber</code>，是因为在应用中我们可以多次调用<code>ReactDOM.render</code>渲染不同的组件树，他们会拥有不同的<code>rootFiber</code>。但是整个应用的根节点只有一个，那就是<code>fiberRootNode</code>。</p>\n<p><code>fiberRootNode</code>的<code>current</code>会指向当前页面上已渲染内容对应<code>Fiber树</code>，即<code>current Fiber树</code>。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"fiberRootNode\"></p>\n<p><code>fiberRootNode.current = rootFiber;</code></p>\n<p>由于是首屏渲染，页面中还没有挂载任何<code>DOM</code>，所以<code>fiberRootNode.current</code>指向的<code>rootFiber</code>没有任何<code>子Fiber节点</code>（即<code>current Fiber树</code>为空）。</p>\n<ol start=\"2\">\n<li>接下来进入<code>render阶段</code>，根据组件返回的<code>JSX</code>在内存中依次创建<code>Fiber节点</code>并连接在一起构建<code>Fiber树</code>，被称为<code>workInProgress Fiber树</code>。（下图中右侧为内存中构建的树，左侧为页面显示的树）</li>\n</ol>\n<p>在构建<code>workInProgress Fiber树</code>时会尝试复用<code>current Fiber树</code>中已有的<code>Fiber节点</code>内的属性，在<code>首屏渲染</code>时只有<code>rootFiber</code>存在对应的<code>current fiber</code>（即<code>rootFiber.alternate</code>）。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg\"></p>\n<ol start=\"3\">\n<li>图中右侧已构建完的<code>workInProgress Fiber树</code>在<code>commit阶段</code>渲染到页面。</li>\n</ol>\n<p>此时<code>DOM</code>更新为右侧树对应的样子。<code>fiberRootNode</code>的<code>current</code>指针指向<code>workInProgress Fiber树</code>使其变为<code>current Fiber 树</code>。</p>\n<p><img src=\"https://react.iamkasong.com/img/wipTreeFinish.png\"></p>\n<h2 id=\"update时\"><a href=\"#update时\" class=\"headerlink\" title=\"update时\"></a>update时</h2><ol>\n<li><p>接下来我们点击<code>p节点</code>触发状态改变，这会开启一次新的<code>render阶段</code>并构建一棵新的<code>workInProgress Fiber 树</code>。</p>\n<p><img src=\"https://react.iamkasong.com/img/wipTreeUpdate.png\"></p>\n</li>\n</ol>\n<p>和<code>mount</code>时一样，<code>workInProgress fiber</code>的创建可以复用<code>current Fiber树</code>对应的节点数据。</p>\n<ol start=\"2\">\n<li><code>workInProgress Fiber 树</code>在<code>render阶段</code>完成构建后进入<code>commit阶段</code>渲染到页面上。渲染完毕后，<code>workInProgress Fiber 树</code>变为<code>current Fiber 树</code>。</li>\n</ol>\n<p><img src=\"https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg\" alt=\"渲染过程\"></p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/fiber.html","/react/fiber/implement.html","/react/implement.html","/react/fiber/node.html"],"length":1200,"excerpt":"","more":"<h2 id=\"什么是“双缓存”？\"><a href=\"#什么是“双缓存”？\" class=\"headerlink\" title=\"什么是“双缓存”？\"></a>什么是“双缓存”？</h2><p>“双缓存”是一种常见的图形处理技术，用于在图像渲染中实现平滑的、无闪烁的更新效果。它通过使用两个缓冲区（即两块内存区域）来完成。其中一个缓冲区用于显示图像，而另一个缓冲区则用于在后台进行图像的更新和绘制。当更新完成后，通过交换两个缓冲区的引用，以实现无缝的切换和更新。</p>\n<p>在图形处理中使用双缓存的好处包括：</p>\n<ol>\n<li>无闪烁：通过在后台缓冲区进行绘制，然后将绘制结果一次性地切换到显示缓冲区，可以避免在图像更新过程中的闪烁问题。这对于实时图形、动画和视频等应用非常重要。</li>\n<li>平滑更新：使用双缓冲可以实现平滑的更新效果。在后台缓冲区进行绘制和更新，然后在更新完成后将其切换到显示缓冲区，可以避免直接在显示缓冲区上进行绘制和修改，从而减少了可能出现的可见的渲染中间状态。</li>\n<li>减少渲染延迟：使用双缓冲可以减少渲染延迟。由于绘制和更新发生在后台缓冲区，因此可以在绘制完成后立即切换到显示缓冲区，从而减少了等待绘制完成的时间，提高了渲染效率和响应时间。</li>\n</ol>\n<p>双缓存技术在图形处理、动画、视频播放和游戏开发等领域得到广泛应用。在图形库、操作系统和桌面应用程序中，双缓存被用于实现平滑的图像渲染和交互效果。在前端开发中，双缓存也被广泛应用于图形绘制和动画效果的实现，以提供更好的用户体验。</p>\n<p><code>React</code>使用“双缓存”来完成<code>Fiber树</code>的构建与替换——对应着<code>DOM树</code>的创建与更新。</p>\n<h2 id=\"双缓存Fiber树\"><a href=\"#双缓存Fiber树\" class=\"headerlink\" title=\"双缓存Fiber树\"></a>双缓存Fiber树</h2><p>在<code>React</code>中最多会同时存在两棵<code>Fiber树</code>。当前屏幕上显示内容对应的<code>Fiber树</code>称为<code>current Fiber树</code>，正在内存中构建的<code>Fiber树</code>称为<code>workInProgress Fiber树</code>。</p>\n<p><code>current Fiber树</code>中的<code>Fiber节点</code>被称为<code>current fiber</code>，<code>workInProgress Fiber树</code>中的<code>Fiber节点</code>被称为<code>workInProgress fiber</code>，他们通过<code>alternate</code>属性连接。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">currentFiber.<span class=\"property\">alternate</span> === workInProgressFiber;</span><br><span class=\"line\">workInProgressFiber.<span class=\"property\">alternate</span> === currentFiber;</span><br></pre></td></tr></table></figure>\n\n<p><code>React </code>应用的根节点通过使 <code>current </code> 指针在不同 <code>Fiber树</code> 的 <code>rootFiber</code> 间切换来完成 <code>current Fiber</code> 树指向的切换。</p>\n<p>即当 <code>workInProgress Fiber树</code> 构建完成交给 <code>Renderer</code> 渲染在页面上后，应用根节点的 <code>current</code> 指针指向 <code>workInProgress Fiber树</code> ，此时<code>workInProgress Fiber树</code>就变为<code>current Fiber树</code>。</p>\n<p>每次状态更新都会产生新的<code>workInProgress Fiber树</code>，通过<code>current</code>与<code>workInProgress</code>的替换，完成<code>DOM</code>更新。</p>\n<p>接下来我们以具体例子讲解<code>mount时</code>、<code>update时</code>的构建&#x2F;替换流程。</p>\n<h2 id=\"mount时\"><a href=\"#mount时\" class=\"headerlink\" title=\"mount时\"></a>mount时</h2><p>考虑如下例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">red</span>&#x27; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span>/&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>首次执行<code>ReactDOM.render</code>会创建<code>fiberRootNode</code>（源码中叫<code>fiberRoot</code>）和<code>rootFiber</code>。其中<code>fiberRootNode</code>是整个应用的根节点，<code>rootFiber</code>是<code>&lt;App/&gt;</code>所在组件树的根节点。</li>\n</ol>\n<p>之所以要区分<code>fiberRootNode</code>与<code>rootFiber</code>，是因为在应用中我们可以多次调用<code>ReactDOM.render</code>渲染不同的组件树，他们会拥有不同的<code>rootFiber</code>。但是整个应用的根节点只有一个，那就是<code>fiberRootNode</code>。</p>\n<p><code>fiberRootNode</code>的<code>current</code>会指向当前页面上已渲染内容对应<code>Fiber树</code>，即<code>current Fiber树</code>。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"fiberRootNode\"></p>\n<p><code>fiberRootNode.current = rootFiber;</code></p>\n<p>由于是首屏渲染，页面中还没有挂载任何<code>DOM</code>，所以<code>fiberRootNode.current</code>指向的<code>rootFiber</code>没有任何<code>子Fiber节点</code>（即<code>current Fiber树</code>为空）。</p>\n<ol start=\"2\">\n<li>接下来进入<code>render阶段</code>，根据组件返回的<code>JSX</code>在内存中依次创建<code>Fiber节点</code>并连接在一起构建<code>Fiber树</code>，被称为<code>workInProgress Fiber树</code>。（下图中右侧为内存中构建的树，左侧为页面显示的树）</li>\n</ol>\n<p>在构建<code>workInProgress Fiber树</code>时会尝试复用<code>current Fiber树</code>中已有的<code>Fiber节点</code>内的属性，在<code>首屏渲染</code>时只有<code>rootFiber</code>存在对应的<code>current fiber</code>（即<code>rootFiber.alternate</code>）。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg\"></p>\n<ol start=\"3\">\n<li>图中右侧已构建完的<code>workInProgress Fiber树</code>在<code>commit阶段</code>渲染到页面。</li>\n</ol>\n<p>此时<code>DOM</code>更新为右侧树对应的样子。<code>fiberRootNode</code>的<code>current</code>指针指向<code>workInProgress Fiber树</code>使其变为<code>current Fiber 树</code>。</p>\n<p><img src=\"https://react.iamkasong.com/img/wipTreeFinish.png\"></p>\n<h2 id=\"update时\"><a href=\"#update时\" class=\"headerlink\" title=\"update时\"></a>update时</h2><ol>\n<li><p>接下来我们点击<code>p节点</code>触发状态改变，这会开启一次新的<code>render阶段</code>并构建一棵新的<code>workInProgress Fiber 树</code>。</p>\n<p><img src=\"https://react.iamkasong.com/img/wipTreeUpdate.png\"></p>\n</li>\n</ol>\n<p>和<code>mount</code>时一样，<code>workInProgress fiber</code>的创建可以复用<code>current Fiber树</code>对应的节点数据。</p>\n<ol start=\"2\">\n<li><code>workInProgress Fiber 树</code>在<code>render阶段</code>完成构建后进入<code>commit阶段</code>渲染到页面上。渲染完毕后，<code>workInProgress Fiber 树</code>变为<code>current Fiber 树</code>。</li>\n</ol>\n<p><img src=\"https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg\" alt=\"渲染过程\"></p>\n"},{"title":"React 获取服务器端时间","date":"2023-10-19T12:12:08.000Z","description":"本质上就是给服务器端发送一个请求","comments":1,"_content":"\n## React 获取服务器端时间\n\n**思路**：React获取服务器端时间，本质上就是给服务器端发送一个请求，然后从返回数据里面的headers里面获取到服务器date，然后更新服务器时间去格式化，获取服务器时间结束。按秒进行数据刷新，其实也很简单，就是使用定时器，进行动态递增即可，直接上代码。\n<!-- more -->\n获取服务器时间的方法：\n\n```react\nchangeTime = async () => {\n    let leftTime = await axios.get('/').then(response => {\n        console.log(response.headers)\n        return new Date(response.headers.date).getTime()\n     }).catch(error => {\n        console.log(error)\n        return 0\n     })\n        this.setState({\n        time: moment(leftTime).format('YYYY-MM-DD HH:mm:ss')\n    })\n}\n```\n\n自动增加的方法（以秒为单位）:\n\n```react\naddTime = date => {\n      let newDate = new Date(date)\n      newDate.setSeconds(newDate.getSeconds() + 1)\n      this.setState({\n        time: moment(newDate).format('YYYY-MM-DD HH:mm:ss')\n      })\n      window.time = {\n        date: this.state.time,\n        timestamp: Date.parse(new Date(this.state.time))\n      }\n    }\n```\n\n最后根据react  state状态进行页面渲染。","source":"_posts/react/getServiceTime.md","raw":"---\ntitle: React 获取服务器端时间\npermalink: /react/service/time.html\ndate: 2023-10-19 20:12:08\ndescription: 本质上就是给服务器端发送一个请求\ntag: [前端, react, JavaScript]\ncomments: true\ncategories: \n - React\n---\n\n## React 获取服务器端时间\n\n**思路**：React获取服务器端时间，本质上就是给服务器端发送一个请求，然后从返回数据里面的headers里面获取到服务器date，然后更新服务器时间去格式化，获取服务器时间结束。按秒进行数据刷新，其实也很简单，就是使用定时器，进行动态递增即可，直接上代码。\n<!-- more -->\n获取服务器时间的方法：\n\n```react\nchangeTime = async () => {\n    let leftTime = await axios.get('/').then(response => {\n        console.log(response.headers)\n        return new Date(response.headers.date).getTime()\n     }).catch(error => {\n        console.log(error)\n        return 0\n     })\n        this.setState({\n        time: moment(leftTime).format('YYYY-MM-DD HH:mm:ss')\n    })\n}\n```\n\n自动增加的方法（以秒为单位）:\n\n```react\naddTime = date => {\n      let newDate = new Date(date)\n      newDate.setSeconds(newDate.getSeconds() + 1)\n      this.setState({\n        time: moment(newDate).format('YYYY-MM-DD HH:mm:ss')\n      })\n      window.time = {\n        date: this.state.time,\n        timestamp: Date.parse(new Date(this.state.time))\n      }\n    }\n```\n\n最后根据react  state状态进行页面渲染。","slug":"react/getServiceTime","published":1,"updated":"2023-10-21T13:57:22.379Z","__permalink":"/react/service/time.html","layout":"post","photos":[],"link":"","_id":"clofw8ydg001dm0uo0wyz8zwl","content":"<div id=\"vip-container\"><h2 id=\"React-获取服务器端时间\"><a href=\"#React-获取服务器端时间\" class=\"headerlink\" title=\"React 获取服务器端时间\"></a>React 获取服务器端时间</h2><p><strong>思路</strong>：React获取服务器端时间，本质上就是给服务器端发送一个请求，然后从返回数据里面的headers里面获取到服务器date，然后更新服务器时间去格式化，获取服务器时间结束。按秒进行数据刷新，其实也很简单，就是使用定时器，进行动态递增即可，直接上代码。</p>\n<span id=\"more\"></span>\n<p>获取服务器时间的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeTime = async () =&gt; &#123;</span><br><span class=\"line\">    let leftTime = await axios.get(&#x27;/&#x27;).then(response =&gt; &#123;</span><br><span class=\"line\">        console.log(response.headers)</span><br><span class=\"line\">        return new Date(response.headers.date).getTime()</span><br><span class=\"line\">     &#125;).catch(error =&gt; &#123;</span><br><span class=\"line\">        console.log(error)</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">        time: moment(leftTime).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自动增加的方法（以秒为单位）:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addTime = date =&gt; &#123;</span><br><span class=\"line\">      let newDate = new Date(date)</span><br><span class=\"line\">      newDate.setSeconds(newDate.getSeconds() + 1)</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        time: moment(newDate).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      window.time = &#123;</span><br><span class=\"line\">        date: this.state.time,</span><br><span class=\"line\">        timestamp: Date.parse(new Date(this.state.time))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后根据react  state状态进行页面渲染。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/fiber.html","/react/fiber/implement.html","/react/synthetic/event.html"],"length":208,"excerpt":"<h2 id=\"React-获取服务器端时间\"><a href=\"#React-获取服务器端时间\" class=\"headerlink\" title=\"React 获取服务器端时间\"></a>React 获取服务器端时间</h2><p><strong>思路</strong>：React获取服务器端时间，本质上就是给服务器端发送一个请求，然后从返回数据里面的headers里面获取到服务器date，然后更新服务器时间去格式化，获取服务器时间结束。按秒进行数据刷新，其实也很简单，就是使用定时器，进行动态递增即可，直接上代码。</p>","more":"<p>获取服务器时间的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeTime = async () =&gt; &#123;</span><br><span class=\"line\">    let leftTime = await axios.get(&#x27;/&#x27;).then(response =&gt; &#123;</span><br><span class=\"line\">        console.log(response.headers)</span><br><span class=\"line\">        return new Date(response.headers.date).getTime()</span><br><span class=\"line\">     &#125;).catch(error =&gt; &#123;</span><br><span class=\"line\">        console.log(error)</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">        time: moment(leftTime).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自动增加的方法（以秒为单位）:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addTime = date =&gt; &#123;</span><br><span class=\"line\">      let newDate = new Date(date)</span><br><span class=\"line\">      newDate.setSeconds(newDate.getSeconds() + 1)</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        time: moment(newDate).format(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      window.time = &#123;</span><br><span class=\"line\">        date: this.state.time,</span><br><span class=\"line\">        timestamp: Date.parse(new Date(this.state.time))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后根据react  state状态进行页面渲染。</p>"},{"title":"React 使用合成事件（SyntheticEvent）","description":"React 使用合成事件（SyntheticEvent）来处理浏览器原生事件的跨浏览器兼容性问题。合成事件是一个封装了原生事件的对象，提供了一致的跨浏览器接口，使您能够在不同浏览器中以一致的方式处理事件。","date":"2023-10-18T13:27:49.000Z","comments":1,"_content":"\n# React 使用合成事件\nReact 使用合成事件（SyntheticEvent）来处理浏览器原生事件的跨浏览器兼容性问题。合成事件是一个封装了原生事件的对象，提供了一致的跨浏览器接口，使您能够在不同浏览器中以一致的方式处理事件。\n<!-- more -->\n在 React 中，您可以通过在组件中定义事件处理函数并将其传递给相应的元素来处理合成事件。例如，您可以在一个按钮上定义一个点击事件处理函数：\n```js\nclass MyComponent extends React.Component {\n  handleClick = (event) => {\n    console.log('Button clicked!');\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>Click me!</button>\n    );\n  }\n}\n```\n在上面的示例中，我们定义了一个名为handleClick的点击事件处理函数，并将其传递给按钮的onClick属性。当按钮被点击时，React 将自动创建一个合成事件对象，并将其作为参数传递给handleClick函数。您可以在事件处理函数中访问合成事件对象，并使用其属性和方法进行操作。\n\n合成事件对象具有与原生事件对象相似的属性和方法，但也有一些额外的属性和方法，用于处理 React 特定的功能。例如，您可以使用event.target来访问触发事件的元素，event.preventDefault()来阻止默认行为，以及event.stopPropagation()来阻止事件冒泡。\n\n请注意，由于合成事件是 React 提供的跨浏览器抽象，它并不是浏览器原生事件对象。因此，某些浏览器特定的功能可能不可用或表现不一致。如果需要访问原生事件对象，您可以使用合成事件对象的nativeEvent属性。\n# React合成事件如何阻止事件传播\n\nReact合成事件可以通过调用`e.stopPropagation()`来阻止事件传播。\n当根容器接收到捕获事件时，先触发一次React事件的捕获阶段，然后再执行原生事件的捕获传播。所以，调用`e.stopPropagation()`可以阻止原生事件的传播。\n合成事件是根据事件类型对原生事件的属性进行处理，并包装了关键方法，从而实现了事件的触发和处理。","source":"_posts/react/react-synthetic-event.md","raw":"---\ntitle: React 使用合成事件（SyntheticEvent）\npermalink: /react/synthetic/event.html\ndescription: React 使用合成事件（SyntheticEvent）来处理浏览器原生事件的跨浏览器兼容性问题。合成事件是一个封装了原生事件的对象，提供了一致的跨浏览器接口，使您能够在不同浏览器中以一致的方式处理事件。\ndate: 2023-10-18 21:27:49\ntag: [前端, react, JavaScript]\ncomments: true\ncategories: \n - React\n---\n\n# React 使用合成事件\nReact 使用合成事件（SyntheticEvent）来处理浏览器原生事件的跨浏览器兼容性问题。合成事件是一个封装了原生事件的对象，提供了一致的跨浏览器接口，使您能够在不同浏览器中以一致的方式处理事件。\n<!-- more -->\n在 React 中，您可以通过在组件中定义事件处理函数并将其传递给相应的元素来处理合成事件。例如，您可以在一个按钮上定义一个点击事件处理函数：\n```js\nclass MyComponent extends React.Component {\n  handleClick = (event) => {\n    console.log('Button clicked!');\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>Click me!</button>\n    );\n  }\n}\n```\n在上面的示例中，我们定义了一个名为handleClick的点击事件处理函数，并将其传递给按钮的onClick属性。当按钮被点击时，React 将自动创建一个合成事件对象，并将其作为参数传递给handleClick函数。您可以在事件处理函数中访问合成事件对象，并使用其属性和方法进行操作。\n\n合成事件对象具有与原生事件对象相似的属性和方法，但也有一些额外的属性和方法，用于处理 React 特定的功能。例如，您可以使用event.target来访问触发事件的元素，event.preventDefault()来阻止默认行为，以及event.stopPropagation()来阻止事件冒泡。\n\n请注意，由于合成事件是 React 提供的跨浏览器抽象，它并不是浏览器原生事件对象。因此，某些浏览器特定的功能可能不可用或表现不一致。如果需要访问原生事件对象，您可以使用合成事件对象的nativeEvent属性。\n# React合成事件如何阻止事件传播\n\nReact合成事件可以通过调用`e.stopPropagation()`来阻止事件传播。\n当根容器接收到捕获事件时，先触发一次React事件的捕获阶段，然后再执行原生事件的捕获传播。所以，调用`e.stopPropagation()`可以阻止原生事件的传播。\n合成事件是根据事件类型对原生事件的属性进行处理，并包装了关键方法，从而实现了事件的触发和处理。","slug":"react/react-synthetic-event","published":1,"updated":"2023-10-21T13:57:14.266Z","__permalink":"/react/synthetic/event.html","layout":"post","photos":[],"link":"","_id":"clofw8ydh001gm0uo8x5zhw8u","content":"<div id=\"vip-container\"><h1 id=\"React-使用合成事件\"><a href=\"#React-使用合成事件\" class=\"headerlink\" title=\"React 使用合成事件\"></a>React 使用合成事件</h1><p>React 使用合成事件（SyntheticEvent）来处理浏览器原生事件的跨浏览器兼容性问题。合成事件是一个封装了原生事件的对象，提供了一致的跨浏览器接口，使您能够在不同浏览器中以一致的方式处理事件。</p>\n<span id=\"more\"></span>\n<p>在 React 中，您可以通过在组件中定义事件处理函数并将其传递给相应的元素来处理合成事件。例如，您可以在一个按钮上定义一个点击事件处理函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  handleClick = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Button clicked!&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，我们定义了一个名为handleClick的点击事件处理函数，并将其传递给按钮的onClick属性。当按钮被点击时，React 将自动创建一个合成事件对象，并将其作为参数传递给handleClick函数。您可以在事件处理函数中访问合成事件对象，并使用其属性和方法进行操作。</p>\n<p>合成事件对象具有与原生事件对象相似的属性和方法，但也有一些额外的属性和方法，用于处理 React 特定的功能。例如，您可以使用event.target来访问触发事件的元素，event.preventDefault()来阻止默认行为，以及event.stopPropagation()来阻止事件冒泡。</p>\n<p>请注意，由于合成事件是 React 提供的跨浏览器抽象，它并不是浏览器原生事件对象。因此，某些浏览器特定的功能可能不可用或表现不一致。如果需要访问原生事件对象，您可以使用合成事件对象的nativeEvent属性。</p>\n<h1 id=\"React合成事件如何阻止事件传播\"><a href=\"#React合成事件如何阻止事件传播\" class=\"headerlink\" title=\"React合成事件如何阻止事件传播\"></a>React合成事件如何阻止事件传播</h1><p>React合成事件可以通过调用<code>e.stopPropagation()</code>来阻止事件传播。<br>当根容器接收到捕获事件时，先触发一次React事件的捕获阶段，然后再执行原生事件的捕获传播。所以，调用<code>e.stopPropagation()</code>可以阻止原生事件的传播。<br>合成事件是根据事件类型对原生事件的属性进行处理，并包装了关键方法，从而实现了事件的触发和处理。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/fiber.html","/react/fiber/implement.html","/react/service/time.html","/react/implement.html","/react/fiber/node.html"],"length":565,"excerpt":"<h1 id=\"React-使用合成事件\"><a href=\"#React-使用合成事件\" class=\"headerlink\" title=\"React 使用合成事件\"></a>React 使用合成事件</h1><p>React 使用合成事件（SyntheticEvent）来处理浏览器原生事件的跨浏览器兼容性问题。合成事件是一个封装了原生事件的对象，提供了一致的跨浏览器接口，使您能够在不同浏览器中以一致的方式处理事件。</p>","more":"<p>在 React 中，您可以通过在组件中定义事件处理函数并将其传递给相应的元素来处理合成事件。例如，您可以在一个按钮上定义一个点击事件处理函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  handleClick = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Button clicked!&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，我们定义了一个名为handleClick的点击事件处理函数，并将其传递给按钮的onClick属性。当按钮被点击时，React 将自动创建一个合成事件对象，并将其作为参数传递给handleClick函数。您可以在事件处理函数中访问合成事件对象，并使用其属性和方法进行操作。</p>\n<p>合成事件对象具有与原生事件对象相似的属性和方法，但也有一些额外的属性和方法，用于处理 React 特定的功能。例如，您可以使用event.target来访问触发事件的元素，event.preventDefault()来阻止默认行为，以及event.stopPropagation()来阻止事件冒泡。</p>\n<p>请注意，由于合成事件是 React 提供的跨浏览器抽象，它并不是浏览器原生事件对象。因此，某些浏览器特定的功能可能不可用或表现不一致。如果需要访问原生事件对象，您可以使用合成事件对象的nativeEvent属性。</p>\n<h1 id=\"React合成事件如何阻止事件传播\"><a href=\"#React合成事件如何阻止事件传播\" class=\"headerlink\" title=\"React合成事件如何阻止事件传播\"></a>React合成事件如何阻止事件传播</h1><p>React合成事件可以通过调用<code>e.stopPropagation()</code>来阻止事件传播。<br>当根容器接收到捕获事件时，先触发一次React事件的捕获阶段，然后再执行原生事件的捕获传播。所以，调用<code>e.stopPropagation()</code>可以阻止原生事件的传播。<br>合成事件是根据事件类型对原生事件的属性进行处理，并包装了关键方法，从而实现了事件的触发和处理。</p>"},{"title":"React 实现原理","date":"2023-10-27T02:58:50.000Z","description":"Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。","comments":1,"_content":"\n### 实现jsx\n```jsx\n    let element = (\n    <h1>\n        hello<span style={{ color: \"red\" }}>world</span>\n    </h1>\n    );\n    console.log(element);\n\n```\n\n### 编译后\n\n![jsx 编译之后](https://pic.imgdb.cn/item/653b2718c458853aef75775a.jpg)\n\n### 如何实现\n\n1. jsx-dev-runtime.js\n```jsx\n    export { jsxDEV } from \"./jsx/ReactJSXElement\";\n\n```\n\n2. ReactJSXElement.js\n```jsx\n    import hasOwnProperty from '../../shared/hasOwnProperty';\n\n    // dom 类型\n    import { REACT_ELEMENT_TYPE  } from '../../shared/ReactSymbols';\n\n    const RESERVED_PROPS = {\n        key: true,\n        ref: true,\n        __self: true,\n        __source: true\n    };\n\n    function hasValidKey(config) {\n        return config.key !== undefined;\n    }\n\n    function hasValidRef(config) {\n        return config.ref !== undefined;\n    }\n\n    // ReactElement 创建\n    function ReactElement(type, key, ref, props, owner) {\n        return {\n            // 这个标签允许我们唯一地将其标识为React元素\n            $$typeof: REACT_ELEMENT_TYPE,\n            type,\n            key,\n            ref,\n            props,\n            \n        }\n    }\n\n\n    export function jsxDEV(type, config) {\n        // 提取保留名称\n        const props = {};\n        let key = null;\n        let ref = null;\n        if(hasValidKey(config)) {\n            key = config.key;\n        }\n\n        if(hasValidRef(config)) {\n            ref = config.ref;\n        }\n\n        for(const propName in config) {\n            if(hasOwnProperty.call(config, propName) &&\n            !RESERVED_PROPS.hasOwnProperty(propName)\n            ) {\n                props[propName] = config[propName];\n            }\n        }\n        return ReactElement(type, key, ref, props)\n    }\n\n```\n\n3. hasOwnProperty.js\n```jsx\n    const { hasOwnProperty } = Object.prototype;\n\n    export default hasOwnProperty;\n```\n\n4. ReactSymbols.js\n```jsx\n    // 用于标记类似 ReactElement 类型的符号。\n    export const REACT_ELEMENT_TYPE = Symbol.for('react.element');\n```\n\n### 根节点和根fiber\n\n- 需要给react提供一个根节点，之后每个节点都是渲染在根节点内部的。\n\n```js\nconst root = createRoot(document.getElementById('root'))\n```\n\n- 根fiber可以通俗理解为一个装着所有虚拟dom的容器，每个虚拟dom又单独对应一个fiber，\n- 渲染可以以单个fiber为单位暂停 / 恢复。\n- 需要创建两个根 `fiber` 去相互替换展示。\n\n#### 创建根节点\n\n更改main.jsx\n```jsx\n    import { createRoot } from \"react-dom/client\"\n\n    let element = (\n    <h1>hello<span style={{ color: 'red' }}>world</span></h1>\n    )\n\n    const root = createRoot(document.getElementById('root'));\n    console.log(root)\n\n```\n\n首先要建一个`FiberRootNode`根节点，也就是所有DOM的根，本质就是 `div#root`。\n\n根节点和`fiber`关系：\n\n![根节点和`fiber`关系](https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg)\n\n`FiberRootNode` 和 `HostRootFiber` 中间使用 `current` 相连；\n\n`HostRootFiber` 和 `FiberRootNode` 中间使用 `stateNode` 相连。\n\n#### 实现createRoot\n\n分这么多文件的主要是因为很多其他逻辑要处理，暂时都给省略了。虽然比较绕，但其实本质就是把`div#root`做了几层包装。\n\n1. client.js\n```js\n    export { createRoot } from \"./src/client/ReactDOMRoot\";\n```\n\n2. ReactDOMRoot.js\n```js\n    import { createContainer } from \"react-reconciler/src/ReactFiberReconciler\";\n    function ReactDOMRoot(internalRoot) {\n    this._internalRoot = internalRoot;\n    }\n    // 创建一个根 实际就是一个被包装过的真实DOM节点\n    // container: div#root\n    export function createRoot(container) {\n    // 1. 创建容器   6. 接收到有#root的容器\n    const root = createContainer(container);\n    // 7. 容器传给 ReactDOMRoot\n    return new ReactDOMRoot(root);\n    }\n```\n\n3. ReactFiberReconciler.js\n```js\n    import { createFiberRoot } from \"./ReactFiberRoot\";\n    // 创建容器 containerInfo: 容器信息\n    export function createContainer(containerInfo) {\n    // 2\n    return createFiberRoot(containerInfo);\n    }\n```\n\n4. ReactFiberRoot.js\n```js\n    function FiberRootNode(containerInfo) {\n    // 4. 把DOM节点放到容器\n    this.containerInfo = containerInfo\n    }\n    export function createFiberRoot(containerInfo) {\n    // 3. 创建根容器\n    const root = new FiberRootNode(containerInfo);\n    // 这个位置在下一步要创建 FiberRoot\n    // 5. 把容器返回出去\n    return root;\n    }\n```\n\n现在根节点`FiberRootNode`创建好了，最后`root`的打印结果：\n\n![FiberRootNode](https://pic.imgdb.cn/item/653b2e66c458853aef8a195c.jpg)\n\n#### fiber\n\n在创建根fiber之前先了解一下fiber\n\n#### 为什么需要有fiber？\n\n- react以前没有fiber整个计算过程不能暂停，会导致时间过长\n- 浏览器刷新频率为 60Hz,大概 16.6 毫秒渲染一次，而 JS 线程和渲染线程是互斥的，所以如果 JS 线程执行任务时间超过 16.6ms 的话，就会导致掉帧、卡顿，解决方案就是 React 利用空闲的时间进行更新，不影响渲染进行的渲染\n- 把一个耗时任务切分成一个个小任务，分布在每一帧里。这个的方式就叫时间切片\n\n我们需要把渲染变成一个可中断，可暂停，可恢复的过程。\n注：可以去搜一下 requestIdleCallback API ，react封装了一个类似的方法让每帧时间固定 5ms。\n\n#### 什么是fiber？\n\n- Fiber 是一个执行单元\n\n    Fiber 是一个执行单元,每次执行完一个执行单元，React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去。\n\n    react 中一帧的过程：\n\n    ![react 中一帧的过程](https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg)\n\n- Fiber 是一种数据结构\n    React 目前的做法是使用链表, 每个虚拟节点内部表示为一个Fiber\n    从顶点开始遍历\n    如果有第一个儿子，先遍历第一个儿子\n    如果没有第一个儿子，标志着此节点遍历完成\n    如果有弟弟遍历弟弟\n    如果有没有下一个弟弟，返回父节点标识完成父节点遍历，如果有叔叔遍历叔叔\n    没有父节点遍历结束\n\n    遍历结构：\n    ![遍历结构](https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg)\n\n    遍历过程：\n    ![遍历过程](https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg)\n\n#### 创建根fiber\n\n真实DOM需要一个根容器，`fiber`同样需要一个根`fiber`。\n\n相当于每个虚拟DOM都会创建一个对应的`Fiber`，再创建真实DOM\n\n虚拟DOM => Fiber => 真实DOM\n\n在刚刚创建FiberRootNode的函数里去创建`HostRootFiber`并互相指向对方。\n\n![根节点和`fiber`关系](https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg)\n\n1. ReactFiberRoot.js\n```js\n    import { createHostRootFiber } from \"./ReactFiber\";\n\n    function FiberRootNode(containerInfo) {\n    this.containerInfo = containerInfo;\n    }\n    export function createFiberRoot(containerInfo) {\n    // 之前创建的根节点容器\n    const root = new FiberRootNode(containerInfo);\n    // 1. 创建根fiber. hostRoot就是根节点dev#root\n    // 未初始化的fiber\n    const uninitializedFiber = createHostRootFiber();\n    // 当前渲染页面的fiber.\n    // 6. 根容器的current指向当前的根fiber\n    root.current = uninitializedFiber;\n    uninitializedFiber.stateNode = root;\n    return root;\n    }\n\n```\n\n2. ReactFiber.js\n```js\n    // 3. 工作标签\n    import { HostRoot } from \"./ReactWorkTags\";\n    // 5. 副作用标识\n    import { NoFlags } from \"./ReactFiberFlags\";\n\n    export function FiberNode(tag, pendingProps, key) {\n    this.tag = tag;\n    this.key = key;\n    this.type = null; // fiber类型, 来自于虚拟DOM节点的type   (span h1 p)\n    this.stateNode = null; // 此fiber对应的真实DOM节点\n\n    this.return = null; // 指向父节点\n    this.child = null; // 指向第一个子节点\n    this.sibling = null; // 指向弟弟\n\n    this.pendingProps = pendingProps; // 等待生效的属性\n    this.memoizedProps = null; // 已经生效的属性\n    // 虚拟DOM会提供pendingProps给创建fiber的属性，等处理完复制给memoizedProps\n\n    // 每个fiber还会有自己的状态，每一种fiber状态存的类型都不一样\n    // 比如：类组件对应的fiber存的就是实例的状态，HostRoot存的就是要渲染的元素\n    this.memoizedState = null;\n\n    // 每个fiber可能还有自己的更新队列\n    this.updateQueue = null;\n\n    // 5. \"./ReactFiberFlags\"\n    this.flags = NoFlags; // 副作用标识，表示对此fiber节点进行何种操作\n    this.subtreeFlags = NoFlags; // 子节点对应的副作用标识\n    this.alternate = null; // 轮替 (缓存了另一个fiber节点实例) diff时用\n    }\n\n    export function createFiberNode(tag, pendingProps, key) {\n    return new FiberNode(tag, pendingProps, key);\n    }\n\n    export function createHostRootFiber() {\n    return createFiberNode(HostRoot, null, null);\n    }\n\n```\n\n3. ReactWorkTags.js\n```js\n    // 每种虚拟DOM都会对应自己的fiber的类型\n    // 根Fiber的Tag\n    export const HostRoot = 3; // 根节点\n    export const HostComponent = 5; // 原生节点 span div p\n    export const HostText = 6; // 纯文本节点\n    // ...\n\n```\n\n4. ReactFiberFlags.js\n```js\n    // 没有任何操作\n    export const NoFlags = 0b000000000000000000000000000000;\n    // 插入\n    export const Placement = 0b000000000000000000000000000010;\n    // 更新\n    export const Update = 0b000000000000000000000000000100;\n\n```\n看最后root的打印结果：根fiber和节点容器互相指向\n\n![根fiber和节点容器互相指向](https://pic.imgdb.cn/item/653b5beac458853aef1a1a12.jpg)\n\n    current指的是当前根容器正在显示或者已经渲染好的fiber树\n\nreact采用了双缓存区的技术，可以把将要显示的图片绘制在缓存区中，需要展示的时候直接拿来替换掉。 alternate 轮替。\n\n![](https://pic.imgdb.cn/item/653bc1f2c458853aefb79377.jpg)\n\n#### 创建队列\n打开ReactFiberRoot.js文件，在return root之前加一行代码，给根fiber加上一个更新队列，之后更新渲染任务都是放到这个队列里面。\n\n1. ReactFiberRoot.js\n```js\n    + import { initialUpdateQueue } from \"./ReactFiberClassUpdateQueue\";\n    ...\n    + initialUpdateQueue(uninitializedFiber);\n    return root;\n```\n\n2. ReactFiberClassUpdateQueue.js\n```js\n    export function initialUpdateQueue(fiber) {\n        // 创建一个更新队列\n        // pending 是循环链表\n        const queue = {\n            shared: {\n                pending: null,\n            }\n        }\n        fiber.updateQueue = queue;\n    }\n```\n\n如下图所示在fiber树中增加了updateQueue 队列\n\n![updateQueue 队列](https://pic.imgdb.cn/item/653bc2bdc458853aefbd2de4.jpg)\n\n### 构建轮替的根fiber\n\n#### fiber是怎么运作的\n\n    为什么要轮替在上一篇已经说过了，这一篇写一下fiber的单项循环链表。\n\n假如我们有一个jsx 的dom结构\n```js\n    let element = (\n        <div className=\"A1\">\n            <div className=\"B1\">\n                <div className=\"C1\"></div>\n                <div className=\"C2\"></div>\n            </div>\n            <div className=\"B2\"></div>\n        </div>\n    )\n\n```\n\n在以前没有用fiber渲染是这样的，这个渲染方式是递归渲染如果数据很多就可能会卡顿。\n```js\n    let vDom = {\n        \"type\": \"div\",\n        \"key\": \"A1\",\n        \"props\": {\n            \"className\": \"A1\",\n            \"children\": [\n                {\n                    \"type\": \"div\",\n                    \"key\": \"B1\",\n                    \"props\": {\n                        \"className\": \"B1\",\n                        \"children\": [\n                            {\n                                \"type\": \"div\",\n                                \"key\": \"C1\",\n                                \"props\": { \"className\": \"C1\"},\n                            },\n                            {\n                                \"type\": \"div\",\n                                \"key\": \"C2\",\n                                \"props\": {\"className\": \"C2\"},\n                            }\n                        ]\n                    },\n                },\n                {\n                    \"type\": \"div\",\n                    \"key\": \"B2\",\n                    \"props\": {\"className\": \"B2\"},\n                }\n            ]\n        },\n    }\n    // 把vDom一气呵成渲染到页面\n    function render(element, container) {\n        // 把虚拟DOM创建成真实DOM\n        let dom = document.createElement(element.type);\n        // 遍历属性\n        Object.keys(element.props).filter(key => key !== 'children').forEach(key => {\n            dom[key] = element.props[key];\n        });\n        // 把子节点渲染到父节点上\n        if(Array.isArray(element.props.children)){\n            element.props.children.forEach(child=>render(child,dom));\n        }\n        // 把真实节点挂载到容器\n        container.appendChild(dom);\n    }\n    render(element, document.getElementById('root'));\n```\n\n下面是fiber的渲染方式，可以中断、暂停、恢复渲染。深度优先\n```js\n    // 把虚拟DOM构建成Fiber树\n    let A1 = { type: 'div', props: { className: 'A1' } };\n    let B1 = { type: 'div', props: { className: 'B1' }, return: A1 };\n    let B2 = { type: 'div', props: { className: 'B2' }, return: A1 };\n    let C1 = { type: 'div', props: { className: 'C1' }, return: B1 };\n    let C2 = { type: 'div', props: { className: 'C2' }, return: B1 };\n    A1.child = B1;\n    B1.sibling = B2;\n    B1.child = C1;\n    C1.sibling = C2;\n\n    // 下一个工作单元\n    let nextUnitOfWork = null;\n\n    function hasRemainingTime() {\n        // 模拟有时间\n        return true;\n    }\n\n    // render 工作循序\n    function workLoop() {\n        // 有下一个节点并且有时间时\n        // 每一个任务执行完都可以放弃，让浏览器执行更高优先级的任务\n        while(nextUnitOfWork && hasRemainingTime()) {\n            // 执行下一个任务并返回下一个任务\n            nextUnitOfWork = performUnitOfWork(fiber);\n        }\n        console.log('render 阶段结束\");\n    }\n    \n    // 执行完后返回下一个节点\n    function performUnitOfWork(fiber) {\n        // 执行渲染\n        let child = beginWork(fiber);\n        if(child) {\n            return child;\n        }\n        // 如果没有子节点说明当前节点已经完成了渲染工作\n        while(fiber) {\n            // 可以结束此fiber的渲染了 \n            completeUnitOfWork(fiber);\n            // 如果有弟弟就返回弟弟\n            if(fiber.sibling) {\n                return fiber.sibling;\n            }\n            // 否则就返回上一层\n            fiber = fiber.return;\n        }\n    }\n\n    function beginWork(fiber) {\n        console.log('beginWork', fiber.props.className);\n        // 执行完成后返回第一个子节点\n        return fiber.child;\n    }\n\n    function completeUnitOfWork(fiber) {\n        // 标记当前这个fiber街道已经完成\n        console.log('completeUnitOfWork', fiber.props.className);\n    }\n\n```\n\n上面的这些代码是预先熟悉一下，fiber 是怎么运行，下面正式进入构建的代码逻辑。\n\n#### 队列的单向链表\n\n1. 在main.js 中增加下面代码\n```js\nroot.render(element)\n```\n\n2. ReactDOMRoot.js\n```js\n    import { updateContainer } from '../react-reconciler/src/ReactFiberReconciler';\n    ...\n    ReactDomRoot.prototype.render = function (children) {\n    // 1. 获取容器\n    const root = this._internalRoot;\n    updateContainer(children, root);\n    }\n```\n\n3. ReactFiberReconciler.js\n```js\n    import { createUpdate, enqueueUpdate } from './ReactFiberClassUpdateQueue';\n    ...\n    /**\n     * 更新容器, 把虚拟DOM变成真实DOM 插入到container容器中\n     * @param {*} element 虚拟DOM\n     * @param {*} container 容器   FiberRootNode\n     */\n    export function updateContainer(element, container) {\n    // 获取根fiber\n    const current = container.current;\n    // 创建更新队列\n    const update = createUpdate();\n    update.payload = {element};\n    // 3. 把此更新任务对象添加到current这个根Fiber的更新队列里\n\n    let root = enqueueUpdate(current, update);\n    console.log(root);\n    }\n```\n\n4. ReactFiberClassUpdateQueue.js\n\n![ReactFiberClassUpdateQueue.js](https://pic.imgdb.cn/item/653e40f6c458853aefe48306.jpg)\n```js\n    import { markUpdateLaneFromFiberToRoot } from './ReactFiberConcurrentUpdate'\n    ...\n    // 更新状态\n    export const UpdateState = 0;\n\n    export function createUpdate() {\n        const update = {tag: UpdateState};\n        return update;\n    }\n\n    export function enqueueUpdate(fiber, update) {\n        // 获取根fiber的更新队列 (上一篇最后加的)\n        const updateQueue = fiber.updateQueue;\n        // 获取等待执行的任务\n        const pending = updateQueue.shared.pending;\n        // 说明初始化的状态\n        if(pending === null) {\n            update.next = update;\n        } else {\n            update.next = pending.next;\n            pending.next = update;\n        }\n    \n        // 让等待更新指向当前update 开始更新\n        updateQueue.shared.pending = update;\n\n        // 从当前的fiber 到返回找到并返回根节点\n\n        return markUpdateLaneFromFiberToRoot(fiber);\n\n    }\n\n```\n\n#### 冒泡获取根节点容器 \n\nReactFiberConcurrentUpdate.js\n```js\n    import { HostRoot } from './ReactWorkTags';\n\n    /**\n     * 本来此文件要处理更新优先级问题，把不同的fiber优先级冒泡一路标记到根节点。\n     * 目前现在值实现向上冒泡找到根节点\n     * @param {*} sourceFiber\n     */\n\n    export function markUpdateLaneFromFiberToRoot(sourceFiber) {\n        // 当前父fiber\n        let parent = sourceFiber.return;\n        // 当前fiber\n        let node = sourceFiber;\n\n        // 一直找到 父fiber 为null\n        while(parent !== null) {\n            node = parent;\n            parent = parent.return;\n        }\n        // 返回当前root节点\n        if(node.tag === HostRoot) {\n            const root = node.stateNode;\n            return root;\n        }\n        return null;\n    }\n\n```\n\n#### 调度更新\n\n到目前为止更新对象已经添加到了根fiber的更新队列上，现在需要开始进行调度更新。\n\n1. ReactFiberReconciler.js\n```js\n    import { scheduleUpdateOnFiber } from './ReactFiberWorkLoop'\n    ...\n    export function updateContainer(element, container) {\n    ...\n    + scheduleUpdateOnFiber(root);\n    }\n\n```\n\n2. ReactFiberWorkLoop.js\n```js\n    import { scheduleCallback } from './scheduler';\n\n    export function scheduleUpdateOnFiber(root) {\n        ensureRootIsScheduled(root);\n    }\n\n    export function ensureRootIsScheduled(root) {\n        // 告诉浏览器要执行performConcurrentWorkOnRoot 参数定死为root\n        scheduleCallback(performConcurrentWorkOnRoot.bind(null, root));\n    }\n\n    function performConcurrentWorkOnRoot(root) {\n        console.log(root, 'performConcurrentWorkOnRoot');\n    }\n```\n\n3. src/scheduler/index.js\n```js\n    export * from './src/forks/Scheduler';\n```\n\n4. src/forks/Scheduler.js\n```js\n    // 此处后面会实现优先级队列\n    export function scheduleCallback(callback) {\n    requestIdleCallback(callback);\n    }\n```\n\n5. 打印FiberRootNode\n\n![输出的FiberRootNode](https://pic.imgdb.cn/item/653e496bc458853aef00deb1.jpg)\n\n### 工作循环\n\n![工作循环](https://pic.imgdb.cn/item/653e4d86c458853aef11c6ea.jpg)\n\n我们已经创建好一个根节点容器和一个空的根fiber（黑色部分），在图中看到还有一个正在构建中的根fiber。\n根节点的current指的是当前的根fiber，是会和构建中的根fiber轮替工作（双缓冲），现在需要构建一个新的根fiber并且把fiber树写在里面。\n一个是表示当前页面已经渲染完成的fiber树，一个是正在构建中还没有生效、更没有更新到页面的fiber树\n\n#### 建立新的hostRootFiber\n\n1. ReactFiberWorkLoop.js\n```js\n    import { creatWorkInProgress } from \"./ReactFiber\";\n\n    // 正在进行中的工作\n    let workInProgress = null\n\n    //...\n\n    /**\n     * (被告知浏览器确保执行的函数)\n     * 根据当前的fiber节点构建fiber树, 创建真实的dom节点, 插入到容器\n     * @param {*} root\n     */\n    function performConcurrentWorkOnRoot(root) {\n    // 1. 初次渲染的时候以同步方式渲染根节点, 因为要尽快展示 (初始化)\n    renderRootSync(root);\n    }\n\n    function prepareFreshStack(root) {\n    // 5. 根据老fiber构建新fiber (初始化)\n    workInProgress = creatWorkInProgress(root.current);\n    }\n\n    function renderRootSync(root) {\n    // 2. 先构建了一个空的栈\n    prepareFreshStack(root);\n    }\n\n```\n\n2. ReactFiber.js\n```js\n    /**\n     * 根据老fiber和新的属性构建新fiber\n     * @param {*} current 老fiber\n     * @param {*} pendingProps 新的属性\n     */\n    export function creatWorkInProgress(current, pendingProps) {\n        // 3. 拿到老fiber的轮替 第一次没有 (初始化)\n        let workInProgress = current.alternate;\n        if(workInProgress === null) {\n            workInProgress = createFiberNode(current.tag, pendingProps, current.key);\n            workInProgress.type = current.type;\n            workInProgress.stateNode = current.stateNode;\n\n            workInProgress.stateNode = current;\n            current.alternate =  workInProgress;\n        } else {\n            // 如果有，说明是更新，只能改属性就可以复用\n            workInProgress.pendingProps = current.pendingProps;\n            workInProgress.type = current.type;\n            workInProgress.flags = current.flags;\n            workInProgress.subtreeFlags = NoFlags;\n        }\n        // 复制属性\n        workInProgress.child = current.child;\n        workInProgress.memoizedProps = current.memoizedProps;\n        workInProgress.memoizedState = current.memoizedState;\n        workInProgress.updateQueue = current.updateQueue;\n        workInProgress.sibling = current.sibling;\n        workInProgress.index = current.index;\n        return workInProgress;\n    }\n```\n\n#### 执行工作单元\n\n然后在新的根fiber里构建更新fiber树\n\n1. ReactFiberWorkLoop.js\n```js\n    import { beginWork } from \"./ReactFiberBeginWork\";\n    ...\n    function renderRootSync(root) {\n        // 2. 先构建一个空的栈\n        prepareFreshStack(root);\n        // 1. 现在的 workInProgress 是新的根fiber\n        workLoopSync();\n    }\n\n    // 工作同步循环\n    function workLoopSync() {\n        while(workInProgress !== null) {\n            // 2. 执行工作单元\n            performUnitOfWork(workInProgress);\n        }\n    }\n\n    function performUnitOfWork(unitOfWork) {\n        const current = unitOfWork.alternate;\n\n        const next = beginWork(current, unitOfWork);\n\n        unitOfWork.memoizedProps = unitOfWork.pendingProps;\n        if(next === null) {\n            // 说明已经完成\n            // 完成工作单元\n            // completeUnitOfWork(); // 这个方法之后写 先模拟一下完成工作\n            workInProgress = null;\n        } else {\n            // 如果有子节点就成为下一个工作单元\n            workInProgress = next;\n        }\n    }\n```\n\n2. ReactFiberBeginWork.js\n```js\n    import { HostComponent, HostRoot, HostText } from \"./ReactWorkTags\";\n    import { processUpdateQueue } from './ReactFiberClassUpdateQueue';\n\n    /**\n     * 5. 根据 `新的` 虚拟dom去构建  `新的` fiber链表\n     * @param {*} current 老fiber\n     * @param {*} workInProgress 新fiber\n     * @returns 下一个工作单元\n     */\n    export function beginWork(current, workInProgress) {\n        console.log(\"beginWork\", workInProgress);\n        // 判断类型不同处理方式返回子节点或者弟弟\n        switch(workInProgress.tag) {\n            case HostRoot:\n                return updateHostRoot(current, workInProgress);\n            case HostComponent:\n                return updateHostComponent(current, workInProgress);\n            \n            case HostText:\n                return null;\n            default:\n                return null;\n        }\n    }\n\n    function updateHostRoot(current, workInProgress) {\n        // 需要知道它的子虚拟dom, 知道它的儿子的虚拟dom信息\n        // 之前在根fiber的更新队列加的虚拟dom, 可以在这获取\n        processUpdateQueue(workInProgress);\n        const nextState = workInProgress.memoizedState;\n        // 获取虚拟节点\n        const nextChildren = nextState.element;\n        reconcileChildren(current, workInProgress, nextChildren);\n\n        return workInProgress.child;\n    }\n\n    function updateHostComponents(current, workInProgress) {}\n```\n\n#### 获取更新队列的虚拟dom\n写上一步引入的`processUpdateQueue`方法\n\n1. ReactFiberClassUpdateQueue.js\n```js\n    import { markUpdateLaneFromFiberToRoot } from './ReactFiberConcurrentUpdate'\n\n    export function initialUpdateQueue(fiber) {\n        // 创建一个更新队列\n        // pending 是循环链表\n        const queue = {\n            shared: {\n                pending: null,\n            }\n        }\n        fiber.updateQueue = queue;\n    }\n\n    // 更新状态\n    export const UpdateState = 0;\n\n    export function createUpdate() {\n        const update = {tag: UpdateState};\n        return update;\n    }\n\n    export function enqueueUpdate(fiber, update) {\n        // 获取根fiber的更新队列 (上一篇最后加的)\n        const updateQueue = fiber.updateQueue;\n        // 获取等待执行的任务\n        const pending = updateQueue.shared.pending;\n        // 说明初始化的状态\n        if(pending === null) {\n            update.next = update;\n        } else {\n            update.next = pending.next;\n            pending.next = update;\n        }\n    \n        // 让等待更新指向当前update 开始更新\n        updateQueue.shared.pending = update;\n\n        // 从当前的fiber 到返回找到并返回根节点\n\n        return markUpdateLaneFromFiberToRoot(fiber);\n\n    }\n\n    /**\n     * 根据老状态和更新队列的更新计算最新的状态\n     * @param {*} workInProgress 要计算的fiber\n     */\n    export function processUpdateQueue(workInProgress) {\n        // 拿到更新队列\n        const queue = workInProgress.updateQueue;\n        // 等待生效的队列\n        const pendingQueue = queue.shared.pending;\n        // 如果有更新, 或者更新队列里有内容\n        if(pendingQueue !== null) {\n            // 清除等待生效的更新 因为在这就要使用了可以清除了\n            queue.shared.pending = null;\n            // 获取最后一个等待生效的更新 \n            const lastPendingUpdate = pendingQueue;\n            // 第一个等待生效的更新\n            const firstPendingUpdate = pendingQueue.next;\n            // 把更新链表剪开, 变成单向链表\n            lastPendingUpdate.next = null;\n            // 获取老状态 (会不停更新和计算赋值新状态, 所以起名newState)\n            let newState = workInProgress.memoizedState;\n            let update = firstPendingUpdate;\n            while(update) {\n                // 根据老状态和更新计算新状态\n                newState = getStateFromUpdate(update, newState);\n                update = update.next;\n            }\n\n            // 把最终计算到的状态赋值给 memoizedState\n            workInProgress.memoizedState = newState;\n        }\n    }\n\n    /**\n     * 根据老状态和更新, 计算新状态\n     * @param {*} update 更新\n     * @param {*} prevState 上一个状态\n     * @returns 新状态\n     */\n    function getStateFromUpdate(update, prevState) {\n        switch(update.tag) {\n            case UpdateState:\n                const { payload } = update;\n                return assign({}, prevState, payload);\n        }\n    }\n```\n\n#### 根据子虚拟dom创建子fiber节点\n\n上上步还有一个`reconcileChildren`没有定义\n\n1. ReactFiberBeginWork.js\n```js\n    import { mountChildFibers, reconcileChildFibers } from \"./ReactChildFiber\";\n\n    /**\n     * 根据新的虚拟dom生成新的fiber链表\n     * @param {*} current 老的父fiber\n     * @param {*} workInProgress 新的父fiber\n     * @param {*} nextChildren 新的子虚拟dom\n     */\n    function reconcileChildren(current, workInProgress, nextChildren) {\n        // 如果此新fiber没有老fiber, 说明是新创建的\n        if (current === null) {\n            // 挂在子fiber\n            workInProgress.child = mountChildFibers(workInProgress, null, next);\n        } else {\n            // 更新:  协调子fiber列表 需要做DOM-DIFF   (初始化时的根fiber是有老fiber的(一开始创建的))\n            workInProgress.child = reconcileChildFibers(\n            workInProgress,\n            current.child,\n            nextChildren\n            );\n        }\n    }\n\n```\n\n2. ReactChildFiber.js\n```js\n    import { createFiberFromElement } from './ReactFiber';\n    import { REACT_ELEMENT_TYPE } from '../../shared/ReactSymbols';\n    /**\n     *\n     * @param {*} shouldTrackSideEffect 是否跟踪副作用\n     * @returns\n     */\n    function createChildReconciler(shouldTrackSideEffect) {\n\n    function reconcileSingElement(returnFiber, currentFirstFiber, element) {\n            // 因为我们实现的是初次挂载, 老节点currentFirstFiber是没有的, \n            // 所以可以直接根据虚拟dom创建fiber节点\n            const created = createFiberFromElement(element);\n            created.return = returnFiber;\n            return created;\n        }\n\n        /**\n     * 比较子fiber  (DOM-DIFF) 就是用老的fiber链表和新的虚拟dom进行比较\n     * @param {*} returnFiber 新父fiber\n     * @param {*} currentFirstFiber 当前的第一个子fiber(老fiber的第一个儿子)\n     * @param {*} newChild 新的子虚拟dom\n     */\n        function reconcileChildFibers(returnFiber, currentFirstFiber, newChild) {\n            // 现在暂时只考虑新的节点只有一个的情况\n            if(typeof newChild === 'object' && newChild !== null) {\n                switch (newChild.$$typeof) {\n                    case REACT_ELEMENT_TYPE:\n                        return reconcileSingElement(\n                            returnFiber,\n                            currentFirstFiber,\n                            newChild\n                        );\n                    default:\n                        break;\n                }\n            }\n        }\n        return reconcileChildFibers;\n    }\n\n    // 有老父fiber 更新\n    export const reconcileChildFibers = createChildReconciler(true);\n    // 没有老的父fiber 更新\n    export const mountChildFibers = createChildReconciler(false);\n```\n\n3. ReactFiber.js\n```js\n    ...\n    export function createFiberFromElement(element) {\n        const type = element.type;\n        const key = element.key;\n        const pendingProps = element.props;\n        const fiber = createFiberFromTypeAndProps(\n            type,\n            key,\n            pendingProps\n        );\n        return fiber;\n    }\n\n        export function createFiberFromTypeAndProps(type, key, pendingProps) {\n        let fiberTag = IndeterminateComponent;\n        const fiber = createFiberNode(fiberTag, pendingProps, key);\n        fiber.type = type;\n        return fiber;\n    }\n```\n\n### 完成工作单元\n\n1. ReactFiberWorkLoop.js\n```js\n    function completeUnitOfWork(unitOfWork) {\n        ...\n        if (next === null) {\n        // 说明已经完成\n        // 完成工作单元\n        + completeUnitOfWork(unitOfWork); // 这个方法之后写 先模拟一下完成工作\n            // workInProgress = null;\n        } else {\n            // 如果有子节点就成为下一个工作单元\n            workInProgress = next;\n        }\n    }\n    function completeUnitOfWork(unitOfWork) {\n        let completeWork = unitOfWork;\n        do {\n            // 拿到他的父节点和当前节点RootFiber\n            const current = completeWork.alternate;\n            const returnFiber = completeWork.return;\n            let next = completeWork(current, completeWork);\n            // 如果下一个节点不为空\n            if(next !== null) {\n            workInProgress = next;\n            return;\n            }\n            \n            const siblingFiber = completeWork.sibling;\n            // 如果兄弟节点不为空\n            if(siblingFiber !== null) {\n            workInProgress = siblingFiber;\n            return;\n            }\n            // 返回父节点\n            completeWork = returnFiber;\n\n        } while(completeWork !== null);\n    }\n```","source":"_posts/react/reactImplement.md","raw":"---\ntitle: React 实现原理\npermalink: /react/implement.html\ndate: 2023-10-27 10:58:50\ndescription: Fiber 架构的实现使得 React 能够在多任务之间动态地切换，并根据任务的优先级和时间片进行灵活的调度。\ntag: [前端, react, JavaScript, JSX]\ncomments: true\ncategories: \n - React\n---\n\n### 实现jsx\n```jsx\n    let element = (\n    <h1>\n        hello<span style={{ color: \"red\" }}>world</span>\n    </h1>\n    );\n    console.log(element);\n\n```\n\n### 编译后\n\n![jsx 编译之后](https://pic.imgdb.cn/item/653b2718c458853aef75775a.jpg)\n\n### 如何实现\n\n1. jsx-dev-runtime.js\n```jsx\n    export { jsxDEV } from \"./jsx/ReactJSXElement\";\n\n```\n\n2. ReactJSXElement.js\n```jsx\n    import hasOwnProperty from '../../shared/hasOwnProperty';\n\n    // dom 类型\n    import { REACT_ELEMENT_TYPE  } from '../../shared/ReactSymbols';\n\n    const RESERVED_PROPS = {\n        key: true,\n        ref: true,\n        __self: true,\n        __source: true\n    };\n\n    function hasValidKey(config) {\n        return config.key !== undefined;\n    }\n\n    function hasValidRef(config) {\n        return config.ref !== undefined;\n    }\n\n    // ReactElement 创建\n    function ReactElement(type, key, ref, props, owner) {\n        return {\n            // 这个标签允许我们唯一地将其标识为React元素\n            $$typeof: REACT_ELEMENT_TYPE,\n            type,\n            key,\n            ref,\n            props,\n            \n        }\n    }\n\n\n    export function jsxDEV(type, config) {\n        // 提取保留名称\n        const props = {};\n        let key = null;\n        let ref = null;\n        if(hasValidKey(config)) {\n            key = config.key;\n        }\n\n        if(hasValidRef(config)) {\n            ref = config.ref;\n        }\n\n        for(const propName in config) {\n            if(hasOwnProperty.call(config, propName) &&\n            !RESERVED_PROPS.hasOwnProperty(propName)\n            ) {\n                props[propName] = config[propName];\n            }\n        }\n        return ReactElement(type, key, ref, props)\n    }\n\n```\n\n3. hasOwnProperty.js\n```jsx\n    const { hasOwnProperty } = Object.prototype;\n\n    export default hasOwnProperty;\n```\n\n4. ReactSymbols.js\n```jsx\n    // 用于标记类似 ReactElement 类型的符号。\n    export const REACT_ELEMENT_TYPE = Symbol.for('react.element');\n```\n\n### 根节点和根fiber\n\n- 需要给react提供一个根节点，之后每个节点都是渲染在根节点内部的。\n\n```js\nconst root = createRoot(document.getElementById('root'))\n```\n\n- 根fiber可以通俗理解为一个装着所有虚拟dom的容器，每个虚拟dom又单独对应一个fiber，\n- 渲染可以以单个fiber为单位暂停 / 恢复。\n- 需要创建两个根 `fiber` 去相互替换展示。\n\n#### 创建根节点\n\n更改main.jsx\n```jsx\n    import { createRoot } from \"react-dom/client\"\n\n    let element = (\n    <h1>hello<span style={{ color: 'red' }}>world</span></h1>\n    )\n\n    const root = createRoot(document.getElementById('root'));\n    console.log(root)\n\n```\n\n首先要建一个`FiberRootNode`根节点，也就是所有DOM的根，本质就是 `div#root`。\n\n根节点和`fiber`关系：\n\n![根节点和`fiber`关系](https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg)\n\n`FiberRootNode` 和 `HostRootFiber` 中间使用 `current` 相连；\n\n`HostRootFiber` 和 `FiberRootNode` 中间使用 `stateNode` 相连。\n\n#### 实现createRoot\n\n分这么多文件的主要是因为很多其他逻辑要处理，暂时都给省略了。虽然比较绕，但其实本质就是把`div#root`做了几层包装。\n\n1. client.js\n```js\n    export { createRoot } from \"./src/client/ReactDOMRoot\";\n```\n\n2. ReactDOMRoot.js\n```js\n    import { createContainer } from \"react-reconciler/src/ReactFiberReconciler\";\n    function ReactDOMRoot(internalRoot) {\n    this._internalRoot = internalRoot;\n    }\n    // 创建一个根 实际就是一个被包装过的真实DOM节点\n    // container: div#root\n    export function createRoot(container) {\n    // 1. 创建容器   6. 接收到有#root的容器\n    const root = createContainer(container);\n    // 7. 容器传给 ReactDOMRoot\n    return new ReactDOMRoot(root);\n    }\n```\n\n3. ReactFiberReconciler.js\n```js\n    import { createFiberRoot } from \"./ReactFiberRoot\";\n    // 创建容器 containerInfo: 容器信息\n    export function createContainer(containerInfo) {\n    // 2\n    return createFiberRoot(containerInfo);\n    }\n```\n\n4. ReactFiberRoot.js\n```js\n    function FiberRootNode(containerInfo) {\n    // 4. 把DOM节点放到容器\n    this.containerInfo = containerInfo\n    }\n    export function createFiberRoot(containerInfo) {\n    // 3. 创建根容器\n    const root = new FiberRootNode(containerInfo);\n    // 这个位置在下一步要创建 FiberRoot\n    // 5. 把容器返回出去\n    return root;\n    }\n```\n\n现在根节点`FiberRootNode`创建好了，最后`root`的打印结果：\n\n![FiberRootNode](https://pic.imgdb.cn/item/653b2e66c458853aef8a195c.jpg)\n\n#### fiber\n\n在创建根fiber之前先了解一下fiber\n\n#### 为什么需要有fiber？\n\n- react以前没有fiber整个计算过程不能暂停，会导致时间过长\n- 浏览器刷新频率为 60Hz,大概 16.6 毫秒渲染一次，而 JS 线程和渲染线程是互斥的，所以如果 JS 线程执行任务时间超过 16.6ms 的话，就会导致掉帧、卡顿，解决方案就是 React 利用空闲的时间进行更新，不影响渲染进行的渲染\n- 把一个耗时任务切分成一个个小任务，分布在每一帧里。这个的方式就叫时间切片\n\n我们需要把渲染变成一个可中断，可暂停，可恢复的过程。\n注：可以去搜一下 requestIdleCallback API ，react封装了一个类似的方法让每帧时间固定 5ms。\n\n#### 什么是fiber？\n\n- Fiber 是一个执行单元\n\n    Fiber 是一个执行单元,每次执行完一个执行单元，React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去。\n\n    react 中一帧的过程：\n\n    ![react 中一帧的过程](https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg)\n\n- Fiber 是一种数据结构\n    React 目前的做法是使用链表, 每个虚拟节点内部表示为一个Fiber\n    从顶点开始遍历\n    如果有第一个儿子，先遍历第一个儿子\n    如果没有第一个儿子，标志着此节点遍历完成\n    如果有弟弟遍历弟弟\n    如果有没有下一个弟弟，返回父节点标识完成父节点遍历，如果有叔叔遍历叔叔\n    没有父节点遍历结束\n\n    遍历结构：\n    ![遍历结构](https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg)\n\n    遍历过程：\n    ![遍历过程](https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg)\n\n#### 创建根fiber\n\n真实DOM需要一个根容器，`fiber`同样需要一个根`fiber`。\n\n相当于每个虚拟DOM都会创建一个对应的`Fiber`，再创建真实DOM\n\n虚拟DOM => Fiber => 真实DOM\n\n在刚刚创建FiberRootNode的函数里去创建`HostRootFiber`并互相指向对方。\n\n![根节点和`fiber`关系](https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg)\n\n1. ReactFiberRoot.js\n```js\n    import { createHostRootFiber } from \"./ReactFiber\";\n\n    function FiberRootNode(containerInfo) {\n    this.containerInfo = containerInfo;\n    }\n    export function createFiberRoot(containerInfo) {\n    // 之前创建的根节点容器\n    const root = new FiberRootNode(containerInfo);\n    // 1. 创建根fiber. hostRoot就是根节点dev#root\n    // 未初始化的fiber\n    const uninitializedFiber = createHostRootFiber();\n    // 当前渲染页面的fiber.\n    // 6. 根容器的current指向当前的根fiber\n    root.current = uninitializedFiber;\n    uninitializedFiber.stateNode = root;\n    return root;\n    }\n\n```\n\n2. ReactFiber.js\n```js\n    // 3. 工作标签\n    import { HostRoot } from \"./ReactWorkTags\";\n    // 5. 副作用标识\n    import { NoFlags } from \"./ReactFiberFlags\";\n\n    export function FiberNode(tag, pendingProps, key) {\n    this.tag = tag;\n    this.key = key;\n    this.type = null; // fiber类型, 来自于虚拟DOM节点的type   (span h1 p)\n    this.stateNode = null; // 此fiber对应的真实DOM节点\n\n    this.return = null; // 指向父节点\n    this.child = null; // 指向第一个子节点\n    this.sibling = null; // 指向弟弟\n\n    this.pendingProps = pendingProps; // 等待生效的属性\n    this.memoizedProps = null; // 已经生效的属性\n    // 虚拟DOM会提供pendingProps给创建fiber的属性，等处理完复制给memoizedProps\n\n    // 每个fiber还会有自己的状态，每一种fiber状态存的类型都不一样\n    // 比如：类组件对应的fiber存的就是实例的状态，HostRoot存的就是要渲染的元素\n    this.memoizedState = null;\n\n    // 每个fiber可能还有自己的更新队列\n    this.updateQueue = null;\n\n    // 5. \"./ReactFiberFlags\"\n    this.flags = NoFlags; // 副作用标识，表示对此fiber节点进行何种操作\n    this.subtreeFlags = NoFlags; // 子节点对应的副作用标识\n    this.alternate = null; // 轮替 (缓存了另一个fiber节点实例) diff时用\n    }\n\n    export function createFiberNode(tag, pendingProps, key) {\n    return new FiberNode(tag, pendingProps, key);\n    }\n\n    export function createHostRootFiber() {\n    return createFiberNode(HostRoot, null, null);\n    }\n\n```\n\n3. ReactWorkTags.js\n```js\n    // 每种虚拟DOM都会对应自己的fiber的类型\n    // 根Fiber的Tag\n    export const HostRoot = 3; // 根节点\n    export const HostComponent = 5; // 原生节点 span div p\n    export const HostText = 6; // 纯文本节点\n    // ...\n\n```\n\n4. ReactFiberFlags.js\n```js\n    // 没有任何操作\n    export const NoFlags = 0b000000000000000000000000000000;\n    // 插入\n    export const Placement = 0b000000000000000000000000000010;\n    // 更新\n    export const Update = 0b000000000000000000000000000100;\n\n```\n看最后root的打印结果：根fiber和节点容器互相指向\n\n![根fiber和节点容器互相指向](https://pic.imgdb.cn/item/653b5beac458853aef1a1a12.jpg)\n\n    current指的是当前根容器正在显示或者已经渲染好的fiber树\n\nreact采用了双缓存区的技术，可以把将要显示的图片绘制在缓存区中，需要展示的时候直接拿来替换掉。 alternate 轮替。\n\n![](https://pic.imgdb.cn/item/653bc1f2c458853aefb79377.jpg)\n\n#### 创建队列\n打开ReactFiberRoot.js文件，在return root之前加一行代码，给根fiber加上一个更新队列，之后更新渲染任务都是放到这个队列里面。\n\n1. ReactFiberRoot.js\n```js\n    + import { initialUpdateQueue } from \"./ReactFiberClassUpdateQueue\";\n    ...\n    + initialUpdateQueue(uninitializedFiber);\n    return root;\n```\n\n2. ReactFiberClassUpdateQueue.js\n```js\n    export function initialUpdateQueue(fiber) {\n        // 创建一个更新队列\n        // pending 是循环链表\n        const queue = {\n            shared: {\n                pending: null,\n            }\n        }\n        fiber.updateQueue = queue;\n    }\n```\n\n如下图所示在fiber树中增加了updateQueue 队列\n\n![updateQueue 队列](https://pic.imgdb.cn/item/653bc2bdc458853aefbd2de4.jpg)\n\n### 构建轮替的根fiber\n\n#### fiber是怎么运作的\n\n    为什么要轮替在上一篇已经说过了，这一篇写一下fiber的单项循环链表。\n\n假如我们有一个jsx 的dom结构\n```js\n    let element = (\n        <div className=\"A1\">\n            <div className=\"B1\">\n                <div className=\"C1\"></div>\n                <div className=\"C2\"></div>\n            </div>\n            <div className=\"B2\"></div>\n        </div>\n    )\n\n```\n\n在以前没有用fiber渲染是这样的，这个渲染方式是递归渲染如果数据很多就可能会卡顿。\n```js\n    let vDom = {\n        \"type\": \"div\",\n        \"key\": \"A1\",\n        \"props\": {\n            \"className\": \"A1\",\n            \"children\": [\n                {\n                    \"type\": \"div\",\n                    \"key\": \"B1\",\n                    \"props\": {\n                        \"className\": \"B1\",\n                        \"children\": [\n                            {\n                                \"type\": \"div\",\n                                \"key\": \"C1\",\n                                \"props\": { \"className\": \"C1\"},\n                            },\n                            {\n                                \"type\": \"div\",\n                                \"key\": \"C2\",\n                                \"props\": {\"className\": \"C2\"},\n                            }\n                        ]\n                    },\n                },\n                {\n                    \"type\": \"div\",\n                    \"key\": \"B2\",\n                    \"props\": {\"className\": \"B2\"},\n                }\n            ]\n        },\n    }\n    // 把vDom一气呵成渲染到页面\n    function render(element, container) {\n        // 把虚拟DOM创建成真实DOM\n        let dom = document.createElement(element.type);\n        // 遍历属性\n        Object.keys(element.props).filter(key => key !== 'children').forEach(key => {\n            dom[key] = element.props[key];\n        });\n        // 把子节点渲染到父节点上\n        if(Array.isArray(element.props.children)){\n            element.props.children.forEach(child=>render(child,dom));\n        }\n        // 把真实节点挂载到容器\n        container.appendChild(dom);\n    }\n    render(element, document.getElementById('root'));\n```\n\n下面是fiber的渲染方式，可以中断、暂停、恢复渲染。深度优先\n```js\n    // 把虚拟DOM构建成Fiber树\n    let A1 = { type: 'div', props: { className: 'A1' } };\n    let B1 = { type: 'div', props: { className: 'B1' }, return: A1 };\n    let B2 = { type: 'div', props: { className: 'B2' }, return: A1 };\n    let C1 = { type: 'div', props: { className: 'C1' }, return: B1 };\n    let C2 = { type: 'div', props: { className: 'C2' }, return: B1 };\n    A1.child = B1;\n    B1.sibling = B2;\n    B1.child = C1;\n    C1.sibling = C2;\n\n    // 下一个工作单元\n    let nextUnitOfWork = null;\n\n    function hasRemainingTime() {\n        // 模拟有时间\n        return true;\n    }\n\n    // render 工作循序\n    function workLoop() {\n        // 有下一个节点并且有时间时\n        // 每一个任务执行完都可以放弃，让浏览器执行更高优先级的任务\n        while(nextUnitOfWork && hasRemainingTime()) {\n            // 执行下一个任务并返回下一个任务\n            nextUnitOfWork = performUnitOfWork(fiber);\n        }\n        console.log('render 阶段结束\");\n    }\n    \n    // 执行完后返回下一个节点\n    function performUnitOfWork(fiber) {\n        // 执行渲染\n        let child = beginWork(fiber);\n        if(child) {\n            return child;\n        }\n        // 如果没有子节点说明当前节点已经完成了渲染工作\n        while(fiber) {\n            // 可以结束此fiber的渲染了 \n            completeUnitOfWork(fiber);\n            // 如果有弟弟就返回弟弟\n            if(fiber.sibling) {\n                return fiber.sibling;\n            }\n            // 否则就返回上一层\n            fiber = fiber.return;\n        }\n    }\n\n    function beginWork(fiber) {\n        console.log('beginWork', fiber.props.className);\n        // 执行完成后返回第一个子节点\n        return fiber.child;\n    }\n\n    function completeUnitOfWork(fiber) {\n        // 标记当前这个fiber街道已经完成\n        console.log('completeUnitOfWork', fiber.props.className);\n    }\n\n```\n\n上面的这些代码是预先熟悉一下，fiber 是怎么运行，下面正式进入构建的代码逻辑。\n\n#### 队列的单向链表\n\n1. 在main.js 中增加下面代码\n```js\nroot.render(element)\n```\n\n2. ReactDOMRoot.js\n```js\n    import { updateContainer } from '../react-reconciler/src/ReactFiberReconciler';\n    ...\n    ReactDomRoot.prototype.render = function (children) {\n    // 1. 获取容器\n    const root = this._internalRoot;\n    updateContainer(children, root);\n    }\n```\n\n3. ReactFiberReconciler.js\n```js\n    import { createUpdate, enqueueUpdate } from './ReactFiberClassUpdateQueue';\n    ...\n    /**\n     * 更新容器, 把虚拟DOM变成真实DOM 插入到container容器中\n     * @param {*} element 虚拟DOM\n     * @param {*} container 容器   FiberRootNode\n     */\n    export function updateContainer(element, container) {\n    // 获取根fiber\n    const current = container.current;\n    // 创建更新队列\n    const update = createUpdate();\n    update.payload = {element};\n    // 3. 把此更新任务对象添加到current这个根Fiber的更新队列里\n\n    let root = enqueueUpdate(current, update);\n    console.log(root);\n    }\n```\n\n4. ReactFiberClassUpdateQueue.js\n\n![ReactFiberClassUpdateQueue.js](https://pic.imgdb.cn/item/653e40f6c458853aefe48306.jpg)\n```js\n    import { markUpdateLaneFromFiberToRoot } from './ReactFiberConcurrentUpdate'\n    ...\n    // 更新状态\n    export const UpdateState = 0;\n\n    export function createUpdate() {\n        const update = {tag: UpdateState};\n        return update;\n    }\n\n    export function enqueueUpdate(fiber, update) {\n        // 获取根fiber的更新队列 (上一篇最后加的)\n        const updateQueue = fiber.updateQueue;\n        // 获取等待执行的任务\n        const pending = updateQueue.shared.pending;\n        // 说明初始化的状态\n        if(pending === null) {\n            update.next = update;\n        } else {\n            update.next = pending.next;\n            pending.next = update;\n        }\n    \n        // 让等待更新指向当前update 开始更新\n        updateQueue.shared.pending = update;\n\n        // 从当前的fiber 到返回找到并返回根节点\n\n        return markUpdateLaneFromFiberToRoot(fiber);\n\n    }\n\n```\n\n#### 冒泡获取根节点容器 \n\nReactFiberConcurrentUpdate.js\n```js\n    import { HostRoot } from './ReactWorkTags';\n\n    /**\n     * 本来此文件要处理更新优先级问题，把不同的fiber优先级冒泡一路标记到根节点。\n     * 目前现在值实现向上冒泡找到根节点\n     * @param {*} sourceFiber\n     */\n\n    export function markUpdateLaneFromFiberToRoot(sourceFiber) {\n        // 当前父fiber\n        let parent = sourceFiber.return;\n        // 当前fiber\n        let node = sourceFiber;\n\n        // 一直找到 父fiber 为null\n        while(parent !== null) {\n            node = parent;\n            parent = parent.return;\n        }\n        // 返回当前root节点\n        if(node.tag === HostRoot) {\n            const root = node.stateNode;\n            return root;\n        }\n        return null;\n    }\n\n```\n\n#### 调度更新\n\n到目前为止更新对象已经添加到了根fiber的更新队列上，现在需要开始进行调度更新。\n\n1. ReactFiberReconciler.js\n```js\n    import { scheduleUpdateOnFiber } from './ReactFiberWorkLoop'\n    ...\n    export function updateContainer(element, container) {\n    ...\n    + scheduleUpdateOnFiber(root);\n    }\n\n```\n\n2. ReactFiberWorkLoop.js\n```js\n    import { scheduleCallback } from './scheduler';\n\n    export function scheduleUpdateOnFiber(root) {\n        ensureRootIsScheduled(root);\n    }\n\n    export function ensureRootIsScheduled(root) {\n        // 告诉浏览器要执行performConcurrentWorkOnRoot 参数定死为root\n        scheduleCallback(performConcurrentWorkOnRoot.bind(null, root));\n    }\n\n    function performConcurrentWorkOnRoot(root) {\n        console.log(root, 'performConcurrentWorkOnRoot');\n    }\n```\n\n3. src/scheduler/index.js\n```js\n    export * from './src/forks/Scheduler';\n```\n\n4. src/forks/Scheduler.js\n```js\n    // 此处后面会实现优先级队列\n    export function scheduleCallback(callback) {\n    requestIdleCallback(callback);\n    }\n```\n\n5. 打印FiberRootNode\n\n![输出的FiberRootNode](https://pic.imgdb.cn/item/653e496bc458853aef00deb1.jpg)\n\n### 工作循环\n\n![工作循环](https://pic.imgdb.cn/item/653e4d86c458853aef11c6ea.jpg)\n\n我们已经创建好一个根节点容器和一个空的根fiber（黑色部分），在图中看到还有一个正在构建中的根fiber。\n根节点的current指的是当前的根fiber，是会和构建中的根fiber轮替工作（双缓冲），现在需要构建一个新的根fiber并且把fiber树写在里面。\n一个是表示当前页面已经渲染完成的fiber树，一个是正在构建中还没有生效、更没有更新到页面的fiber树\n\n#### 建立新的hostRootFiber\n\n1. ReactFiberWorkLoop.js\n```js\n    import { creatWorkInProgress } from \"./ReactFiber\";\n\n    // 正在进行中的工作\n    let workInProgress = null\n\n    //...\n\n    /**\n     * (被告知浏览器确保执行的函数)\n     * 根据当前的fiber节点构建fiber树, 创建真实的dom节点, 插入到容器\n     * @param {*} root\n     */\n    function performConcurrentWorkOnRoot(root) {\n    // 1. 初次渲染的时候以同步方式渲染根节点, 因为要尽快展示 (初始化)\n    renderRootSync(root);\n    }\n\n    function prepareFreshStack(root) {\n    // 5. 根据老fiber构建新fiber (初始化)\n    workInProgress = creatWorkInProgress(root.current);\n    }\n\n    function renderRootSync(root) {\n    // 2. 先构建了一个空的栈\n    prepareFreshStack(root);\n    }\n\n```\n\n2. ReactFiber.js\n```js\n    /**\n     * 根据老fiber和新的属性构建新fiber\n     * @param {*} current 老fiber\n     * @param {*} pendingProps 新的属性\n     */\n    export function creatWorkInProgress(current, pendingProps) {\n        // 3. 拿到老fiber的轮替 第一次没有 (初始化)\n        let workInProgress = current.alternate;\n        if(workInProgress === null) {\n            workInProgress = createFiberNode(current.tag, pendingProps, current.key);\n            workInProgress.type = current.type;\n            workInProgress.stateNode = current.stateNode;\n\n            workInProgress.stateNode = current;\n            current.alternate =  workInProgress;\n        } else {\n            // 如果有，说明是更新，只能改属性就可以复用\n            workInProgress.pendingProps = current.pendingProps;\n            workInProgress.type = current.type;\n            workInProgress.flags = current.flags;\n            workInProgress.subtreeFlags = NoFlags;\n        }\n        // 复制属性\n        workInProgress.child = current.child;\n        workInProgress.memoizedProps = current.memoizedProps;\n        workInProgress.memoizedState = current.memoizedState;\n        workInProgress.updateQueue = current.updateQueue;\n        workInProgress.sibling = current.sibling;\n        workInProgress.index = current.index;\n        return workInProgress;\n    }\n```\n\n#### 执行工作单元\n\n然后在新的根fiber里构建更新fiber树\n\n1. ReactFiberWorkLoop.js\n```js\n    import { beginWork } from \"./ReactFiberBeginWork\";\n    ...\n    function renderRootSync(root) {\n        // 2. 先构建一个空的栈\n        prepareFreshStack(root);\n        // 1. 现在的 workInProgress 是新的根fiber\n        workLoopSync();\n    }\n\n    // 工作同步循环\n    function workLoopSync() {\n        while(workInProgress !== null) {\n            // 2. 执行工作单元\n            performUnitOfWork(workInProgress);\n        }\n    }\n\n    function performUnitOfWork(unitOfWork) {\n        const current = unitOfWork.alternate;\n\n        const next = beginWork(current, unitOfWork);\n\n        unitOfWork.memoizedProps = unitOfWork.pendingProps;\n        if(next === null) {\n            // 说明已经完成\n            // 完成工作单元\n            // completeUnitOfWork(); // 这个方法之后写 先模拟一下完成工作\n            workInProgress = null;\n        } else {\n            // 如果有子节点就成为下一个工作单元\n            workInProgress = next;\n        }\n    }\n```\n\n2. ReactFiberBeginWork.js\n```js\n    import { HostComponent, HostRoot, HostText } from \"./ReactWorkTags\";\n    import { processUpdateQueue } from './ReactFiberClassUpdateQueue';\n\n    /**\n     * 5. 根据 `新的` 虚拟dom去构建  `新的` fiber链表\n     * @param {*} current 老fiber\n     * @param {*} workInProgress 新fiber\n     * @returns 下一个工作单元\n     */\n    export function beginWork(current, workInProgress) {\n        console.log(\"beginWork\", workInProgress);\n        // 判断类型不同处理方式返回子节点或者弟弟\n        switch(workInProgress.tag) {\n            case HostRoot:\n                return updateHostRoot(current, workInProgress);\n            case HostComponent:\n                return updateHostComponent(current, workInProgress);\n            \n            case HostText:\n                return null;\n            default:\n                return null;\n        }\n    }\n\n    function updateHostRoot(current, workInProgress) {\n        // 需要知道它的子虚拟dom, 知道它的儿子的虚拟dom信息\n        // 之前在根fiber的更新队列加的虚拟dom, 可以在这获取\n        processUpdateQueue(workInProgress);\n        const nextState = workInProgress.memoizedState;\n        // 获取虚拟节点\n        const nextChildren = nextState.element;\n        reconcileChildren(current, workInProgress, nextChildren);\n\n        return workInProgress.child;\n    }\n\n    function updateHostComponents(current, workInProgress) {}\n```\n\n#### 获取更新队列的虚拟dom\n写上一步引入的`processUpdateQueue`方法\n\n1. ReactFiberClassUpdateQueue.js\n```js\n    import { markUpdateLaneFromFiberToRoot } from './ReactFiberConcurrentUpdate'\n\n    export function initialUpdateQueue(fiber) {\n        // 创建一个更新队列\n        // pending 是循环链表\n        const queue = {\n            shared: {\n                pending: null,\n            }\n        }\n        fiber.updateQueue = queue;\n    }\n\n    // 更新状态\n    export const UpdateState = 0;\n\n    export function createUpdate() {\n        const update = {tag: UpdateState};\n        return update;\n    }\n\n    export function enqueueUpdate(fiber, update) {\n        // 获取根fiber的更新队列 (上一篇最后加的)\n        const updateQueue = fiber.updateQueue;\n        // 获取等待执行的任务\n        const pending = updateQueue.shared.pending;\n        // 说明初始化的状态\n        if(pending === null) {\n            update.next = update;\n        } else {\n            update.next = pending.next;\n            pending.next = update;\n        }\n    \n        // 让等待更新指向当前update 开始更新\n        updateQueue.shared.pending = update;\n\n        // 从当前的fiber 到返回找到并返回根节点\n\n        return markUpdateLaneFromFiberToRoot(fiber);\n\n    }\n\n    /**\n     * 根据老状态和更新队列的更新计算最新的状态\n     * @param {*} workInProgress 要计算的fiber\n     */\n    export function processUpdateQueue(workInProgress) {\n        // 拿到更新队列\n        const queue = workInProgress.updateQueue;\n        // 等待生效的队列\n        const pendingQueue = queue.shared.pending;\n        // 如果有更新, 或者更新队列里有内容\n        if(pendingQueue !== null) {\n            // 清除等待生效的更新 因为在这就要使用了可以清除了\n            queue.shared.pending = null;\n            // 获取最后一个等待生效的更新 \n            const lastPendingUpdate = pendingQueue;\n            // 第一个等待生效的更新\n            const firstPendingUpdate = pendingQueue.next;\n            // 把更新链表剪开, 变成单向链表\n            lastPendingUpdate.next = null;\n            // 获取老状态 (会不停更新和计算赋值新状态, 所以起名newState)\n            let newState = workInProgress.memoizedState;\n            let update = firstPendingUpdate;\n            while(update) {\n                // 根据老状态和更新计算新状态\n                newState = getStateFromUpdate(update, newState);\n                update = update.next;\n            }\n\n            // 把最终计算到的状态赋值给 memoizedState\n            workInProgress.memoizedState = newState;\n        }\n    }\n\n    /**\n     * 根据老状态和更新, 计算新状态\n     * @param {*} update 更新\n     * @param {*} prevState 上一个状态\n     * @returns 新状态\n     */\n    function getStateFromUpdate(update, prevState) {\n        switch(update.tag) {\n            case UpdateState:\n                const { payload } = update;\n                return assign({}, prevState, payload);\n        }\n    }\n```\n\n#### 根据子虚拟dom创建子fiber节点\n\n上上步还有一个`reconcileChildren`没有定义\n\n1. ReactFiberBeginWork.js\n```js\n    import { mountChildFibers, reconcileChildFibers } from \"./ReactChildFiber\";\n\n    /**\n     * 根据新的虚拟dom生成新的fiber链表\n     * @param {*} current 老的父fiber\n     * @param {*} workInProgress 新的父fiber\n     * @param {*} nextChildren 新的子虚拟dom\n     */\n    function reconcileChildren(current, workInProgress, nextChildren) {\n        // 如果此新fiber没有老fiber, 说明是新创建的\n        if (current === null) {\n            // 挂在子fiber\n            workInProgress.child = mountChildFibers(workInProgress, null, next);\n        } else {\n            // 更新:  协调子fiber列表 需要做DOM-DIFF   (初始化时的根fiber是有老fiber的(一开始创建的))\n            workInProgress.child = reconcileChildFibers(\n            workInProgress,\n            current.child,\n            nextChildren\n            );\n        }\n    }\n\n```\n\n2. ReactChildFiber.js\n```js\n    import { createFiberFromElement } from './ReactFiber';\n    import { REACT_ELEMENT_TYPE } from '../../shared/ReactSymbols';\n    /**\n     *\n     * @param {*} shouldTrackSideEffect 是否跟踪副作用\n     * @returns\n     */\n    function createChildReconciler(shouldTrackSideEffect) {\n\n    function reconcileSingElement(returnFiber, currentFirstFiber, element) {\n            // 因为我们实现的是初次挂载, 老节点currentFirstFiber是没有的, \n            // 所以可以直接根据虚拟dom创建fiber节点\n            const created = createFiberFromElement(element);\n            created.return = returnFiber;\n            return created;\n        }\n\n        /**\n     * 比较子fiber  (DOM-DIFF) 就是用老的fiber链表和新的虚拟dom进行比较\n     * @param {*} returnFiber 新父fiber\n     * @param {*} currentFirstFiber 当前的第一个子fiber(老fiber的第一个儿子)\n     * @param {*} newChild 新的子虚拟dom\n     */\n        function reconcileChildFibers(returnFiber, currentFirstFiber, newChild) {\n            // 现在暂时只考虑新的节点只有一个的情况\n            if(typeof newChild === 'object' && newChild !== null) {\n                switch (newChild.$$typeof) {\n                    case REACT_ELEMENT_TYPE:\n                        return reconcileSingElement(\n                            returnFiber,\n                            currentFirstFiber,\n                            newChild\n                        );\n                    default:\n                        break;\n                }\n            }\n        }\n        return reconcileChildFibers;\n    }\n\n    // 有老父fiber 更新\n    export const reconcileChildFibers = createChildReconciler(true);\n    // 没有老的父fiber 更新\n    export const mountChildFibers = createChildReconciler(false);\n```\n\n3. ReactFiber.js\n```js\n    ...\n    export function createFiberFromElement(element) {\n        const type = element.type;\n        const key = element.key;\n        const pendingProps = element.props;\n        const fiber = createFiberFromTypeAndProps(\n            type,\n            key,\n            pendingProps\n        );\n        return fiber;\n    }\n\n        export function createFiberFromTypeAndProps(type, key, pendingProps) {\n        let fiberTag = IndeterminateComponent;\n        const fiber = createFiberNode(fiberTag, pendingProps, key);\n        fiber.type = type;\n        return fiber;\n    }\n```\n\n### 完成工作单元\n\n1. ReactFiberWorkLoop.js\n```js\n    function completeUnitOfWork(unitOfWork) {\n        ...\n        if (next === null) {\n        // 说明已经完成\n        // 完成工作单元\n        + completeUnitOfWork(unitOfWork); // 这个方法之后写 先模拟一下完成工作\n            // workInProgress = null;\n        } else {\n            // 如果有子节点就成为下一个工作单元\n            workInProgress = next;\n        }\n    }\n    function completeUnitOfWork(unitOfWork) {\n        let completeWork = unitOfWork;\n        do {\n            // 拿到他的父节点和当前节点RootFiber\n            const current = completeWork.alternate;\n            const returnFiber = completeWork.return;\n            let next = completeWork(current, completeWork);\n            // 如果下一个节点不为空\n            if(next !== null) {\n            workInProgress = next;\n            return;\n            }\n            \n            const siblingFiber = completeWork.sibling;\n            // 如果兄弟节点不为空\n            if(siblingFiber !== null) {\n            workInProgress = siblingFiber;\n            return;\n            }\n            // 返回父节点\n            completeWork = returnFiber;\n\n        } while(completeWork !== null);\n    }\n```","slug":"react/reactImplement","published":1,"updated":"2023-11-01T14:24:14.295Z","__permalink":"/react/implement.html","layout":"post","photos":[],"link":"","_id":"clofw8ydi001im0uo4o0t25fk","content":"<div id=\"vip-container\"><h3 id=\"实现jsx\"><a href=\"#实现jsx\" class=\"headerlink\" title=\"实现jsx\"></a>实现jsx</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> element = (</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &quot;<span class=\"attr\">red</span>&quot; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译后\"><a href=\"#编译后\" class=\"headerlink\" title=\"编译后\"></a>编译后</h3><p><img src=\"https://pic.imgdb.cn/item/653b2718c458853aef75775a.jpg\" alt=\"jsx 编译之后\"></p>\n<h3 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h3><ol>\n<li><p>jsx-dev-runtime.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; jsxDEV &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./jsx/ReactJSXElement&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactJSXElement.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hasOwnProperty <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../shared/hasOwnProperty&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dom 类型</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>  &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../shared/ReactSymbols&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RESERVED_PROPS</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">key</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">ref</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">__self</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">__source</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasValidKey</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config.<span class=\"property\">key</span> !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasValidRef</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config.<span class=\"property\">ref</span> !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ReactElement 创建</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReactElement</span>(<span class=\"params\">type, key, ref, props, owner</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个标签允许我们唯一地将其标识为React元素</span></span><br><span class=\"line\">        <span class=\"attr\">$$typeof</span>: <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>,</span><br><span class=\"line\">        type,</span><br><span class=\"line\">        key,</span><br><span class=\"line\">        ref,</span><br><span class=\"line\">        props,</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">jsxDEV</span>(<span class=\"params\">type, config</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提取保留名称</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> props = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ref = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">hasValidKey</span>(config)) &#123;</span><br><span class=\"line\">        key = config.<span class=\"property\">key</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">hasValidRef</span>(config)) &#123;</span><br><span class=\"line\">        ref = config.<span class=\"property\">ref</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> propName <span class=\"keyword\">in</span> config) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hasOwnProperty.<span class=\"title function_\">call</span>(config, propName) &amp;&amp;</span><br><span class=\"line\">        !<span class=\"variable constant_\">RESERVED_PROPS</span>.<span class=\"title function_\">hasOwnProperty</span>(propName)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            props[propName] = config[propName];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">ReactElement</span>(type, key, ref, props)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>hasOwnProperty.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; hasOwnProperty &#125; = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> hasOwnProperty;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactSymbols.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于标记类似 ReactElement 类型的符号。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span> = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;react.element&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"根节点和根fiber\"><a href=\"#根节点和根fiber\" class=\"headerlink\" title=\"根节点和根fiber\"></a>根节点和根fiber</h3><ul>\n<li>需要给react提供一个根节点，之后每个节点都是渲染在根节点内部的。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根fiber可以通俗理解为一个装着所有虚拟dom的容器，每个虚拟dom又单独对应一个fiber，</li>\n<li>渲染可以以单个fiber为单位暂停 &#x2F; 恢复。</li>\n<li>需要创建两个根 <code>fiber</code> 去相互替换展示。</li>\n</ul>\n<h4 id=\"创建根节点\"><a href=\"#创建根节点\" class=\"headerlink\" title=\"创建根节点\"></a>创建根节点</h4><p>更改main.jsx</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom/client&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> element = (</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">red</span>&#x27; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(root)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>首先要建一个<code>FiberRootNode</code>根节点，也就是所有DOM的根，本质就是 <code>div#root</code>。</p>\n<p>根节点和<code>fiber</code>关系：</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"根节点和`fiber`关系\"></p>\n<p><code>FiberRootNode</code> 和 <code>HostRootFiber</code> 中间使用 <code>current</code> 相连；</p>\n<p><code>HostRootFiber</code> 和 <code>FiberRootNode</code> 中间使用 <code>stateNode</code> 相连。</p>\n<h4 id=\"实现createRoot\"><a href=\"#实现createRoot\" class=\"headerlink\" title=\"实现createRoot\"></a>实现createRoot</h4><p>分这么多文件的主要是因为很多其他逻辑要处理，暂时都给省略了。虽然比较绕，但其实本质就是把<code>div#root</code>做了几层包装。</p>\n<ol>\n<li><p>client.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./src/client/ReactDOMRoot&quot;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactDOMRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-reconciler/src/ReactFiberReconciler&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReactDOMRoot</span>(<span class=\"params\">internalRoot</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">_internalRoot</span> = internalRoot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 创建一个根 实际就是一个被包装过的真实DOM节点</span></span><br><span class=\"line\"><span class=\"comment\">// container: div#root</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createRoot</span>(<span class=\"params\">container</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. 创建容器   6. 接收到有#root的容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createContainer</span>(container);</span><br><span class=\"line\"><span class=\"comment\">// 7. 容器传给 ReactDOMRoot</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReactDOMRoot</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberReconciler.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createFiberRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberRoot&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 创建容器 containerInfo: 容器信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createContainer</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">createFiberRoot</span>(containerInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberRootNode</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 4. 把DOM节点放到容器</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">containerInfo</span> = containerInfo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberRoot</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 3. 创建根容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">FiberRootNode</span>(containerInfo);</span><br><span class=\"line\"><span class=\"comment\">// 这个位置在下一步要创建 FiberRoot</span></span><br><span class=\"line\"><span class=\"comment\">// 5. 把容器返回出去</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>现在根节点<code>FiberRootNode</code>创建好了，最后<code>root</code>的打印结果：</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2e66c458853aef8a195c.jpg\" alt=\"FiberRootNode\"></p>\n<h4 id=\"fiber\"><a href=\"#fiber\" class=\"headerlink\" title=\"fiber\"></a>fiber</h4><p>在创建根fiber之前先了解一下fiber</p>\n<h4 id=\"为什么需要有fiber？\"><a href=\"#为什么需要有fiber？\" class=\"headerlink\" title=\"为什么需要有fiber？\"></a>为什么需要有fiber？</h4><ul>\n<li>react以前没有fiber整个计算过程不能暂停，会导致时间过长</li>\n<li>浏览器刷新频率为 60Hz,大概 16.6 毫秒渲染一次，而 JS 线程和渲染线程是互斥的，所以如果 JS 线程执行任务时间超过 16.6ms 的话，就会导致掉帧、卡顿，解决方案就是 React 利用空闲的时间进行更新，不影响渲染进行的渲染</li>\n<li>把一个耗时任务切分成一个个小任务，分布在每一帧里。这个的方式就叫时间切片</li>\n</ul>\n<p>我们需要把渲染变成一个可中断，可暂停，可恢复的过程。<br>注：可以去搜一下 requestIdleCallback API ，react封装了一个类似的方法让每帧时间固定 5ms。</p>\n<h4 id=\"什么是fiber？\"><a href=\"#什么是fiber？\" class=\"headerlink\" title=\"什么是fiber？\"></a>什么是fiber？</h4><ul>\n<li><p>Fiber 是一个执行单元</p>\n<p>  Fiber 是一个执行单元,每次执行完一个执行单元，React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去。</p>\n<p>  react 中一帧的过程：</p>\n<p>  <img src=\"https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg\" alt=\"react 中一帧的过程\"></p>\n</li>\n<li><p>Fiber 是一种数据结构<br>  React 目前的做法是使用链表, 每个虚拟节点内部表示为一个Fiber<br>  从顶点开始遍历<br>  如果有第一个儿子，先遍历第一个儿子<br>  如果没有第一个儿子，标志着此节点遍历完成<br>  如果有弟弟遍历弟弟<br>  如果有没有下一个弟弟，返回父节点标识完成父节点遍历，如果有叔叔遍历叔叔<br>  没有父节点遍历结束</p>\n<p>  遍历结构：<br>  <img src=\"https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg\" alt=\"遍历结构\"></p>\n<p>  遍历过程：<br>  <img src=\"https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg\" alt=\"遍历过程\"></p>\n</li>\n</ul>\n<h4 id=\"创建根fiber\"><a href=\"#创建根fiber\" class=\"headerlink\" title=\"创建根fiber\"></a>创建根fiber</h4><p>真实DOM需要一个根容器，<code>fiber</code>同样需要一个根<code>fiber</code>。</p>\n<p>相当于每个虚拟DOM都会创建一个对应的<code>Fiber</code>，再创建真实DOM</p>\n<p>虚拟DOM &#x3D;&gt; Fiber &#x3D;&gt; 真实DOM</p>\n<p>在刚刚创建FiberRootNode的函数里去创建<code>HostRootFiber</code>并互相指向对方。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"根节点和`fiber`关系\"></p>\n<ol>\n<li><p>ReactFiberRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createHostRootFiber &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiber&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberRootNode</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">containerInfo</span> = containerInfo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberRoot</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 之前创建的根节点容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">FiberRootNode</span>(containerInfo);</span><br><span class=\"line\"><span class=\"comment\">// 1. 创建根fiber. hostRoot就是根节点dev#root</span></span><br><span class=\"line\"><span class=\"comment\">// 未初始化的fiber</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uninitializedFiber = <span class=\"title function_\">createHostRootFiber</span>();</span><br><span class=\"line\"><span class=\"comment\">// 当前渲染页面的fiber.</span></span><br><span class=\"line\"><span class=\"comment\">// 6. 根容器的current指向当前的根fiber</span></span><br><span class=\"line\">root.<span class=\"property\">current</span> = uninitializedFiber;</span><br><span class=\"line\">uninitializedFiber.<span class=\"property\">stateNode</span> = root;</span><br><span class=\"line\"><span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiber.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. 工作标签</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HostRoot</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactWorkTags&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 5. 副作用标识</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NoFlags</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberFlags&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">FiberNode</span>(<span class=\"params\">tag, pendingProps, key</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// fiber类型, 来自于虚拟DOM节点的type   (span h1 p)</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">stateNode</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 此fiber对应的真实DOM节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">return</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向父节点</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">child</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向第一个子节点</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">sibling</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向弟弟</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">pendingProps</span> = pendingProps; <span class=\"comment\">// 等待生效的属性</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">memoizedProps</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 已经生效的属性</span></span><br><span class=\"line\"><span class=\"comment\">// 虚拟DOM会提供pendingProps给创建fiber的属性，等处理完复制给memoizedProps</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个fiber还会有自己的状态，每一种fiber状态存的类型都不一样</span></span><br><span class=\"line\"><span class=\"comment\">// 比如：类组件对应的fiber存的就是实例的状态，HostRoot存的就是要渲染的元素</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">memoizedState</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个fiber可能还有自己的更新队列</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">updateQueue</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5. &quot;./ReactFiberFlags&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">flags</span> = <span class=\"title class_\">NoFlags</span>; <span class=\"comment\">// 副作用标识，表示对此fiber节点进行何种操作</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">subtreeFlags</span> = <span class=\"title class_\">NoFlags</span>; <span class=\"comment\">// 子节点对应的副作用标识</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 轮替 (缓存了另一个fiber节点实例) diff时用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberNode</span>(<span class=\"params\">tag, pendingProps, key</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FiberNode</span>(tag, pendingProps, key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createHostRootFiber</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">createFiberNode</span>(<span class=\"title class_\">HostRoot</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactWorkTags.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每种虚拟DOM都会对应自己的fiber的类型</span></span><br><span class=\"line\"><span class=\"comment\">// 根Fiber的Tag</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostRoot</span> = <span class=\"number\">3</span>; <span class=\"comment\">// 根节点</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostComponent</span> = <span class=\"number\">5</span>; <span class=\"comment\">// 原生节点 span div p</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostText</span> = <span class=\"number\">6</span>; <span class=\"comment\">// 纯文本节点</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberFlags.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没有任何操作</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">NoFlags</span> = <span class=\"number\">0b000000000000000000000000000000</span>;</span><br><span class=\"line\"><span class=\"comment\">// 插入</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Placement</span> = <span class=\"number\">0b000000000000000000000000000010</span>;</span><br><span class=\"line\"><span class=\"comment\">// 更新</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Update</span> = <span class=\"number\">0b000000000000000000000000000100</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>看最后root的打印结果：根fiber和节点容器互相指向</p>\n</li>\n</ol>\n<p><img src=\"https://pic.imgdb.cn/item/653b5beac458853aef1a1a12.jpg\" alt=\"根fiber和节点容器互相指向\"></p>\n<pre><code>current指的是当前根容器正在显示或者已经渲染好的fiber树\n</code></pre>\n<p>react采用了双缓存区的技术，可以把将要显示的图片绘制在缓存区中，需要展示的时候直接拿来替换掉。 alternate 轮替。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653bc1f2c458853aefb79377.jpg\"></p>\n<h4 id=\"创建队列\"><a href=\"#创建队列\" class=\"headerlink\" title=\"创建队列\"></a>创建队列</h4><p>打开ReactFiberRoot.js文件，在return root之前加一行代码，给根fiber加上一个更新队列，之后更新渲染任务都是放到这个队列里面。</p>\n<ol>\n<li><p>ReactFiberRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ <span class=\"keyword\">import</span> &#123; initialUpdateQueue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberClassUpdateQueue&quot;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">+ <span class=\"title function_\">initialUpdateQueue</span>(uninitializedFiber);</span><br><span class=\"line\"><span class=\"keyword\">return</span> root;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberClassUpdateQueue.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initialUpdateQueue</span>(<span class=\"params\">fiber</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个更新队列</span></span><br><span class=\"line\">    <span class=\"comment\">// pending 是循环链表</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = &#123;</span><br><span class=\"line\">        <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">pending</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fiber.<span class=\"property\">updateQueue</span> = queue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>如下图所示在fiber树中增加了updateQueue 队列</p>\n<p><img src=\"https://pic.imgdb.cn/item/653bc2bdc458853aefbd2de4.jpg\" alt=\"updateQueue 队列\"></p>\n<h3 id=\"构建轮替的根fiber\"><a href=\"#构建轮替的根fiber\" class=\"headerlink\" title=\"构建轮替的根fiber\"></a>构建轮替的根fiber</h3><h4 id=\"fiber是怎么运作的\"><a href=\"#fiber是怎么运作的\" class=\"headerlink\" title=\"fiber是怎么运作的\"></a>fiber是怎么运作的</h4><pre><code>为什么要轮替在上一篇已经说过了，这一篇写一下fiber的单项循环链表。\n</code></pre>\n<p>假如我们有一个jsx 的dom结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> element = (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;A1&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;B1&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;C1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;C2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;B2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在以前没有用fiber渲染是这样的，这个渲染方式是递归渲染如果数据很多就可能会卡顿。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vDom = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;A1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;props&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;A1&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;children&quot;</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;B1&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;props&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;B1&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;children&quot;</span>: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;C1&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;props&quot;</span>: &#123; <span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;C1&quot;</span>&#125;,</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;C2&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;props&quot;</span>: &#123;<span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;C2&quot;</span>&#125;,</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;B2&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;props&quot;</span>: &#123;<span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;B2&quot;</span>&#125;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 把vDom一气呵成渲染到页面</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">element, container</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把虚拟DOM创建成真实DOM</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> dom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(element.<span class=\"property\">type</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 遍历属性</span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(element.<span class=\"property\">props</span>).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> key !== <span class=\"string\">&#x27;children&#x27;</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        dom[key] = element.<span class=\"property\">props</span>[key];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 把子节点渲染到父节点上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(element.<span class=\"property\">props</span>.<span class=\"property\">children</span>))&#123;</span><br><span class=\"line\">        element.<span class=\"property\">props</span>.<span class=\"property\">children</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">child</span>=&gt;</span><span class=\"title function_\">render</span>(child,dom));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 把真实节点挂载到容器</span></span><br><span class=\"line\">    container.<span class=\"title function_\">appendChild</span>(dom);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">render</span>(element, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>下面是fiber的渲染方式，可以中断、暂停、恢复渲染。深度优先</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 把虚拟DOM构建成Fiber树</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">A1</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;A1&#x27;</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">B1</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;B1&#x27;</span> &#125;, <span class=\"attr\">return</span>: <span class=\"variable constant_\">A1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">B2</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;B2&#x27;</span> &#125;, <span class=\"attr\">return</span>: <span class=\"variable constant_\">A1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">C1</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;C1&#x27;</span> &#125;, <span class=\"attr\">return</span>: <span class=\"variable constant_\">B1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">C2</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;C2&#x27;</span> &#125;, <span class=\"attr\">return</span>: <span class=\"variable constant_\">B1</span> &#125;;</span><br><span class=\"line\"><span class=\"variable constant_\">A1</span>.<span class=\"property\">child</span> = <span class=\"variable constant_\">B1</span>;</span><br><span class=\"line\"><span class=\"variable constant_\">B1</span>.<span class=\"property\">sibling</span> = <span class=\"variable constant_\">B2</span>;</span><br><span class=\"line\"><span class=\"variable constant_\">B1</span>.<span class=\"property\">child</span> = <span class=\"variable constant_\">C1</span>;</span><br><span class=\"line\"><span class=\"variable constant_\">C1</span>.<span class=\"property\">sibling</span> = <span class=\"variable constant_\">C2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下一个工作单元</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nextUnitOfWork = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasRemainingTime</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模拟有时间</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render 工作循序</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">workLoop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有下一个节点并且有时间时</span></span><br><span class=\"line\">    <span class=\"comment\">// 每一个任务执行完都可以放弃，让浏览器执行更高优先级的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nextUnitOfWork &amp;&amp; <span class=\"title function_\">hasRemainingTime</span>()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行下一个任务并返回下一个任务</span></span><br><span class=\"line\">        nextUnitOfWork = <span class=\"title function_\">performUnitOfWork</span>(fiber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;render 阶段结束&quot;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">// 执行完后返回下一个节点</span></span><br><span class=\"line\"><span class=\"string\">function performUnitOfWork(fiber) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    // 执行渲染</span></span><br><span class=\"line\"><span class=\"string\">    let child = beginWork(fiber);</span></span><br><span class=\"line\"><span class=\"string\">    if(child) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        return child;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    // 如果没有子节点说明当前节点已经完成了渲染工作</span></span><br><span class=\"line\"><span class=\"string\">    while(fiber) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        // 可以结束此fiber的渲染了 </span></span><br><span class=\"line\"><span class=\"string\">        completeUnitOfWork(fiber);</span></span><br><span class=\"line\"><span class=\"string\">        // 如果有弟弟就返回弟弟</span></span><br><span class=\"line\"><span class=\"string\">        if(fiber.sibling) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            return fiber.sibling;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        // 否则就返回上一层</span></span><br><span class=\"line\"><span class=\"string\">        fiber = fiber.return;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function beginWork(fiber) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    console.log(&#x27;</span>beginWork<span class=\"string\">&#x27;, fiber.props.className);</span></span><br><span class=\"line\"><span class=\"string\">    // 执行完成后返回第一个子节点</span></span><br><span class=\"line\"><span class=\"string\">    return fiber.child;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function completeUnitOfWork(fiber) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    // 标记当前这个fiber街道已经完成</span></span><br><span class=\"line\"><span class=\"string\">    console.log(&#x27;</span>completeUnitOfWork<span class=\"string\">&#x27;, fiber.props.className);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<p>上面的这些代码是预先熟悉一下，fiber 是怎么运行，下面正式进入构建的代码逻辑。</p>\n<h4 id=\"队列的单向链表\"><a href=\"#队列的单向链表\" class=\"headerlink\" title=\"队列的单向链表\"></a>队列的单向链表</h4><ol>\n<li><p>在main.js 中增加下面代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root.<span class=\"title function_\">render</span>(element)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactDOMRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; updateContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../react-reconciler/src/ReactFiberReconciler&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"title class_\">ReactDomRoot</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">render</span> = <span class=\"keyword\">function</span> (<span class=\"params\">children</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. 获取容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"variable language_\">this</span>.<span class=\"property\">_internalRoot</span>;</span><br><span class=\"line\"><span class=\"title function_\">updateContainer</span>(children, root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberReconciler.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createUpdate, enqueueUpdate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberClassUpdateQueue&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新容器, 把虚拟DOM变成真实DOM 插入到container容器中</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; element 虚拟DOM</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; container 容器   FiberRootNode</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">updateContainer</span>(<span class=\"params\">element, container</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 获取根fiber</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> current = container.<span class=\"property\">current</span>;</span><br><span class=\"line\"><span class=\"comment\">// 创建更新队列</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"title function_\">createUpdate</span>();</span><br><span class=\"line\">update.<span class=\"property\">payload</span> = &#123;element&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 3. 把此更新任务对象添加到current这个根Fiber的更新队列里</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> root = <span class=\"title function_\">enqueueUpdate</span>(current, update);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberClassUpdateQueue.js</p>\n</li>\n</ol>\n<p><img src=\"https://pic.imgdb.cn/item/653e40f6c458853aefe48306.jpg\" alt=\"ReactFiberClassUpdateQueue.js\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; markUpdateLaneFromFiberToRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberConcurrentUpdate&#x27;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 更新状态</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UpdateState</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> update = &#123;<span class=\"attr\">tag</span>: <span class=\"title class_\">UpdateState</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> update;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">enqueueUpdate</span>(<span class=\"params\">fiber, update</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取根fiber的更新队列 (上一篇最后加的)</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> updateQueue = fiber.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取等待执行的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> pending = updateQueue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 说明初始化的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pending === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = pending.<span class=\"property\">next</span>;</span><br><span class=\"line\">        pending.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 让等待更新指向当前update 开始更新</span></span><br><span class=\"line\">    updateQueue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span> = update;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从当前的fiber 到返回找到并返回根节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">markUpdateLaneFromFiberToRoot</span>(fiber);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"冒泡获取根节点容器\"><a href=\"#冒泡获取根节点容器\" class=\"headerlink\" title=\"冒泡获取根节点容器\"></a>冒泡获取根节点容器</h4><p>ReactFiberConcurrentUpdate.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HostRoot</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactWorkTags&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 本来此文件要处理更新优先级问题，把不同的fiber优先级冒泡一路标记到根节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * 目前现在值实现向上冒泡找到根节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">sourceFiber</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">markUpdateLaneFromFiberToRoot</span>(<span class=\"params\">sourceFiber</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前父fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> parent = sourceFiber.<span class=\"property\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 当前fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = sourceFiber;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一直找到 父fiber 为null</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(parent !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = parent;</span><br><span class=\"line\">        parent = parent.<span class=\"property\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回当前root节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.<span class=\"property\">tag</span> === <span class=\"title class_\">HostRoot</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> root = node.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"调度更新\"><a href=\"#调度更新\" class=\"headerlink\" title=\"调度更新\"></a>调度更新</h4><p>到目前为止更新对象已经添加到了根fiber的更新队列上，现在需要开始进行调度更新。</p>\n<ol>\n<li><p>ReactFiberReconciler.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; scheduleUpdateOnFiber &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberWorkLoop&#x27;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">updateContainer</span>(<span class=\"params\">element, container</span>) &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">+ <span class=\"title function_\">scheduleUpdateOnFiber</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberWorkLoop.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; scheduleCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./scheduler&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">scheduleUpdateOnFiber</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">ensureRootIsScheduled</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">ensureRootIsScheduled</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 告诉浏览器要执行performConcurrentWorkOnRoot 参数定死为root</span></span><br><span class=\"line\">    <span class=\"title function_\">scheduleCallback</span>(performConcurrentWorkOnRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">performConcurrentWorkOnRoot</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(root, <span class=\"string\">&#x27;performConcurrentWorkOnRoot&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>src&#x2F;scheduler&#x2F;index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./src/forks/Scheduler&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>src&#x2F;forks&#x2F;Scheduler.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此处后面会实现优先级队列</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">scheduleCallback</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\"><span class=\"title function_\">requestIdleCallback</span>(callback);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打印FiberRootNode</p>\n</li>\n</ol>\n<p><img src=\"https://pic.imgdb.cn/item/653e496bc458853aef00deb1.jpg\" alt=\"输出的FiberRootNode\"></p>\n<h3 id=\"工作循环\"><a href=\"#工作循环\" class=\"headerlink\" title=\"工作循环\"></a>工作循环</h3><p><img src=\"https://pic.imgdb.cn/item/653e4d86c458853aef11c6ea.jpg\" alt=\"工作循环\"></p>\n<p>我们已经创建好一个根节点容器和一个空的根fiber（黑色部分），在图中看到还有一个正在构建中的根fiber。<br>根节点的current指的是当前的根fiber，是会和构建中的根fiber轮替工作（双缓冲），现在需要构建一个新的根fiber并且把fiber树写在里面。<br>一个是表示当前页面已经渲染完成的fiber树，一个是正在构建中还没有生效、更没有更新到页面的fiber树</p>\n<h4 id=\"建立新的hostRootFiber\"><a href=\"#建立新的hostRootFiber\" class=\"headerlink\" title=\"建立新的hostRootFiber\"></a>建立新的hostRootFiber</h4><ol>\n<li><p>ReactFiberWorkLoop.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; creatWorkInProgress &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiber&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正在进行中的工作</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> workInProgress = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * (被告知浏览器确保执行的函数)</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据当前的fiber节点构建fiber树, 创建真实的dom节点, 插入到容器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">performConcurrentWorkOnRoot</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. 初次渲染的时候以同步方式渲染根节点, 因为要尽快展示 (初始化)</span></span><br><span class=\"line\"><span class=\"title function_\">renderRootSync</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">prepareFreshStack</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 5. 根据老fiber构建新fiber (初始化)</span></span><br><span class=\"line\">workInProgress = <span class=\"title function_\">creatWorkInProgress</span>(root.<span class=\"property\">current</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderRootSync</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 2. 先构建了一个空的栈</span></span><br><span class=\"line\"><span class=\"title function_\">prepareFreshStack</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiber.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据老fiber和新的属性构建新fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; current 老fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; pendingProps 新的属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">creatWorkInProgress</span>(<span class=\"params\">current, pendingProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 拿到老fiber的轮替 第一次没有 (初始化)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> workInProgress = current.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(workInProgress === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        workInProgress = <span class=\"title function_\">createFiberNode</span>(current.<span class=\"property\">tag</span>, pendingProps, current.<span class=\"property\">key</span>);</span><br><span class=\"line\">        workInProgress.<span class=\"property\">type</span> = current.<span class=\"property\">type</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">stateNode</span> = current.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        workInProgress.<span class=\"property\">stateNode</span> = current;</span><br><span class=\"line\">        current.<span class=\"property\">alternate</span> =  workInProgress;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有，说明是更新，只能改属性就可以复用</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">pendingProps</span> = current.<span class=\"property\">pendingProps</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">type</span> = current.<span class=\"property\">type</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">flags</span> = current.<span class=\"property\">flags</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">subtreeFlags</span> = <span class=\"title class_\">NoFlags</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 复制属性</span></span><br><span class=\"line\">    workInProgress.<span class=\"property\">child</span> = current.<span class=\"property\">child</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">memoizedProps</span> = current.<span class=\"property\">memoizedProps</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">memoizedState</span> = current.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">updateQueue</span> = current.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">sibling</span> = current.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">index</span> = current.<span class=\"property\">index</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workInProgress;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"执行工作单元\"><a href=\"#执行工作单元\" class=\"headerlink\" title=\"执行工作单元\"></a>执行工作单元</h4><p>然后在新的根fiber里构建更新fiber树</p>\n<ol>\n<li><p>ReactFiberWorkLoop.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; beginWork &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberBeginWork&quot;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderRootSync</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 2. 先构建一个空的栈</span></span><br><span class=\"line\">    <span class=\"title function_\">prepareFreshStack</span>(root);</span><br><span class=\"line\">    <span class=\"comment\">// 1. 现在的 workInProgress 是新的根fiber</span></span><br><span class=\"line\">    <span class=\"title function_\">workLoopSync</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 工作同步循环</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">workLoopSync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(workInProgress !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 执行工作单元</span></span><br><span class=\"line\">        <span class=\"title function_\">performUnitOfWork</span>(workInProgress);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">performUnitOfWork</span>(<span class=\"params\">unitOfWork</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> current = unitOfWork.<span class=\"property\">alternate</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> next = <span class=\"title function_\">beginWork</span>(current, unitOfWork);</span><br><span class=\"line\"></span><br><span class=\"line\">    unitOfWork.<span class=\"property\">memoizedProps</span> = unitOfWork.<span class=\"property\">pendingProps</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 说明已经完成</span></span><br><span class=\"line\">        <span class=\"comment\">// 完成工作单元</span></span><br><span class=\"line\">        <span class=\"comment\">// completeUnitOfWork(); // 这个方法之后写 先模拟一下完成工作</span></span><br><span class=\"line\">        workInProgress = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有子节点就成为下一个工作单元</span></span><br><span class=\"line\">        workInProgress = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberBeginWork.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HostComponent</span>, <span class=\"title class_\">HostRoot</span>, <span class=\"title class_\">HostText</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactWorkTags&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; processUpdateQueue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberClassUpdateQueue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 5. 根据 `新的` 虚拟dom去构建  `新的` fiber链表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; current 老fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; workInProgress 新fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 下一个工作单元</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">beginWork</span>(<span class=\"params\">current, workInProgress</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;beginWork&quot;</span>, workInProgress);</span><br><span class=\"line\">    <span class=\"comment\">// 判断类型不同处理方式返回子节点或者弟弟</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(workInProgress.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostRoot</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">updateHostRoot</span>(current, workInProgress);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostComponent</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">updateHostComponent</span>(current, workInProgress);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostText</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateHostRoot</span>(<span class=\"params\">current, workInProgress</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要知道它的子虚拟dom, 知道它的儿子的虚拟dom信息</span></span><br><span class=\"line\">    <span class=\"comment\">// 之前在根fiber的更新队列加的虚拟dom, 可以在这获取</span></span><br><span class=\"line\">    <span class=\"title function_\">processUpdateQueue</span>(workInProgress);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextState = workInProgress.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取虚拟节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextChildren = nextState.<span class=\"property\">element</span>;</span><br><span class=\"line\">    <span class=\"title function_\">reconcileChildren</span>(current, workInProgress, nextChildren);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> workInProgress.<span class=\"property\">child</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateHostComponents</span>(<span class=\"params\">current, workInProgress</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"获取更新队列的虚拟dom\"><a href=\"#获取更新队列的虚拟dom\" class=\"headerlink\" title=\"获取更新队列的虚拟dom\"></a>获取更新队列的虚拟dom</h4><p>写上一步引入的<code>processUpdateQueue</code>方法</p>\n<ol>\n<li>ReactFiberClassUpdateQueue.js<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; markUpdateLaneFromFiberToRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberConcurrentUpdate&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initialUpdateQueue</span>(<span class=\"params\">fiber</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个更新队列</span></span><br><span class=\"line\">    <span class=\"comment\">// pending 是循环链表</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = &#123;</span><br><span class=\"line\">        <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">pending</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fiber.<span class=\"property\">updateQueue</span> = queue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新状态</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UpdateState</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> update = &#123;<span class=\"attr\">tag</span>: <span class=\"title class_\">UpdateState</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> update;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">enqueueUpdate</span>(<span class=\"params\">fiber, update</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取根fiber的更新队列 (上一篇最后加的)</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> updateQueue = fiber.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取等待执行的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> pending = updateQueue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 说明初始化的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pending === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = pending.<span class=\"property\">next</span>;</span><br><span class=\"line\">        pending.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 让等待更新指向当前update 开始更新</span></span><br><span class=\"line\">    updateQueue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span> = update;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从当前的fiber 到返回找到并返回根节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">markUpdateLaneFromFiberToRoot</span>(fiber);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据老状态和更新队列的更新计算最新的状态</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; workInProgress 要计算的fiber</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">processUpdateQueue</span>(<span class=\"params\">workInProgress</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拿到更新队列</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = workInProgress.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 等待生效的队列</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> pendingQueue = queue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有更新, 或者更新队列里有内容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pendingQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 清除等待生效的更新 因为在这就要使用了可以清除了</span></span><br><span class=\"line\">        queue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 获取最后一个等待生效的更新 </span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> lastPendingUpdate = pendingQueue;</span><br><span class=\"line\">        <span class=\"comment\">// 第一个等待生效的更新</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> firstPendingUpdate = pendingQueue.<span class=\"property\">next</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 把更新链表剪开, 变成单向链表</span></span><br><span class=\"line\">        lastPendingUpdate.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 获取老状态 (会不停更新和计算赋值新状态, 所以起名newState)</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newState = workInProgress.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> update = firstPendingUpdate;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(update) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据老状态和更新计算新状态</span></span><br><span class=\"line\">            newState = <span class=\"title function_\">getStateFromUpdate</span>(update, newState);</span><br><span class=\"line\">            update = update.<span class=\"property\">next</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 把最终计算到的状态赋值给 memoizedState</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">memoizedState</span> = newState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据老状态和更新, 计算新状态</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; update 更新</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; prevState 上一个状态</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 新状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getStateFromUpdate</span>(<span class=\"params\">update, prevState</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(update.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">UpdateState</span>:</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; payload &#125; = update;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">assign</span>(&#123;&#125;, prevState, payload);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"根据子虚拟dom创建子fiber节点\"><a href=\"#根据子虚拟dom创建子fiber节点\" class=\"headerlink\" title=\"根据子虚拟dom创建子fiber节点\"></a>根据子虚拟dom创建子fiber节点</h4><p>上上步还有一个<code>reconcileChildren</code>没有定义</p>\n<ol>\n<li><p>ReactFiberBeginWork.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mountChildFibers, reconcileChildFibers &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactChildFiber&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据新的虚拟dom生成新的fiber链表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; current 老的父fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; workInProgress 新的父fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; nextChildren 新的子虚拟dom</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildren</span>(<span class=\"params\">current, workInProgress, nextChildren</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果此新fiber没有老fiber, 说明是新创建的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 挂在子fiber</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">child</span> = <span class=\"title function_\">mountChildFibers</span>(workInProgress, <span class=\"literal\">null</span>, next);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 更新:  协调子fiber列表 需要做DOM-DIFF   (初始化时的根fiber是有老fiber的(一开始创建的))</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">child</span> = <span class=\"title function_\">reconcileChildFibers</span>(</span><br><span class=\"line\">        workInProgress,</span><br><span class=\"line\">        current.<span class=\"property\">child</span>,</span><br><span class=\"line\">        nextChildren</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactChildFiber.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createFiberFromElement &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiber&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../shared/ReactSymbols&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; shouldTrackSideEffect 是否跟踪副作用</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createChildReconciler</span>(<span class=\"params\">shouldTrackSideEffect</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileSingElement</span>(<span class=\"params\">returnFiber, currentFirstFiber, element</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为我们实现的是初次挂载, 老节点currentFirstFiber是没有的, </span></span><br><span class=\"line\">        <span class=\"comment\">// 所以可以直接根据虚拟dom创建fiber节点</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> created = <span class=\"title function_\">createFiberFromElement</span>(element);</span><br><span class=\"line\">        created.<span class=\"property\">return</span> = returnFiber;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> created;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 比较子fiber  (DOM-DIFF) 就是用老的fiber链表和新的虚拟dom进行比较</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; returnFiber 新父fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; currentFirstFiber 当前的第一个子fiber(老fiber的第一个儿子)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; newChild 新的子虚拟dom</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildFibers</span>(<span class=\"params\">returnFiber, currentFirstFiber, newChild</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 现在暂时只考虑新的节点只有一个的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; newChild !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (newChild.<span class=\"property\">$$typeof</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"attr\">REACT_ELEMENT_TYPE</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"title function_\">reconcileSingElement</span>(</span><br><span class=\"line\">                        returnFiber,</span><br><span class=\"line\">                        currentFirstFiber,</span><br><span class=\"line\">                        newChild</span><br><span class=\"line\">                    );</span><br><span class=\"line\">                <span class=\"attr\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reconcileChildFibers;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有老父fiber 更新</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> reconcileChildFibers = <span class=\"title function_\">createChildReconciler</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 没有老的父fiber 更新</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mountChildFibers = <span class=\"title function_\">createChildReconciler</span>(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiber.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberFromElement</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = element.<span class=\"property\">type</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = element.<span class=\"property\">key</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pendingProps = element.<span class=\"property\">props</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fiber = <span class=\"title function_\">createFiberFromTypeAndProps</span>(</span><br><span class=\"line\">        type,</span><br><span class=\"line\">        key,</span><br><span class=\"line\">        pendingProps</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fiber;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberFromTypeAndProps</span>(<span class=\"params\">type, key, pendingProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fiberTag = <span class=\"title class_\">IndeterminateComponent</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fiber = <span class=\"title function_\">createFiberNode</span>(fiberTag, pendingProps, key);</span><br><span class=\"line\">    fiber.<span class=\"property\">type</span> = type;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fiber;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"完成工作单元\"><a href=\"#完成工作单元\" class=\"headerlink\" title=\"完成工作单元\"></a>完成工作单元</h3><ol>\n<li>ReactFiberWorkLoop.js<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">completeUnitOfWork</span>(<span class=\"params\">unitOfWork</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 说明已经完成</span></span><br><span class=\"line\">    <span class=\"comment\">// 完成工作单元</span></span><br><span class=\"line\">    + <span class=\"title function_\">completeUnitOfWork</span>(unitOfWork); <span class=\"comment\">// 这个方法之后写 先模拟一下完成工作</span></span><br><span class=\"line\">        <span class=\"comment\">// workInProgress = null;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有子节点就成为下一个工作单元</span></span><br><span class=\"line\">        workInProgress = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">completeUnitOfWork</span>(<span class=\"params\">unitOfWork</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> completeWork = unitOfWork;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 拿到他的父节点和当前节点RootFiber</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> current = completeWork.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> returnFiber = completeWork.<span class=\"property\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> next = <span class=\"title function_\">completeWork</span>(current, completeWork);</span><br><span class=\"line\">        <span class=\"comment\">// 如果下一个节点不为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(next !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        workInProgress = next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">const</span> siblingFiber = completeWork.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果兄弟节点不为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(siblingFiber !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        workInProgress = siblingFiber;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回父节点</span></span><br><span class=\"line\">        completeWork = returnFiber;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(completeWork !== <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/fiber.html","/react/fiber/implement.html","/react/fiber/works.html","/react/synthetic/event.html","/react/fiber/node.html"],"length":4433,"excerpt":"","more":"<h3 id=\"实现jsx\"><a href=\"#实现jsx\" class=\"headerlink\" title=\"实现jsx\"></a>实现jsx</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> element = (</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &quot;<span class=\"attr\">red</span>&quot; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译后\"><a href=\"#编译后\" class=\"headerlink\" title=\"编译后\"></a>编译后</h3><p><img src=\"https://pic.imgdb.cn/item/653b2718c458853aef75775a.jpg\" alt=\"jsx 编译之后\"></p>\n<h3 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h3><ol>\n<li><p>jsx-dev-runtime.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; jsxDEV &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./jsx/ReactJSXElement&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactJSXElement.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hasOwnProperty <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../shared/hasOwnProperty&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dom 类型</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>  &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../shared/ReactSymbols&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RESERVED_PROPS</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">key</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">ref</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">__self</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">__source</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasValidKey</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config.<span class=\"property\">key</span> !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasValidRef</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config.<span class=\"property\">ref</span> !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ReactElement 创建</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReactElement</span>(<span class=\"params\">type, key, ref, props, owner</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个标签允许我们唯一地将其标识为React元素</span></span><br><span class=\"line\">        <span class=\"attr\">$$typeof</span>: <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>,</span><br><span class=\"line\">        type,</span><br><span class=\"line\">        key,</span><br><span class=\"line\">        ref,</span><br><span class=\"line\">        props,</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">jsxDEV</span>(<span class=\"params\">type, config</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提取保留名称</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> props = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ref = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">hasValidKey</span>(config)) &#123;</span><br><span class=\"line\">        key = config.<span class=\"property\">key</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">hasValidRef</span>(config)) &#123;</span><br><span class=\"line\">        ref = config.<span class=\"property\">ref</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> propName <span class=\"keyword\">in</span> config) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hasOwnProperty.<span class=\"title function_\">call</span>(config, propName) &amp;&amp;</span><br><span class=\"line\">        !<span class=\"variable constant_\">RESERVED_PROPS</span>.<span class=\"title function_\">hasOwnProperty</span>(propName)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            props[propName] = config[propName];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">ReactElement</span>(type, key, ref, props)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>hasOwnProperty.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; hasOwnProperty &#125; = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> hasOwnProperty;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactSymbols.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于标记类似 ReactElement 类型的符号。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span> = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;react.element&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"根节点和根fiber\"><a href=\"#根节点和根fiber\" class=\"headerlink\" title=\"根节点和根fiber\"></a>根节点和根fiber</h3><ul>\n<li>需要给react提供一个根节点，之后每个节点都是渲染在根节点内部的。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根fiber可以通俗理解为一个装着所有虚拟dom的容器，每个虚拟dom又单独对应一个fiber，</li>\n<li>渲染可以以单个fiber为单位暂停 &#x2F; 恢复。</li>\n<li>需要创建两个根 <code>fiber</code> 去相互替换展示。</li>\n</ul>\n<h4 id=\"创建根节点\"><a href=\"#创建根节点\" class=\"headerlink\" title=\"创建根节点\"></a>创建根节点</h4><p>更改main.jsx</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom/client&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> element = (</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">red</span>&#x27; &#125;&#125;&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(root)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>首先要建一个<code>FiberRootNode</code>根节点，也就是所有DOM的根，本质就是 <code>div#root</code>。</p>\n<p>根节点和<code>fiber</code>关系：</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"根节点和`fiber`关系\"></p>\n<p><code>FiberRootNode</code> 和 <code>HostRootFiber</code> 中间使用 <code>current</code> 相连；</p>\n<p><code>HostRootFiber</code> 和 <code>FiberRootNode</code> 中间使用 <code>stateNode</code> 相连。</p>\n<h4 id=\"实现createRoot\"><a href=\"#实现createRoot\" class=\"headerlink\" title=\"实现createRoot\"></a>实现createRoot</h4><p>分这么多文件的主要是因为很多其他逻辑要处理，暂时都给省略了。虽然比较绕，但其实本质就是把<code>div#root</code>做了几层包装。</p>\n<ol>\n<li><p>client.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./src/client/ReactDOMRoot&quot;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactDOMRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-reconciler/src/ReactFiberReconciler&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReactDOMRoot</span>(<span class=\"params\">internalRoot</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">_internalRoot</span> = internalRoot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 创建一个根 实际就是一个被包装过的真实DOM节点</span></span><br><span class=\"line\"><span class=\"comment\">// container: div#root</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createRoot</span>(<span class=\"params\">container</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. 创建容器   6. 接收到有#root的容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createContainer</span>(container);</span><br><span class=\"line\"><span class=\"comment\">// 7. 容器传给 ReactDOMRoot</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReactDOMRoot</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberReconciler.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createFiberRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberRoot&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 创建容器 containerInfo: 容器信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createContainer</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">createFiberRoot</span>(containerInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberRootNode</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 4. 把DOM节点放到容器</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">containerInfo</span> = containerInfo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberRoot</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 3. 创建根容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">FiberRootNode</span>(containerInfo);</span><br><span class=\"line\"><span class=\"comment\">// 这个位置在下一步要创建 FiberRoot</span></span><br><span class=\"line\"><span class=\"comment\">// 5. 把容器返回出去</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>现在根节点<code>FiberRootNode</code>创建好了，最后<code>root</code>的打印结果：</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2e66c458853aef8a195c.jpg\" alt=\"FiberRootNode\"></p>\n<h4 id=\"fiber\"><a href=\"#fiber\" class=\"headerlink\" title=\"fiber\"></a>fiber</h4><p>在创建根fiber之前先了解一下fiber</p>\n<h4 id=\"为什么需要有fiber？\"><a href=\"#为什么需要有fiber？\" class=\"headerlink\" title=\"为什么需要有fiber？\"></a>为什么需要有fiber？</h4><ul>\n<li>react以前没有fiber整个计算过程不能暂停，会导致时间过长</li>\n<li>浏览器刷新频率为 60Hz,大概 16.6 毫秒渲染一次，而 JS 线程和渲染线程是互斥的，所以如果 JS 线程执行任务时间超过 16.6ms 的话，就会导致掉帧、卡顿，解决方案就是 React 利用空闲的时间进行更新，不影响渲染进行的渲染</li>\n<li>把一个耗时任务切分成一个个小任务，分布在每一帧里。这个的方式就叫时间切片</li>\n</ul>\n<p>我们需要把渲染变成一个可中断，可暂停，可恢复的过程。<br>注：可以去搜一下 requestIdleCallback API ，react封装了一个类似的方法让每帧时间固定 5ms。</p>\n<h4 id=\"什么是fiber？\"><a href=\"#什么是fiber？\" class=\"headerlink\" title=\"什么是fiber？\"></a>什么是fiber？</h4><ul>\n<li><p>Fiber 是一个执行单元</p>\n<p>  Fiber 是一个执行单元,每次执行完一个执行单元，React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去。</p>\n<p>  react 中一帧的过程：</p>\n<p>  <img src=\"https://pic.imgdb.cn/item/653b551cc458853aef02aa5f.jpg\" alt=\"react 中一帧的过程\"></p>\n</li>\n<li><p>Fiber 是一种数据结构<br>  React 目前的做法是使用链表, 每个虚拟节点内部表示为一个Fiber<br>  从顶点开始遍历<br>  如果有第一个儿子，先遍历第一个儿子<br>  如果没有第一个儿子，标志着此节点遍历完成<br>  如果有弟弟遍历弟弟<br>  如果有没有下一个弟弟，返回父节点标识完成父节点遍历，如果有叔叔遍历叔叔<br>  没有父节点遍历结束</p>\n<p>  遍历结构：<br>  <img src=\"https://pic.imgdb.cn/item/653b55d2c458853aef05059f.jpg\" alt=\"遍历结构\"></p>\n<p>  遍历过程：<br>  <img src=\"https://pic.imgdb.cn/item/653b55f9c458853aef0589a3.jpg\" alt=\"遍历过程\"></p>\n</li>\n</ul>\n<h4 id=\"创建根fiber\"><a href=\"#创建根fiber\" class=\"headerlink\" title=\"创建根fiber\"></a>创建根fiber</h4><p>真实DOM需要一个根容器，<code>fiber</code>同样需要一个根<code>fiber</code>。</p>\n<p>相当于每个虚拟DOM都会创建一个对应的<code>Fiber</code>，再创建真实DOM</p>\n<p>虚拟DOM &#x3D;&gt; Fiber &#x3D;&gt; 真实DOM</p>\n<p>在刚刚创建FiberRootNode的函数里去创建<code>HostRootFiber</code>并互相指向对方。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653b2a66c458853aef7f6122.jpg\" alt=\"根节点和`fiber`关系\"></p>\n<ol>\n<li><p>ReactFiberRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createHostRootFiber &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiber&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberRootNode</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">containerInfo</span> = containerInfo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberRoot</span>(<span class=\"params\">containerInfo</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 之前创建的根节点容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">FiberRootNode</span>(containerInfo);</span><br><span class=\"line\"><span class=\"comment\">// 1. 创建根fiber. hostRoot就是根节点dev#root</span></span><br><span class=\"line\"><span class=\"comment\">// 未初始化的fiber</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uninitializedFiber = <span class=\"title function_\">createHostRootFiber</span>();</span><br><span class=\"line\"><span class=\"comment\">// 当前渲染页面的fiber.</span></span><br><span class=\"line\"><span class=\"comment\">// 6. 根容器的current指向当前的根fiber</span></span><br><span class=\"line\">root.<span class=\"property\">current</span> = uninitializedFiber;</span><br><span class=\"line\">uninitializedFiber.<span class=\"property\">stateNode</span> = root;</span><br><span class=\"line\"><span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiber.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. 工作标签</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HostRoot</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactWorkTags&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 5. 副作用标识</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NoFlags</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberFlags&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">FiberNode</span>(<span class=\"params\">tag, pendingProps, key</span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// fiber类型, 来自于虚拟DOM节点的type   (span h1 p)</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">stateNode</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 此fiber对应的真实DOM节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">return</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向父节点</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">child</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向第一个子节点</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">sibling</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向弟弟</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">pendingProps</span> = pendingProps; <span class=\"comment\">// 等待生效的属性</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">memoizedProps</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 已经生效的属性</span></span><br><span class=\"line\"><span class=\"comment\">// 虚拟DOM会提供pendingProps给创建fiber的属性，等处理完复制给memoizedProps</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个fiber还会有自己的状态，每一种fiber状态存的类型都不一样</span></span><br><span class=\"line\"><span class=\"comment\">// 比如：类组件对应的fiber存的就是实例的状态，HostRoot存的就是要渲染的元素</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">memoizedState</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个fiber可能还有自己的更新队列</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">updateQueue</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5. &quot;./ReactFiberFlags&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">flags</span> = <span class=\"title class_\">NoFlags</span>; <span class=\"comment\">// 副作用标识，表示对此fiber节点进行何种操作</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">subtreeFlags</span> = <span class=\"title class_\">NoFlags</span>; <span class=\"comment\">// 子节点对应的副作用标识</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 轮替 (缓存了另一个fiber节点实例) diff时用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberNode</span>(<span class=\"params\">tag, pendingProps, key</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FiberNode</span>(tag, pendingProps, key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createHostRootFiber</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">createFiberNode</span>(<span class=\"title class_\">HostRoot</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactWorkTags.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每种虚拟DOM都会对应自己的fiber的类型</span></span><br><span class=\"line\"><span class=\"comment\">// 根Fiber的Tag</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostRoot</span> = <span class=\"number\">3</span>; <span class=\"comment\">// 根节点</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostComponent</span> = <span class=\"number\">5</span>; <span class=\"comment\">// 原生节点 span div p</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostText</span> = <span class=\"number\">6</span>; <span class=\"comment\">// 纯文本节点</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberFlags.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没有任何操作</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">NoFlags</span> = <span class=\"number\">0b000000000000000000000000000000</span>;</span><br><span class=\"line\"><span class=\"comment\">// 插入</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Placement</span> = <span class=\"number\">0b000000000000000000000000000010</span>;</span><br><span class=\"line\"><span class=\"comment\">// 更新</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Update</span> = <span class=\"number\">0b000000000000000000000000000100</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>看最后root的打印结果：根fiber和节点容器互相指向</p>\n</li>\n</ol>\n<p><img src=\"https://pic.imgdb.cn/item/653b5beac458853aef1a1a12.jpg\" alt=\"根fiber和节点容器互相指向\"></p>\n<pre><code>current指的是当前根容器正在显示或者已经渲染好的fiber树\n</code></pre>\n<p>react采用了双缓存区的技术，可以把将要显示的图片绘制在缓存区中，需要展示的时候直接拿来替换掉。 alternate 轮替。</p>\n<p><img src=\"https://pic.imgdb.cn/item/653bc1f2c458853aefb79377.jpg\"></p>\n<h4 id=\"创建队列\"><a href=\"#创建队列\" class=\"headerlink\" title=\"创建队列\"></a>创建队列</h4><p>打开ReactFiberRoot.js文件，在return root之前加一行代码，给根fiber加上一个更新队列，之后更新渲染任务都是放到这个队列里面。</p>\n<ol>\n<li><p>ReactFiberRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ <span class=\"keyword\">import</span> &#123; initialUpdateQueue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberClassUpdateQueue&quot;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">+ <span class=\"title function_\">initialUpdateQueue</span>(uninitializedFiber);</span><br><span class=\"line\"><span class=\"keyword\">return</span> root;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberClassUpdateQueue.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initialUpdateQueue</span>(<span class=\"params\">fiber</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个更新队列</span></span><br><span class=\"line\">    <span class=\"comment\">// pending 是循环链表</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = &#123;</span><br><span class=\"line\">        <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">pending</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fiber.<span class=\"property\">updateQueue</span> = queue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>如下图所示在fiber树中增加了updateQueue 队列</p>\n<p><img src=\"https://pic.imgdb.cn/item/653bc2bdc458853aefbd2de4.jpg\" alt=\"updateQueue 队列\"></p>\n<h3 id=\"构建轮替的根fiber\"><a href=\"#构建轮替的根fiber\" class=\"headerlink\" title=\"构建轮替的根fiber\"></a>构建轮替的根fiber</h3><h4 id=\"fiber是怎么运作的\"><a href=\"#fiber是怎么运作的\" class=\"headerlink\" title=\"fiber是怎么运作的\"></a>fiber是怎么运作的</h4><pre><code>为什么要轮替在上一篇已经说过了，这一篇写一下fiber的单项循环链表。\n</code></pre>\n<p>假如我们有一个jsx 的dom结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> element = (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;A1&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;B1&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;C1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;C2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;B2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在以前没有用fiber渲染是这样的，这个渲染方式是递归渲染如果数据很多就可能会卡顿。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vDom = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;A1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;props&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;A1&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;children&quot;</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;B1&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;props&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;B1&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;children&quot;</span>: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;C1&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;props&quot;</span>: &#123; <span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;C1&quot;</span>&#125;,</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;C2&quot;</span>,</span><br><span class=\"line\">                            <span class=\"string\">&quot;props&quot;</span>: &#123;<span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;C2&quot;</span>&#125;,</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;B2&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;props&quot;</span>: &#123;<span class=\"string\">&quot;className&quot;</span>: <span class=\"string\">&quot;B2&quot;</span>&#125;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 把vDom一气呵成渲染到页面</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">element, container</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把虚拟DOM创建成真实DOM</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> dom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(element.<span class=\"property\">type</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 遍历属性</span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(element.<span class=\"property\">props</span>).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> key !== <span class=\"string\">&#x27;children&#x27;</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        dom[key] = element.<span class=\"property\">props</span>[key];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 把子节点渲染到父节点上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(element.<span class=\"property\">props</span>.<span class=\"property\">children</span>))&#123;</span><br><span class=\"line\">        element.<span class=\"property\">props</span>.<span class=\"property\">children</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">child</span>=&gt;</span><span class=\"title function_\">render</span>(child,dom));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 把真实节点挂载到容器</span></span><br><span class=\"line\">    container.<span class=\"title function_\">appendChild</span>(dom);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">render</span>(element, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>下面是fiber的渲染方式，可以中断、暂停、恢复渲染。深度优先</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 把虚拟DOM构建成Fiber树</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">A1</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;A1&#x27;</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">B1</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;B1&#x27;</span> &#125;, <span class=\"attr\">return</span>: <span class=\"variable constant_\">A1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">B2</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;B2&#x27;</span> &#125;, <span class=\"attr\">return</span>: <span class=\"variable constant_\">A1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">C1</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;C1&#x27;</span> &#125;, <span class=\"attr\">return</span>: <span class=\"variable constant_\">B1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">C2</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;div&#x27;</span>, <span class=\"attr\">props</span>: &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;C2&#x27;</span> &#125;, <span class=\"attr\">return</span>: <span class=\"variable constant_\">B1</span> &#125;;</span><br><span class=\"line\"><span class=\"variable constant_\">A1</span>.<span class=\"property\">child</span> = <span class=\"variable constant_\">B1</span>;</span><br><span class=\"line\"><span class=\"variable constant_\">B1</span>.<span class=\"property\">sibling</span> = <span class=\"variable constant_\">B2</span>;</span><br><span class=\"line\"><span class=\"variable constant_\">B1</span>.<span class=\"property\">child</span> = <span class=\"variable constant_\">C1</span>;</span><br><span class=\"line\"><span class=\"variable constant_\">C1</span>.<span class=\"property\">sibling</span> = <span class=\"variable constant_\">C2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下一个工作单元</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nextUnitOfWork = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasRemainingTime</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模拟有时间</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// render 工作循序</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">workLoop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有下一个节点并且有时间时</span></span><br><span class=\"line\">    <span class=\"comment\">// 每一个任务执行完都可以放弃，让浏览器执行更高优先级的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nextUnitOfWork &amp;&amp; <span class=\"title function_\">hasRemainingTime</span>()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行下一个任务并返回下一个任务</span></span><br><span class=\"line\">        nextUnitOfWork = <span class=\"title function_\">performUnitOfWork</span>(fiber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;render 阶段结束&quot;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">// 执行完后返回下一个节点</span></span><br><span class=\"line\"><span class=\"string\">function performUnitOfWork(fiber) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    // 执行渲染</span></span><br><span class=\"line\"><span class=\"string\">    let child = beginWork(fiber);</span></span><br><span class=\"line\"><span class=\"string\">    if(child) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        return child;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    // 如果没有子节点说明当前节点已经完成了渲染工作</span></span><br><span class=\"line\"><span class=\"string\">    while(fiber) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        // 可以结束此fiber的渲染了 </span></span><br><span class=\"line\"><span class=\"string\">        completeUnitOfWork(fiber);</span></span><br><span class=\"line\"><span class=\"string\">        // 如果有弟弟就返回弟弟</span></span><br><span class=\"line\"><span class=\"string\">        if(fiber.sibling) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            return fiber.sibling;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        // 否则就返回上一层</span></span><br><span class=\"line\"><span class=\"string\">        fiber = fiber.return;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function beginWork(fiber) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    console.log(&#x27;</span>beginWork<span class=\"string\">&#x27;, fiber.props.className);</span></span><br><span class=\"line\"><span class=\"string\">    // 执行完成后返回第一个子节点</span></span><br><span class=\"line\"><span class=\"string\">    return fiber.child;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">function completeUnitOfWork(fiber) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    // 标记当前这个fiber街道已经完成</span></span><br><span class=\"line\"><span class=\"string\">    console.log(&#x27;</span>completeUnitOfWork<span class=\"string\">&#x27;, fiber.props.className);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<p>上面的这些代码是预先熟悉一下，fiber 是怎么运行，下面正式进入构建的代码逻辑。</p>\n<h4 id=\"队列的单向链表\"><a href=\"#队列的单向链表\" class=\"headerlink\" title=\"队列的单向链表\"></a>队列的单向链表</h4><ol>\n<li><p>在main.js 中增加下面代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root.<span class=\"title function_\">render</span>(element)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactDOMRoot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; updateContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../react-reconciler/src/ReactFiberReconciler&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"title class_\">ReactDomRoot</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">render</span> = <span class=\"keyword\">function</span> (<span class=\"params\">children</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. 获取容器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"variable language_\">this</span>.<span class=\"property\">_internalRoot</span>;</span><br><span class=\"line\"><span class=\"title function_\">updateContainer</span>(children, root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberReconciler.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createUpdate, enqueueUpdate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberClassUpdateQueue&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新容器, 把虚拟DOM变成真实DOM 插入到container容器中</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; element 虚拟DOM</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; container 容器   FiberRootNode</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">updateContainer</span>(<span class=\"params\">element, container</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 获取根fiber</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> current = container.<span class=\"property\">current</span>;</span><br><span class=\"line\"><span class=\"comment\">// 创建更新队列</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"title function_\">createUpdate</span>();</span><br><span class=\"line\">update.<span class=\"property\">payload</span> = &#123;element&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 3. 把此更新任务对象添加到current这个根Fiber的更新队列里</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> root = <span class=\"title function_\">enqueueUpdate</span>(current, update);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberClassUpdateQueue.js</p>\n</li>\n</ol>\n<p><img src=\"https://pic.imgdb.cn/item/653e40f6c458853aefe48306.jpg\" alt=\"ReactFiberClassUpdateQueue.js\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; markUpdateLaneFromFiberToRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberConcurrentUpdate&#x27;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 更新状态</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UpdateState</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> update = &#123;<span class=\"attr\">tag</span>: <span class=\"title class_\">UpdateState</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> update;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">enqueueUpdate</span>(<span class=\"params\">fiber, update</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取根fiber的更新队列 (上一篇最后加的)</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> updateQueue = fiber.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取等待执行的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> pending = updateQueue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 说明初始化的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pending === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = pending.<span class=\"property\">next</span>;</span><br><span class=\"line\">        pending.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 让等待更新指向当前update 开始更新</span></span><br><span class=\"line\">    updateQueue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span> = update;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从当前的fiber 到返回找到并返回根节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">markUpdateLaneFromFiberToRoot</span>(fiber);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"冒泡获取根节点容器\"><a href=\"#冒泡获取根节点容器\" class=\"headerlink\" title=\"冒泡获取根节点容器\"></a>冒泡获取根节点容器</h4><p>ReactFiberConcurrentUpdate.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HostRoot</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactWorkTags&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 本来此文件要处理更新优先级问题，把不同的fiber优先级冒泡一路标记到根节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * 目前现在值实现向上冒泡找到根节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">sourceFiber</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">markUpdateLaneFromFiberToRoot</span>(<span class=\"params\">sourceFiber</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前父fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> parent = sourceFiber.<span class=\"property\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 当前fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = sourceFiber;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一直找到 父fiber 为null</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(parent !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node = parent;</span><br><span class=\"line\">        parent = parent.<span class=\"property\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回当前root节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.<span class=\"property\">tag</span> === <span class=\"title class_\">HostRoot</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> root = node.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"调度更新\"><a href=\"#调度更新\" class=\"headerlink\" title=\"调度更新\"></a>调度更新</h4><p>到目前为止更新对象已经添加到了根fiber的更新队列上，现在需要开始进行调度更新。</p>\n<ol>\n<li><p>ReactFiberReconciler.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; scheduleUpdateOnFiber &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberWorkLoop&#x27;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">updateContainer</span>(<span class=\"params\">element, container</span>) &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">+ <span class=\"title function_\">scheduleUpdateOnFiber</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberWorkLoop.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; scheduleCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./scheduler&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">scheduleUpdateOnFiber</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">ensureRootIsScheduled</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">ensureRootIsScheduled</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 告诉浏览器要执行performConcurrentWorkOnRoot 参数定死为root</span></span><br><span class=\"line\">    <span class=\"title function_\">scheduleCallback</span>(performConcurrentWorkOnRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">performConcurrentWorkOnRoot</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(root, <span class=\"string\">&#x27;performConcurrentWorkOnRoot&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>src&#x2F;scheduler&#x2F;index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./src/forks/Scheduler&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>src&#x2F;forks&#x2F;Scheduler.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此处后面会实现优先级队列</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">scheduleCallback</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\"><span class=\"title function_\">requestIdleCallback</span>(callback);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打印FiberRootNode</p>\n</li>\n</ol>\n<p><img src=\"https://pic.imgdb.cn/item/653e496bc458853aef00deb1.jpg\" alt=\"输出的FiberRootNode\"></p>\n<h3 id=\"工作循环\"><a href=\"#工作循环\" class=\"headerlink\" title=\"工作循环\"></a>工作循环</h3><p><img src=\"https://pic.imgdb.cn/item/653e4d86c458853aef11c6ea.jpg\" alt=\"工作循环\"></p>\n<p>我们已经创建好一个根节点容器和一个空的根fiber（黑色部分），在图中看到还有一个正在构建中的根fiber。<br>根节点的current指的是当前的根fiber，是会和构建中的根fiber轮替工作（双缓冲），现在需要构建一个新的根fiber并且把fiber树写在里面。<br>一个是表示当前页面已经渲染完成的fiber树，一个是正在构建中还没有生效、更没有更新到页面的fiber树</p>\n<h4 id=\"建立新的hostRootFiber\"><a href=\"#建立新的hostRootFiber\" class=\"headerlink\" title=\"建立新的hostRootFiber\"></a>建立新的hostRootFiber</h4><ol>\n<li><p>ReactFiberWorkLoop.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; creatWorkInProgress &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiber&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正在进行中的工作</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> workInProgress = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * (被告知浏览器确保执行的函数)</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据当前的fiber节点构建fiber树, 创建真实的dom节点, 插入到容器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">performConcurrentWorkOnRoot</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. 初次渲染的时候以同步方式渲染根节点, 因为要尽快展示 (初始化)</span></span><br><span class=\"line\"><span class=\"title function_\">renderRootSync</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">prepareFreshStack</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 5. 根据老fiber构建新fiber (初始化)</span></span><br><span class=\"line\">workInProgress = <span class=\"title function_\">creatWorkInProgress</span>(root.<span class=\"property\">current</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderRootSync</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// 2. 先构建了一个空的栈</span></span><br><span class=\"line\"><span class=\"title function_\">prepareFreshStack</span>(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiber.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据老fiber和新的属性构建新fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; current 老fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; pendingProps 新的属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">creatWorkInProgress</span>(<span class=\"params\">current, pendingProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 拿到老fiber的轮替 第一次没有 (初始化)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> workInProgress = current.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(workInProgress === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        workInProgress = <span class=\"title function_\">createFiberNode</span>(current.<span class=\"property\">tag</span>, pendingProps, current.<span class=\"property\">key</span>);</span><br><span class=\"line\">        workInProgress.<span class=\"property\">type</span> = current.<span class=\"property\">type</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">stateNode</span> = current.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        workInProgress.<span class=\"property\">stateNode</span> = current;</span><br><span class=\"line\">        current.<span class=\"property\">alternate</span> =  workInProgress;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有，说明是更新，只能改属性就可以复用</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">pendingProps</span> = current.<span class=\"property\">pendingProps</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">type</span> = current.<span class=\"property\">type</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">flags</span> = current.<span class=\"property\">flags</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">subtreeFlags</span> = <span class=\"title class_\">NoFlags</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 复制属性</span></span><br><span class=\"line\">    workInProgress.<span class=\"property\">child</span> = current.<span class=\"property\">child</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">memoizedProps</span> = current.<span class=\"property\">memoizedProps</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">memoizedState</span> = current.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">updateQueue</span> = current.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">sibling</span> = current.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">    workInProgress.<span class=\"property\">index</span> = current.<span class=\"property\">index</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workInProgress;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"执行工作单元\"><a href=\"#执行工作单元\" class=\"headerlink\" title=\"执行工作单元\"></a>执行工作单元</h4><p>然后在新的根fiber里构建更新fiber树</p>\n<ol>\n<li><p>ReactFiberWorkLoop.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; beginWork &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactFiberBeginWork&quot;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderRootSync</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 2. 先构建一个空的栈</span></span><br><span class=\"line\">    <span class=\"title function_\">prepareFreshStack</span>(root);</span><br><span class=\"line\">    <span class=\"comment\">// 1. 现在的 workInProgress 是新的根fiber</span></span><br><span class=\"line\">    <span class=\"title function_\">workLoopSync</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 工作同步循环</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">workLoopSync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(workInProgress !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 执行工作单元</span></span><br><span class=\"line\">        <span class=\"title function_\">performUnitOfWork</span>(workInProgress);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">performUnitOfWork</span>(<span class=\"params\">unitOfWork</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> current = unitOfWork.<span class=\"property\">alternate</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> next = <span class=\"title function_\">beginWork</span>(current, unitOfWork);</span><br><span class=\"line\"></span><br><span class=\"line\">    unitOfWork.<span class=\"property\">memoizedProps</span> = unitOfWork.<span class=\"property\">pendingProps</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 说明已经完成</span></span><br><span class=\"line\">        <span class=\"comment\">// 完成工作单元</span></span><br><span class=\"line\">        <span class=\"comment\">// completeUnitOfWork(); // 这个方法之后写 先模拟一下完成工作</span></span><br><span class=\"line\">        workInProgress = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有子节点就成为下一个工作单元</span></span><br><span class=\"line\">        workInProgress = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiberBeginWork.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HostComponent</span>, <span class=\"title class_\">HostRoot</span>, <span class=\"title class_\">HostText</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactWorkTags&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; processUpdateQueue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberClassUpdateQueue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 5. 根据 `新的` 虚拟dom去构建  `新的` fiber链表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; current 老fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; workInProgress 新fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 下一个工作单元</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">beginWork</span>(<span class=\"params\">current, workInProgress</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;beginWork&quot;</span>, workInProgress);</span><br><span class=\"line\">    <span class=\"comment\">// 判断类型不同处理方式返回子节点或者弟弟</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(workInProgress.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostRoot</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">updateHostRoot</span>(current, workInProgress);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostComponent</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">updateHostComponent</span>(current, workInProgress);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostText</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateHostRoot</span>(<span class=\"params\">current, workInProgress</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要知道它的子虚拟dom, 知道它的儿子的虚拟dom信息</span></span><br><span class=\"line\">    <span class=\"comment\">// 之前在根fiber的更新队列加的虚拟dom, 可以在这获取</span></span><br><span class=\"line\">    <span class=\"title function_\">processUpdateQueue</span>(workInProgress);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextState = workInProgress.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取虚拟节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextChildren = nextState.<span class=\"property\">element</span>;</span><br><span class=\"line\">    <span class=\"title function_\">reconcileChildren</span>(current, workInProgress, nextChildren);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> workInProgress.<span class=\"property\">child</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateHostComponents</span>(<span class=\"params\">current, workInProgress</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"获取更新队列的虚拟dom\"><a href=\"#获取更新队列的虚拟dom\" class=\"headerlink\" title=\"获取更新队列的虚拟dom\"></a>获取更新队列的虚拟dom</h4><p>写上一步引入的<code>processUpdateQueue</code>方法</p>\n<ol>\n<li>ReactFiberClassUpdateQueue.js<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; markUpdateLaneFromFiberToRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiberConcurrentUpdate&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initialUpdateQueue</span>(<span class=\"params\">fiber</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个更新队列</span></span><br><span class=\"line\">    <span class=\"comment\">// pending 是循环链表</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = &#123;</span><br><span class=\"line\">        <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">pending</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fiber.<span class=\"property\">updateQueue</span> = queue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新状态</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UpdateState</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> update = &#123;<span class=\"attr\">tag</span>: <span class=\"title class_\">UpdateState</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> update;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">enqueueUpdate</span>(<span class=\"params\">fiber, update</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取根fiber的更新队列 (上一篇最后加的)</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> updateQueue = fiber.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取等待执行的任务</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> pending = updateQueue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 说明初始化的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pending === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        update.<span class=\"property\">next</span> = pending.<span class=\"property\">next</span>;</span><br><span class=\"line\">        pending.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 让等待更新指向当前update 开始更新</span></span><br><span class=\"line\">    updateQueue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span> = update;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从当前的fiber 到返回找到并返回根节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">markUpdateLaneFromFiberToRoot</span>(fiber);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据老状态和更新队列的更新计算最新的状态</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; workInProgress 要计算的fiber</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">processUpdateQueue</span>(<span class=\"params\">workInProgress</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拿到更新队列</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = workInProgress.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 等待生效的队列</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> pendingQueue = queue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有更新, 或者更新队列里有内容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pendingQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 清除等待生效的更新 因为在这就要使用了可以清除了</span></span><br><span class=\"line\">        queue.<span class=\"property\">shared</span>.<span class=\"property\">pending</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 获取最后一个等待生效的更新 </span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> lastPendingUpdate = pendingQueue;</span><br><span class=\"line\">        <span class=\"comment\">// 第一个等待生效的更新</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> firstPendingUpdate = pendingQueue.<span class=\"property\">next</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 把更新链表剪开, 变成单向链表</span></span><br><span class=\"line\">        lastPendingUpdate.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 获取老状态 (会不停更新和计算赋值新状态, 所以起名newState)</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newState = workInProgress.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> update = firstPendingUpdate;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(update) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据老状态和更新计算新状态</span></span><br><span class=\"line\">            newState = <span class=\"title function_\">getStateFromUpdate</span>(update, newState);</span><br><span class=\"line\">            update = update.<span class=\"property\">next</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 把最终计算到的状态赋值给 memoizedState</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">memoizedState</span> = newState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据老状态和更新, 计算新状态</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; update 更新</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; prevState 上一个状态</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 新状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getStateFromUpdate</span>(<span class=\"params\">update, prevState</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(update.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">UpdateState</span>:</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; payload &#125; = update;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">assign</span>(&#123;&#125;, prevState, payload);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"根据子虚拟dom创建子fiber节点\"><a href=\"#根据子虚拟dom创建子fiber节点\" class=\"headerlink\" title=\"根据子虚拟dom创建子fiber节点\"></a>根据子虚拟dom创建子fiber节点</h4><p>上上步还有一个<code>reconcileChildren</code>没有定义</p>\n<ol>\n<li><p>ReactFiberBeginWork.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mountChildFibers, reconcileChildFibers &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ReactChildFiber&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据新的虚拟dom生成新的fiber链表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; current 老的父fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; workInProgress 新的父fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; nextChildren 新的子虚拟dom</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildren</span>(<span class=\"params\">current, workInProgress, nextChildren</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果此新fiber没有老fiber, 说明是新创建的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 挂在子fiber</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">child</span> = <span class=\"title function_\">mountChildFibers</span>(workInProgress, <span class=\"literal\">null</span>, next);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 更新:  协调子fiber列表 需要做DOM-DIFF   (初始化时的根fiber是有老fiber的(一开始创建的))</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">child</span> = <span class=\"title function_\">reconcileChildFibers</span>(</span><br><span class=\"line\">        workInProgress,</span><br><span class=\"line\">        current.<span class=\"property\">child</span>,</span><br><span class=\"line\">        nextChildren</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactChildFiber.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createFiberFromElement &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ReactFiber&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../shared/ReactSymbols&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; shouldTrackSideEffect 是否跟踪副作用</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createChildReconciler</span>(<span class=\"params\">shouldTrackSideEffect</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileSingElement</span>(<span class=\"params\">returnFiber, currentFirstFiber, element</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为我们实现的是初次挂载, 老节点currentFirstFiber是没有的, </span></span><br><span class=\"line\">        <span class=\"comment\">// 所以可以直接根据虚拟dom创建fiber节点</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> created = <span class=\"title function_\">createFiberFromElement</span>(element);</span><br><span class=\"line\">        created.<span class=\"property\">return</span> = returnFiber;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> created;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 比较子fiber  (DOM-DIFF) 就是用老的fiber链表和新的虚拟dom进行比较</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; returnFiber 新父fiber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; currentFirstFiber 当前的第一个子fiber(老fiber的第一个儿子)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; newChild 新的子虚拟dom</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildFibers</span>(<span class=\"params\">returnFiber, currentFirstFiber, newChild</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 现在暂时只考虑新的节点只有一个的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; newChild !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (newChild.<span class=\"property\">$$typeof</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"attr\">REACT_ELEMENT_TYPE</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"title function_\">reconcileSingElement</span>(</span><br><span class=\"line\">                        returnFiber,</span><br><span class=\"line\">                        currentFirstFiber,</span><br><span class=\"line\">                        newChild</span><br><span class=\"line\">                    );</span><br><span class=\"line\">                <span class=\"attr\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reconcileChildFibers;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有老父fiber 更新</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> reconcileChildFibers = <span class=\"title function_\">createChildReconciler</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 没有老的父fiber 更新</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mountChildFibers = <span class=\"title function_\">createChildReconciler</span>(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReactFiber.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberFromElement</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = element.<span class=\"property\">type</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = element.<span class=\"property\">key</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pendingProps = element.<span class=\"property\">props</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fiber = <span class=\"title function_\">createFiberFromTypeAndProps</span>(</span><br><span class=\"line\">        type,</span><br><span class=\"line\">        key,</span><br><span class=\"line\">        pendingProps</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fiber;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberFromTypeAndProps</span>(<span class=\"params\">type, key, pendingProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fiberTag = <span class=\"title class_\">IndeterminateComponent</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fiber = <span class=\"title function_\">createFiberNode</span>(fiberTag, pendingProps, key);</span><br><span class=\"line\">    fiber.<span class=\"property\">type</span> = type;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fiber;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"完成工作单元\"><a href=\"#完成工作单元\" class=\"headerlink\" title=\"完成工作单元\"></a>完成工作单元</h3><ol>\n<li>ReactFiberWorkLoop.js<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">completeUnitOfWork</span>(<span class=\"params\">unitOfWork</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 说明已经完成</span></span><br><span class=\"line\">    <span class=\"comment\">// 完成工作单元</span></span><br><span class=\"line\">    + <span class=\"title function_\">completeUnitOfWork</span>(unitOfWork); <span class=\"comment\">// 这个方法之后写 先模拟一下完成工作</span></span><br><span class=\"line\">        <span class=\"comment\">// workInProgress = null;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有子节点就成为下一个工作单元</span></span><br><span class=\"line\">        workInProgress = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">completeUnitOfWork</span>(<span class=\"params\">unitOfWork</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> completeWork = unitOfWork;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 拿到他的父节点和当前节点RootFiber</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> current = completeWork.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> returnFiber = completeWork.<span class=\"property\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> next = <span class=\"title function_\">completeWork</span>(current, completeWork);</span><br><span class=\"line\">        <span class=\"comment\">// 如果下一个节点不为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(next !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        workInProgress = next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">const</span> siblingFiber = completeWork.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果兄弟节点不为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(siblingFiber !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        workInProgress = siblingFiber;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回父节点</span></span><br><span class=\"line\">        completeWork = returnFiber;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(completeWork !== <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"type 的使用","date":"2023-10-22T10:12:30.000Z","description":"给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 ).","comments":1,"_content":"\n#### type 的使用\n\n作用 : 给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 )\n\n##### 1. 类型别名\n\n**语法 :** `type 别名 = 类型`\n\n**实例 :**\n\n```typescript\n  type St = string // 定义\n\n  let str1:St = 'abc'\n  let str2:string = 'abc'\n\n```\n\n##### 2.自定义类型\n\n**语法 :** `type 别名 = 类型 | 类型1 | 类型2`\n\n**实例 :**\n\n```typescript\n  type NewType = string | number // 定义类型\n\n  let a: NewType = 1\n  let b: NewType = '1'\n\n```\n\n##### 3.泛型定义\n\n**语法**： `type 别名<T> = 类型<T> | 类型1<T> | 类型2<T>`\n\n**实例** :\n\n```typescript\n\ttype NewType<T> = {\n    name: T\n  }\n  let a : NewType<number> = { name: 0 }\n  let b : NewType<string> = { name: '0' }\n```\n\n\n\n##### 4.联合类型(相当于继承类型)\n\n**语法**：`type 别名 = 类型 & 类型1 & 类型2`\n\n**示例**：\n\n```typescript\n  type User = {\n      name: string;\n      age?: number;\n  }\n\n  type Job = {\n      jobs: string;\n  }\n\n  type UserInfo = User & Job;\n\n```","source":"_posts/typeScript/useType.md","raw":"---\ntitle: type 的使用\npermalink: /typescript/use/type.html\ndate: 2023-10-22 18:12:30\ndescription: 给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 ).\ntag: [前端, TypeScript]\ncomments: true\ncategories: \n - 前端\n - TypeScript\n---\n\n#### type 的使用\n\n作用 : 给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 )\n\n##### 1. 类型别名\n\n**语法 :** `type 别名 = 类型`\n\n**实例 :**\n\n```typescript\n  type St = string // 定义\n\n  let str1:St = 'abc'\n  let str2:string = 'abc'\n\n```\n\n##### 2.自定义类型\n\n**语法 :** `type 别名 = 类型 | 类型1 | 类型2`\n\n**实例 :**\n\n```typescript\n  type NewType = string | number // 定义类型\n\n  let a: NewType = 1\n  let b: NewType = '1'\n\n```\n\n##### 3.泛型定义\n\n**语法**： `type 别名<T> = 类型<T> | 类型1<T> | 类型2<T>`\n\n**实例** :\n\n```typescript\n\ttype NewType<T> = {\n    name: T\n  }\n  let a : NewType<number> = { name: 0 }\n  let b : NewType<string> = { name: '0' }\n```\n\n\n\n##### 4.联合类型(相当于继承类型)\n\n**语法**：`type 别名 = 类型 & 类型1 & 类型2`\n\n**示例**：\n\n```typescript\n  type User = {\n      name: string;\n      age?: number;\n  }\n\n  type Job = {\n      jobs: string;\n  }\n\n  type UserInfo = User & Job;\n\n```","slug":"typeScript/useType","published":1,"updated":"2023-10-23T12:33:02.357Z","__permalink":"/typescript/use/type.html","layout":"post","photos":[],"link":"","_id":"clofw8ydk001mm0uod5zh02y4","content":"<div id=\"vip-container\"><h4 id=\"type-的使用\"><a href=\"#type-的使用\" class=\"headerlink\" title=\"type 的使用\"></a>type 的使用</h4><p>作用 : 给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 )</p>\n<h5 id=\"1-类型别名\"><a href=\"#1-类型别名\" class=\"headerlink\" title=\"1. 类型别名\"></a>1. 类型别名</h5><p><strong>语法 :</strong> <code>type 别名 = 类型</code></p>\n<p><strong>实例 :</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">St</span> = <span class=\"built_in\">string</span> <span class=\"comment\">// 定义</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str1</span>:<span class=\"title class_\">St</span> = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str2</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-自定义类型\"><a href=\"#2-自定义类型\" class=\"headerlink\" title=\"2.自定义类型\"></a>2.自定义类型</h5><p><strong>语法 :</strong> <code>type 别名 = 类型 | 类型1 | 类型2</code></p>\n<p><strong>实例 :</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> <span class=\"comment\">// 定义类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">NewType</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"title class_\">NewType</span> = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-泛型定义\"><a href=\"#3-泛型定义\" class=\"headerlink\" title=\"3.泛型定义\"></a>3.泛型定义</h5><p><strong>语法</strong>： <code>type 别名&lt;T&gt; = 类型&lt;T&gt; | 类型1&lt;T&gt; | 类型2&lt;T&gt;</code></p>\n<p><strong>实例</strong> :</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>: T</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> a : <span class=\"title class_\">NewType</span>&lt;<span class=\"built_in\">number</span>&gt; = &#123; <span class=\"attr\">name</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> b : <span class=\"title class_\">NewType</span>&lt;<span class=\"built_in\">string</span>&gt; = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;0&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"4-联合类型-相当于继承类型\"><a href=\"#4-联合类型-相当于继承类型\" class=\"headerlink\" title=\"4.联合类型(相当于继承类型)\"></a>4.联合类型(相当于继承类型)</h5><p><strong>语法</strong>：<code>type 别名 = 类型 &amp; 类型1 &amp; 类型2</code></p>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Job</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">jobs</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo</span> = <span class=\"title class_\">User</span> &amp; <span class=\"title class_\">Job</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":181,"excerpt":"","more":"<h4 id=\"type-的使用\"><a href=\"#type-的使用\" class=\"headerlink\" title=\"type 的使用\"></a>type 的使用</h4><p>作用 : 给已有类型取别名 和 定义一个新的类型 ( 搭配联合类型使用 )</p>\n<h5 id=\"1-类型别名\"><a href=\"#1-类型别名\" class=\"headerlink\" title=\"1. 类型别名\"></a>1. 类型别名</h5><p><strong>语法 :</strong> <code>type 别名 = 类型</code></p>\n<p><strong>实例 :</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">St</span> = <span class=\"built_in\">string</span> <span class=\"comment\">// 定义</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str1</span>:<span class=\"title class_\">St</span> = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str2</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-自定义类型\"><a href=\"#2-自定义类型\" class=\"headerlink\" title=\"2.自定义类型\"></a>2.自定义类型</h5><p><strong>语法 :</strong> <code>type 别名 = 类型 | 类型1 | 类型2</code></p>\n<p><strong>实例 :</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> <span class=\"comment\">// 定义类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">NewType</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"title class_\">NewType</span> = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-泛型定义\"><a href=\"#3-泛型定义\" class=\"headerlink\" title=\"3.泛型定义\"></a>3.泛型定义</h5><p><strong>语法</strong>： <code>type 别名&lt;T&gt; = 类型&lt;T&gt; | 类型1&lt;T&gt; | 类型2&lt;T&gt;</code></p>\n<p><strong>实例</strong> :</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>: T</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> a : <span class=\"title class_\">NewType</span>&lt;<span class=\"built_in\">number</span>&gt; = &#123; <span class=\"attr\">name</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">let</span> b : <span class=\"title class_\">NewType</span>&lt;<span class=\"built_in\">string</span>&gt; = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;0&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"4-联合类型-相当于继承类型\"><a href=\"#4-联合类型-相当于继承类型\" class=\"headerlink\" title=\"4.联合类型(相当于继承类型)\"></a>4.联合类型(相当于继承类型)</h5><p><strong>语法</strong>：<code>type 别名 = 类型 &amp; 类型1 &amp; 类型2</code></p>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Job</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">jobs</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo</span> = <span class=\"title class_\">User</span> &amp; <span class=\"title class_\">Job</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"什么是 CSRF 攻击？","date":"2023-10-21T13:11:16.000Z","description":"在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。","comments":1,"_content":"\n##### 概念\nCSRF（Cross-Site Request Forgeries） 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。\n\nCSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。\n##### 攻击类型\n常见的 CSRF 攻击有三种：\n- GET 类型的 CSRF 攻击，比如在网站中的一个img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交；\n- POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。\n- 链接类型的 CSRF 攻击，比如在 a 标签的href 属性里构建一个请求，然后诱导用户去点击。\n\n##### 如何防御 CSRF 攻击？\nCSRF 攻击可以使用以下方法来防护：\n\n进行同源检测，服务器根据 http 请求头中origin 或者referer信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer字段会告诉服务器该网页是从哪个页面链接过来的）\n\n使用 CSRF Token 进行验证，服务器向用户返回一个随机数Token，当网站再次发起请求时，在请求参数中加入服务器端返回的token，然后服务器对这个 token 进行验证。这种方法解决了使用cookie单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个token，操作比较繁琐。\n\n还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的session中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。\n\n对 Cookie 进行双重验证，服务器在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到URL参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用cookie，但是不能访问获取 cookie 的特点。并且这种方法比CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。\n\n在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。","source":"_posts/web/CrossSiteRequestForgeries.md","raw":"---\ntitle: 什么是 CSRF 攻击？\npermalink: /web/cross/site/request/forgeries.html\ndate: 2023-10-21 21:11:16\ndescription: 在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。\n\ntag: [前端, 浏览器, 网络安全, CSRF]\ncomments: true\ncategories: \n - 浏览器\n - 网络安全\n---\n\n##### 概念\nCSRF（Cross-Site Request Forgeries） 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。\n\nCSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。\n##### 攻击类型\n常见的 CSRF 攻击有三种：\n- GET 类型的 CSRF 攻击，比如在网站中的一个img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交；\n- POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。\n- 链接类型的 CSRF 攻击，比如在 a 标签的href 属性里构建一个请求，然后诱导用户去点击。\n\n##### 如何防御 CSRF 攻击？\nCSRF 攻击可以使用以下方法来防护：\n\n进行同源检测，服务器根据 http 请求头中origin 或者referer信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer字段会告诉服务器该网页是从哪个页面链接过来的）\n\n使用 CSRF Token 进行验证，服务器向用户返回一个随机数Token，当网站再次发起请求时，在请求参数中加入服务器端返回的token，然后服务器对这个 token 进行验证。这种方法解决了使用cookie单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个token，操作比较繁琐。\n\n还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的session中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。\n\n对 Cookie 进行双重验证，服务器在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到URL参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用cookie，但是不能访问获取 cookie 的特点。并且这种方法比CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。\n\n在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。","slug":"web/CrossSiteRequestForgeries","published":1,"updated":"2023-10-21T14:19:24.690Z","__permalink":"/web/cross/site/request/forgeries.html","layout":"post","photos":[],"link":"","_id":"clofw8ydl001qm0uobrbhe96h","content":"<div id=\"vip-container\"><h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5><p>CSRF（Cross-Site Request Forgeries） 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。</p>\n<p>CSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。</p>\n<h5 id=\"攻击类型\"><a href=\"#攻击类型\" class=\"headerlink\" title=\"攻击类型\"></a>攻击类型</h5><p>常见的 CSRF 攻击有三种：</p>\n<ul>\n<li>GET 类型的 CSRF 攻击，比如在网站中的一个img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交；</li>\n<li>POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。</li>\n<li>链接类型的 CSRF 攻击，比如在 a 标签的href 属性里构建一个请求，然后诱导用户去点击。</li>\n</ul>\n<h5 id=\"如何防御-CSRF-攻击？\"><a href=\"#如何防御-CSRF-攻击？\" class=\"headerlink\" title=\"如何防御 CSRF 攻击？\"></a>如何防御 CSRF 攻击？</h5><p>CSRF 攻击可以使用以下方法来防护：</p>\n<p>进行同源检测，服务器根据 http 请求头中origin 或者referer信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer字段会告诉服务器该网页是从哪个页面链接过来的）</p>\n<p>使用 CSRF Token 进行验证，服务器向用户返回一个随机数Token，当网站再次发起请求时，在请求参数中加入服务器端返回的token，然后服务器对这个 token 进行验证。这种方法解决了使用cookie单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个token，操作比较繁琐。</p>\n<p>还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的session中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。</p>\n<p>对 Cookie 进行双重验证，服务器在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到URL参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用cookie，但是不能访问获取 cookie 的特点。并且这种方法比CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。</p>\n<p>在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/browser/session/cookies.html","/web/cross/site/script.html","/web/security/question.html"],"length":992,"excerpt":"","more":"<h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5><p>CSRF（Cross-Site Request Forgeries） 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。</p>\n<p>CSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。</p>\n<h5 id=\"攻击类型\"><a href=\"#攻击类型\" class=\"headerlink\" title=\"攻击类型\"></a>攻击类型</h5><p>常见的 CSRF 攻击有三种：</p>\n<ul>\n<li>GET 类型的 CSRF 攻击，比如在网站中的一个img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交；</li>\n<li>POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。</li>\n<li>链接类型的 CSRF 攻击，比如在 a 标签的href 属性里构建一个请求，然后诱导用户去点击。</li>\n</ul>\n<h5 id=\"如何防御-CSRF-攻击？\"><a href=\"#如何防御-CSRF-攻击？\" class=\"headerlink\" title=\"如何防御 CSRF 攻击？\"></a>如何防御 CSRF 攻击？</h5><p>CSRF 攻击可以使用以下方法来防护：</p>\n<p>进行同源检测，服务器根据 http 请求头中origin 或者referer信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer字段会告诉服务器该网页是从哪个页面链接过来的）</p>\n<p>使用 CSRF Token 进行验证，服务器向用户返回一个随机数Token，当网站再次发起请求时，在请求参数中加入服务器端返回的token，然后服务器对这个 token 进行验证。这种方法解决了使用cookie单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个token，操作比较繁琐。</p>\n<p>还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的session中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。</p>\n<p>对 Cookie 进行双重验证，服务器在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到URL参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用cookie，但是不能访问获取 cookie 的特点。并且这种方法比CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。</p>\n<p>在设置 cookie 属性的时候设置 Samesite ，限制cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是GET 请求，且会发生页面跳转的请求所使用。</p>\n"},{"title":"什么是 XSS 攻击？","date":"2023-10-21T13:10:16.000Z","description":"XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。","comments":1,"_content":"\n##### 概念\n\nXSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。\n\nXSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。\n\n攻击者可以通过这种攻击方式可以进行以下操作：\n1. 获取页面的数据，如 DOM、cookie、localStorage；\n2. DOS 攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；\n3. 破坏页面结构；\n4. 流量劫持（将链接指向某网站）\n\n##### 攻击类型\n\nXSS 可以分为存储型、反射型和 DOM 型：\n- 存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。\n- 反射型指的是攻击者诱导用户访问一个带有恶意代码的URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成XSS 攻击。\n- DOM 型指的通过修改页面的 DOM 节点形成的XSS。\n\n###### 存储型 XSS 的攻击步骤：\n\n 1. 攻击者将恶意代码提交到⽬标⽹站的数据库中。\n 2. ⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。\n 3. ⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。\n 4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。\n\n###### 反射型 XSS 的攻击步骤：\n\n1. 攻击者构造出特殊的 URL，其中包含恶意代码。\n2. ⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码从URL中取出，拼接在 HTML 中返回给浏览器。\n3. ⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。\n4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n\n   反射型 XSS 跟存储型 XSS 的区别是：存储型XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在URL ⾥。\n\n   反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。\n\n###### DOM 型 XSS 的攻击步骤：\n\n1. 攻击者构造出特殊的 URL，其中包含恶意代码。\n2. ⽤户打开带有恶意代码的 URL。\n3. ⽤户浏览器接收到响应后解析执⾏，前端JavaScript 取出URL中的恶意代码并执⾏。\n4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n\n   **DOM 型 XSS 跟前两种 XSS 的区别**：DOM 型XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。\n\n##### 如何防御 XSS 攻击？\n\n可以看到 XSS 危害如此之大，那么在开发网站时就要做好防御措施，具体措施如下：\n\n可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。\n\n使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。\n\n1. CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。\n\n2. 通常有两种方式来开启 CSP，一种是设置HTTP 首部中的Content-Security-Policy，一种是设置meta 标签的方式<metahttp-equiv=\"Content-Security-Policy\">\n对一些敏感信息进行保护，比如 cookie 使用http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。","source":"_posts/web/CrossSiteScript.md","raw":"---\ntitle: 什么是 XSS 攻击？\npermalink: /web/cross/site/script.html\ndate: 2023-10-21 21:10:16\ndescription: XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。\ntag: [前端, 浏览器, 网络安全, XSS]\ncomments: true\ncategories: \n - 浏览器\n - 网络安全\n---\n\n##### 概念\n\nXSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。\n\nXSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。\n\n攻击者可以通过这种攻击方式可以进行以下操作：\n1. 获取页面的数据，如 DOM、cookie、localStorage；\n2. DOS 攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；\n3. 破坏页面结构；\n4. 流量劫持（将链接指向某网站）\n\n##### 攻击类型\n\nXSS 可以分为存储型、反射型和 DOM 型：\n- 存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。\n- 反射型指的是攻击者诱导用户访问一个带有恶意代码的URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成XSS 攻击。\n- DOM 型指的通过修改页面的 DOM 节点形成的XSS。\n\n###### 存储型 XSS 的攻击步骤：\n\n 1. 攻击者将恶意代码提交到⽬标⽹站的数据库中。\n 2. ⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。\n 3. ⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。\n 4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。\n\n###### 反射型 XSS 的攻击步骤：\n\n1. 攻击者构造出特殊的 URL，其中包含恶意代码。\n2. ⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码从URL中取出，拼接在 HTML 中返回给浏览器。\n3. ⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。\n4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n\n   反射型 XSS 跟存储型 XSS 的区别是：存储型XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在URL ⾥。\n\n   反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。\n\n###### DOM 型 XSS 的攻击步骤：\n\n1. 攻击者构造出特殊的 URL，其中包含恶意代码。\n2. ⽤户打开带有恶意代码的 URL。\n3. ⽤户浏览器接收到响应后解析执⾏，前端JavaScript 取出URL中的恶意代码并执⾏。\n4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n\n   **DOM 型 XSS 跟前两种 XSS 的区别**：DOM 型XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。\n\n##### 如何防御 XSS 攻击？\n\n可以看到 XSS 危害如此之大，那么在开发网站时就要做好防御措施，具体措施如下：\n\n可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。\n\n使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。\n\n1. CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。\n\n2. 通常有两种方式来开启 CSP，一种是设置HTTP 首部中的Content-Security-Policy，一种是设置meta 标签的方式<metahttp-equiv=\"Content-Security-Policy\">\n对一些敏感信息进行保护，比如 cookie 使用http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。","slug":"web/CrossSiteScript","published":1,"updated":"2023-10-21T14:15:32.698Z","__permalink":"/web/cross/site/script.html","layout":"post","photos":[],"link":"","_id":"clofw8ydo001um0uob17c7bgp","content":"<div id=\"vip-container\"><h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5><p>XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。</p>\n<p>XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。</p>\n<p>攻击者可以通过这种攻击方式可以进行以下操作：</p>\n<ol>\n<li>获取页面的数据，如 DOM、cookie、localStorage；</li>\n<li>DOS 攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；</li>\n<li>破坏页面结构；</li>\n<li>流量劫持（将链接指向某网站）</li>\n</ol>\n<h5 id=\"攻击类型\"><a href=\"#攻击类型\" class=\"headerlink\" title=\"攻击类型\"></a>攻击类型</h5><p>XSS 可以分为存储型、反射型和 DOM 型：</p>\n<ul>\n<li>存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。</li>\n<li>反射型指的是攻击者诱导用户访问一个带有恶意代码的URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成XSS 攻击。</li>\n<li>DOM 型指的通过修改页面的 DOM 节点形成的XSS。</li>\n</ul>\n<h6 id=\"存储型-XSS-的攻击步骤：\"><a href=\"#存储型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"存储型 XSS 的攻击步骤：\"></a>存储型 XSS 的攻击步骤：</h6><ol>\n<li>攻击者将恶意代码提交到⽬标⽹站的数据库中。</li>\n<li>⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。</li>\n<li>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</li>\n<li>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。<br>这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。</li>\n</ol>\n<h6 id=\"反射型-XSS-的攻击步骤：\"><a href=\"#反射型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"反射型 XSS 的攻击步骤：\"></a>反射型 XSS 的攻击步骤：</h6><ol>\n<li><p>攻击者构造出特殊的 URL，其中包含恶意代码。</p>\n</li>\n<li><p>⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码从URL中取出，拼接在 HTML 中返回给浏览器。</p>\n</li>\n<li><p>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</p>\n</li>\n<li><p>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</p>\n<p>反射型 XSS 跟存储型 XSS 的区别是：存储型XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在URL ⾥。</p>\n<p>反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。</p>\n</li>\n</ol>\n<h6 id=\"DOM-型-XSS-的攻击步骤：\"><a href=\"#DOM-型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"DOM 型 XSS 的攻击步骤：\"></a>DOM 型 XSS 的攻击步骤：</h6><ol>\n<li><p>攻击者构造出特殊的 URL，其中包含恶意代码。</p>\n</li>\n<li><p>⽤户打开带有恶意代码的 URL。</p>\n</li>\n<li><p>⽤户浏览器接收到响应后解析执⾏，前端JavaScript 取出URL中的恶意代码并执⾏。</p>\n</li>\n<li><p>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</p>\n<p><strong>DOM 型 XSS 跟前两种 XSS 的区别</strong>：DOM 型XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。</p>\n</li>\n</ol>\n<h5 id=\"如何防御-XSS-攻击？\"><a href=\"#如何防御-XSS-攻击？\" class=\"headerlink\" title=\"如何防御 XSS 攻击？\"></a>如何防御 XSS 攻击？</h5><p>可以看到 XSS 危害如此之大，那么在开发网站时就要做好防御措施，具体措施如下：</p>\n<p>可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。</p>\n<p>使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。</p>\n<ol>\n<li><p>CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。</p>\n</li>\n<li><p>通常有两种方式来开启 CSP，一种是设置HTTP 首部中的Content-Security-Policy，一种是设置meta 标签的方式&lt;metahttp-equiv&#x3D;”Content-Security-Policy”&gt;<br>对一些敏感信息进行保护，比如 cookie 使用http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。</p>\n</li>\n</ol>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/browser/session/cookies.html","/web/cross/site/request/forgeries.html"],"length":1276,"excerpt":"","more":"<h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5><p>XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。</p>\n<p>XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。</p>\n<p>攻击者可以通过这种攻击方式可以进行以下操作：</p>\n<ol>\n<li>获取页面的数据，如 DOM、cookie、localStorage；</li>\n<li>DOS 攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；</li>\n<li>破坏页面结构；</li>\n<li>流量劫持（将链接指向某网站）</li>\n</ol>\n<h5 id=\"攻击类型\"><a href=\"#攻击类型\" class=\"headerlink\" title=\"攻击类型\"></a>攻击类型</h5><p>XSS 可以分为存储型、反射型和 DOM 型：</p>\n<ul>\n<li>存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。</li>\n<li>反射型指的是攻击者诱导用户访问一个带有恶意代码的URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成XSS 攻击。</li>\n<li>DOM 型指的通过修改页面的 DOM 节点形成的XSS。</li>\n</ul>\n<h6 id=\"存储型-XSS-的攻击步骤：\"><a href=\"#存储型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"存储型 XSS 的攻击步骤：\"></a>存储型 XSS 的攻击步骤：</h6><ol>\n<li>攻击者将恶意代码提交到⽬标⽹站的数据库中。</li>\n<li>⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。</li>\n<li>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</li>\n<li>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。<br>这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。</li>\n</ol>\n<h6 id=\"反射型-XSS-的攻击步骤：\"><a href=\"#反射型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"反射型 XSS 的攻击步骤：\"></a>反射型 XSS 的攻击步骤：</h6><ol>\n<li><p>攻击者构造出特殊的 URL，其中包含恶意代码。</p>\n</li>\n<li><p>⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码从URL中取出，拼接在 HTML 中返回给浏览器。</p>\n</li>\n<li><p>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</p>\n</li>\n<li><p>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</p>\n<p>反射型 XSS 跟存储型 XSS 的区别是：存储型XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在URL ⾥。</p>\n<p>反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。</p>\n</li>\n</ol>\n<h6 id=\"DOM-型-XSS-的攻击步骤：\"><a href=\"#DOM-型-XSS-的攻击步骤：\" class=\"headerlink\" title=\"DOM 型 XSS 的攻击步骤：\"></a>DOM 型 XSS 的攻击步骤：</h6><ol>\n<li><p>攻击者构造出特殊的 URL，其中包含恶意代码。</p>\n</li>\n<li><p>⽤户打开带有恶意代码的 URL。</p>\n</li>\n<li><p>⽤户浏览器接收到响应后解析执⾏，前端JavaScript 取出URL中的恶意代码并执⾏。</p>\n</li>\n<li><p>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</p>\n<p><strong>DOM 型 XSS 跟前两种 XSS 的区别</strong>：DOM 型XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。</p>\n</li>\n</ol>\n<h5 id=\"如何防御-XSS-攻击？\"><a href=\"#如何防御-XSS-攻击？\" class=\"headerlink\" title=\"如何防御 XSS 攻击？\"></a>如何防御 XSS 攻击？</h5><p>可以看到 XSS 危害如此之大，那么在开发网站时就要做好防御措施，具体措施如下：</p>\n<p>可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。</p>\n<p>使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。</p>\n<ol>\n<li><p>CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。</p>\n</li>\n<li><p>通常有两种方式来开启 CSP，一种是设置HTTP 首部中的Content-Security-Policy，一种是设置meta 标签的方式&lt;metahttp-equiv&#x3D;”Content-Security-Policy”&gt;<br>对一些敏感信息进行保护，比如 cookie 使用http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。</p>\n</li>\n</ol>\n"},{"title":"有哪些可能引起前端安全的问题?","date":"2023-10-21T13:09:16.000Z","description":"⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript / CSS / Flash 等。","comments":1,"_content":"\n##### [跨站脚本 (Cross-Site Scripting, XSS)](https://blog.csdn.net/qq_35490191/article/details/132212266)\n\n⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript / CSS / Flash 等；\n\n##### iframe 的滥⽤\niframe 中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在 iframe 中运⾏JavaScirpt 脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；\n\n##### [跨站点请求伪造（Cross-Site Request Forgeries，CSRF）](https://blog.csdn.net/qq_35490191/article/details/132220538)\n\n指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击恶意\n\n##### 第三⽅库\n\n⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。","source":"_posts/web/WebSecurityQuestion.md","raw":"---\ntitle: 有哪些可能引起前端安全的问题?\npermalink: /web/security/question.html\ndate: 2023-10-21 21:09:16\ndescription: ⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript / CSS / Flash 等。\ntag: [前端, 浏览器, 网络安全]\ncomments: true\ncategories: \n - 浏览器\n - 网络安全\n---\n\n##### [跨站脚本 (Cross-Site Scripting, XSS)](https://blog.csdn.net/qq_35490191/article/details/132212266)\n\n⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript / CSS / Flash 等；\n\n##### iframe 的滥⽤\niframe 中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在 iframe 中运⾏JavaScirpt 脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；\n\n##### [跨站点请求伪造（Cross-Site Request Forgeries，CSRF）](https://blog.csdn.net/qq_35490191/article/details/132220538)\n\n指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击恶意\n\n##### 第三⽅库\n\n⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。","slug":"web/WebSecurityQuestion","published":1,"updated":"2023-10-21T14:19:22.875Z","__permalink":"/web/security/question.html","layout":"post","photos":[],"link":"","_id":"clofw8ydq001wm0uo4c6i6r64","content":"<div id=\"vip-container\"><h5 id=\"跨站脚本-Cross-Site-Scripting-XSS\"><a href=\"#跨站脚本-Cross-Site-Scripting-XSS\" class=\"headerlink\" title=\"跨站脚本 (Cross-Site Scripting, XSS)\"></a><a href=\"https://blog.csdn.net/qq_35490191/article/details/132212266\">跨站脚本 (Cross-Site Scripting, XSS)</a></h5><p>⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript &#x2F; CSS &#x2F; Flash 等；</p>\n<h5 id=\"iframe-的滥⽤\"><a href=\"#iframe-的滥⽤\" class=\"headerlink\" title=\"iframe 的滥⽤\"></a>iframe 的滥⽤</h5><p>iframe 中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在 iframe 中运⾏JavaScirpt 脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；</p>\n<h5 id=\"跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）\"><a href=\"#跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）\" class=\"headerlink\" title=\"跨站点请求伪造（Cross-Site Request Forgeries，CSRF）\"></a><a href=\"https://blog.csdn.net/qq_35490191/article/details/132220538\">跨站点请求伪造（Cross-Site Request Forgeries，CSRF）</a></h5><p>指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击恶意</p>\n<h5 id=\"第三⽅库\"><a href=\"#第三⽅库\" class=\"headerlink\" title=\"第三⽅库\"></a>第三⽅库</h5><p>⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/browser/render/process.html","/web/cross/site/request/forgeries.html"],"length":271,"excerpt":"","more":"<h5 id=\"跨站脚本-Cross-Site-Scripting-XSS\"><a href=\"#跨站脚本-Cross-Site-Scripting-XSS\" class=\"headerlink\" title=\"跨站脚本 (Cross-Site Scripting, XSS)\"></a><a href=\"https://blog.csdn.net/qq_35490191/article/details/132212266\">跨站脚本 (Cross-Site Scripting, XSS)</a></h5><p>⼀种代码注⼊⽅式,为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript &#x2F; CSS &#x2F; Flash 等；</p>\n<h5 id=\"iframe-的滥⽤\"><a href=\"#iframe-的滥⽤\" class=\"headerlink\" title=\"iframe 的滥⽤\"></a>iframe 的滥⽤</h5><p>iframe 中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在 iframe 中运⾏JavaScirpt 脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；</p>\n<h5 id=\"跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）\"><a href=\"#跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）\" class=\"headerlink\" title=\"跨站点请求伪造（Cross-Site Request Forgeries，CSRF）\"></a><a href=\"https://blog.csdn.net/qq_35490191/article/details/132220538\">跨站点请求伪造（Cross-Site Request Forgeries，CSRF）</a></h5><p>指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击恶意</p>\n<h5 id=\"第三⽅库\"><a href=\"#第三⽅库\" class=\"headerlink\" title=\"第三⽅库\"></a>第三⽅库</h5><p>⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。</p>\n"},{"title":"如何对项目中的图片进行优化?","date":"2023-10-21T12:52:25.000Z","description":"为什么要优化项目中的图片，优化图片可以解决因为图片造成的加载时间过长，页面体验不佳。","comments":1,"_content":"\n##### 优化步骤方案\n 1. 不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片\n完全可以用 CSS 去代替。\n\n 2. 对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪\n费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然\n后去请求相应裁剪好的图片。\n\n 3. 小图使用 base64 格式\n\n 4. 将多个图标文件整合到一张图片中（雪碧图）\n\n 5. 选择正确的图片格式：\n\t- 对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好\n    \n\t- 小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替\n\n\t- 照片使用 JPEG\n\n##### 常见的图片格式及使用场景\n\n 1. BMP：是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以 BMP 格式的图片通常是较大的文件。\n\n 2. GIF：是无损的、采用索引色的点阵图。采用 LZW 压缩算法进行\n编码。文件小，是 GIF 格式的优点，同时，GIF 格式还具有支持动画\n以及透明的优点。但是 GIF 格式仅支持 8bit 的索引色，所以 GIF 格\n式适用于对色彩要求不高同时需要文件体积较小的场景。\n\n 3. JPEG：是有损的、采用直接色的点阵图。JPEG 的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG 非常适合用来存储照片，与 GIF 相比，JPEG 不适合用来存储企业 Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较 GIF更大。\n\n 4. PNG-8：是无损的、使用索引色的点阵图。PNG 是一种比较新的图片格式，PNG-8 是非常好的 GIF 格式替代者，在可能的情况下，应该尽可能的使用 PNG-8 而不是 GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8 还支持透明度的调节，而 GIF并不支持。除非需要动画的支持，否则没有理由使用 GIF而不是 PNG-8。\n\n 5. PNG-24：是无损的、使用直接色的点阵图。PNG-24 的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24 格式的文件大小要比 BMP 小得多。当然，PNG24 的图片还是要比 JPEG、GIF、PNG-8大得多。\n\n 6. SVG 是无损的矢量图。SVG 是矢量图意味着 SVG 图片由直线和曲线以及绘制它们的方法组成。当放大 SVG 图片时，看到的还是线和曲线，而不会出现像素点。这意味着 SVG 图片在放大时，不会失真，所以它非常适合用来绘制 Logo、Icon 等。\n\n 7. WebP：是谷歌开发的一种新图片格式，WebP 是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为 Web 而生的，什么叫为 Web 而生呢？就是说相同质量的图片，WebP 具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有 Chrome 浏览器和 Opera浏览器支持 WebP 格式，兼容性不太好。\n\n在无损压缩的情况下，相同质量的 WebP 图片，文件大小要比 PNG 小26%；\n在有损压缩的情况下，具有相同图片精度的 WebP 图片，文件大小要比 JPEG 小 25%~34%；\n\nWebP 图片格式支持图片透明度，一个无损压缩的 WebP 图片，如果要支持透明度只需要 22%的格外文件大小。\n","source":"_posts/web/imagePerform.md","raw":"---\ntitle: 如何对项目中的图片进行优化?\npermalink: /web/image/perform.html\ndate: 2023-10-21 20:52:25\ndescription: 为什么要优化项目中的图片，优化图片可以解决因为图片造成的加载时间过长，页面体验不佳。\ntag: [前端, 浏览器, 性能优化, Webpack, 图片]\ncomments: true\ncategories: \n - 浏览器\n - 性能优化\n---\n\n##### 优化步骤方案\n 1. 不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片\n完全可以用 CSS 去代替。\n\n 2. 对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪\n费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然\n后去请求相应裁剪好的图片。\n\n 3. 小图使用 base64 格式\n\n 4. 将多个图标文件整合到一张图片中（雪碧图）\n\n 5. 选择正确的图片格式：\n\t- 对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好\n    \n\t- 小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替\n\n\t- 照片使用 JPEG\n\n##### 常见的图片格式及使用场景\n\n 1. BMP：是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以 BMP 格式的图片通常是较大的文件。\n\n 2. GIF：是无损的、采用索引色的点阵图。采用 LZW 压缩算法进行\n编码。文件小，是 GIF 格式的优点，同时，GIF 格式还具有支持动画\n以及透明的优点。但是 GIF 格式仅支持 8bit 的索引色，所以 GIF 格\n式适用于对色彩要求不高同时需要文件体积较小的场景。\n\n 3. JPEG：是有损的、采用直接色的点阵图。JPEG 的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG 非常适合用来存储照片，与 GIF 相比，JPEG 不适合用来存储企业 Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较 GIF更大。\n\n 4. PNG-8：是无损的、使用索引色的点阵图。PNG 是一种比较新的图片格式，PNG-8 是非常好的 GIF 格式替代者，在可能的情况下，应该尽可能的使用 PNG-8 而不是 GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8 还支持透明度的调节，而 GIF并不支持。除非需要动画的支持，否则没有理由使用 GIF而不是 PNG-8。\n\n 5. PNG-24：是无损的、使用直接色的点阵图。PNG-24 的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24 格式的文件大小要比 BMP 小得多。当然，PNG24 的图片还是要比 JPEG、GIF、PNG-8大得多。\n\n 6. SVG 是无损的矢量图。SVG 是矢量图意味着 SVG 图片由直线和曲线以及绘制它们的方法组成。当放大 SVG 图片时，看到的还是线和曲线，而不会出现像素点。这意味着 SVG 图片在放大时，不会失真，所以它非常适合用来绘制 Logo、Icon 等。\n\n 7. WebP：是谷歌开发的一种新图片格式，WebP 是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为 Web 而生的，什么叫为 Web 而生呢？就是说相同质量的图片，WebP 具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有 Chrome 浏览器和 Opera浏览器支持 WebP 格式，兼容性不太好。\n\n在无损压缩的情况下，相同质量的 WebP 图片，文件大小要比 PNG 小26%；\n在有损压缩的情况下，具有相同图片精度的 WebP 图片，文件大小要比 JPEG 小 25%~34%；\n\nWebP 图片格式支持图片透明度，一个无损压缩的 WebP 图片，如果要支持透明度只需要 22%的格外文件大小。\n","slug":"web/imagePerform","published":1,"updated":"2023-10-21T13:57:38.086Z","__permalink":"/web/image/perform.html","layout":"post","photos":[],"link":"","_id":"clofw8ydr001zm0uo7r5cc9xk","content":"<div id=\"vip-container\"><h5 id=\"优化步骤方案\"><a href=\"#优化步骤方案\" class=\"headerlink\" title=\"优化步骤方案\"></a>优化步骤方案</h5><ol>\n<li><p>不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片<br>完全可以用 CSS 去代替。</p>\n</li>\n<li><p>对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪<br>费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然<br>后去请求相应裁剪好的图片。</p>\n</li>\n<li><p>小图使用 base64 格式</p>\n</li>\n<li><p>将多个图标文件整合到一张图片中（雪碧图）</p>\n</li>\n<li><p>选择正确的图片格式：</p>\n<ul>\n<li><p>对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好</p>\n</li>\n<li><p>小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替</p>\n</li>\n<li><p>照片使用 JPEG</p>\n</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"常见的图片格式及使用场景\"><a href=\"#常见的图片格式及使用场景\" class=\"headerlink\" title=\"常见的图片格式及使用场景\"></a>常见的图片格式及使用场景</h5><ol>\n<li><p>BMP：是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以 BMP 格式的图片通常是较大的文件。</p>\n</li>\n<li><p>GIF：是无损的、采用索引色的点阵图。采用 LZW 压缩算法进行<br>编码。文件小，是 GIF 格式的优点，同时，GIF 格式还具有支持动画<br>以及透明的优点。但是 GIF 格式仅支持 8bit 的索引色，所以 GIF 格<br>式适用于对色彩要求不高同时需要文件体积较小的场景。</p>\n</li>\n<li><p>JPEG：是有损的、采用直接色的点阵图。JPEG 的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG 非常适合用来存储照片，与 GIF 相比，JPEG 不适合用来存储企业 Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较 GIF更大。</p>\n</li>\n<li><p>PNG-8：是无损的、使用索引色的点阵图。PNG 是一种比较新的图片格式，PNG-8 是非常好的 GIF 格式替代者，在可能的情况下，应该尽可能的使用 PNG-8 而不是 GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8 还支持透明度的调节，而 GIF并不支持。除非需要动画的支持，否则没有理由使用 GIF而不是 PNG-8。</p>\n</li>\n<li><p>PNG-24：是无损的、使用直接色的点阵图。PNG-24 的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24 格式的文件大小要比 BMP 小得多。当然，PNG24 的图片还是要比 JPEG、GIF、PNG-8大得多。</p>\n</li>\n<li><p>SVG 是无损的矢量图。SVG 是矢量图意味着 SVG 图片由直线和曲线以及绘制它们的方法组成。当放大 SVG 图片时，看到的还是线和曲线，而不会出现像素点。这意味着 SVG 图片在放大时，不会失真，所以它非常适合用来绘制 Logo、Icon 等。</p>\n</li>\n<li><p>WebP：是谷歌开发的一种新图片格式，WebP 是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为 Web 而生的，什么叫为 Web 而生呢？就是说相同质量的图片，WebP 具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有 Chrome 浏览器和 Opera浏览器支持 WebP 格式，兼容性不太好。</p>\n</li>\n</ol>\n<p>在无损压缩的情况下，相同质量的 WebP 图片，文件大小要比 PNG 小26%；<br>在有损压缩的情况下，具有相同图片精度的 WebP 图片，文件大小要比 JPEG 小 25%~34%；</p>\n<p>WebP 图片格式支持图片透明度，一个无损压缩的 WebP 图片，如果要支持透明度只需要 22%的格外文件大小。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":1075,"excerpt":"","more":"<h5 id=\"优化步骤方案\"><a href=\"#优化步骤方案\" class=\"headerlink\" title=\"优化步骤方案\"></a>优化步骤方案</h5><ol>\n<li><p>不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片<br>完全可以用 CSS 去代替。</p>\n</li>\n<li><p>对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪<br>费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然<br>后去请求相应裁剪好的图片。</p>\n</li>\n<li><p>小图使用 base64 格式</p>\n</li>\n<li><p>将多个图标文件整合到一张图片中（雪碧图）</p>\n</li>\n<li><p>选择正确的图片格式：</p>\n<ul>\n<li><p>对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好</p>\n</li>\n<li><p>小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替</p>\n</li>\n<li><p>照片使用 JPEG</p>\n</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"常见的图片格式及使用场景\"><a href=\"#常见的图片格式及使用场景\" class=\"headerlink\" title=\"常见的图片格式及使用场景\"></a>常见的图片格式及使用场景</h5><ol>\n<li><p>BMP：是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以 BMP 格式的图片通常是较大的文件。</p>\n</li>\n<li><p>GIF：是无损的、采用索引色的点阵图。采用 LZW 压缩算法进行<br>编码。文件小，是 GIF 格式的优点，同时，GIF 格式还具有支持动画<br>以及透明的优点。但是 GIF 格式仅支持 8bit 的索引色，所以 GIF 格<br>式适用于对色彩要求不高同时需要文件体积较小的场景。</p>\n</li>\n<li><p>JPEG：是有损的、采用直接色的点阵图。JPEG 的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG 非常适合用来存储照片，与 GIF 相比，JPEG 不适合用来存储企业 Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较 GIF更大。</p>\n</li>\n<li><p>PNG-8：是无损的、使用索引色的点阵图。PNG 是一种比较新的图片格式，PNG-8 是非常好的 GIF 格式替代者，在可能的情况下，应该尽可能的使用 PNG-8 而不是 GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8 还支持透明度的调节，而 GIF并不支持。除非需要动画的支持，否则没有理由使用 GIF而不是 PNG-8。</p>\n</li>\n<li><p>PNG-24：是无损的、使用直接色的点阵图。PNG-24 的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24 格式的文件大小要比 BMP 小得多。当然，PNG24 的图片还是要比 JPEG、GIF、PNG-8大得多。</p>\n</li>\n<li><p>SVG 是无损的矢量图。SVG 是矢量图意味着 SVG 图片由直线和曲线以及绘制它们的方法组成。当放大 SVG 图片时，看到的还是线和曲线，而不会出现像素点。这意味着 SVG 图片在放大时，不会失真，所以它非常适合用来绘制 Logo、Icon 等。</p>\n</li>\n<li><p>WebP：是谷歌开发的一种新图片格式，WebP 是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为 Web 而生的，什么叫为 Web 而生呢？就是说相同质量的图片，WebP 具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有 Chrome 浏览器和 Opera浏览器支持 WebP 格式，兼容性不太好。</p>\n</li>\n</ol>\n<p>在无损压缩的情况下，相同质量的 WebP 图片，文件大小要比 PNG 小26%；<br>在有损压缩的情况下，具有相同图片精度的 WebP 图片，文件大小要比 JPEG 小 25%~34%；</p>\n<p>WebP 图片格式支持图片透明度，一个无损压缩的 WebP 图片，如果要支持透明度只需要 22%的格外文件大小。</p>\n"},{"title":"前端懒加载是什么?","date":"2023-10-21T13:05:16.000Z","description":"懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。","comments":1,"_content":"\n\n##### 懒加载的概念\n\n懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。\n如果使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。\n\n##### 懒加载的特点\n\n- 减少无用资源的加载：使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。\n- 提升用户体验: 如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。\n- 防止加载过多图片而影响其他资源文件的加载：会影响网站应用的正常使用。\n\n#####  懒加载的实现原理\n\n图片的加载是由 src 引起的，当对 src 赋值时，浏览器就会请求图片资源。根据这个原理，我们使用 HTML5 的data-xxx 属性来储存图片的路径，在需要加载图片的时候，将 data-xxx 中图片的路径赋值给src，这样就实现了图片的按需加载，即懒加载。\n\n**注意**：data-xxx 中的 xxx 可以自定义，这里我们使用data-src来定义。\n\n懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。\n\n使用原生 JavaScript 实现懒加载：\n\n**知识点**：\n\nwindow.innerHeight 是浏览器可视区的高度\n\ndocument.body.scrollTop\n\ndocument.documentElement.scrollTop 是浏览器滚动的过的距离\n\nimgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）\n\n图片加载条件 ： img.offsetTop < window.innerHeight+document.body.scrollTop;\n\n![在这里插入图片描述](https://pic.imgdb.cn/item/6533ccf1c458853aef92497a.png)\n\n代码实现：\n\n```html\n<div class='container'>\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n</div>\n\n<script>\n    var imgs = document.querySelectorAll('img');\n    function lazyLoad() {\n        var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n        var winHeight = window.innerHeight;\n        for(let i = 0; i < imgs.lenght; i++) {\n            if(imgs[i].offsetTop < scrollTop + winHeight) {\n                imgs[i].src = imgs[i].getAttribute('data-src');\n            }\n        }\n    }\n    window.onsrcoll = lazyLoad();\n</script>\n```\n","source":"_posts/web/lazyLoad.md","raw":"---\ntitle: 前端懒加载是什么?\npermalink: /web/lazy/loading.html\ndate: 2023-10-21 21:05:16\ndescription: 懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。\ntag: [前端, 浏览器, 性能优化]\ncomments: true\ncategories: \n - 浏览器\n - 性能优化\n---\n\n\n##### 懒加载的概念\n\n懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。\n如果使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。\n\n##### 懒加载的特点\n\n- 减少无用资源的加载：使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。\n- 提升用户体验: 如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。\n- 防止加载过多图片而影响其他资源文件的加载：会影响网站应用的正常使用。\n\n#####  懒加载的实现原理\n\n图片的加载是由 src 引起的，当对 src 赋值时，浏览器就会请求图片资源。根据这个原理，我们使用 HTML5 的data-xxx 属性来储存图片的路径，在需要加载图片的时候，将 data-xxx 中图片的路径赋值给src，这样就实现了图片的按需加载，即懒加载。\n\n**注意**：data-xxx 中的 xxx 可以自定义，这里我们使用data-src来定义。\n\n懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。\n\n使用原生 JavaScript 实现懒加载：\n\n**知识点**：\n\nwindow.innerHeight 是浏览器可视区的高度\n\ndocument.body.scrollTop\n\ndocument.documentElement.scrollTop 是浏览器滚动的过的距离\n\nimgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）\n\n图片加载条件 ： img.offsetTop < window.innerHeight+document.body.scrollTop;\n\n![在这里插入图片描述](https://pic.imgdb.cn/item/6533ccf1c458853aef92497a.png)\n\n代码实现：\n\n```html\n<div class='container'>\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n    <img src='loading.gif' data-src='pic.png' />\n</div>\n\n<script>\n    var imgs = document.querySelectorAll('img');\n    function lazyLoad() {\n        var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n        var winHeight = window.innerHeight;\n        for(let i = 0; i < imgs.lenght; i++) {\n            if(imgs[i].offsetTop < scrollTop + winHeight) {\n                imgs[i].src = imgs[i].getAttribute('data-src');\n            }\n        }\n    }\n    window.onsrcoll = lazyLoad();\n</script>\n```\n","slug":"web/lazyLoad","published":1,"updated":"2023-10-21T13:57:45.049Z","__permalink":"/web/lazy/loading.html","layout":"post","photos":[],"link":"","_id":"clofw8yds0020m0uohhnw6t9d","content":"<div id=\"vip-container\"><h5 id=\"懒加载的概念\"><a href=\"#懒加载的概念\" class=\"headerlink\" title=\"懒加载的概念\"></a>懒加载的概念</h5><p>懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。<br>如果使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。</p>\n<h5 id=\"懒加载的特点\"><a href=\"#懒加载的特点\" class=\"headerlink\" title=\"懒加载的特点\"></a>懒加载的特点</h5><ul>\n<li>减少无用资源的加载：使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。</li>\n<li>提升用户体验: 如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。</li>\n<li>防止加载过多图片而影响其他资源文件的加载：会影响网站应用的正常使用。</li>\n</ul>\n<h5 id=\"懒加载的实现原理\"><a href=\"#懒加载的实现原理\" class=\"headerlink\" title=\"懒加载的实现原理\"></a>懒加载的实现原理</h5><p>图片的加载是由 src 引起的，当对 src 赋值时，浏览器就会请求图片资源。根据这个原理，我们使用 HTML5 的data-xxx 属性来储存图片的路径，在需要加载图片的时候，将 data-xxx 中图片的路径赋值给src，这样就实现了图片的按需加载，即懒加载。</p>\n<p><strong>注意</strong>：data-xxx 中的 xxx 可以自定义，这里我们使用data-src来定义。</p>\n<p>懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。</p>\n<p>使用原生 JavaScript 实现懒加载：</p>\n<p><strong>知识点</strong>：</p>\n<p>window.innerHeight 是浏览器可视区的高度</p>\n<p>document.body.scrollTop</p>\n<p>document.documentElement.scrollTop 是浏览器滚动的过的距离</p>\n<p>imgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）</p>\n<p>图片加载条件 ： img.offsetTop &lt; window.innerHeight+document.body.scrollTop;</p>\n<p><img src=\"https://pic.imgdb.cn/item/6533ccf1c458853aef92497a.png\" alt=\"在这里插入图片描述\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;container&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> imgs = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;img&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">lazyLoad</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> scrollTop = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">scrollTop</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">scrollTop</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> winHeight = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; imgs.<span class=\"property\">lenght</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(imgs[i].<span class=\"property\">offsetTop</span> &lt; scrollTop + winHeight) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                imgs[i].<span class=\"property\">src</span> = imgs[i].<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;data-src&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">window</span>.<span class=\"property\">onsrcoll</span> = <span class=\"title function_\">lazyLoad</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":692,"excerpt":"","more":"<h5 id=\"懒加载的概念\"><a href=\"#懒加载的概念\" class=\"headerlink\" title=\"懒加载的概念\"></a>懒加载的概念</h5><p>懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。<br>如果使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。</p>\n<h5 id=\"懒加载的特点\"><a href=\"#懒加载的特点\" class=\"headerlink\" title=\"懒加载的特点\"></a>懒加载的特点</h5><ul>\n<li>减少无用资源的加载：使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。</li>\n<li>提升用户体验: 如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。</li>\n<li>防止加载过多图片而影响其他资源文件的加载：会影响网站应用的正常使用。</li>\n</ul>\n<h5 id=\"懒加载的实现原理\"><a href=\"#懒加载的实现原理\" class=\"headerlink\" title=\"懒加载的实现原理\"></a>懒加载的实现原理</h5><p>图片的加载是由 src 引起的，当对 src 赋值时，浏览器就会请求图片资源。根据这个原理，我们使用 HTML5 的data-xxx 属性来储存图片的路径，在需要加载图片的时候，将 data-xxx 中图片的路径赋值给src，这样就实现了图片的按需加载，即懒加载。</p>\n<p><strong>注意</strong>：data-xxx 中的 xxx 可以自定义，这里我们使用data-src来定义。</p>\n<p>懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。</p>\n<p>使用原生 JavaScript 实现懒加载：</p>\n<p><strong>知识点</strong>：</p>\n<p>window.innerHeight 是浏览器可视区的高度</p>\n<p>document.body.scrollTop</p>\n<p>document.documentElement.scrollTop 是浏览器滚动的过的距离</p>\n<p>imgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）</p>\n<p>图片加载条件 ： img.offsetTop &lt; window.innerHeight+document.body.scrollTop;</p>\n<p><img src=\"https://pic.imgdb.cn/item/6533ccf1c458853aef92497a.png\" alt=\"在这里插入图片描述\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;container&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;loading.gif&#x27;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&#x27;pic.png&#x27;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> imgs = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;img&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">lazyLoad</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> scrollTop = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">scrollTop</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">scrollTop</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> winHeight = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; imgs.<span class=\"property\">lenght</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(imgs[i].<span class=\"property\">offsetTop</span> &lt; scrollTop + winHeight) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                imgs[i].<span class=\"property\">src</span> = imgs[i].<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;data-src&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">window</span>.<span class=\"property\">onsrcoll</span> = <span class=\"title function_\">lazyLoad</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"节流和防抖","date":"2023-10-21T13:00:16.000Z","description":"节流和防抖，有助于在输入或者点击某个按钮时进行优化事件响应。","comments":1,"_content":"\n#### 对节流与防抖的理解\n函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件\n又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因\n为用户的多次点击向后端发送多次请求。\n函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发\n事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只\n有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件\n节流来降低事件调用的频率。\n\n防抖函数的应用场景：\n- 按钮提交场景：防止多次提交按钮，只执行最后一次提交\n- 服务端验证场景： 表达验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有索联想词功能类似生存环境可以使用lodash.debounce\n\n节流函数的适用场景：\n\n- 拖拽场景：固定实际内只执行一次，防止超高频次触发位置变动\n- 缩放场景：监控浏览器resize\n- 动画场景：避免短时间内多次触发动画引起性能问题\n\n#### 实现节流函数和防抖函数\n\n##### 函数防抖的实现\n```javascript\nfunction debounce(fn, wait) {\n    let timer = null;\n    return function() {\n        console.log(123);\n        let context = this, args = [...arguments];\n        // 如果此时存在定时器则取消之前的定时器重新计时\n        if(timer) {\n            clearTimeout(timer);\n            timer = null;\n        }\n        timer = setTimeout(() => {\n            fn.apply(context, args);\n        }, wait);\n    }\n}\n```\n\n##### 函数节流的实现\n```javascript\n// 时间戳版\nfunction throttle(fn, delay) {\n    var preTime = Date.now();\n\n    return function() {\n        var context = this,\n        args = [...arguments],\n        nowTime = Date.now();\n\n        // 如果两次时间间隔超过了指定时间，则执行函数。\n        if(nowTime - preTime >= delay) {\n            preTime = Date.now();\n            return fn.apply(context, args);\n        }\n    };\n}\n\n// 定时器版\nfunction throttle(fu, wait) {\n    let timer = null;\n    return function(){\n        let context = this,\n        args = [...arguments];\n        if(!timer) {\n            timer = setTimeout(() => {\n                fu.apply(context, args);\n                clearTimeout(timer);\n            }, wait);\n        }\n    }\n}\n```\n","source":"_posts/web/lodashDebounce.md","raw":"---\ntitle: 节流和防抖\npermalink: /web/lodash/dubounce.html\ndate: 2023-10-21 21:00:16\ndescription: 节流和防抖，有助于在输入或者点击某个按钮时进行优化事件响应。\ntag: [前端, 浏览器, 性能优化]\ncomments: true\ncategories: \n - 浏览器\n - 性能优化\n---\n\n#### 对节流与防抖的理解\n函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件\n又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因\n为用户的多次点击向后端发送多次请求。\n函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发\n事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只\n有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件\n节流来降低事件调用的频率。\n\n防抖函数的应用场景：\n- 按钮提交场景：防止多次提交按钮，只执行最后一次提交\n- 服务端验证场景： 表达验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有索联想词功能类似生存环境可以使用lodash.debounce\n\n节流函数的适用场景：\n\n- 拖拽场景：固定实际内只执行一次，防止超高频次触发位置变动\n- 缩放场景：监控浏览器resize\n- 动画场景：避免短时间内多次触发动画引起性能问题\n\n#### 实现节流函数和防抖函数\n\n##### 函数防抖的实现\n```javascript\nfunction debounce(fn, wait) {\n    let timer = null;\n    return function() {\n        console.log(123);\n        let context = this, args = [...arguments];\n        // 如果此时存在定时器则取消之前的定时器重新计时\n        if(timer) {\n            clearTimeout(timer);\n            timer = null;\n        }\n        timer = setTimeout(() => {\n            fn.apply(context, args);\n        }, wait);\n    }\n}\n```\n\n##### 函数节流的实现\n```javascript\n// 时间戳版\nfunction throttle(fn, delay) {\n    var preTime = Date.now();\n\n    return function() {\n        var context = this,\n        args = [...arguments],\n        nowTime = Date.now();\n\n        // 如果两次时间间隔超过了指定时间，则执行函数。\n        if(nowTime - preTime >= delay) {\n            preTime = Date.now();\n            return fn.apply(context, args);\n        }\n    };\n}\n\n// 定时器版\nfunction throttle(fu, wait) {\n    let timer = null;\n    return function(){\n        let context = this,\n        args = [...arguments];\n        if(!timer) {\n            timer = setTimeout(() => {\n                fu.apply(context, args);\n                clearTimeout(timer);\n            }, wait);\n        }\n    }\n}\n```\n","slug":"web/lodashDebounce","published":1,"updated":"2023-10-21T13:57:49.996Z","__permalink":"/web/lodash/dubounce.html","layout":"post","photos":[],"link":"","_id":"clofw8ydt0023m0uo8o3t6psj","content":"<div id=\"vip-container\"><h4 id=\"对节流与防抖的理解\"><a href=\"#对节流与防抖的理解\" class=\"headerlink\" title=\"对节流与防抖的理解\"></a>对节流与防抖的理解</h4><p>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件<br>又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因<br>为用户的多次点击向后端发送多次请求。<br>函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发<br>事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只<br>有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件<br>节流来降低事件调用的频率。</p>\n<p>防抖函数的应用场景：</p>\n<ul>\n<li>按钮提交场景：防止多次提交按钮，只执行最后一次提交</li>\n<li>服务端验证场景： 表达验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有索联想词功能类似生存环境可以使用lodash.debounce</li>\n</ul>\n<p>节流函数的适用场景：</p>\n<ul>\n<li>拖拽场景：固定实际内只执行一次，防止超高频次触发位置变动</li>\n<li>缩放场景：监控浏览器resize</li>\n<li>动画场景：避免短时间内多次触发动画引起性能问题</li>\n</ul>\n<h4 id=\"实现节流函数和防抖函数\"><a href=\"#实现节流函数和防抖函数\" class=\"headerlink\" title=\"实现节流函数和防抖函数\"></a>实现节流函数和防抖函数</h4><h5 id=\"函数防抖的实现\"><a href=\"#函数防抖的实现\" class=\"headerlink\" title=\"函数防抖的实现\"></a>函数防抖的实现</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>, args = [...<span class=\"variable language_\">arguments</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 如果此时存在定时器则取消之前的定时器重新计时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数节流的实现\"><a href=\"#函数节流的实现\" class=\"headerlink\" title=\"函数节流的实现\"></a>函数节流的实现</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 时间戳版</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> preTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> context = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">        args = [...<span class=\"variable language_\">arguments</span>],</span><br><span class=\"line\">        nowTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果两次时间间隔超过了指定时间，则执行函数。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nowTime - preTime &gt;= delay) &#123;</span><br><span class=\"line\">            preTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定时器版</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fu, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">        args = [...<span class=\"variable language_\">arguments</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                fu.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">                <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":487,"excerpt":"","more":"<h4 id=\"对节流与防抖的理解\"><a href=\"#对节流与防抖的理解\" class=\"headerlink\" title=\"对节流与防抖的理解\"></a>对节流与防抖的理解</h4><p>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件<br>又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因<br>为用户的多次点击向后端发送多次请求。<br>函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发<br>事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只<br>有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件<br>节流来降低事件调用的频率。</p>\n<p>防抖函数的应用场景：</p>\n<ul>\n<li>按钮提交场景：防止多次提交按钮，只执行最后一次提交</li>\n<li>服务端验证场景： 表达验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有索联想词功能类似生存环境可以使用lodash.debounce</li>\n</ul>\n<p>节流函数的适用场景：</p>\n<ul>\n<li>拖拽场景：固定实际内只执行一次，防止超高频次触发位置变动</li>\n<li>缩放场景：监控浏览器resize</li>\n<li>动画场景：避免短时间内多次触发动画引起性能问题</li>\n</ul>\n<h4 id=\"实现节流函数和防抖函数\"><a href=\"#实现节流函数和防抖函数\" class=\"headerlink\" title=\"实现节流函数和防抖函数\"></a>实现节流函数和防抖函数</h4><h5 id=\"函数防抖的实现\"><a href=\"#函数防抖的实现\" class=\"headerlink\" title=\"函数防抖的实现\"></a>函数防抖的实现</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>, args = [...<span class=\"variable language_\">arguments</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 如果此时存在定时器则取消之前的定时器重新计时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数节流的实现\"><a href=\"#函数节流的实现\" class=\"headerlink\" title=\"函数节流的实现\"></a>函数节流的实现</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 时间戳版</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> preTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> context = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">        args = [...<span class=\"variable language_\">arguments</span>],</span><br><span class=\"line\">        nowTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果两次时间间隔超过了指定时间，则执行函数。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nowTime - preTime &gt;= delay) &#123;</span><br><span class=\"line\">            preTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定时器版</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fu, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">        args = [...<span class=\"variable language_\">arguments</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                fu.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">                <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"浅谈回流与重绘","date":"2023-10-21T13:05:16.000Z","description":"回流与重绘，都是在浏览器响应过程中展示环节对数据进行对比，而产生的两种不同的方式。","comments":1,"_content":"\n##### 回流\n当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。\n下面这些操作会导致回流：\n\n - 页面的首次渲染\n - 浏览器的窗口大小发生变化\n - 元素的内容发生变化\n - 元素的尺寸或者位置发生变化\n - 元素的字体大小发生变化\n - 激活 CSS 伪类\n - 查询某些属性或者调用某些方法\n - 添加或者删除可见的 DOM 元素\n \n在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的 DOM 元素重新排列，它的影响范围有两种：\n全局范围：从根节点开始，对整个渲染树进行重新布局\n局部范围：对渲染树的某部分或者一个渲染对象进行重新布局\n\n##### 重绘\n当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是重绘。\n\n下面这些操作会导致重绘：\ncolor、background 相关属性：background-color、background-image等\noutline 相 关 属 性 ： outline-color 、outline-width、text-decoration\nborder-radius、visibility、box-shadow\n\n注意： 当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。\n\n##### 如何避免回流与重绘？\n减少回流与重绘的措施：\n\n操作 DOM 时，尽量在低层级的 DOM 节点进行操作不要使用 table 布局， 一个小的改动可能会使整个table 进行重新布局\n\n使用 CSS 的表达式\n\n不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。\n\n使用 absolute 或者 fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素\n\n避免频繁操作 DOM，可以创建一个文档片段documentFragment，在它上面应用所有 DOM 操作，最后再把它添加到文档中\n\n将元素先设置 display: none，操作结束后再把它显示出来。因为在display 属性为 none 的元素上进行的 DOM 操作不会引发回流和重绘。将 DOM 的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。\n\n浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。\n\n上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。","source":"_posts/web/refluxAndRedrawing.md","raw":"---\ntitle: 浅谈回流与重绘\npermalink: /web/reflux/and/redrawing.html\ndate: 2023-10-21 21:05:16\ndescription: 回流与重绘，都是在浏览器响应过程中展示环节对数据进行对比，而产生的两种不同的方式。\ntag: [前端, 浏览器, 性能优化]\ncomments: true\ncategories: \n - 浏览器\n - 性能优化\n---\n\n##### 回流\n当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。\n下面这些操作会导致回流：\n\n - 页面的首次渲染\n - 浏览器的窗口大小发生变化\n - 元素的内容发生变化\n - 元素的尺寸或者位置发生变化\n - 元素的字体大小发生变化\n - 激活 CSS 伪类\n - 查询某些属性或者调用某些方法\n - 添加或者删除可见的 DOM 元素\n \n在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的 DOM 元素重新排列，它的影响范围有两种：\n全局范围：从根节点开始，对整个渲染树进行重新布局\n局部范围：对渲染树的某部分或者一个渲染对象进行重新布局\n\n##### 重绘\n当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是重绘。\n\n下面这些操作会导致重绘：\ncolor、background 相关属性：background-color、background-image等\noutline 相 关 属 性 ： outline-color 、outline-width、text-decoration\nborder-radius、visibility、box-shadow\n\n注意： 当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。\n\n##### 如何避免回流与重绘？\n减少回流与重绘的措施：\n\n操作 DOM 时，尽量在低层级的 DOM 节点进行操作不要使用 table 布局， 一个小的改动可能会使整个table 进行重新布局\n\n使用 CSS 的表达式\n\n不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。\n\n使用 absolute 或者 fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素\n\n避免频繁操作 DOM，可以创建一个文档片段documentFragment，在它上面应用所有 DOM 操作，最后再把它添加到文档中\n\n将元素先设置 display: none，操作结束后再把它显示出来。因为在display 属性为 none 的元素上进行的 DOM 操作不会引发回流和重绘。将 DOM 的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。\n\n浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。\n\n上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。","slug":"web/refluxAndRedrawing","published":1,"updated":"2023-10-21T13:57:55.821Z","__permalink":"/web/reflux/and/redrawing.html","layout":"post","photos":[],"link":"","_id":"clofw8ydu0024m0uoemu7bc21","content":"<div id=\"vip-container\"><h5 id=\"回流\"><a href=\"#回流\" class=\"headerlink\" title=\"回流\"></a>回流</h5><p>当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。<br>下面这些操作会导致回流：</p>\n<ul>\n<li>页面的首次渲染</li>\n<li>浏览器的窗口大小发生变化</li>\n<li>元素的内容发生变化</li>\n<li>元素的尺寸或者位置发生变化</li>\n<li>元素的字体大小发生变化</li>\n<li>激活 CSS 伪类</li>\n<li>查询某些属性或者调用某些方法</li>\n<li>添加或者删除可见的 DOM 元素</li>\n</ul>\n<p>在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的 DOM 元素重新排列，它的影响范围有两种：<br>全局范围：从根节点开始，对整个渲染树进行重新布局<br>局部范围：对渲染树的某部分或者一个渲染对象进行重新布局</p>\n<h5 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h5><p>当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是重绘。</p>\n<p>下面这些操作会导致重绘：<br>color、background 相关属性：background-color、background-image等<br>outline 相 关 属 性 ： outline-color 、outline-width、text-decoration<br>border-radius、visibility、box-shadow</p>\n<p>注意： 当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。</p>\n<h5 id=\"如何避免回流与重绘？\"><a href=\"#如何避免回流与重绘？\" class=\"headerlink\" title=\"如何避免回流与重绘？\"></a>如何避免回流与重绘？</h5><p>减少回流与重绘的措施：</p>\n<p>操作 DOM 时，尽量在低层级的 DOM 节点进行操作不要使用 table 布局， 一个小的改动可能会使整个table 进行重新布局</p>\n<p>使用 CSS 的表达式</p>\n<p>不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</p>\n<p>使用 absolute 或者 fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素</p>\n<p>避免频繁操作 DOM，可以创建一个文档片段documentFragment，在它上面应用所有 DOM 操作，最后再把它添加到文档中</p>\n<p>将元素先设置 display: none，操作结束后再把它显示出来。因为在display 属性为 none 的元素上进行的 DOM 操作不会引发回流和重绘。将 DOM 的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。</p>\n<p>浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。</p>\n<p>上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":792,"excerpt":"","more":"<h5 id=\"回流\"><a href=\"#回流\" class=\"headerlink\" title=\"回流\"></a>回流</h5><p>当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。<br>下面这些操作会导致回流：</p>\n<ul>\n<li>页面的首次渲染</li>\n<li>浏览器的窗口大小发生变化</li>\n<li>元素的内容发生变化</li>\n<li>元素的尺寸或者位置发生变化</li>\n<li>元素的字体大小发生变化</li>\n<li>激活 CSS 伪类</li>\n<li>查询某些属性或者调用某些方法</li>\n<li>添加或者删除可见的 DOM 元素</li>\n</ul>\n<p>在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的 DOM 元素重新排列，它的影响范围有两种：<br>全局范围：从根节点开始，对整个渲染树进行重新布局<br>局部范围：对渲染树的某部分或者一个渲染对象进行重新布局</p>\n<h5 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h5><p>当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是重绘。</p>\n<p>下面这些操作会导致重绘：<br>color、background 相关属性：background-color、background-image等<br>outline 相 关 属 性 ： outline-color 、outline-width、text-decoration<br>border-radius、visibility、box-shadow</p>\n<p>注意： 当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。</p>\n<h5 id=\"如何避免回流与重绘？\"><a href=\"#如何避免回流与重绘？\" class=\"headerlink\" title=\"如何避免回流与重绘？\"></a>如何避免回流与重绘？</h5><p>减少回流与重绘的措施：</p>\n<p>操作 DOM 时，尽量在低层级的 DOM 节点进行操作不要使用 table 布局， 一个小的改动可能会使整个table 进行重新布局</p>\n<p>使用 CSS 的表达式</p>\n<p>不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</p>\n<p>使用 absolute 或者 fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素</p>\n<p>避免频繁操作 DOM，可以创建一个文档片段documentFragment，在它上面应用所有 DOM 操作，最后再把它添加到文档中</p>\n<p>将元素先设置 display: none，操作结束后再把它显示出来。因为在display 属性为 none 的元素上进行的 DOM 操作不会引发回流和重绘。将 DOM 的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。</p>\n<p>浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。</p>\n<p>上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。</p>\n"},{"title":"如何⽤webpack 来优化前端性能?","date":"2023-10-21T12:52:25.000Z","description":"⽤webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运⾏快速⾼效","comments":1,"_content":"\n##### 如何⽤webpack 来优化前端性能？\n⽤webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。\n- 压缩代码：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩 css；\n- 利⽤CDN 加速: 在构建过程中，将引⽤的静态资源路径修改为 CDN 上对应的路径。可以利⽤webpack 对于 output 参数和各 loader 的publicPath 参数来修改资源路径；\n- Tree Shaking: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动 webpack 时追加参数 --optimize-minimize 来实现；\n- Code Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存；\n- 提取公共第三⽅库: SplitChunksPlugin 插件来进⾏公共模块抽取, 利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码。\n\n##### 如何提⾼webpack 的构建速度？\n1. 多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码；\n2. 通过 externals 配置来提取常⽤库；\n3. 利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过DllPlugin 来对那些我们引⽤但是绝对不会修改的 npm 包来进⾏预编译，再通过DllReferencePlugin 将预编译的模块加载进来；\n4. 使⽤ Happypack 实现多线程加速编译；\n5. 使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。原理上 webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度；\n6. 使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码。","source":"_posts/web/webpackPerform.md","raw":"---\ntitle: 如何⽤webpack 来优化前端性能?\npermalink: /web/webpack/perform.html\ndate: 2023-10-21 20:52:25\ndescription: ⽤webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运⾏快速⾼效\ntag: [前端, 浏览器, 性能优化, Webpack, 插件]\ncomments: true\ncategories: \n - 浏览器\n - 性能优化\n---\n\n##### 如何⽤webpack 来优化前端性能？\n⽤webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。\n- 压缩代码：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩 css；\n- 利⽤CDN 加速: 在构建过程中，将引⽤的静态资源路径修改为 CDN 上对应的路径。可以利⽤webpack 对于 output 参数和各 loader 的publicPath 参数来修改资源路径；\n- Tree Shaking: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动 webpack 时追加参数 --optimize-minimize 来实现；\n- Code Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存；\n- 提取公共第三⽅库: SplitChunksPlugin 插件来进⾏公共模块抽取, 利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码。\n\n##### 如何提⾼webpack 的构建速度？\n1. 多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码；\n2. 通过 externals 配置来提取常⽤库；\n3. 利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过DllPlugin 来对那些我们引⽤但是绝对不会修改的 npm 包来进⾏预编译，再通过DllReferencePlugin 将预编译的模块加载进来；\n4. 使⽤ Happypack 实现多线程加速编译；\n5. 使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。原理上 webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度；\n6. 使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码。","slug":"web/webpackPerform","published":1,"updated":"2023-10-21T13:58:00.346Z","__permalink":"/web/webpack/perform.html","layout":"post","photos":[],"link":"","_id":"clofw8ydw0028m0uo3w976b1l","content":"<div id=\"vip-container\"><h5 id=\"如何⽤webpack-来优化前端性能？\"><a href=\"#如何⽤webpack-来优化前端性能？\" class=\"headerlink\" title=\"如何⽤webpack 来优化前端性能？\"></a>如何⽤webpack 来优化前端性能？</h5><p>⽤webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。</p>\n<ul>\n<li>压缩代码：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩 css；</li>\n<li>利⽤CDN 加速: 在构建过程中，将引⽤的静态资源路径修改为 CDN 上对应的路径。可以利⽤webpack 对于 output 参数和各 loader 的publicPath 参数来修改资源路径；</li>\n<li>Tree Shaking: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动 webpack 时追加参数 –optimize-minimize 来实现；</li>\n<li>Code Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存；</li>\n<li>提取公共第三⽅库: SplitChunksPlugin 插件来进⾏公共模块抽取, 利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码。</li>\n</ul>\n<h5 id=\"如何提⾼webpack-的构建速度？\"><a href=\"#如何提⾼webpack-的构建速度？\" class=\"headerlink\" title=\"如何提⾼webpack 的构建速度？\"></a>如何提⾼webpack 的构建速度？</h5><ol>\n<li>多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码；</li>\n<li>通过 externals 配置来提取常⽤库；</li>\n<li>利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过DllPlugin 来对那些我们引⽤但是绝对不会修改的 npm 包来进⾏预编译，再通过DllReferencePlugin 将预编译的模块加载进来；</li>\n<li>使⽤ Happypack 实现多线程加速编译；</li>\n<li>使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。原理上 webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度；</li>\n<li>使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码。</li>\n</ol>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/web/webpack/hot/module/replacement.html"],"length":399,"excerpt":"","more":"<h5 id=\"如何⽤webpack-来优化前端性能？\"><a href=\"#如何⽤webpack-来优化前端性能？\" class=\"headerlink\" title=\"如何⽤webpack 来优化前端性能？\"></a>如何⽤webpack 来优化前端性能？</h5><p>⽤webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。</p>\n<ul>\n<li>压缩代码：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩 css；</li>\n<li>利⽤CDN 加速: 在构建过程中，将引⽤的静态资源路径修改为 CDN 上对应的路径。可以利⽤webpack 对于 output 参数和各 loader 的publicPath 参数来修改资源路径；</li>\n<li>Tree Shaking: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动 webpack 时追加参数 –optimize-minimize 来实现；</li>\n<li>Code Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存；</li>\n<li>提取公共第三⽅库: SplitChunksPlugin 插件来进⾏公共模块抽取, 利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码。</li>\n</ul>\n<h5 id=\"如何提⾼webpack-的构建速度？\"><a href=\"#如何提⾼webpack-的构建速度？\" class=\"headerlink\" title=\"如何提⾼webpack 的构建速度？\"></a>如何提⾼webpack 的构建速度？</h5><ol>\n<li>多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码；</li>\n<li>通过 externals 配置来提取常⽤库；</li>\n<li>利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过DllPlugin 来对那些我们引⽤但是绝对不会修改的 npm 包来进⾏预编译，再通过DllReferencePlugin 将预编译的模块加载进来；</li>\n<li>使⽤ Happypack 实现多线程加速编译；</li>\n<li>使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。原理上 webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度；</li>\n<li>使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码。</li>\n</ol>\n"},{"title":"nrm 管理 npm registry","date":"2023-10-25T07:25:17.000Z","description":"nrm -- NPM registry manager。","comments":1,"_content":"\n#### Install\n\n`npm install -g nrm`\n\n#### nrm ls\n\n```shell\n  nrm ls\n\n  npm ---------- https://registry.npmjs.org/\n  yarn --------- https://registry.yarnpkg.com/\n  tencent ------ https://mirrors.cloud.tencent.com/npm/\n  cnpm --------- https://r.cnpmjs.org/\n  taobao ------- https://registry.npmmirror.com/\n  npmMirror ---- https://skimdb.npmjs.com/registry/\n```\n\n#### nrm use\n\n```shell\n    nrm use taobao\n    Registry has been set to: https://registry.npmmirror.com/\n\n```\n\n#### Usage\n\n```shell\nUsage: nrm [options] [command]\n\nOptions:\n  -V, --version                           output the version number\n  -h, --help                              output usage information\n\nCommands:\n  ls                                      List all the registries\n  current [options]                       Show current registry name or URL\n  use <registry>                          Change registry to registry\n  add <registry> <url> [home]             Add one custom registry\n  login [options] <registryName> [value]  Set authorize information for a custom registry with a base64 encoded string or username and pasword\n  set-hosted-repo <registry> <value>      Set hosted npm repository for a custom registry to publish packages\n  set-scope <scopeName> <value>           Associating a scope with a registry\n  del-scope <scopeName>                   Remove a scope\n  set [options] <registryName>            Set custom registry attribute\n  rename <registryName> <newName>         Set custom registry name\n  del <registry>                          Delete one custom registry\n  home <registry> [browser]               Open the homepage of registry with optional browser\n  publish [options] [<tarball>|<folder>]  Publish package to current registry if current registry is a custom registry.\n   if you're not using custom registry, this command will run npm publish directly\n  test [registry]                         Show response time for specific or all registries\n  help                                    Print this help \n   if you want to clear the NRM configuration when uninstall you can execute \"npm uninstall nrm -g -C or npm uninstall nrm -g --clean\"\n```","source":"_posts/web/npm/nrm.md","raw":"---\ntitle: nrm 管理 npm registry\npermalink: /web/npm/nrm.html\ndate: 2023-10-25 15:25:17\ndescription: nrm -- NPM registry manager。\n\ntag: [前端, npm, nrm]\ncomments: true\ncategories: \n - 前端\n - npm\n---\n\n#### Install\n\n`npm install -g nrm`\n\n#### nrm ls\n\n```shell\n  nrm ls\n\n  npm ---------- https://registry.npmjs.org/\n  yarn --------- https://registry.yarnpkg.com/\n  tencent ------ https://mirrors.cloud.tencent.com/npm/\n  cnpm --------- https://r.cnpmjs.org/\n  taobao ------- https://registry.npmmirror.com/\n  npmMirror ---- https://skimdb.npmjs.com/registry/\n```\n\n#### nrm use\n\n```shell\n    nrm use taobao\n    Registry has been set to: https://registry.npmmirror.com/\n\n```\n\n#### Usage\n\n```shell\nUsage: nrm [options] [command]\n\nOptions:\n  -V, --version                           output the version number\n  -h, --help                              output usage information\n\nCommands:\n  ls                                      List all the registries\n  current [options]                       Show current registry name or URL\n  use <registry>                          Change registry to registry\n  add <registry> <url> [home]             Add one custom registry\n  login [options] <registryName> [value]  Set authorize information for a custom registry with a base64 encoded string or username and pasword\n  set-hosted-repo <registry> <value>      Set hosted npm repository for a custom registry to publish packages\n  set-scope <scopeName> <value>           Associating a scope with a registry\n  del-scope <scopeName>                   Remove a scope\n  set [options] <registryName>            Set custom registry attribute\n  rename <registryName> <newName>         Set custom registry name\n  del <registry>                          Delete one custom registry\n  home <registry> [browser]               Open the homepage of registry with optional browser\n  publish [options] [<tarball>|<folder>]  Publish package to current registry if current registry is a custom registry.\n   if you're not using custom registry, this command will run npm publish directly\n  test [registry]                         Show response time for specific or all registries\n  help                                    Print this help \n   if you want to clear the NRM configuration when uninstall you can execute \"npm uninstall nrm -g -C or npm uninstall nrm -g --clean\"\n```","slug":"web/npm/nrm","published":1,"updated":"2023-10-26T12:50:44.436Z","__permalink":"/web/npm/nrm.html","layout":"post","photos":[],"link":"","_id":"clofw8ydx002bm0uobc6fdhbz","content":"<div id=\"vip-container\"><h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><p><code>npm install -g nrm</code></p>\n<h4 id=\"nrm-ls\"><a href=\"#nrm-ls\" class=\"headerlink\" title=\"nrm ls\"></a>nrm ls</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br><span class=\"line\"></span><br><span class=\"line\">npm ---------- https://registry.npmjs.org/</span><br><span class=\"line\">yarn --------- https://registry.yarnpkg.com/</span><br><span class=\"line\">tencent ------ https://mirrors.cloud.tencent.com/npm/</span><br><span class=\"line\">cnpm --------- https://r.cnpmjs.org/</span><br><span class=\"line\">taobao ------- https://registry.npmmirror.com/</span><br><span class=\"line\">npmMirror ---- https://skimdb.npmjs.com/registry/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"nrm-use\"><a href=\"#nrm-use\" class=\"headerlink\" title=\"nrm use\"></a>nrm use</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm use taobao</span><br><span class=\"line\">Registry has been set to: https://registry.npmmirror.com/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: nrm [options] [command]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -V, --version                           output the version number</span><br><span class=\"line\">  -h, --help                              output usage information</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  ls                                      List all the registries</span><br><span class=\"line\">  current [options]                       Show current registry name or URL</span><br><span class=\"line\">  use &lt;registry&gt;                          Change registry to registry</span><br><span class=\"line\">  add &lt;registry&gt; &lt;url&gt; [home]             Add one custom registry</span><br><span class=\"line\">  login [options] &lt;registryName&gt; [value]  Set authorize information for a custom registry with a base64 encoded string or username and pasword</span><br><span class=\"line\">  set-hosted-repo &lt;registry&gt; &lt;value&gt;      Set hosted npm repository for a custom registry to publish packages</span><br><span class=\"line\">  set-scope &lt;scopeName&gt; &lt;value&gt;           Associating a scope with a registry</span><br><span class=\"line\">  del-scope &lt;scopeName&gt;                   Remove a scope</span><br><span class=\"line\">  set [options] &lt;registryName&gt;            Set custom registry attribute</span><br><span class=\"line\">  rename &lt;registryName&gt; &lt;newName&gt;         Set custom registry name</span><br><span class=\"line\">  del &lt;registry&gt;                          Delete one custom registry</span><br><span class=\"line\">  home &lt;registry&gt; [browser]               Open the homepage of registry with optional browser</span><br><span class=\"line\">  publish [options] [&lt;tarball&gt;|&lt;folder&gt;]  Publish package to current registry if current registry is a custom registry.</span><br><span class=\"line\">   if you&#x27;re not using custom registry, this command will run npm publish directly</span><br><span class=\"line\">  test [registry]                         Show response time for specific or all registries</span><br><span class=\"line\">  help                                    Print this help </span><br><span class=\"line\">   if you want to clear the NRM configuration when uninstall you can execute &quot;npm uninstall nrm -g -C or npm uninstall nrm -g --clean&quot;</span><br></pre></td></tr></table></figure></div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/components/unstate-next-use.html","/hexo/config/rss.html","/hexo/config/readmore.html"],"length":239,"excerpt":"","more":"<h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><p><code>npm install -g nrm</code></p>\n<h4 id=\"nrm-ls\"><a href=\"#nrm-ls\" class=\"headerlink\" title=\"nrm ls\"></a>nrm ls</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br><span class=\"line\"></span><br><span class=\"line\">npm ---------- https://registry.npmjs.org/</span><br><span class=\"line\">yarn --------- https://registry.yarnpkg.com/</span><br><span class=\"line\">tencent ------ https://mirrors.cloud.tencent.com/npm/</span><br><span class=\"line\">cnpm --------- https://r.cnpmjs.org/</span><br><span class=\"line\">taobao ------- https://registry.npmmirror.com/</span><br><span class=\"line\">npmMirror ---- https://skimdb.npmjs.com/registry/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"nrm-use\"><a href=\"#nrm-use\" class=\"headerlink\" title=\"nrm use\"></a>nrm use</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm use taobao</span><br><span class=\"line\">Registry has been set to: https://registry.npmmirror.com/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: nrm [options] [command]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -V, --version                           output the version number</span><br><span class=\"line\">  -h, --help                              output usage information</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  ls                                      List all the registries</span><br><span class=\"line\">  current [options]                       Show current registry name or URL</span><br><span class=\"line\">  use &lt;registry&gt;                          Change registry to registry</span><br><span class=\"line\">  add &lt;registry&gt; &lt;url&gt; [home]             Add one custom registry</span><br><span class=\"line\">  login [options] &lt;registryName&gt; [value]  Set authorize information for a custom registry with a base64 encoded string or username and pasword</span><br><span class=\"line\">  set-hosted-repo &lt;registry&gt; &lt;value&gt;      Set hosted npm repository for a custom registry to publish packages</span><br><span class=\"line\">  set-scope &lt;scopeName&gt; &lt;value&gt;           Associating a scope with a registry</span><br><span class=\"line\">  del-scope &lt;scopeName&gt;                   Remove a scope</span><br><span class=\"line\">  set [options] &lt;registryName&gt;            Set custom registry attribute</span><br><span class=\"line\">  rename &lt;registryName&gt; &lt;newName&gt;         Set custom registry name</span><br><span class=\"line\">  del &lt;registry&gt;                          Delete one custom registry</span><br><span class=\"line\">  home &lt;registry&gt; [browser]               Open the homepage of registry with optional browser</span><br><span class=\"line\">  publish [options] [&lt;tarball&gt;|&lt;folder&gt;]  Publish package to current registry if current registry is a custom registry.</span><br><span class=\"line\">   if you&#x27;re not using custom registry, this command will run npm publish directly</span><br><span class=\"line\">  test [registry]                         Show response time for specific or all registries</span><br><span class=\"line\">  help                                    Print this help </span><br><span class=\"line\">   if you want to clear the NRM configuration when uninstall you can execute &quot;npm uninstall nrm -g -C or npm uninstall nrm -g --clean&quot;</span><br></pre></td></tr></table></figure>"},{"title":"nvm 管理node版本","date":"2023-10-25T07:47:01.000Z","description":"nvm -- Node version manager。","comments":1,"_content":"\n#### Windows 上安装\n\n[nvm_github](https://github.com/nvm-sh/nvm)\n\n1. 点击 \"Code\" 按钮，然后选择 \"Download ZIP\" 下载 ZIP 文件。\n2. 解压缩 ZIP 文件：解压缩下载的 ZIP 文件，将解压后的文件夹放在您想要安装 NVM 的位置。\n3. 配置环境变量：打开命令提示符或 PowerShell，并运行以下命令来配置 NVM 的环境变量：\n\n```shell\n    setx NVM_HOME \"解压缩文件夹的完整路径\"\n    setx NVM_SYMLINK \"解压缩文件夹的完整路径\"\n```\n\n#### Linux 上安装\n\n1. 下载 NVM 安装脚本：打开终端并运行以下命令下载 NVM 安装脚本：\n\n```shell\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n```\n\n这将从 NVM GitHub 存储库下载并运行安装脚本。\n\n2. 配置 NVM 环境变量：安装脚本运行后，会将 NVM 相关的路径和初始化脚本添加到您的个人配置文件（如 ~/.bashrc、~/.zshrc 等）。要使这些更改生效，可以运行以下命令：\n\n```shell\nsource ~/.bashrc\n```\n\n如果您使用的是其他 Shell，替换 ~/.bashrc 为您实际使用的配置文件。\n\n#### 验证安装\n\n```shell\nnvm --version\n```\n\n#### 安装node.js 版本\n\n```shell\nnvm install <version>\n```\n\n**例如**\n\n```shell\nnvm install 16.13.0\n```\n\n安装成功后，NVM 会自动将该版本设置为默认版本。\n\n#### 切换版本\n\n切换 Node.js 版本：如果您有多个安装的 Node.js 版本，可以使用以下命令切换不同的版本：\n\n```shell\nnvm use <version>\n```\n\n**例如**\n\n```shell\nnvm use 18.16.0\n```\n\n这将将您的当前 Shell 会话设置为使用指定的 Node.js 版本。\n\n#### 查询当前版本\n\n```shell\nnvm use node\n```\n\n#### 查询当前node路径\n\n```shell\nnvm which 18.16.0\n/Users/shaosong/.nvm/versions/node/v18.16.0/bin/node\n```\n\n#### listing Version\n\n```shell\nnvm ls\n```\n\n#### 设置默认version\n\n```shell\nnvm alias default 18.16.0\n```\n\n现在，您已经在 Linux 上成功安装了 NVM。您可以使用 nvm use 命令切换不同的 Node.js 版本，并使用 node 和 npm 命令来管理您的 Node.js 环境。\n","source":"_posts/web/npm/nvm.md","raw":"---\ntitle: nvm 管理node版本\npermalink: /web/npm/nvm.html\ndate: 2023-10-25 15:47:01\ndescription: nvm -- Node version manager。\n\ntag: [前端, npm, nvm]\ncomments: true\ncategories: \n - 前端\n - npm\n---\n\n#### Windows 上安装\n\n[nvm_github](https://github.com/nvm-sh/nvm)\n\n1. 点击 \"Code\" 按钮，然后选择 \"Download ZIP\" 下载 ZIP 文件。\n2. 解压缩 ZIP 文件：解压缩下载的 ZIP 文件，将解压后的文件夹放在您想要安装 NVM 的位置。\n3. 配置环境变量：打开命令提示符或 PowerShell，并运行以下命令来配置 NVM 的环境变量：\n\n```shell\n    setx NVM_HOME \"解压缩文件夹的完整路径\"\n    setx NVM_SYMLINK \"解压缩文件夹的完整路径\"\n```\n\n#### Linux 上安装\n\n1. 下载 NVM 安装脚本：打开终端并运行以下命令下载 NVM 安装脚本：\n\n```shell\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n```\n\n这将从 NVM GitHub 存储库下载并运行安装脚本。\n\n2. 配置 NVM 环境变量：安装脚本运行后，会将 NVM 相关的路径和初始化脚本添加到您的个人配置文件（如 ~/.bashrc、~/.zshrc 等）。要使这些更改生效，可以运行以下命令：\n\n```shell\nsource ~/.bashrc\n```\n\n如果您使用的是其他 Shell，替换 ~/.bashrc 为您实际使用的配置文件。\n\n#### 验证安装\n\n```shell\nnvm --version\n```\n\n#### 安装node.js 版本\n\n```shell\nnvm install <version>\n```\n\n**例如**\n\n```shell\nnvm install 16.13.0\n```\n\n安装成功后，NVM 会自动将该版本设置为默认版本。\n\n#### 切换版本\n\n切换 Node.js 版本：如果您有多个安装的 Node.js 版本，可以使用以下命令切换不同的版本：\n\n```shell\nnvm use <version>\n```\n\n**例如**\n\n```shell\nnvm use 18.16.0\n```\n\n这将将您的当前 Shell 会话设置为使用指定的 Node.js 版本。\n\n#### 查询当前版本\n\n```shell\nnvm use node\n```\n\n#### 查询当前node路径\n\n```shell\nnvm which 18.16.0\n/Users/shaosong/.nvm/versions/node/v18.16.0/bin/node\n```\n\n#### listing Version\n\n```shell\nnvm ls\n```\n\n#### 设置默认version\n\n```shell\nnvm alias default 18.16.0\n```\n\n现在，您已经在 Linux 上成功安装了 NVM。您可以使用 nvm use 命令切换不同的 Node.js 版本，并使用 node 和 npm 命令来管理您的 Node.js 环境。\n","slug":"web/npm/nvm","published":1,"updated":"2023-10-26T12:50:44.451Z","__permalink":"/web/npm/nvm.html","layout":"post","photos":[],"link":"","_id":"clofw8ydz002fm0uo8c0agkbj","content":"<div id=\"vip-container\"><h4 id=\"Windows-上安装\"><a href=\"#Windows-上安装\" class=\"headerlink\" title=\"Windows 上安装\"></a>Windows 上安装</h4><p><a href=\"https://github.com/nvm-sh/nvm\">nvm_github</a></p>\n<ol>\n<li>点击 “Code” 按钮，然后选择 “Download ZIP” 下载 ZIP 文件。</li>\n<li>解压缩 ZIP 文件：解压缩下载的 ZIP 文件，将解压后的文件夹放在您想要安装 NVM 的位置。</li>\n<li>配置环境变量：打开命令提示符或 PowerShell，并运行以下命令来配置 NVM 的环境变量：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setx NVM_HOME &quot;解压缩文件夹的完整路径&quot;</span><br><span class=\"line\">setx NVM_SYMLINK &quot;解压缩文件夹的完整路径&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Linux-上安装\"><a href=\"#Linux-上安装\" class=\"headerlink\" title=\"Linux 上安装\"></a>Linux 上安装</h4><ol>\n<li>下载 NVM 安装脚本：打开终端并运行以下命令下载 NVM 安装脚本：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>这将从 NVM GitHub 存储库下载并运行安装脚本。</p>\n<ol start=\"2\">\n<li>配置 NVM 环境变量：安装脚本运行后，会将 NVM 相关的路径和初始化脚本添加到您的个人配置文件（如 <del>&#x2F;.bashrc、</del>&#x2F;.zshrc 等）。要使这些更改生效，可以运行以下命令：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>如果您使用的是其他 Shell，替换 ~&#x2F;.bashrc 为您实际使用的配置文件。</p>\n<h4 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装node-js-版本\"><a href=\"#安装node-js-版本\" class=\"headerlink\" title=\"安装node.js 版本\"></a>安装node.js 版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install &lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>例如</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 16.13.0</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后，NVM 会自动将该版本设置为默认版本。</p>\n<h4 id=\"切换版本\"><a href=\"#切换版本\" class=\"headerlink\" title=\"切换版本\"></a>切换版本</h4><p>切换 Node.js 版本：如果您有多个安装的 Node.js 版本，可以使用以下命令切换不同的版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>例如</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 18.16.0</span><br></pre></td></tr></table></figure>\n\n<p>这将将您的当前 Shell 会话设置为使用指定的 Node.js 版本。</p>\n<h4 id=\"查询当前版本\"><a href=\"#查询当前版本\" class=\"headerlink\" title=\"查询当前版本\"></a>查询当前版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use node</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询当前node路径\"><a href=\"#查询当前node路径\" class=\"headerlink\" title=\"查询当前node路径\"></a>查询当前node路径</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm which 18.16.0</span><br><span class=\"line\">/Users/shaosong/.nvm/versions/node/v18.16.0/bin/node</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"listing-Version\"><a href=\"#listing-Version\" class=\"headerlink\" title=\"listing Version\"></a>listing Version</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置默认version\"><a href=\"#设置默认version\" class=\"headerlink\" title=\"设置默认version\"></a>设置默认version</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm alias default 18.16.0</span><br></pre></td></tr></table></figure>\n\n<p>现在，您已经在 Linux 上成功安装了 NVM。您可以使用 nvm use 命令切换不同的 Node.js 版本，并使用 node 和 npm 命令来管理您的 Node.js 环境。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":[],"length":461,"excerpt":"","more":"<h4 id=\"Windows-上安装\"><a href=\"#Windows-上安装\" class=\"headerlink\" title=\"Windows 上安装\"></a>Windows 上安装</h4><p><a href=\"https://github.com/nvm-sh/nvm\">nvm_github</a></p>\n<ol>\n<li>点击 “Code” 按钮，然后选择 “Download ZIP” 下载 ZIP 文件。</li>\n<li>解压缩 ZIP 文件：解压缩下载的 ZIP 文件，将解压后的文件夹放在您想要安装 NVM 的位置。</li>\n<li>配置环境变量：打开命令提示符或 PowerShell，并运行以下命令来配置 NVM 的环境变量：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setx NVM_HOME &quot;解压缩文件夹的完整路径&quot;</span><br><span class=\"line\">setx NVM_SYMLINK &quot;解压缩文件夹的完整路径&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Linux-上安装\"><a href=\"#Linux-上安装\" class=\"headerlink\" title=\"Linux 上安装\"></a>Linux 上安装</h4><ol>\n<li>下载 NVM 安装脚本：打开终端并运行以下命令下载 NVM 安装脚本：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>这将从 NVM GitHub 存储库下载并运行安装脚本。</p>\n<ol start=\"2\">\n<li>配置 NVM 环境变量：安装脚本运行后，会将 NVM 相关的路径和初始化脚本添加到您的个人配置文件（如 <del>&#x2F;.bashrc、</del>&#x2F;.zshrc 等）。要使这些更改生效，可以运行以下命令：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>如果您使用的是其他 Shell，替换 ~&#x2F;.bashrc 为您实际使用的配置文件。</p>\n<h4 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装node-js-版本\"><a href=\"#安装node-js-版本\" class=\"headerlink\" title=\"安装node.js 版本\"></a>安装node.js 版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install &lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>例如</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 16.13.0</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后，NVM 会自动将该版本设置为默认版本。</p>\n<h4 id=\"切换版本\"><a href=\"#切换版本\" class=\"headerlink\" title=\"切换版本\"></a>切换版本</h4><p>切换 Node.js 版本：如果您有多个安装的 Node.js 版本，可以使用以下命令切换不同的版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>例如</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 18.16.0</span><br></pre></td></tr></table></figure>\n\n<p>这将将您的当前 Shell 会话设置为使用指定的 Node.js 版本。</p>\n<h4 id=\"查询当前版本\"><a href=\"#查询当前版本\" class=\"headerlink\" title=\"查询当前版本\"></a>查询当前版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use node</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询当前node路径\"><a href=\"#查询当前node路径\" class=\"headerlink\" title=\"查询当前node路径\"></a>查询当前node路径</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm which 18.16.0</span><br><span class=\"line\">/Users/shaosong/.nvm/versions/node/v18.16.0/bin/node</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"listing-Version\"><a href=\"#listing-Version\" class=\"headerlink\" title=\"listing Version\"></a>listing Version</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置默认version\"><a href=\"#设置默认version\" class=\"headerlink\" title=\"设置默认version\"></a>设置默认version</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm alias default 18.16.0</span><br></pre></td></tr></table></figure>\n\n<p>现在，您已经在 Linux 上成功安装了 NVM。您可以使用 nvm use 命令切换不同的 Node.js 版本，并使用 node 和 npm 命令来管理您的 Node.js 环境。</p>\n"},{"title":"webpack 热更新的实现原理","date":"2023-10-23T12:43:25.000Z","description":"webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。","comments":1,"_content":"\nwebpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。\n原理：\n![在这里插入图片描述](https://pic.imgdb.cn/item/65366aa5c458853aefbf449c.png)\n\n⾸先要知道 server 端和 client 端都做了处理⼯作：\n1. 在 webpack 的 watch 模式下，⽂件系统中某⼀个⽂件发⽣修改，webpack 监听到⽂件变化，根据配置⽂件对模块重新编译打包，并将打包后的代码通过简单的JavaScript对象保存在内存中。\n2. webpack-dev-server 和 webpack 之间的接⼝交互，⽽在这⼀步，主要是 dev-server 的中间件webpack- dev-middleware和 webpack 之间的交互，webpack-dev-middleware 调⽤webpack暴露的 API 对代码变化进⾏监 控，并且告诉webpack，将代码打包到内存中。\n3. webpack-dev-server 对⽂件变化的⼀个监控，这⼀步不同于第⼀步，并不是监控代码变化重新打包。当我们在配置⽂件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置⽂件夹中静态⽂件的变化，变化后会通知浏览器端对应⽤进⾏ live reload。注意，这⼉是浏览器刷新，和HMR 是两个概念。\n4. webpack-dev-server 代码的⼯作，该步骤主要是通过sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建⽴⼀个 websocket ⻓连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中Server 监听静态⽂件变化的信息。浏览器端根据这些 socket 消息进⾏不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后⾯的步骤根据这⼀hash 值来进⾏模块热替换。\n5. webpack-dev-server/client 端并不能够请求更新的代码，也不会执⾏ 热 更 模 块 操 作 ， ⽽ 把 这 些 ⼯ 作⼜交回给了webpack，webpack/hot/dev-server 的 ⼯ 作就是根据webpack-dev-server/client 传给它的信息以及dev-server的配置决定是刷新浏览器呢还是进⾏模块热更新。当然如果仅仅是刷新浏览器，也就没有后⾯那些步骤了。\n6. HotModuleReplacement.runtime 是客户端HMR 的中枢，它接收到上⼀ 步 传 递 给 他 的 新 模 块 的hash 值，它通过JsonpMainTemplate.runtime 向 server 端发送Ajax 请求，服务端返回⼀个 json，该 json 包含了所有要更新的模块的hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。\n7. ⽽第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进⾏对⽐，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引⽤。\n\n最后⼀步，当 HMR 失败后，回退到 live reload 操作，也就是进⾏浏览器刷新来获取最新打包代码。","source":"_posts/web/webpack/hotModuleReplacement.md","raw":"---\ntitle: webpack 热更新的实现原理\npermalink: /web/webpack/hot/module/replacement.html\ndate: 2023-10-23 20:43:25\ndescription: webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。\n\ntag: [前端, 浏览器, WebPack]\ncomments: true\ncategories: \n - 前端\n - WebPack\n---\n\nwebpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。\n原理：\n![在这里插入图片描述](https://pic.imgdb.cn/item/65366aa5c458853aefbf449c.png)\n\n⾸先要知道 server 端和 client 端都做了处理⼯作：\n1. 在 webpack 的 watch 模式下，⽂件系统中某⼀个⽂件发⽣修改，webpack 监听到⽂件变化，根据配置⽂件对模块重新编译打包，并将打包后的代码通过简单的JavaScript对象保存在内存中。\n2. webpack-dev-server 和 webpack 之间的接⼝交互，⽽在这⼀步，主要是 dev-server 的中间件webpack- dev-middleware和 webpack 之间的交互，webpack-dev-middleware 调⽤webpack暴露的 API 对代码变化进⾏监 控，并且告诉webpack，将代码打包到内存中。\n3. webpack-dev-server 对⽂件变化的⼀个监控，这⼀步不同于第⼀步，并不是监控代码变化重新打包。当我们在配置⽂件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置⽂件夹中静态⽂件的变化，变化后会通知浏览器端对应⽤进⾏ live reload。注意，这⼉是浏览器刷新，和HMR 是两个概念。\n4. webpack-dev-server 代码的⼯作，该步骤主要是通过sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建⽴⼀个 websocket ⻓连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中Server 监听静态⽂件变化的信息。浏览器端根据这些 socket 消息进⾏不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后⾯的步骤根据这⼀hash 值来进⾏模块热替换。\n5. webpack-dev-server/client 端并不能够请求更新的代码，也不会执⾏ 热 更 模 块 操 作 ， ⽽ 把 这 些 ⼯ 作⼜交回给了webpack，webpack/hot/dev-server 的 ⼯ 作就是根据webpack-dev-server/client 传给它的信息以及dev-server的配置决定是刷新浏览器呢还是进⾏模块热更新。当然如果仅仅是刷新浏览器，也就没有后⾯那些步骤了。\n6. HotModuleReplacement.runtime 是客户端HMR 的中枢，它接收到上⼀ 步 传 递 给 他 的 新 模 块 的hash 值，它通过JsonpMainTemplate.runtime 向 server 端发送Ajax 请求，服务端返回⼀个 json，该 json 包含了所有要更新的模块的hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。\n7. ⽽第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进⾏对⽐，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引⽤。\n\n最后⼀步，当 HMR 失败后，回退到 live reload 操作，也就是进⾏浏览器刷新来获取最新打包代码。","slug":"web/webpack/hotModuleReplacement","published":1,"updated":"2023-10-23T12:44:35.814Z","__permalink":"/web/webpack/hot/module/replacement.html","layout":"post","photos":[],"link":"","_id":"clofw8ye0002hm0uo1c44eeol","content":"<div id=\"vip-container\"><p>webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。<br>原理：<br><img src=\"https://pic.imgdb.cn/item/65366aa5c458853aefbf449c.png\" alt=\"在这里插入图片描述\"></p>\n<p>⾸先要知道 server 端和 client 端都做了处理⼯作：</p>\n<ol>\n<li>在 webpack 的 watch 模式下，⽂件系统中某⼀个⽂件发⽣修改，webpack 监听到⽂件变化，根据配置⽂件对模块重新编译打包，并将打包后的代码通过简单的JavaScript对象保存在内存中。</li>\n<li>webpack-dev-server 和 webpack 之间的接⼝交互，⽽在这⼀步，主要是 dev-server 的中间件webpack- dev-middleware和 webpack 之间的交互，webpack-dev-middleware 调⽤webpack暴露的 API 对代码变化进⾏监 控，并且告诉webpack，将代码打包到内存中。</li>\n<li>webpack-dev-server 对⽂件变化的⼀个监控，这⼀步不同于第⼀步，并不是监控代码变化重新打包。当我们在配置⽂件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置⽂件夹中静态⽂件的变化，变化后会通知浏览器端对应⽤进⾏ live reload。注意，这⼉是浏览器刷新，和HMR 是两个概念。</li>\n<li>webpack-dev-server 代码的⼯作，该步骤主要是通过sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建⽴⼀个 websocket ⻓连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中Server 监听静态⽂件变化的信息。浏览器端根据这些 socket 消息进⾏不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后⾯的步骤根据这⼀hash 值来进⾏模块热替换。</li>\n<li>webpack-dev-server&#x2F;client 端并不能够请求更新的代码，也不会执⾏ 热 更 模 块 操 作 ， ⽽ 把 这 些 ⼯ 作⼜交回给了webpack，webpack&#x2F;hot&#x2F;dev-server 的 ⼯ 作就是根据webpack-dev-server&#x2F;client 传给它的信息以及dev-server的配置决定是刷新浏览器呢还是进⾏模块热更新。当然如果仅仅是刷新浏览器，也就没有后⾯那些步骤了。</li>\n<li>HotModuleReplacement.runtime 是客户端HMR 的中枢，它接收到上⼀ 步 传 递 给 他 的 新 模 块 的hash 值，它通过JsonpMainTemplate.runtime 向 server 端发送Ajax 请求，服务端返回⼀个 json，该 json 包含了所有要更新的模块的hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。</li>\n<li>⽽第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进⾏对⽐，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引⽤。</li>\n</ol>\n<p>最后⼀步，当 HMR 失败后，回退到 live reload 操作，也就是进⾏浏览器刷新来获取最新打包代码。</p>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/web/webpack/perform.html"],"length":739,"excerpt":"","more":"<p>webpack 的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。<br>原理：<br><img src=\"https://pic.imgdb.cn/item/65366aa5c458853aefbf449c.png\" alt=\"在这里插入图片描述\"></p>\n<p>⾸先要知道 server 端和 client 端都做了处理⼯作：</p>\n<ol>\n<li>在 webpack 的 watch 模式下，⽂件系统中某⼀个⽂件发⽣修改，webpack 监听到⽂件变化，根据配置⽂件对模块重新编译打包，并将打包后的代码通过简单的JavaScript对象保存在内存中。</li>\n<li>webpack-dev-server 和 webpack 之间的接⼝交互，⽽在这⼀步，主要是 dev-server 的中间件webpack- dev-middleware和 webpack 之间的交互，webpack-dev-middleware 调⽤webpack暴露的 API 对代码变化进⾏监 控，并且告诉webpack，将代码打包到内存中。</li>\n<li>webpack-dev-server 对⽂件变化的⼀个监控，这⼀步不同于第⼀步，并不是监控代码变化重新打包。当我们在配置⽂件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置⽂件夹中静态⽂件的变化，变化后会通知浏览器端对应⽤进⾏ live reload。注意，这⼉是浏览器刷新，和HMR 是两个概念。</li>\n<li>webpack-dev-server 代码的⼯作，该步骤主要是通过sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建⽴⼀个 websocket ⻓连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中Server 监听静态⽂件变化的信息。浏览器端根据这些 socket 消息进⾏不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后⾯的步骤根据这⼀hash 值来进⾏模块热替换。</li>\n<li>webpack-dev-server&#x2F;client 端并不能够请求更新的代码，也不会执⾏ 热 更 模 块 操 作 ， ⽽ 把 这 些 ⼯ 作⼜交回给了webpack，webpack&#x2F;hot&#x2F;dev-server 的 ⼯ 作就是根据webpack-dev-server&#x2F;client 传给它的信息以及dev-server的配置决定是刷新浏览器呢还是进⾏模块热更新。当然如果仅仅是刷新浏览器，也就没有后⾯那些步骤了。</li>\n<li>HotModuleReplacement.runtime 是客户端HMR 的中枢，它接收到上⼀ 步 传 递 给 他 的 新 模 块 的hash 值，它通过JsonpMainTemplate.runtime 向 server 端发送Ajax 请求，服务端返回⼀个 json，该 json 包含了所有要更新的模块的hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。</li>\n<li>⽽第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进⾏对⽐，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引⽤。</li>\n</ol>\n<p>最后⼀步，当 HMR 失败后，回退到 live reload 操作，也就是进⾏浏览器刷新来获取最新打包代码。</p>\n"},{"title":"unstate-next 的实现原理","date":"2023-10-26T07:49:35.000Z","description":"unstate-next 的实现原理，根据 React.createContext 和 React.useContext 方法重新包装，简化使用步骤。","comments":1,"published":1,"_content":"\n#### 定义实现Container接口\n\n需要实现包装方法和获取数据的hooks\n\n```tsx\n    /**\n     * 实现接口\n     */\n    export interface Container<Value, State> {\n    Provider: React.ComponentType<ContainerProviderProps<State>>;\n    useContainer: () => Value;\n    }\n```\n\n#### 定义实现Provider接口\n\n定义接口需要初始化参数和需要使用的子节点。\n\n```tsx\n\n    /**\n     * ContainerProviderProps 定义类型\n     * @param {State} State\n     * @return {State} initialState\n     * @return {React.ReactNode} children\n     */\n    export interface ContainerProviderProps<State = any> {\n    initialState?: State;\n    children: React.ReactNode;\n    }\n\n```\n\n#### createContainer 方法\n\n在 `createContainer` 方法中，使用后会返回两个方法 `Provider` 和 `useContainer`。\n\n步骤：\n\n1. 使用React.createContext 创建Context；\n2. 自定义hooks 获取属性；\n3. 需要使用Context 子组件使用Provider 包装， 将数据写入Context；\n4. 使用React.useContext 从 Context 中获取属性\n\n```tsx\n    export function createContainer<Value, State = void>(\n    useHook: (initialState?: State) => Value\n    ): Container<Value, State> {\n    // 使用React.createContext 创建Context\n    const Context = React.createContext<Value | typeof EMPTY>(EMPTY);\n\n    function Provider(props: ContainerProviderProps<State>) {\n        // 自定义hooks 获取属性\n        let value = useHook(props.initialState);\n        // 需要使用Context 子组件使用Provider 包装， 将数据写入Context。\n        return <Context.Provider value={value}>{props?.children}</Context.Provider>;\n    }\n\n    function useContainer(): Value {\n        // 使用React.useContext 从 Context 中获取属性\n        let value = React.useContext(Context);\n        if (value === EMPTY) {\n        throw new Error(\"Component must be wrapped with <Container.Provider>\");\n        }\n        return value;\n    }\n    return {\n        Provider,\n        useContainer,\n    };\n    }\n```\n\n#### useContainer\n\n使用useContainer 从 Container 中直接获取属性。\n\n```tsx\n    export function useContainer<Value, State = void>(\n    container: Container<Value, State>\n    ): Value {\n    return container.useContainer();\n    }\n```\n\n#### [unstate-next 使用](./unstate-next-use.html)\n\n#### 实现code\n\n```tsx\n    import React from \"react\";\n\n    const EMPTY: unique symbol = Symbol();\n\n    /**\n     * ContainerProviderProps 定义类型\n     * @param {State} State\n     * @return {State} initialState\n     * @return {React.ReactNode} children\n     */\n    export interface ContainerProviderProps<State = any> {\n    initialState?: State;\n    children: React.ReactNode;\n    }\n\n    /**\n     * 实现接口\n     */\n    export interface Container<Value, State> {\n    Provider: React.ComponentType<ContainerProviderProps<State>>;\n    useContainer: () => Value;\n    }\n\n    export function createContainer<Value, State = void>(\n    useHook: (initialState?: State) => Value\n    ): Container<Value, State> {\n    // 使用React.createContext 创建Context\n    const Context = React.createContext<Value | typeof EMPTY>(EMPTY);\n\n    function Provider(props: ContainerProviderProps<State>) {\n        // 自定义hooks 获取属性\n        let value = useHook(props.initialState);\n        // 需要使用Context 子组件使用Provider 包装， 将数据写入Context。\n        return <Context.Provider value={value}>{props?.children}</Context.Provider>;\n    }\n\n    function useContainer(): Value {\n        // 使用React.useContext 从 Context 中获取属性\n        let value = React.useContext(Context);\n        if (value === EMPTY) {\n        throw new Error(\"Component must be wrapped with <Container.Provider>\");\n        }\n        return value;\n    }\n    return {\n        Provider,\n        useContainer,\n    };\n    }\n\n    export function useContainer<Value, State = void>(\n    container: Container<Value, State>\n    ): Value {\n    return container.useContainer();\n    }\n\n```\n","source":"_posts/react/components/unstate-next/unstated-next-implement.md","raw":"---\ntitle: unstate-next 的实现原理\npermalink: /react/components/unstate-next-implement.html\ndate: 2023-10-26 15:49:35\ndescription: unstate-next 的实现原理，根据 React.createContext 和 React.useContext 方法重新包装，简化使用步骤。\ntag: [前端, react, TypeScript, unstate-next]\ncomments: true\npublished: true\ncategories: \n - React\n - components\n - unstate-next\n---\n\n#### 定义实现Container接口\n\n需要实现包装方法和获取数据的hooks\n\n```tsx\n    /**\n     * 实现接口\n     */\n    export interface Container<Value, State> {\n    Provider: React.ComponentType<ContainerProviderProps<State>>;\n    useContainer: () => Value;\n    }\n```\n\n#### 定义实现Provider接口\n\n定义接口需要初始化参数和需要使用的子节点。\n\n```tsx\n\n    /**\n     * ContainerProviderProps 定义类型\n     * @param {State} State\n     * @return {State} initialState\n     * @return {React.ReactNode} children\n     */\n    export interface ContainerProviderProps<State = any> {\n    initialState?: State;\n    children: React.ReactNode;\n    }\n\n```\n\n#### createContainer 方法\n\n在 `createContainer` 方法中，使用后会返回两个方法 `Provider` 和 `useContainer`。\n\n步骤：\n\n1. 使用React.createContext 创建Context；\n2. 自定义hooks 获取属性；\n3. 需要使用Context 子组件使用Provider 包装， 将数据写入Context；\n4. 使用React.useContext 从 Context 中获取属性\n\n```tsx\n    export function createContainer<Value, State = void>(\n    useHook: (initialState?: State) => Value\n    ): Container<Value, State> {\n    // 使用React.createContext 创建Context\n    const Context = React.createContext<Value | typeof EMPTY>(EMPTY);\n\n    function Provider(props: ContainerProviderProps<State>) {\n        // 自定义hooks 获取属性\n        let value = useHook(props.initialState);\n        // 需要使用Context 子组件使用Provider 包装， 将数据写入Context。\n        return <Context.Provider value={value}>{props?.children}</Context.Provider>;\n    }\n\n    function useContainer(): Value {\n        // 使用React.useContext 从 Context 中获取属性\n        let value = React.useContext(Context);\n        if (value === EMPTY) {\n        throw new Error(\"Component must be wrapped with <Container.Provider>\");\n        }\n        return value;\n    }\n    return {\n        Provider,\n        useContainer,\n    };\n    }\n```\n\n#### useContainer\n\n使用useContainer 从 Container 中直接获取属性。\n\n```tsx\n    export function useContainer<Value, State = void>(\n    container: Container<Value, State>\n    ): Value {\n    return container.useContainer();\n    }\n```\n\n#### [unstate-next 使用](./unstate-next-use.html)\n\n#### 实现code\n\n```tsx\n    import React from \"react\";\n\n    const EMPTY: unique symbol = Symbol();\n\n    /**\n     * ContainerProviderProps 定义类型\n     * @param {State} State\n     * @return {State} initialState\n     * @return {React.ReactNode} children\n     */\n    export interface ContainerProviderProps<State = any> {\n    initialState?: State;\n    children: React.ReactNode;\n    }\n\n    /**\n     * 实现接口\n     */\n    export interface Container<Value, State> {\n    Provider: React.ComponentType<ContainerProviderProps<State>>;\n    useContainer: () => Value;\n    }\n\n    export function createContainer<Value, State = void>(\n    useHook: (initialState?: State) => Value\n    ): Container<Value, State> {\n    // 使用React.createContext 创建Context\n    const Context = React.createContext<Value | typeof EMPTY>(EMPTY);\n\n    function Provider(props: ContainerProviderProps<State>) {\n        // 自定义hooks 获取属性\n        let value = useHook(props.initialState);\n        // 需要使用Context 子组件使用Provider 包装， 将数据写入Context。\n        return <Context.Provider value={value}>{props?.children}</Context.Provider>;\n    }\n\n    function useContainer(): Value {\n        // 使用React.useContext 从 Context 中获取属性\n        let value = React.useContext(Context);\n        if (value === EMPTY) {\n        throw new Error(\"Component must be wrapped with <Container.Provider>\");\n        }\n        return value;\n    }\n    return {\n        Provider,\n        useContainer,\n    };\n    }\n\n    export function useContainer<Value, State = void>(\n    container: Container<Value, State>\n    ): Value {\n    return container.useContainer();\n    }\n\n```\n","slug":"react/components/unstate-next/unstated-next-implement","updated":"2023-10-26T12:50:44.436Z","__permalink":"/react/components/unstate-next-implement.html","layout":"post","photos":[],"link":"","_id":"clofw8ye2002lm0uohoiddbae","content":"<div id=\"vip-container\"><h4 id=\"定义实现Container接口\"><a href=\"#定义实现Container接口\" class=\"headerlink\" title=\"定义实现Container接口\"></a>定义实现Container接口</h4><p>需要实现包装方法和获取数据的hooks</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"title class_\">Provider</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;<span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span>&gt;&gt;;</span><br><span class=\"line\"><span class=\"attr\">useContainer</span>: <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义实现Provider接口\"><a href=\"#定义实现Provider接口\" class=\"headerlink\" title=\"定义实现Provider接口\"></a>定义实现Provider接口</h4><p>定义接口需要初始化参数和需要使用的子节点。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ContainerProviderProps 定义类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">State</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">initialState</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">React.ReactNode</span>&#125; <span class=\"variable\">children</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span> = <span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">initialState?: <span class=\"title class_\">State</span>;</span><br><span class=\"line\"><span class=\"attr\">children</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"createContainer-方法\"><a href=\"#createContainer-方法\" class=\"headerlink\" title=\"createContainer 方法\"></a>createContainer 方法</h4><p>在 <code>createContainer</code> 方法中，使用后会返回两个方法 <code>Provider</code> 和 <code>useContainer</code>。</p>\n<p>步骤：</p>\n<ol>\n<li>使用React.createContext 创建Context；</li>\n<li>自定义hooks 获取属性；</li>\n<li>需要使用Context 子组件使用Provider 包装， 将数据写入Context；</li>\n<li>使用React.useContext 从 Context 中获取属性</li>\n</ol>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> createContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">useHook</span>: <span class=\"function\">(<span class=\"params\">initialState?: State</span>) =&gt;</span> <span class=\"title class_\">Value</span></span><br><span class=\"line\">): <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"comment\">// 使用React.createContext 创建Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title class_\">React</span>.<span class=\"property\">createContext</span>&lt;<span class=\"title class_\">Value</span> | <span class=\"keyword\">typeof</span> <span class=\"variable constant_\">EMPTY</span>&gt;(<span class=\"variable constant_\">EMPTY</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Provider</span>(<span class=\"params\">props: ContainerProviderProps&lt;State&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义hooks 获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title function_\">useHook</span>(props.<span class=\"property\">initialState</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要使用Context 子组件使用Provider 包装， 将数据写入Context。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span>&gt;</span>&#123;props?.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useContainer</span>(<span class=\"params\"></span>): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用React.useContext 从 Context 中获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title class_\">React</span>.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"variable constant_\">EMPTY</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Component must be wrapped with &lt;Container.Provider&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Provider</span>,</span><br><span class=\"line\">    useContainer,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useContainer\"><a href=\"#useContainer\" class=\"headerlink\" title=\"useContainer\"></a>useContainer</h4><p>使用useContainer 从 Container 中直接获取属性。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">container</span>: <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> container.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"unstate-next-使用\"><a href=\"#unstate-next-使用\" class=\"headerlink\" title=\"unstate-next 使用\"></a><a href=\"./unstate-next-use.html\">unstate-next 使用</a></h4><h4 id=\"实现code\"><a href=\"#实现code\" class=\"headerlink\" title=\"实现code\"></a>实现code</h4><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">EMPTY</span>: unique <span class=\"built_in\">symbol</span> = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ContainerProviderProps 定义类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">State</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">initialState</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">React.ReactNode</span>&#125; <span class=\"variable\">children</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span> = <span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">initialState?: <span class=\"title class_\">State</span>;</span><br><span class=\"line\"><span class=\"attr\">children</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"title class_\">Provider</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;<span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span>&gt;&gt;;</span><br><span class=\"line\"><span class=\"attr\">useContainer</span>: <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Value</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> createContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">useHook</span>: <span class=\"function\">(<span class=\"params\">initialState?: State</span>) =&gt;</span> <span class=\"title class_\">Value</span></span><br><span class=\"line\">): <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"comment\">// 使用React.createContext 创建Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title class_\">React</span>.<span class=\"property\">createContext</span>&lt;<span class=\"title class_\">Value</span> | <span class=\"keyword\">typeof</span> <span class=\"variable constant_\">EMPTY</span>&gt;(<span class=\"variable constant_\">EMPTY</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Provider</span>(<span class=\"params\">props: ContainerProviderProps&lt;State&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义hooks 获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title function_\">useHook</span>(props.<span class=\"property\">initialState</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要使用Context 子组件使用Provider 包装， 将数据写入Context。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span>&gt;</span>&#123;props?.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useContainer</span>(<span class=\"params\"></span>): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用React.useContext 从 Context 中获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title class_\">React</span>.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"variable constant_\">EMPTY</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Component must be wrapped with &lt;Container.Provider&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Provider</span>,</span><br><span class=\"line\">    useContainer,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">container</span>: <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> container.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/react/components/unstate-next-use.html"],"length":461,"excerpt":"","more":"<h4 id=\"定义实现Container接口\"><a href=\"#定义实现Container接口\" class=\"headerlink\" title=\"定义实现Container接口\"></a>定义实现Container接口</h4><p>需要实现包装方法和获取数据的hooks</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"title class_\">Provider</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;<span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span>&gt;&gt;;</span><br><span class=\"line\"><span class=\"attr\">useContainer</span>: <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义实现Provider接口\"><a href=\"#定义实现Provider接口\" class=\"headerlink\" title=\"定义实现Provider接口\"></a>定义实现Provider接口</h4><p>定义接口需要初始化参数和需要使用的子节点。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ContainerProviderProps 定义类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">State</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">initialState</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">React.ReactNode</span>&#125; <span class=\"variable\">children</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span> = <span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">initialState?: <span class=\"title class_\">State</span>;</span><br><span class=\"line\"><span class=\"attr\">children</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"createContainer-方法\"><a href=\"#createContainer-方法\" class=\"headerlink\" title=\"createContainer 方法\"></a>createContainer 方法</h4><p>在 <code>createContainer</code> 方法中，使用后会返回两个方法 <code>Provider</code> 和 <code>useContainer</code>。</p>\n<p>步骤：</p>\n<ol>\n<li>使用React.createContext 创建Context；</li>\n<li>自定义hooks 获取属性；</li>\n<li>需要使用Context 子组件使用Provider 包装， 将数据写入Context；</li>\n<li>使用React.useContext 从 Context 中获取属性</li>\n</ol>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> createContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">useHook</span>: <span class=\"function\">(<span class=\"params\">initialState?: State</span>) =&gt;</span> <span class=\"title class_\">Value</span></span><br><span class=\"line\">): <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"comment\">// 使用React.createContext 创建Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title class_\">React</span>.<span class=\"property\">createContext</span>&lt;<span class=\"title class_\">Value</span> | <span class=\"keyword\">typeof</span> <span class=\"variable constant_\">EMPTY</span>&gt;(<span class=\"variable constant_\">EMPTY</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Provider</span>(<span class=\"params\">props: ContainerProviderProps&lt;State&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义hooks 获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title function_\">useHook</span>(props.<span class=\"property\">initialState</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要使用Context 子组件使用Provider 包装， 将数据写入Context。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span>&gt;</span>&#123;props?.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useContainer</span>(<span class=\"params\"></span>): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用React.useContext 从 Context 中获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title class_\">React</span>.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"variable constant_\">EMPTY</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Component must be wrapped with &lt;Container.Provider&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Provider</span>,</span><br><span class=\"line\">    useContainer,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useContainer\"><a href=\"#useContainer\" class=\"headerlink\" title=\"useContainer\"></a>useContainer</h4><p>使用useContainer 从 Container 中直接获取属性。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">container</span>: <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> container.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"unstate-next-使用\"><a href=\"#unstate-next-使用\" class=\"headerlink\" title=\"unstate-next 使用\"></a><a href=\"./unstate-next-use.html\">unstate-next 使用</a></h4><h4 id=\"实现code\"><a href=\"#实现code\" class=\"headerlink\" title=\"实现code\"></a>实现code</h4><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">EMPTY</span>: unique <span class=\"built_in\">symbol</span> = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ContainerProviderProps 定义类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">State</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">State</span>&#125; <span class=\"variable\">initialState</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">React.ReactNode</span>&#125; <span class=\"variable\">children</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span> = <span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">initialState?: <span class=\"title class_\">State</span>;</span><br><span class=\"line\"><span class=\"attr\">children</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ReactNode</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"title class_\">Provider</span>: <span class=\"title class_\">React</span>.<span class=\"property\">ComponentType</span>&lt;<span class=\"title class_\">ContainerProviderProps</span>&lt;<span class=\"title class_\">State</span>&gt;&gt;;</span><br><span class=\"line\"><span class=\"attr\">useContainer</span>: <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Value</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> createContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">useHook</span>: <span class=\"function\">(<span class=\"params\">initialState?: State</span>) =&gt;</span> <span class=\"title class_\">Value</span></span><br><span class=\"line\">): <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt; &#123;</span><br><span class=\"line\"><span class=\"comment\">// 使用React.createContext 创建Context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title class_\">React</span>.<span class=\"property\">createContext</span>&lt;<span class=\"title class_\">Value</span> | <span class=\"keyword\">typeof</span> <span class=\"variable constant_\">EMPTY</span>&gt;(<span class=\"variable constant_\">EMPTY</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Provider</span>(<span class=\"params\">props: ContainerProviderProps&lt;State&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义hooks 获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title function_\">useHook</span>(props.<span class=\"property\">initialState</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 需要使用Context 子组件使用Provider 包装， 将数据写入Context。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;value&#125;</span>&gt;</span>&#123;props?.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useContainer</span>(<span class=\"params\"></span>): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用React.useContext 从 Context 中获取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"title class_\">React</span>.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"variable constant_\">EMPTY</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Component must be wrapped with &lt;Container.Provider&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Provider</span>,</span><br><span class=\"line\">    useContainer,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useContainer&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span> = <span class=\"built_in\">void</span>&gt;(</span><br><span class=\"line\"><span class=\"attr\">container</span>: <span class=\"title class_\">Container</span>&lt;<span class=\"title class_\">Value</span>, <span class=\"title class_\">State</span>&gt;</span><br><span class=\"line\">): <span class=\"title class_\">Value</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> container.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"unstate-next 的使用","date":"2023-10-25T08:42:53.000Z","description":"unstated-next 的使用可以简化react state manager，可以替换React 原有的useContext 方法, 亦可以管理全局状态信息。","comments":1,"_content":"\n#### Install\n\n[Code-Test](https://gitcode.net/qq_35490191/React-TypeScript)\n\n```shell\nnpm install --save unstated-next\n\nyarn add unstated-next\n```\n\n#### createContainer\n\n```ts\n    import { useState } from \"react\";\n    import { createContainer } from \"unstated-next\"\n\n    const useCounter = (props: any) => {\n        const { initNum } = props;\n        const [num, changeNum] = useState<number>(initNum);\n        let decrement = () => changeNum(num - 1)\n        let increment = () => changeNum(num + 1)\n        return {num, decrement, increment};\n    }\n\n    export const Counter = createContainer(useCounter);\n\n```\n\n#### use Provider && initialState\n\n```ts\n    import './App.css'\n    import { Counter } from './Context'\n    import {TestCounter} from './TestCounter'\n\n    export default function App() {\n    return (\n        <Counter.Provider initialState={{ initNum: 1 }}>\n        <TestCounter />\n        </Counter.Provider>\n    )\n    }\n```\n\n#### useContainer\n\n##### TestCounter\n\n```ts\n    import { Counter } from \"./Context\"\n    import {TestChild} from './TestChild'\n\n    export const TestCounter = () => {\n        const { num, decrement } = Counter.useContainer();\n        \n        return <>\n            <button onClick={decrement}>减法</button>\n            <TestChild />\n        </>\n    }\n```\n\n##### TestChild\n\n```ts\n    import { Counter } from \"./Context\"\n\n    export const TestChild = () => {\n        const { num, increment } = Counter.useContainer();\n        return <>\n            {num} <button onClick={increment}>加法</button>\n        </>\n    }\n\n```\n","source":"_posts/react/components/unstate-next/unstated-next-use.md","raw":"---\ntitle: unstate-next 的使用\npermalink: /react/components/unstate-next-use.html\ndate: 2023-10-25 16:42:53\ndescription: unstated-next 的使用可以简化react state manager，可以替换React 原有的useContext 方法, 亦可以管理全局状态信息。\ntag: [前端, react, TypeScript, unstate-next]\ncomments: true\ncategories: \n - React\n - components\n - unstate-next\n---\n\n#### Install\n\n[Code-Test](https://gitcode.net/qq_35490191/React-TypeScript)\n\n```shell\nnpm install --save unstated-next\n\nyarn add unstated-next\n```\n\n#### createContainer\n\n```ts\n    import { useState } from \"react\";\n    import { createContainer } from \"unstated-next\"\n\n    const useCounter = (props: any) => {\n        const { initNum } = props;\n        const [num, changeNum] = useState<number>(initNum);\n        let decrement = () => changeNum(num - 1)\n        let increment = () => changeNum(num + 1)\n        return {num, decrement, increment};\n    }\n\n    export const Counter = createContainer(useCounter);\n\n```\n\n#### use Provider && initialState\n\n```ts\n    import './App.css'\n    import { Counter } from './Context'\n    import {TestCounter} from './TestCounter'\n\n    export default function App() {\n    return (\n        <Counter.Provider initialState={{ initNum: 1 }}>\n        <TestCounter />\n        </Counter.Provider>\n    )\n    }\n```\n\n#### useContainer\n\n##### TestCounter\n\n```ts\n    import { Counter } from \"./Context\"\n    import {TestChild} from './TestChild'\n\n    export const TestCounter = () => {\n        const { num, decrement } = Counter.useContainer();\n        \n        return <>\n            <button onClick={decrement}>减法</button>\n            <TestChild />\n        </>\n    }\n```\n\n##### TestChild\n\n```ts\n    import { Counter } from \"./Context\"\n\n    export const TestChild = () => {\n        const { num, increment } = Counter.useContainer();\n        return <>\n            {num} <button onClick={increment}>加法</button>\n        </>\n    }\n\n```\n","slug":"react/components/unstate-next/unstated-next-use","published":1,"updated":"2023-10-26T12:50:44.436Z","__permalink":"/react/components/unstate-next-use.html","layout":"post","photos":[],"link":"","_id":"clofw8ye3002nm0uo2s95bs5y","content":"<div id=\"vip-container\"><h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><p><a href=\"https://gitcode.net/qq_35490191/React-TypeScript\">Code-Test</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save unstated-next</span><br><span class=\"line\"></span><br><span class=\"line\">yarn add unstated-next</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"createContainer\"><a href=\"#createContainer\" class=\"headerlink\" title=\"createContainer\"></a>createContainer</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;unstated-next&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">useCounter</span> = (<span class=\"params\">props: <span class=\"built_in\">any</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; initNum &#125; = props;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [num, changeNum] = useState&lt;<span class=\"built_in\">number</span>&gt;(initNum);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">decrement</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">changeNum</span>(num - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">increment</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">changeNum</span>(num + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;num, decrement, increment&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Counter</span> = <span class=\"title function_\">createContainer</span>(useCounter);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"use-Provider-initialState\"><a href=\"#use-Provider-initialState\" class=\"headerlink\" title=\"use Provider &amp;&amp; initialState\"></a>use Provider &amp;&amp; initialState</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./App.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Context&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">TestCounter</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./TestCounter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter.Provider</span> <span class=\"attr\">initialState</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">initNum:</span> <span class=\"attr\">1</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">TestCounter</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Counter.Provider</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useContainer\"><a href=\"#useContainer\" class=\"headerlink\" title=\"useContainer\"></a>useContainer</h4><h5 id=\"TestCounter\"><a href=\"#TestCounter\" class=\"headerlink\" title=\"TestCounter\"></a>TestCounter</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Context&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">TestChild</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./TestChild&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">TestCounter</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; num, decrement &#125; = <span class=\"title class_\">Counter</span>.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;decrement&#125;</span>&gt;</span>减法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">TestChild</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"TestChild\"><a href=\"#TestChild\" class=\"headerlink\" title=\"TestChild\"></a>TestChild</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Context&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">TestChild</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; num, increment &#125; = <span class=\"title class_\">Counter</span>.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;num&#125; <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increment&#125;</span>&gt;</span>加法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"31652-1697970027416-119\",\n\t\t\t        \"name\": \"BaType\",\n\t\t\t        \"qrcode\": \"https://i.postimg.cc/BnGK06H2/qrcode-for-gh-50f2ce2229c5-258.jpg\",\n\t\t\t        \"keyword\": \"666\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","site":{"data":{}},"related_posts":["/web/npm/nrm.html","/react/components/unstate-next-implement.html","/hexo/config/rss.html","/hexo/config/readmore.html"],"length":128,"excerpt":"","more":"<h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><p><a href=\"https://gitcode.net/qq_35490191/React-TypeScript\">Code-Test</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save unstated-next</span><br><span class=\"line\"></span><br><span class=\"line\">yarn add unstated-next</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"createContainer\"><a href=\"#createContainer\" class=\"headerlink\" title=\"createContainer\"></a>createContainer</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;unstated-next&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">useCounter</span> = (<span class=\"params\">props: <span class=\"built_in\">any</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; initNum &#125; = props;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [num, changeNum] = useState&lt;<span class=\"built_in\">number</span>&gt;(initNum);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">decrement</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">changeNum</span>(num - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">increment</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">changeNum</span>(num + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;num, decrement, increment&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Counter</span> = <span class=\"title function_\">createContainer</span>(useCounter);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"use-Provider-initialState\"><a href=\"#use-Provider-initialState\" class=\"headerlink\" title=\"use Provider &amp;&amp; initialState\"></a>use Provider &amp;&amp; initialState</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./App.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Context&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">TestCounter</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./TestCounter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Counter.Provider</span> <span class=\"attr\">initialState</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">initNum:</span> <span class=\"attr\">1</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">TestCounter</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Counter.Provider</span>&gt;</span></span></span><br><span class=\"line\">)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"useContainer\"><a href=\"#useContainer\" class=\"headerlink\" title=\"useContainer\"></a>useContainer</h4><h5 id=\"TestCounter\"><a href=\"#TestCounter\" class=\"headerlink\" title=\"TestCounter\"></a>TestCounter</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Context&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">TestChild</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./TestChild&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">TestCounter</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; num, decrement &#125; = <span class=\"title class_\">Counter</span>.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;decrement&#125;</span>&gt;</span>减法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">TestChild</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"TestChild\"><a href=\"#TestChild\" class=\"headerlink\" title=\"TestChild\"></a>TestChild</h5><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Counter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Context&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">TestChild</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; num, increment &#125; = <span class=\"title class_\">Counter</span>.<span class=\"title function_\">useContainer</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;num&#125; <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increment&#125;</span>&gt;</span>加法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clofw8ycs0009m0uo4o0p9jhe","category_id":"clofw8ycl0004m0uobskg514v","_id":"clofw8yd9000wm0uoawx15vas"},{"post_id":"clofw8ycs0009m0uo4o0p9jhe","category_id":"clofw8yd3000nm0uod1lc0rnp","_id":"clofw8ydc0010m0uogqlfafcz"},{"post_id":"clofw8ycg0001m0uogxty33by","category_id":"clofw8ycl0004m0uobskg514v","_id":"clofw8ydd0014m0uogjck1ivk"},{"post_id":"clofw8ycg0001m0uogxty33by","category_id":"clofw8yd7000sm0uobmjhdhj2","_id":"clofw8yde0019m0uobfnt9xx7"},{"post_id":"clofw8ycu000bm0uoe3ht9que","category_id":"clofw8ycl0004m0uobskg514v","_id":"clofw8ydg001cm0uo9kwy9v34"},{"post_id":"clofw8ycu000bm0uoe3ht9que","category_id":"clofw8yda000xm0uo88q649hn","_id":"clofw8ydh001fm0uo7ae97qjg"},{"post_id":"clofw8ycy000fm0uodbhddmol","category_id":"clofw8ycl0004m0uobskg514v","_id":"clofw8ydj001jm0uo05gz05hj"},{"post_id":"clofw8ycy000fm0uodbhddmol","category_id":"clofw8ydd0016m0uo8m1b753f","_id":"clofw8ydk001nm0uo1ejy1cfm"},{"post_id":"clofw8ycj0003m0uo7yhmapas","category_id":"clofw8ycl0004m0uobskg514v","_id":"clofw8ydm001rm0uo15m384tg"},{"post_id":"clofw8ycj0003m0uo7yhmapas","category_id":"clofw8ydg001em0uo1888303b","_id":"clofw8ydp001vm0uohl77h338"},{"post_id":"clofw8ycq0007m0uo61vp42md","category_id":"clofw8ycl0004m0uobskg514v","_id":"clofw8ydv0027m0uohzscgqny"},{"post_id":"clofw8ycq0007m0uo61vp42md","category_id":"clofw8ydr001ym0uo0gbu4ghz","_id":"clofw8ydx002am0uo9l369ajh"},{"post_id":"clofw8ydg001dm0uo0wyz8zwl","category_id":"clofw8ye5002qm0uohdidas0z","_id":"clofw8yeb003cm0uoag7g3ct0"},{"post_id":"clofw8ydh001gm0uo8x5zhw8u","category_id":"clofw8ye5002qm0uohdidas0z","_id":"clofw8yec003hm0uobi0m3viw"},{"post_id":"clofw8ydi001im0uo4o0t25fk","category_id":"clofw8ye5002qm0uohdidas0z","_id":"clofw8yed003lm0uo8m9v57im"},{"post_id":"clofw8ydk001mm0uod5zh02y4","category_id":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yeg003qm0uodt2k68cz"},{"post_id":"clofw8ydk001mm0uod5zh02y4","category_id":"clofw8yeb003gm0uo09qxa7q0","_id":"clofw8yeh003tm0uo5a98297z"},{"post_id":"clofw8ydl001qm0uobrbhe96h","category_id":"clofw8ycl0004m0uobskg514v","_id":"clofw8yek0040m0uobdh8bxvv"},{"post_id":"clofw8ydl001qm0uobrbhe96h","category_id":"clofw8yeg003rm0uob9vaao60","_id":"clofw8yel0042m0uo6fwn3r7m"},{"post_id":"clofw8ydo001um0uob17c7bgp","category_id":"clofw8ycl0004m0uobskg514v","_id":"clofw8yem0046m0uo20ga76b5"},{"post_id":"clofw8ydo001um0uob17c7bgp","category_id":"clofw8yeg003rm0uob9vaao60","_id":"clofw8yem0048m0uoabpubrrx"},{"post_id":"clofw8ydq001wm0uo4c6i6r64","category_id":"clofw8ycl0004m0uobskg514v","_id":"clofw8yeo004em0uo2lzd25ia"},{"post_id":"clofw8ydq001wm0uo4c6i6r64","category_id":"clofw8yeg003rm0uob9vaao60","_id":"clofw8yeo004hm0uo2j3m1vn7"},{"post_id":"clofw8ydr001zm0uo7r5cc9xk","category_id":"clofw8ycl0004m0uobskg514v","_id":"clofw8yep004km0uodrd8hmoe"},{"post_id":"clofw8ydr001zm0uo7r5cc9xk","category_id":"clofw8yen004am0uo9bu5co5h","_id":"clofw8yeq004mm0uob6diaou7"},{"post_id":"clofw8yds0020m0uohhnw6t9d","category_id":"clofw8ycl0004m0uobskg514v","_id":"clofw8yer004qm0uoc6r4d6ci"},{"post_id":"clofw8yds0020m0uohhnw6t9d","category_id":"clofw8yen004am0uo9bu5co5h","_id":"clofw8yer004sm0uo9xyv4vz3"},{"post_id":"clofw8ydt0023m0uo8o3t6psj","category_id":"clofw8ycl0004m0uobskg514v","_id":"clofw8yes004vm0uo8j75dds9"},{"post_id":"clofw8ydt0023m0uo8o3t6psj","category_id":"clofw8yen004am0uo9bu5co5h","_id":"clofw8yet004xm0uob9288ydt"},{"post_id":"clofw8ydu0024m0uoemu7bc21","category_id":"clofw8ycl0004m0uobskg514v","_id":"clofw8yev0054m0uobzgs0did"},{"post_id":"clofw8ydu0024m0uoemu7bc21","category_id":"clofw8yen004am0uo9bu5co5h","_id":"clofw8yev0055m0uo3bbra4wj"},{"post_id":"clofw8ydw0028m0uo3w976b1l","category_id":"clofw8ycl0004m0uobskg514v","_id":"clofw8yev0057m0uo556keero"},{"post_id":"clofw8ydw0028m0uo3w976b1l","category_id":"clofw8yen004am0uo9bu5co5h","_id":"clofw8yew005am0uo0s4t8au2"},{"post_id":"clofw8yd4000qm0uo1i0e4abc","category_id":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yex005dm0uo108968lt"},{"post_id":"clofw8yd4000qm0uo1i0e4abc","category_id":"clofw8yev0053m0uo4upeczm0","_id":"clofw8yex005gm0uogbdmei98"},{"post_id":"clofw8ydx002bm0uobc6fdhbz","category_id":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yey005km0uogr26aek0"},{"post_id":"clofw8ydx002bm0uobc6fdhbz","category_id":"clofw8yew0058m0uo2er0dqa9","_id":"clofw8yey005lm0uo9zcvfcjs"},{"post_id":"clofw8ydz002fm0uo8c0agkbj","category_id":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yez005om0uo58oj38jk"},{"post_id":"clofw8ydz002fm0uo8c0agkbj","category_id":"clofw8yew0058m0uo2er0dqa9","_id":"clofw8yez005qm0uo0wjg9s6w"},{"post_id":"clofw8yd6000rm0uoga8yf0rv","category_id":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yf0005tm0uo4y5257p7"},{"post_id":"clofw8yd6000rm0uoga8yf0rv","category_id":"clofw8yev0053m0uo4upeczm0","_id":"clofw8yf1005wm0uo6xnefbu1"},{"post_id":"clofw8ye0002hm0uo1c44eeol","category_id":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yf20060m0uogqui1qcv"},{"post_id":"clofw8ye0002hm0uo1c44eeol","category_id":"clofw8yez005nm0uo6clk7v5b","_id":"clofw8yf30061m0uo6i0f8oje"},{"post_id":"clofw8yd8000um0uohne5hywq","category_id":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yf5006cm0uodyq28owm"},{"post_id":"clofw8yd8000um0uohne5hywq","category_id":"clofw8yev0053m0uo4upeczm0","_id":"clofw8yf5006dm0uodu8c22oj"},{"post_id":"clofw8yd9000vm0uo12snhg61","category_id":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yf6006gm0uodphv213u"},{"post_id":"clofw8yd9000vm0uo12snhg61","category_id":"clofw8yev0053m0uo4upeczm0","_id":"clofw8yf7006jm0uo8wwg4y3l"},{"post_id":"clofw8ydb000zm0uo4d378sa8","category_id":"clofw8ye5002qm0uohdidas0z","_id":"clofw8yf7006nm0uo8xg3bght"},{"post_id":"clofw8ydb000zm0uo4d378sa8","category_id":"clofw8yf5006bm0uo77at5ly7","_id":"clofw8yf8006qm0uo09376ufy"},{"post_id":"clofw8ydc0012m0uo79em6cah","category_id":"clofw8ye5002qm0uohdidas0z","_id":"clofw8yf9006tm0uog4cd6msu"},{"post_id":"clofw8ydc0012m0uo79em6cah","category_id":"clofw8yf5006bm0uo77at5ly7","_id":"clofw8yf9006wm0uof00r54vo"},{"post_id":"clofw8yde0017m0uo6xi40h79","category_id":"clofw8ye5002qm0uohdidas0z","_id":"clofw8yfa006zm0uo8ywa76i5"},{"post_id":"clofw8yde0017m0uo6xi40h79","category_id":"clofw8yf5006bm0uo77at5ly7","_id":"clofw8yfa0071m0uohdyjekx6"},{"post_id":"clofw8ydf001am0uoc64x68az","category_id":"clofw8ye5002qm0uohdidas0z","_id":"clofw8yfb0073m0uodab97n29"},{"post_id":"clofw8ydf001am0uoc64x68az","category_id":"clofw8yf5006bm0uo77at5ly7","_id":"clofw8yfc0077m0uo8rkj46fm"},{"post_id":"clofw8ycz000hm0uof9f6dum7","category_id":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yfc007am0uobw20a0h3"},{"post_id":"clofw8ycz000hm0uof9f6dum7","category_id":"clofw8yed003mm0uo96ol9vqg","_id":"clofw8yfd007cm0uoch28akng"},{"post_id":"clofw8ycz000hm0uof9f6dum7","category_id":"clofw8yfa006ym0uo58etenxl","_id":"clofw8yfd007em0uoa4rgc2h5"},{"post_id":"clofw8yd1000km0uo4fehe43y","category_id":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yfe007gm0uo0pi62exo"},{"post_id":"clofw8yd1000km0uo4fehe43y","category_id":"clofw8yed003mm0uo96ol9vqg","_id":"clofw8yfe007im0uoayiw4mro"},{"post_id":"clofw8yd1000km0uo4fehe43y","category_id":"clofw8yfa006ym0uo58etenxl","_id":"clofw8yfm007mm0uo80wi0e0x"},{"post_id":"clofw8yd2000mm0uofcuz481s","category_id":"clofw8ydj001km0uo5s8t14p8","_id":"clofw8yfm007om0uodzw5d5ab"},{"post_id":"clofw8yd2000mm0uofcuz481s","category_id":"clofw8yed003mm0uo96ol9vqg","_id":"clofw8yfm007rm0uo951080cu"},{"post_id":"clofw8yd2000mm0uofcuz481s","category_id":"clofw8yfa006ym0uo58etenxl","_id":"clofw8yfn007um0uo7ew0daea"},{"post_id":"clofw8ye2002lm0uohoiddbae","category_id":"clofw8ye5002qm0uohdidas0z","_id":"clofw8yfo007zm0uoccd21g0l"},{"post_id":"clofw8ye2002lm0uohoiddbae","category_id":"clofw8yfd007dm0uoaobb6jcp","_id":"clofw8yfo0082m0uo568khjlb"},{"post_id":"clofw8ye2002lm0uohoiddbae","category_id":"clofw8yfm007pm0uo5v5zgz95","_id":"clofw8yfp0084m0uobhuu8mdm"},{"post_id":"clofw8ye3002nm0uo2s95bs5y","category_id":"clofw8ye5002qm0uohdidas0z","_id":"clofw8yfp0086m0uo4u007y6y"},{"post_id":"clofw8ye3002nm0uo2s95bs5y","category_id":"clofw8yfd007dm0uoaobb6jcp","_id":"clofw8yfp0089m0uo02xzft62"},{"post_id":"clofw8ye3002nm0uo2s95bs5y","category_id":"clofw8yfm007pm0uo5v5zgz95","_id":"clofw8yfq008bm0uobpkb7g4p"}],"PostTag":[{"post_id":"clofw8ycg0001m0uogxty33by","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yd2000lm0uocizzfikw"},{"post_id":"clofw8ycg0001m0uogxty33by","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8yd4000om0uohgjafuxu"},{"post_id":"clofw8ycj0003m0uo7yhmapas","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8ydc0011m0uo0roahhnp"},{"post_id":"clofw8ycj0003m0uo7yhmapas","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8ydd0013m0uo0likfgjr"},{"post_id":"clofw8ycj0003m0uo7yhmapas","tag_id":"clofw8yd7000tm0uoasoy5vos","_id":"clofw8yde0018m0uo486wclrb"},{"post_id":"clofw8ycq0007m0uo61vp42md","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8ydj001lm0uo5x7g8ja5"},{"post_id":"clofw8ycq0007m0uo61vp42md","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8ydl001om0uo2azf8y2y"},{"post_id":"clofw8ycq0007m0uo61vp42md","tag_id":"clofw8ydf001bm0uo93wh8ly5","_id":"clofw8ydo001tm0uoa3a459hi"},{"post_id":"clofw8ycs0009m0uo4o0p9jhe","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8ydx0029m0uohrm091ug"},{"post_id":"clofw8ycs0009m0uo4o0p9jhe","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8ydy002cm0uoh4qw8iam"},{"post_id":"clofw8ycs0009m0uo4o0p9jhe","tag_id":"clofw8ydl001pm0uo0gizepkp","_id":"clofw8ye0002gm0uo1rzs7jph"},{"post_id":"clofw8ycs0009m0uo4o0p9jhe","tag_id":"clofw8ydq001xm0uo7zhlfqq9","_id":"clofw8ye1002im0uo2yac2jym"},{"post_id":"clofw8ycs0009m0uo4o0p9jhe","tag_id":"clofw8ydt0021m0uoeyhxep08","_id":"clofw8ye2002mm0uog36zhhdv"},{"post_id":"clofw8ycu000bm0uoe3ht9que","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8ye7002um0uocq4zbk29"},{"post_id":"clofw8ycu000bm0uoe3ht9que","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8ye7002wm0uoebs9405r"},{"post_id":"clofw8ycu000bm0uoe3ht9que","tag_id":"clofw8ydy002dm0uodw3bg9cy","_id":"clofw8ye8002ym0uo1es48e8g"},{"post_id":"clofw8ycu000bm0uoe3ht9que","tag_id":"clofw8ye1002km0uoge4zef8l","_id":"clofw8ye80030m0uoc831hupb"},{"post_id":"clofw8ycu000bm0uoe3ht9que","tag_id":"clofw8ye5002pm0uohgz69wps","_id":"clofw8ye80032m0uo0me7dk1w"},{"post_id":"clofw8ycu000bm0uoe3ht9que","tag_id":"clofw8ye6002rm0uoe0dn0mvm","_id":"clofw8ye90034m0uo0lqg6dra"},{"post_id":"clofw8ycy000fm0uodbhddmol","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8ye90036m0uoh2899pl8"},{"post_id":"clofw8ycy000fm0uodbhddmol","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8yea0038m0uo5jpzg8fs"},{"post_id":"clofw8ycy000fm0uodbhddmol","tag_id":"clofw8ye6002tm0uodc3e0vqm","_id":"clofw8yea003am0uo9mpidz14"},{"post_id":"clofw8ycz000hm0uof9f6dum7","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yeb003dm0uo0bt0aj7i"},{"post_id":"clofw8ycz000hm0uof9f6dum7","tag_id":"clofw8ye7002xm0uo5tlk12vf","_id":"clofw8yeb003em0uodsqq8h91"},{"post_id":"clofw8ycz000hm0uof9f6dum7","tag_id":"clofw8ye80031m0uoeeji7laz","_id":"clofw8yec003im0uo6jh1eeu1"},{"post_id":"clofw8yd1000km0uo4fehe43y","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yec003jm0uof41j1t9a"},{"post_id":"clofw8yd1000km0uo4fehe43y","tag_id":"clofw8ye7002xm0uo5tlk12vf","_id":"clofw8yed003nm0uobljrhmd5"},{"post_id":"clofw8yd1000km0uo4fehe43y","tag_id":"clofw8yea0039m0uog8bxfngm","_id":"clofw8yed003om0uo3pw92a82"},{"post_id":"clofw8yd2000mm0uofcuz481s","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yeg003sm0uo8mtqa21j"},{"post_id":"clofw8yd2000mm0uofcuz481s","tag_id":"clofw8ye7002xm0uo5tlk12vf","_id":"clofw8yeh003um0uo42q33g3i"},{"post_id":"clofw8yd2000mm0uofcuz481s","tag_id":"clofw8yec003km0uogdbm6k00","_id":"clofw8yei003wm0uo7xz37b33"},{"post_id":"clofw8yd4000qm0uo1i0e4abc","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yek0041m0uo2gbq7rxs"},{"post_id":"clofw8yd4000qm0uo1i0e4abc","tag_id":"clofw8yee003pm0uo7jvd1l9u","_id":"clofw8yel0043m0uoehtef7ym"},{"post_id":"clofw8yd4000qm0uo1i0e4abc","tag_id":"clofw8yeh003vm0uo23opheuk","_id":"clofw8yem0047m0uo77n0agef"},{"post_id":"clofw8yd6000rm0uoga8yf0rv","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yen004bm0uofn3a1fmw"},{"post_id":"clofw8yd6000rm0uoga8yf0rv","tag_id":"clofw8yee003pm0uo7jvd1l9u","_id":"clofw8yen004cm0uo4n0o3do1"},{"post_id":"clofw8yd6000rm0uoga8yf0rv","tag_id":"clofw8yeh003vm0uo23opheuk","_id":"clofw8yeo004gm0uocs65f5k9"},{"post_id":"clofw8yd8000um0uohne5hywq","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yep004lm0uo3z9x0ye9"},{"post_id":"clofw8yd8000um0uohne5hywq","tag_id":"clofw8yee003pm0uo7jvd1l9u","_id":"clofw8yeq004nm0uo82gsdwny"},{"post_id":"clofw8yd8000um0uohne5hywq","tag_id":"clofw8yeh003vm0uo23opheuk","_id":"clofw8yer004rm0uo9k7ucnor"},{"post_id":"clofw8yd9000vm0uo12snhg61","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yes004wm0uoalsa4tyx"},{"post_id":"clofw8yd9000vm0uo12snhg61","tag_id":"clofw8yee003pm0uo7jvd1l9u","_id":"clofw8yet004ym0uogtkxb0up"},{"post_id":"clofw8yd9000vm0uo12snhg61","tag_id":"clofw8yeh003vm0uo23opheuk","_id":"clofw8yeu0051m0uoazrxcw5t"},{"post_id":"clofw8ydb000zm0uo4d378sa8","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yew0059m0uof6qg3cgi"},{"post_id":"clofw8ydb000zm0uo4d378sa8","tag_id":"clofw8yer004tm0uohyh12wv5","_id":"clofw8yew005bm0uobxy9ctgx"},{"post_id":"clofw8ydb000zm0uo4d378sa8","tag_id":"clofw8yee003pm0uo7jvd1l9u","_id":"clofw8yex005fm0uoerh7bpq3"},{"post_id":"clofw8ydb000zm0uo4d378sa8","tag_id":"clofw8yeu0052m0uo29cuflj8","_id":"clofw8yex005hm0uo9exjgq4d"},{"post_id":"clofw8ydc0012m0uo79em6cah","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yez005pm0uoe1opdbji"},{"post_id":"clofw8ydc0012m0uo79em6cah","tag_id":"clofw8yer004tm0uohyh12wv5","_id":"clofw8yez005rm0uo40rbaotn"},{"post_id":"clofw8ydc0012m0uo79em6cah","tag_id":"clofw8yee003pm0uo7jvd1l9u","_id":"clofw8yf0005um0uo4crq0dik"},{"post_id":"clofw8ydc0012m0uo79em6cah","tag_id":"clofw8yeu0052m0uo29cuflj8","_id":"clofw8yf2005xm0uo3cz63nxd"},{"post_id":"clofw8yde0017m0uo6xi40h79","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yf30063m0uo05db68e5"},{"post_id":"clofw8yde0017m0uo6xi40h79","tag_id":"clofw8yer004tm0uohyh12wv5","_id":"clofw8yf40065m0uo68tu0egl"},{"post_id":"clofw8yde0017m0uo6xi40h79","tag_id":"clofw8yee003pm0uo7jvd1l9u","_id":"clofw8yf40067m0uo0khj5tkm"},{"post_id":"clofw8yde0017m0uo6xi40h79","tag_id":"clofw8yeu0052m0uo29cuflj8","_id":"clofw8yf40069m0uoabbf0e73"},{"post_id":"clofw8ydf001am0uoc64x68az","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yf6006fm0uo4gdxa5l8"},{"post_id":"clofw8ydf001am0uoc64x68az","tag_id":"clofw8yer004tm0uohyh12wv5","_id":"clofw8yf7006im0uo0im80hkj"},{"post_id":"clofw8ydf001am0uoc64x68az","tag_id":"clofw8yee003pm0uo7jvd1l9u","_id":"clofw8yf7006lm0uods8x123h"},{"post_id":"clofw8ydf001am0uoc64x68az","tag_id":"clofw8yeu0052m0uo29cuflj8","_id":"clofw8yf8006om0uogm5qgvfl"},{"post_id":"clofw8ydg001dm0uo0wyz8zwl","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yf9006rm0uo0j62di1n"},{"post_id":"clofw8ydg001dm0uo0wyz8zwl","tag_id":"clofw8yer004tm0uohyh12wv5","_id":"clofw8yf9006um0uohfyz4lsk"},{"post_id":"clofw8ydg001dm0uo0wyz8zwl","tag_id":"clofw8yee003pm0uo7jvd1l9u","_id":"clofw8yfa006xm0uobx9w80z2"},{"post_id":"clofw8ydh001gm0uo8x5zhw8u","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yfb0072m0uoeplre57o"},{"post_id":"clofw8ydh001gm0uo8x5zhw8u","tag_id":"clofw8yer004tm0uohyh12wv5","_id":"clofw8yfb0075m0uoajn1h6x0"},{"post_id":"clofw8ydh001gm0uo8x5zhw8u","tag_id":"clofw8yee003pm0uo7jvd1l9u","_id":"clofw8yfc0078m0uo2kamffzj"},{"post_id":"clofw8ydi001im0uo4o0t25fk","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yfe007hm0uo6rlq9uap"},{"post_id":"clofw8ydi001im0uo4o0t25fk","tag_id":"clofw8yer004tm0uohyh12wv5","_id":"clofw8yfk007km0uo77ylbcuf"},{"post_id":"clofw8ydi001im0uo4o0t25fk","tag_id":"clofw8yee003pm0uo7jvd1l9u","_id":"clofw8yfm007nm0uo6ss5h0uo"},{"post_id":"clofw8ydi001im0uo4o0t25fk","tag_id":"clofw8yfd007bm0uo9j8g6qd3","_id":"clofw8yfm007qm0uoaw0zc27h"},{"post_id":"clofw8ydk001mm0uod5zh02y4","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yfn007tm0uo9wxuhtaf"},{"post_id":"clofw8ydk001mm0uod5zh02y4","tag_id":"clofw8ye6002rm0uoe0dn0mvm","_id":"clofw8yfn007wm0uo4cuz1qar"},{"post_id":"clofw8ydl001qm0uobrbhe96h","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yfo007ym0uo2diohxi6"},{"post_id":"clofw8ydl001qm0uobrbhe96h","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8yfo0080m0uo8iwp6j9s"},{"post_id":"clofw8ydl001qm0uobrbhe96h","tag_id":"clofw8yfk007lm0uo191r0yqf","_id":"clofw8yfp0083m0uoen0i74lm"},{"post_id":"clofw8ydl001qm0uobrbhe96h","tag_id":"clofw8yfm007sm0uo00hiaeub","_id":"clofw8yfp0085m0uo2lvzcyp0"},{"post_id":"clofw8ydo001um0uob17c7bgp","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yfp0088m0uo13apcr0i"},{"post_id":"clofw8ydo001um0uob17c7bgp","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8yfq008am0uo5b8a9zda"},{"post_id":"clofw8ydo001um0uob17c7bgp","tag_id":"clofw8yfk007lm0uo191r0yqf","_id":"clofw8yfq008dm0uo17yceiqx"},{"post_id":"clofw8ydo001um0uob17c7bgp","tag_id":"clofw8yfo0081m0uohdif0y0k","_id":"clofw8yfq008em0uo6rzk338e"},{"post_id":"clofw8ydq001wm0uo4c6i6r64","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yfr008gm0uo3q5h7h36"},{"post_id":"clofw8ydq001wm0uo4c6i6r64","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8yfr008hm0uod5i1gf2b"},{"post_id":"clofw8ydq001wm0uo4c6i6r64","tag_id":"clofw8yfk007lm0uo191r0yqf","_id":"clofw8yfr008jm0uo1abc5khd"},{"post_id":"clofw8ydr001zm0uo7r5cc9xk","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yfs008lm0uo642h25bx"},{"post_id":"clofw8ydr001zm0uo7r5cc9xk","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8yfs008mm0uo9tq80jab"},{"post_id":"clofw8ydr001zm0uo7r5cc9xk","tag_id":"clofw8ye6002tm0uodc3e0vqm","_id":"clofw8yfs008om0uo6nv4es1u"},{"post_id":"clofw8ydr001zm0uo7r5cc9xk","tag_id":"clofw8yfr008fm0uo36x938d2","_id":"clofw8yfs008pm0uob5k6elrm"},{"post_id":"clofw8ydr001zm0uo7r5cc9xk","tag_id":"clofw8yfr008im0uod7yj7ft9","_id":"clofw8yft008rm0uogdt5fes0"},{"post_id":"clofw8yds0020m0uohhnw6t9d","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yft008sm0uo055jc7ar"},{"post_id":"clofw8yds0020m0uohhnw6t9d","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8yft008um0uobuzpa9mm"},{"post_id":"clofw8yds0020m0uohhnw6t9d","tag_id":"clofw8ye6002tm0uodc3e0vqm","_id":"clofw8yft008vm0uocoy669fr"},{"post_id":"clofw8ydt0023m0uo8o3t6psj","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yfu008xm0uof78bci76"},{"post_id":"clofw8ydt0023m0uo8o3t6psj","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8yfu008ym0uo17yl21w2"},{"post_id":"clofw8ydt0023m0uo8o3t6psj","tag_id":"clofw8ye6002tm0uodc3e0vqm","_id":"clofw8yfu0090m0uobpu49bmt"},{"post_id":"clofw8ydu0024m0uoemu7bc21","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yfu0091m0uogdnshmdk"},{"post_id":"clofw8ydu0024m0uoemu7bc21","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8yfv0093m0uo1vyw7eat"},{"post_id":"clofw8ydu0024m0uoemu7bc21","tag_id":"clofw8ye6002tm0uodc3e0vqm","_id":"clofw8yfv0094m0uo0s75718d"},{"post_id":"clofw8ydw0028m0uo3w976b1l","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yfv0096m0uogp2q1lm1"},{"post_id":"clofw8ydw0028m0uo3w976b1l","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8yfv0097m0uo5qv2fuzs"},{"post_id":"clofw8ydw0028m0uo3w976b1l","tag_id":"clofw8ye6002tm0uodc3e0vqm","_id":"clofw8yfv0099m0uoczhs26n3"},{"post_id":"clofw8ydw0028m0uo3w976b1l","tag_id":"clofw8yfr008fm0uo36x938d2","_id":"clofw8yfw009am0uocayce0jv"},{"post_id":"clofw8ydw0028m0uo3w976b1l","tag_id":"clofw8yfu008zm0uo2kxke6je","_id":"clofw8yfw009cm0uo0pmo4dqk"},{"post_id":"clofw8ydx002bm0uobc6fdhbz","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yfw009dm0uo7uqtahcx"},{"post_id":"clofw8ydx002bm0uobc6fdhbz","tag_id":"clofw8yfu0092m0uo2iyzbih6","_id":"clofw8yfw009em0uohavjfj6k"},{"post_id":"clofw8ydx002bm0uobc6fdhbz","tag_id":"clofw8yfv0095m0uocmrvdr7i","_id":"clofw8yfx009gm0uoe82t6jiq"},{"post_id":"clofw8ydz002fm0uo8c0agkbj","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yfx009hm0uof4ifhh58"},{"post_id":"clofw8ydz002fm0uo8c0agkbj","tag_id":"clofw8yfu0092m0uo2iyzbih6","_id":"clofw8yfx009jm0uoh13f1g4o"},{"post_id":"clofw8ydz002fm0uo8c0agkbj","tag_id":"clofw8yfw009bm0uogxy0anq4","_id":"clofw8yfy009km0uof1dk14l7"},{"post_id":"clofw8ye0002hm0uo1c44eeol","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yfz009mm0uo84o512wr"},{"post_id":"clofw8ye0002hm0uo1c44eeol","tag_id":"clofw8ycv000dm0uobv0ufbhl","_id":"clofw8yfz009nm0uo9da7g4fa"},{"post_id":"clofw8ye0002hm0uo1c44eeol","tag_id":"clofw8yfw009fm0uo9mvu7mkg","_id":"clofw8yg0009pm0uo0zua6ijx"},{"post_id":"clofw8ye2002lm0uohoiddbae","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yg1009rm0uohnd70xri"},{"post_id":"clofw8ye2002lm0uohoiddbae","tag_id":"clofw8yer004tm0uohyh12wv5","_id":"clofw8yg1009sm0uo1vrg7foe"},{"post_id":"clofw8ye2002lm0uohoiddbae","tag_id":"clofw8ye6002rm0uoe0dn0mvm","_id":"clofw8yg2009um0uo9d3h8efw"},{"post_id":"clofw8ye2002lm0uohoiddbae","tag_id":"clofw8yfz009om0uoh5dc1dbg","_id":"clofw8yg2009vm0uo9fi8dlk1"},{"post_id":"clofw8ye3002nm0uo2s95bs5y","tag_id":"clofw8yco0005m0uoc6v514yi","_id":"clofw8yg2009xm0uo4z5oarbr"},{"post_id":"clofw8ye3002nm0uo2s95bs5y","tag_id":"clofw8yer004tm0uohyh12wv5","_id":"clofw8yg2009ym0uo2aun8oqb"},{"post_id":"clofw8ye3002nm0uo2s95bs5y","tag_id":"clofw8ye6002rm0uoe0dn0mvm","_id":"clofw8yg2009zm0uo0o3egalr"},{"post_id":"clofw8ye3002nm0uo2s95bs5y","tag_id":"clofw8yfz009om0uoh5dc1dbg","_id":"clofw8yg300a0m0uo4mfadac2"}],"Tag":[{"name":"前端","_id":"clofw8yco0005m0uoc6v514yi"},{"name":"浏览器","_id":"clofw8ycv000dm0uobv0ufbhl"},{"name":"网路安全","_id":"clofw8yd7000tm0uoasoy5vos"},{"name":"GUI","_id":"clofw8ydf001bm0uo93wh8ly5"},{"name":"RESTful","_id":"clofw8ydl001pm0uo0gizepkp"},{"name":"RPC","_id":"clofw8ydq001xm0uo7zhlfqq9"},{"name":"HTTP","_id":"clofw8ydt0021m0uoeyhxep08"},{"name":"cookies","_id":"clofw8ydy002dm0uodw3bg9cy"},{"name":"localStorage","_id":"clofw8ye1002km0uoge4zef8l"},{"name":"sessionStorage","_id":"clofw8ye5002pm0uohgz69wps"},{"name":"TypeScript","_id":"clofw8ye6002rm0uoe0dn0mvm"},{"name":"性能优化","_id":"clofw8ye6002tm0uodc3e0vqm"},{"name":"Hexo","_id":"clofw8ye7002xm0uo5tlk12vf"},{"name":"Pagination","_id":"clofw8ye80031m0uoeeji7laz"},{"name":"ReadMore","_id":"clofw8yea0039m0uog8bxfngm"},{"name":"RSS","_id":"clofw8yec003km0uogdbm6k00"},{"name":"JavaScript","_id":"clofw8yee003pm0uo7jvd1l9u"},{"name":"es6","_id":"clofw8yeh003vm0uo23opheuk"},{"name":"react","_id":"clofw8yer004tm0uohyh12wv5"},{"name":"Fiber","_id":"clofw8yeu0052m0uo29cuflj8"},{"name":"JSX","_id":"clofw8yfd007bm0uo9j8g6qd3"},{"name":"网络安全","_id":"clofw8yfk007lm0uo191r0yqf"},{"name":"CSRF","_id":"clofw8yfm007sm0uo00hiaeub"},{"name":"XSS","_id":"clofw8yfo0081m0uohdif0y0k"},{"name":"Webpack","_id":"clofw8yfr008fm0uo36x938d2"},{"name":"图片","_id":"clofw8yfr008im0uod7yj7ft9"},{"name":"插件","_id":"clofw8yfu008zm0uo2kxke6je"},{"name":"npm","_id":"clofw8yfu0092m0uo2iyzbih6"},{"name":"nrm","_id":"clofw8yfv0095m0uocmrvdr7i"},{"name":"nvm","_id":"clofw8yfw009bm0uogxy0anq4"},{"name":"WebPack","_id":"clofw8yfw009fm0uo9mvu7mkg"},{"name":"unstate-next","_id":"clofw8yfz009om0uoh5dc1dbg"}]}}